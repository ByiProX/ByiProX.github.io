<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quentin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kunxiang.wang/"/>
  <updated>2019-05-23T16:05:06.395Z</updated>
  <id>http://kunxiang.wang/</id>
  
  <author>
    <name>ByiProX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java实时读取log日志文件示例代码</title>
    <link href="http://kunxiang.wang/2019/05/21/Java%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96log%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
    <id>http://kunxiang.wang/2019/05/21/Java实时读取log日志文件示例代码/</id>
    <published>2019-05-21T06:28:14.000Z</published>
    <updated>2019-05-23T16:05:06.395Z</updated>
    
    <content type="html"><![CDATA[<p><code>需求</code>：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。</p><p><code>运用的技术</code>：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。</p><p><code>思想</code>：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。</p><p><code>原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile</code></p><p>模拟写日志的类<br>因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inveno.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogSvr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LogSvr.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SimpleDateFormat  dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMsg</span><span class="params">(File logFile,String msgInfo)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!logFile.exists()) &#123;</span><br><span class="line">logFile.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Writer txtWriter = <span class="keyword">new</span> FileWriter(logFile,<span class="keyword">true</span>);</span><br><span class="line">txtWriter.write(dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"\t"</span> + msgInfo + <span class="string">"\n"</span>);</span><br><span class="line">txtWriter.flush();</span><br><span class="line">txtWriter.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(exec != <span class="keyword">null</span>)&#123;</span><br><span class="line">exec.shutdown();</span><br><span class="line">logger.info(<span class="string">"file write stop ！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> LogSvr logSvr = <span class="keyword">new</span> LogSvr();</span><br><span class="line"><span class="keyword">final</span> File tmpLogFile = <span class="keyword">new</span> File(<span class="string">"pathtolog.log"</span>);</span><br><span class="line"><span class="keyword">final</span> String msgInfo = <span class="string">"test !"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动一个线程每5秒向日志文件写一次数据</span></span><br><span class="line">exec.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logSvr.logMsg(tmpLogFile, msgInfo);</span><br><span class="line"><span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">"file write error ！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Start.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pointer = <span class="number">0</span>; <span class="comment">// 文件指针位置</span></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">realtimeShowLog</span><span class="params">(<span class="keyword">final</span> File logFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"logFile can not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动一个线程每2秒读取新增的日志信息</span></span><br><span class="line">        exec.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获得变化部分</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> len = logFile.length();</span><br><span class="line">                    <span class="keyword">if</span> (len &lt; pointer) &#123;</span><br><span class="line">                        logger.info(<span class="string">"Log file was reset. Restarting logging from start of file."</span>);</span><br><span class="line">                        pointer = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//指定文件可读可写</span></span><br><span class="line">                        RandomAccessFile randomFile = <span class="keyword">new</span> RandomAccessFile(logFile, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class="line">                        logger.info(<span class="string">"RandomAccessFile文件指针的初始位置:"</span> + pointer);</span><br><span class="line"></span><br><span class="line">                        randomFile.seek(pointer);<span class="comment">//移动到文件指针位置</span></span><br><span class="line"></span><br><span class="line">                        String tmp;</span><br><span class="line">                        <span class="keyword">while</span> ((tmp = randomFile.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"info : "</span> + <span class="keyword">new</span> String(tmp.getBytes(<span class="string">"utf-8"</span>)));</span><br><span class="line">                            pointer = randomFile.getFilePointer();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        randomFile.close();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充</span></span><br><span class="line">                    logger.error(dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">" File read error, pointer: "</span> + pointer);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//将pointer 落地以便下次启动的时候，直接从指定位置获取</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exec != <span class="keyword">null</span>) &#123;</span><br><span class="line">            exec.shutdown();</span><br><span class="line">            logger.info(<span class="string">"file read stop ！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        LogView view = <span class="keyword">new</span> LogView();</span><br><span class="line">        File tmpLogFile = <span class="keyword">new</span> File(<span class="string">"pathtolog.log"</span>);</span><br><span class="line">        System.out.println(tmpLogFile.getAbsolutePath());</span><br><span class="line">        view.pointer = <span class="number">0</span>;</span><br><span class="line">        view.realtimeShowLog(tmpLogFile);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.travelsky.arch.utils;  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; is like a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;RandomAccessFile&lt;/code&gt;, but it uses a private buffer so that most</span></span><br><span class="line"><span class="comment"> * operations do not require a disk access.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note: The operations on this class are unmonitored. Also, the correct</span></span><br><span class="line"><span class="comment"> * functioning of the &lt;code&gt;RandomAccessFile&lt;/code&gt; methods that are not</span></span><br><span class="line"><span class="comment"> * overridden here relies on the implementation of those methods in the</span></span><br><span class="line"><span class="comment"> * superclass.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * To describe the above fields, we introduce the following abstractions for</span></span><br><span class="line"><span class="comment"> * the file "f":</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * len(f) the length of the file curr(f) the current position in the file</span></span><br><span class="line"><span class="comment"> * c(f) the abstract contents of the file disk(f) the contents of f's</span></span><br><span class="line"><span class="comment"> * backing disk file closed(f) true iff the file is closed</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * "curr(f)" is an index in the closed interval [0, len(f)]. "c(f)" is a</span></span><br><span class="line"><span class="comment"> * character sequence of length "len(f)". "c(f)" and "disk(f)" may differ if</span></span><br><span class="line"><span class="comment"> * "c(f)" contains unflushed writes not reflected in "disk(f)". The flush</span></span><br><span class="line"><span class="comment"> * operation has the effect of making "disk(f)" identical to "c(f)".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A file is said to be *valid* if the following conditions hold:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V1. The "closed" and "curr" fields are correct:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.closed == closed(f) f.curr == curr(f)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V2. The current position is either contained in the buffer, or just past</span></span><br><span class="line"><span class="comment"> * the buffer:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.lo &lt;= f.curr &lt;= f.hi</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V3. Any (possibly) un-flushed characters are stored in "f.buff":</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V4. For all characters not covered by V3, c(f) and disk(f) agree:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) =&gt; c(f)[i] ==</span></span><br><span class="line"><span class="comment"> * disk(f)[i])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V5. "f.dirty" is true iff the buffer contains bytes that should be</span></span><br><span class="line"><span class="comment"> * flushed to the file; by V3 and V4, only part of the buffer can be dirty.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V6. this.maxHi == this.lo + this.buff.length</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that "f.buff" can be "null" in a valid file, since the range of</span></span><br><span class="line"><span class="comment"> * characters in V3 is empty when "f.lo == f.curr".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A file is said to be *ready* if the buffer contains the current position,</span></span><br><span class="line"><span class="comment"> * i.e., when:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * R1. !f.closed &amp;&amp; f.buff != null &amp;&amp; f.lo &lt;= f.curr &amp;&amp; f.curr &lt; f.hi</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When a file is ready, reading or writing a single byte can be performed</span></span><br><span class="line"><span class="comment"> * by reading or writing the in-memory buffer without performing a disk</span></span><br><span class="line"><span class="comment"> * operation.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * !!!This class come from network ,I just adjust code style!!!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaofeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018 -05-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedRandomAccessFile</span> <span class="keyword">extends</span> <span class="title">RandomAccessFile</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 64K buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOG_BUFF_SZ = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFF_SZ = (<span class="number">1</span> &lt;&lt; LOG_BUFF_SZ);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BUFF_MASK = ~(((<span class="keyword">long</span>) BUFF_SZ) - <span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">private</span> String path_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation is based on the buffer implementation in Modula-3's</span></span><br><span class="line"><span class="comment">     * "Rd", "Wr", "RdClass", and "WrClass" interfaces.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * true iff un-flushed bytes exist</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> dirty_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dirty_ can be cleared by e.g. seek, so track sync separately</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> syncNeeded_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * current position in file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> curr_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bounds on characters in "buff"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lo_, hi_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * local buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] buff_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * this.lo + this.buff.length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxHi_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * buffer contains last file block?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hitEOF_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * disk position</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> diskPos_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on &lt;code&gt;file&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * in mode &lt;code&gt;mode&lt;/code&gt;, which should be "r" for reading only, or</span></span><br><span class="line"><span class="comment">     * "rw" for reading and writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(File file, String mode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(file, mode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Buffered random access file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size the size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(File file, String mode, <span class="keyword">int</span> size)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(file, mode);</span><br><span class="line">        path_ = file.getAbsolutePath();</span><br><span class="line">        <span class="keyword">this</span>.init(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on the file named</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;name&lt;/code&gt; in mode &lt;code&gt;mode&lt;/code&gt;, which should be "r" for</span></span><br><span class="line"><span class="comment">     * reading only, or "rw" for reading and writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(String name, String mode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, mode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Buffered random access file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size the size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException the file not found exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(String name, String mode, <span class="keyword">int</span> size)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mode);</span><br><span class="line">        path_ = name;</span><br><span class="line">        <span class="keyword">this</span>.init(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dirty_ = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.lo_ = <span class="keyword">this</span>.curr_ = <span class="keyword">this</span>.hi_ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.buff_ = (size &gt; BUFF_SZ) ? <span class="keyword">new</span> <span class="keyword">byte</span>[size] : <span class="keyword">new</span> <span class="keyword">byte</span>[BUFF_SZ];</span><br><span class="line">        <span class="keyword">this</span>.maxHi_ = (<span class="keyword">long</span>) BUFF_SZ;</span><br><span class="line">        <span class="keyword">this</span>.hitEOF_ = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.diskPos_ = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sync.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (syncNeeded_) &#123;</span><br><span class="line">            flush();</span><br><span class="line">            getChannel().force(<span class="keyword">true</span>);</span><br><span class="line">            syncNeeded_ = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flush();</span><br><span class="line">        <span class="keyword">this</span>.buff_ = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush any bytes in the file's buffer that have not yet been written to</span></span><br><span class="line"><span class="comment">     * disk. If the file was created read-only, this method is a no-op.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush any dirty bytes in the buffer to disk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dirty_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.diskPos_ != <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">                <span class="keyword">super</span>.seek(<span class="keyword">this</span>.lo_);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> len = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">            <span class="keyword">super</span>.write(<span class="keyword">this</span>.buff_, <span class="number">0</span>, len);</span><br><span class="line">            <span class="keyword">this</span>.diskPos_ = <span class="keyword">this</span>.curr_;</span><br><span class="line">            <span class="keyword">this</span>.dirty_ = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read at most "this.buff.length" bytes into "this.buff", returning the</span></span><br><span class="line"><span class="comment">     * number of bytes read. If the return result is less than</span></span><br><span class="line"><span class="comment">     * "this.buff.length", then EOF was read.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fillBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rem = <span class="keyword">this</span>.buff_.length;</span><br><span class="line">        <span class="keyword">while</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">super</span>.read(<span class="keyword">this</span>.buff_, cnt, rem);</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += n;</span><br><span class="line">            rem -= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((cnt &lt; <span class="number">0</span>) &amp;&amp; (<span class="keyword">this</span>.hitEOF_ = (cnt &lt; <span class="keyword">this</span>.buff_.length))) &#123;</span><br><span class="line">            <span class="comment">// make sure buffer that wasn't read is initialized with -1</span></span><br><span class="line">            Arrays.fill(<span class="keyword">this</span>.buff_, cnt, <span class="keyword">this</span>.buff_.length, (<span class="keyword">byte</span>) <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.diskPos_ += cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method positions &lt;code&gt;this.curr&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     * If &lt;code&gt;pos&lt;/code&gt; does not fall in the current buffer, it flushes the</span></span><br><span class="line"><span class="comment">     * current buffer and loads the correct one.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * On exit from this routine &lt;code&gt;this.curr == this.hi&lt;/code&gt; iff &lt;code&gt;pos&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * is at or past the end-of-file, which can only happen if the file was</span></span><br><span class="line"><span class="comment">     * opened in read-only mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seek</span><span class="params">(<span class="keyword">long</span> pos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= <span class="keyword">this</span>.hi_ || pos &lt; <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">            <span class="comment">// seeking outside of current buffer -- flush and read</span></span><br><span class="line">            <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">            <span class="keyword">this</span>.lo_ = pos &amp; BUFF_MASK; <span class="comment">// start at BuffSz boundary</span></span><br><span class="line">            <span class="keyword">this</span>.maxHi_ = <span class="keyword">this</span>.lo_ + (<span class="keyword">long</span>) <span class="keyword">this</span>.buff_.length;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.diskPos_ != <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">                <span class="keyword">super</span>.seek(<span class="keyword">this</span>.lo_);</span><br><span class="line">                <span class="keyword">this</span>.diskPos_ = <span class="keyword">this</span>.lo_;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">this</span>.fillBuffer();</span><br><span class="line">            <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.lo_ + (<span class="keyword">long</span>) n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// seeking inside current buffer -- no read required</span></span><br><span class="line">            <span class="keyword">if</span> (pos &lt; <span class="keyword">this</span>.curr_) &#123;</span><br><span class="line">                <span class="comment">// if seeking backwards, we must flush to maintain V4</span></span><br><span class="line">                <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.curr_ = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFilePointer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.curr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="keyword">this</span>.curr_, <span class="keyword">super</span>.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (readEnd()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span> res = <span class="keyword">this</span>.buff_[(<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_)];</span><br><span class="line">        <span class="keyword">this</span>.curr_++;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="keyword">int</span>) res) &amp; <span class="number">0xFF</span>; <span class="comment">// convert byte -&gt; int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (readEnd()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.min(len, (<span class="keyword">int</span>) (<span class="keyword">this</span>.hi_ - <span class="keyword">this</span>.curr_));</span><br><span class="line">        <span class="keyword">int</span> buffOff = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.buff_, buffOff, b, off, len);</span><br><span class="line">        <span class="keyword">this</span>.curr_ += len;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readEnd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="comment">// test for EOF</span></span><br><span class="line">            <span class="comment">// if (this.hi &lt; this.maxHi) return -1;</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// slow path -- read another buffer</span></span><br><span class="line">            <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_ &amp;&amp; <span class="keyword">this</span>.hi_ &lt; <span class="keyword">this</span>.maxHi_) &#123;</span><br><span class="line">                <span class="comment">// at EOF -- bump "hi"</span></span><br><span class="line">                <span class="keyword">this</span>.hi_++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// slow path -- write current buffer; read next one</span></span><br><span class="line">                <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                    <span class="comment">// appending to EOF -- bump "hi"</span></span><br><span class="line">                    <span class="keyword">this</span>.hi_++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.buff_[(<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_)] = (<span class="keyword">byte</span>) b;</span><br><span class="line">        <span class="keyword">this</span>.curr_++;</span><br><span class="line">        <span class="keyword">this</span>.dirty_ = <span class="keyword">true</span>;</span><br><span class="line">        syncNeeded_ = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.write(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">this</span>.writeAtMost(b, off, len);</span><br><span class="line">            off += n;</span><br><span class="line">            len -= n;</span><br><span class="line">            <span class="keyword">this</span>.dirty_ = <span class="keyword">true</span>;</span><br><span class="line">            syncNeeded_ = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write at most "len" bytes to "b" starting at position "off", and return</span></span><br><span class="line"><span class="comment">     * the number of bytes written.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">writeAtMost</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_ &amp;&amp; <span class="keyword">this</span>.hi_ &lt; <span class="keyword">this</span>.maxHi_) &#123;</span><br><span class="line">                <span class="comment">// at EOF -- bump "hi"</span></span><br><span class="line">                <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.maxHi_;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// slow path -- write current buffer; read next one</span></span><br><span class="line">                <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                    <span class="comment">// appending to EOF -- bump "hi"</span></span><br><span class="line">                    <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.maxHi_;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.min(len, (<span class="keyword">int</span>) (<span class="keyword">this</span>.hi_ - <span class="keyword">this</span>.curr_));</span><br><span class="line">        <span class="keyword">int</span> buffOff = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">        System.arraycopy(b, off, <span class="keyword">this</span>.buff_, buffOff, len);</span><br><span class="line">        <span class="keyword">this</span>.curr_ += len;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;需求&lt;/code&gt;：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;运用的技术&lt;/code&gt;：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;思想&lt;/code&gt;：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模拟写日志的类&lt;br&gt;因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程读写HashMap遇到的坑</title>
    <link href="http://kunxiang.wang/2019/03/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%BB%E5%86%99HashMap%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://kunxiang.wang/2019/03/29/Java多线程读写HashMap遇到的坑/</id>
    <published>2019-03-29T06:55:09.000Z</published>
    <updated>2019-03-29T06:55:09.897Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python中如何表示正负无穷大</title>
    <link href="http://kunxiang.wang/2019/03/15/Python%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E6%AD%A3%E8%B4%9F%E6%97%A0%E7%A9%B7%E5%A4%A7/"/>
    <id>http://kunxiang.wang/2019/03/15/Python中如何表示正负无穷大/</id>
    <published>2019-03-15T08:12:43.000Z</published>
    <updated>2019-03-15T08:17:59.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cmath-inf"><a href="#cmath-inf" class="headerlink" title="cmath.inf"></a>cmath.inf</h4><p>Floating-point positive infinity. Equivalent to <code>float(&#39;inf&#39;)</code>.<br>负无穷-float(‘-inf’)</p><p>New in version 3.6.</p><a id="more"></a><h4 id="cmath-pi"><a href="#cmath-pi" class="headerlink" title="cmath.pi"></a>cmath.pi</h4><p>The mathematical constant π, as a float.</p><h4 id="cmath-e"><a href="#cmath-e" class="headerlink" title="cmath.e"></a>cmath.e</h4><p>The mathematical constant e, as a float.</p><h4 id="cmath-tau"><a href="#cmath-tau" class="headerlink" title="cmath.tau"></a>cmath.tau</h4><p>The mathematical constant τ, as a float.</p><p>New in version 3.6.</p><h4 id="cmath-infj"><a href="#cmath-infj" class="headerlink" title="cmath.infj"></a>cmath.infj</h4><p>Complex number with zero real part and positive infinity imaginary part. Equivalent to <code>complex(0.0, float(&#39;inf&#39;))</code>.</p><p>New in version 3.6.</p><h4 id="cmath-nan"><a href="#cmath-nan" class="headerlink" title="cmath.nan"></a>cmath.nan</h4><p>A floating-point “not a number” (NaN) value. Equivalent to <code>float(&#39;nan&#39;)</code>.</p><p>New in version 3.6.</p><h4 id="cmath-nanj"><a href="#cmath-nanj" class="headerlink" title="cmath.nanj"></a>cmath.nanj</h4><p>Complex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float(‘nan’)).</p><p>New in version 3.6.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;cmath-inf&quot;&gt;&lt;a href=&quot;#cmath-inf&quot; class=&quot;headerlink&quot; title=&quot;cmath.inf&quot;&gt;&lt;/a&gt;cmath.inf&lt;/h4&gt;&lt;p&gt;Floating-point positive infinity. Equivalent to &lt;code&gt;float(&amp;#39;inf&amp;#39;)&lt;/code&gt;.&lt;br&gt;负无穷-float(‘-inf’)&lt;/p&gt;
&lt;p&gt;New in version 3.6.&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>进程地址空间</title>
    <link href="http://kunxiang.wang/2019/02/21/%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/"/>
    <id>http://kunxiang.wang/2019/02/21/进程地址空间/</id>
    <published>2019-02-21T13:32:36.000Z</published>
    <updated>2019-02-21T13:33:14.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="process address space.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="操作系统" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="多任务处理" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    
    
      <category term="操作系统" scheme="http://kunxiang.wang/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>异常的分类</title>
    <link href="http://kunxiang.wang/2019/02/20/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2019/02/20/异常的分类/</id>
    <published>2019-02-20T07:24:54.000Z</published>
    <updated>2019-02-20T08:03:36.280Z</updated>
    
    <content type="html"><![CDATA[<p>异常可以分为四类：<code>中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)</code>.</p><table><thead><tr><th>类别</th><th>原因</th><th>异步/同步</th><th>返回行为</th></tr></thead><tbody><tr><td>中断</td><td>来自I/O设备的信号</td><td>异步</td><td>总是返回下一条指令</td></tr><tr><td>陷阱</td><td>有意的异常</td><td>同步</td><td>总是返回下一条指令</td></tr><tr><td>故障</td><td>潜在可恢复的错误</td><td>同步</td><td>可能返回到当前指令</td></tr><tr><td>终止</td><td>不可恢复的错误</td><td>同步</td><td>不会返回</td></tr></tbody></table><p>异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。</p><a id="more"></a><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。</p><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p><code>陷阱</code>最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做<code>系统调用</code><br>从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在<code>用户模式</code>中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在<code>内核模式</code>中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。</p><h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><p>故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。</p><p>一个经典的故障示例是<code>缺页异常</code>，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。</p><h2 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h2><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。</p><hr><p>参考资料：《深入理解计算机系统》第三版P504</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常可以分为四类：&lt;code&gt;中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;th&gt;异步/同步&lt;/th&gt;
&lt;th&gt;返回行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中断&lt;/td&gt;
&lt;td&gt;来自I/O设备的信号&lt;/td&gt;
&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;总是返回下一条指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;陷阱&lt;/td&gt;
&lt;td&gt;有意的异常&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;总是返回下一条指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;故障&lt;/td&gt;
&lt;td&gt;潜在可恢复的错误&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;可能返回到当前指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;终止&lt;/td&gt;
&lt;td&gt;不可恢复的错误&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;不会返回&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://kunxiang.wang/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>布尔环</title>
    <link href="http://kunxiang.wang/2019/02/15/%E5%B8%83%E5%B0%94%E7%8E%AF/"/>
    <id>http://kunxiang.wang/2019/02/15/布尔环/</id>
    <published>2019-02-15T02:07:21.000Z</published>
    <updated>2019-02-15T02:19:32.592Z</updated>
    
    <content type="html"><![CDATA[<p>布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)<code>-x</code>, 使得<code>x+(-x)=0</code>。布尔环也有类似的属性，这里的加法运算时<code>^</code>,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，<code>a^a=0</code>, 这里用0表示全0的位向量。</p><p>相同道理还有一个有意思的属性，即<code>(a^b)^a=b</code>，该属性可以用来交换两个元素的值，而不需要第三方变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)&lt;code&gt;-x&lt;/code&gt;, 使得&lt;code&gt;x+(-x)=0&lt;/code&gt;。布尔环也有类似的属性，这里的加法运算时&lt;code&gt;^&lt;/code&gt;,不过这时
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://kunxiang.wang/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>搭建Git服务器的一种方法</title>
    <link href="http://kunxiang.wang/2019/02/11/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://kunxiang.wang/2019/02/11/搭建Git服务器的一种方法/</id>
    <published>2019-02-11T05:43:13.000Z</published>
    <updated>2019-02-11T06:11:23.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-确保自己的服务器上安装有Git和ssh"><a href="#1-确保自己的服务器上安装有Git和ssh" class="headerlink" title="1. 确保自己的服务器上安装有Git和ssh"></a>1. 确保自己的服务器上安装有Git和ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ssh</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="2-配置git用户"><a href="#2-配置git用户" class="headerlink" title="2. 配置git用户"></a>2. 配置git用户</h3><h4 id="新建git用户"><a href="#新建git用户" class="headerlink" title="新建git用户"></a>新建git用户</h4><p>主要是为了让大家在上传代码时登录使用，一般使用：git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="配置git用户的ssh登录"><a href="#配置git用户的ssh登录" class="headerlink" title="配置git用户的ssh登录"></a>配置git用户的ssh登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git    //进入git用户文件夹</span><br><span class="line">sudo mkdir .ssh    //创建 .ssh 文件夹</span><br><span class="line">sudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥</span><br></pre></td></tr></table></figure><p><code>authorized_keys</code> 是公钥保存文件，<code>客户端的私钥</code>与<code>服务器的公钥</code>配对成功，则可以登录。<code>之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）</code>。</p><p>客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 <code>pub</code> 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用<code>ssh-keygen</code>命令生成后复制粘贴即可。</p><h3 id="3-初始化裸仓库来保存项目"><a href="#3-初始化裸仓库来保存项目" class="headerlink" title="3. 初始化裸仓库来保存项目"></a>3. 初始化裸仓库来保存项目</h3><p>在<code>/home/git</code>下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos</span><br><span class="line"><span class="built_in">cd</span> repos    //进入repos文件夹</span><br><span class="line">sudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample</span><br></pre></td></tr></table></figure></p><p>repos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。</p><ol><li><p>如果本地没有初始代码，可以直接从服务器克隆仓库到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:repos/sample.git</span><br></pre></td></tr></table></figure><p>git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。</p></li><li><p>如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init    //创建git仓库</span><br><span class="line">git add .    //添加所有文件</span><br><span class="line">git commit -m <span class="string">"your remark"</span>    //将代码提交到本地仓库</span><br><span class="line">git remote add origin git@server:repos/sample.git    //添加远程仓库地址</span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支</span><br></pre></td></tr></table></figure></li></ol><p>有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-确保自己的服务器上安装有Git和ssh&quot;&gt;&lt;a href=&quot;#1-确保自己的服务器上安装有Git和ssh&quot; class=&quot;headerlink&quot; title=&quot;1. 确保自己的服务器上安装有Git和ssh&quot;&gt;&lt;/a&gt;1. 确保自己的服务器上安装有Git和ssh&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-配置git用户&quot;&gt;&lt;a href=&quot;#2-配置git用户&quot; class=&quot;headerlink&quot; title=&quot;2. 配置git用户&quot;&gt;&lt;/a&gt;2. 配置git用户&lt;/h3&gt;&lt;h4 id=&quot;新建git用户&quot;&gt;&lt;a href=&quot;#新建git用户&quot; class=&quot;headerlink&quot; title=&quot;新建git用户&quot;&gt;&lt;/a&gt;新建git用户&lt;/h4&gt;&lt;p&gt;主要是为了让大家在上传代码时登录使用，一般使用：git&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adduser git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://kunxiang.wang/categories/Git/"/>
    
    
      <category term="Git" scheme="http://kunxiang.wang/tags/Git/"/>
    
      <category term="Github" scheme="http://kunxiang.wang/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Python中如何生成一定格式的日期字符串</title>
    <link href="http://kunxiang.wang/2018/12/03/Python%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E4%B8%80%E5%AE%9A%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://kunxiang.wang/2018/12/03/Python中如何生成一定格式的日期字符串/</id>
    <published>2018-12-03T08:20:56.000Z</published>
    <updated>2018-12-03T08:28:40.358Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timeStamp = time.time()</span><br><span class="line">timeArray = time.localtime(time.time())</span><br><span class="line">print(timeArray)</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">formatTime = time.strftime(<span class="string">"%Y%m%d-%H:%M:%S"</span>, timeArray)</span><br><span class="line">print(formatTime)</span><br><span class="line"><span class="comment"># 20181203-16:23:55</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Python中append和extend效率</title>
    <link href="http://kunxiang.wang/2018/11/27/Python%E4%B8%ADappend%E5%92%8Cextend%E6%95%88%E7%8E%87/"/>
    <id>http://kunxiang.wang/2018/11/27/Python中append和extend效率/</id>
    <published>2018-11-27T07:29:14.000Z</published>
    <updated>2018-11-27T07:58:02.098Z</updated>
    
    <content type="html"><![CDATA[<p>python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用<code>data.extend(other)</code>的输出结果与以下代码的输出结果相同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> other:</span><br><span class="line">    data.append(elem)</span><br></pre></td></tr></table></figure></p><p>在任何情况下，运行时间都正比于另一张列表的长度，并且之所以<code>摊销</code>，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。</p><p>在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：</p><ol><li>首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行</li><li>与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。</li><li><code>extend提升的效率来源更新列表的最终大小能提前计算出。</code>例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。</li></ol><a id="more"></a><p>我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在<br>实际效率上会有不同。</p><p>在python中经常使用一个诸如<code>squares = [k*k for k in range(1, n+1)]</code>的例子作为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line">    squares.append(k*k)</span><br></pre></td></tr></table></figure></p><p>的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。</p><p>类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如<code>[0]*100</code>生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用&lt;code&gt;data.extend(other)&lt;/code&gt;的输出结果与以下代码的输出结果相同。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; other:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data.append(elem)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在任何情况下，运行时间都正比于另一张列表的长度，并且之所以&lt;code&gt;摊销&lt;/code&gt;，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。&lt;/p&gt;
&lt;p&gt;在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行&lt;/li&gt;
&lt;li&gt;与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend提升的效率来源更新列表的最终大小能提前计算出。&lt;/code&gt;例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>IP地址的分类</title>
    <link href="http://kunxiang.wang/2018/11/07/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/11/07/IP地址的分类/</id>
    <published>2018-11-07T11:43:34.000Z</published>
    <updated>2018-11-07T12:10:20.810Z</updated>
    
    <content type="html"><![CDATA[<p>IP地址分类（A类 B类 C类 D类 E类）</p><p>IP地址由两部分组成，即<code>网络地址</code>和<code>主机地址</code>。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。</p><p>IP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。</p><p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    <code>全0和全1的都保留不用</code>。</p><ul><li><p>A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）</p><p>   第一个字节为网络号，后三个字节为主机号。<code>该类IP地址的最前面为“0”</code>，所以地址的网络号取值于1~126之间。</p><p>   一般用于大型网络。</p></li><li><p>B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）</p><p>   前两个字节为网络号，后两个字节为主机号。<code>该类IP地址的最前面为“10”</code>，所以地址的网络号取值于128~191之间。</p><p>   一般用于中等规模网络。</p></li><li><p>C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）</p><p>   前三个字节为网络号，最后一个字节为主机号。<code>该类IP地址的最前面为“110”</code>，所以地址的网络号取值于192~223之间。</p><p>   一般用于小型网络。</p></li><li><p>D类：是<code>多播地址</code>。<code>该类IP地址的最前面为“1110”</code>，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p></li><li><p>E类：是<code>保留地址</code>。<code>该类IP地址的最前面为“1111”</code>，所以地址的网络号取值于240~255之间。</p></li></ul><p>回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 </p><p>一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IP地址分类（A类 B类 C类 D类 E类）&lt;/p&gt;
&lt;p&gt;IP地址由两部分组成，即&lt;code&gt;网络地址&lt;/code&gt;和&lt;code&gt;主机地址&lt;/code&gt;。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。&lt;/p&gt;
&lt;p&gt;IP地址
      
    
    </summary>
    
      <category term="网络" scheme="http://kunxiang.wang/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://kunxiang.wang/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://kunxiang.wang/2018/11/05/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/11/05/Java内部类/</id>
    <published>2018-11-05T04:59:24.000Z</published>
    <updated>2018-11-05T05:23:13.566Z</updated>
    
    <content type="html"><![CDATA[<p>类中的定义成员有三种，分别是</p><ol><li>字段</li><li>方法</li><li>内部类</li></ol><p>内部类：定义在类结构中的另一个类</p><p><code>为什么要使用内部类？</code></p><ol><li>增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类</li><li>内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。</li><li>内部类可以直接访问外部类的成员</li></ol><a id="more"></a><p>内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:</p><ol><li>实例内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类（仅适合于一次使用的类）</li></ol><table><thead><tr><th></th><th>实例内部类</th><th>静态内部类</th><th>局部内部类</th></tr></thead><tbody><tr><td>主要特征</td><td>内部类的实例引用特定的外部类的实例</td><td>内部类的实例不与外部类的任何实例关联</td><td>可见范围是所在的方法</td></tr><tr><td>可用修饰符</td><td>访问控制修饰符，abstract，final</td><td>访问控制修饰符，static，abstract，final</td><td>abstract，final</td></tr><tr><td>可以访问外部类的哪些成员</td><td>可以直接访问外部类的所有成员</td><td>只能直接访问外部类的静态成员</td><td>可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数</td></tr><tr><td>拥有成员类型</td><td>只能拥有实例成员</td><td>可以拥有静态成员和实例成员</td><td>只能拥有实例成员</td></tr><tr><td>外部类如何访问内部类的成员</td><td>必须通过内部类的实例来访问</td><td>对于静态成员，可以通过内部类的完整类名来访问</td><td>必须通过内部类的实例来访问</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类中的定义成员有三种，分别是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字段&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;内部类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内部类：定义在类结构中的另一个类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;为什么要使用内部类？&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类&lt;/li&gt;
&lt;li&gt;内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。&lt;/li&gt;
&lt;li&gt;内部类可以直接访问外部类的成员&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的接口和抽象类</title>
    <link href="http://kunxiang.wang/2018/11/04/Java%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/11/04/Java中的接口和抽象类/</id>
    <published>2018-11-04T14:20:35.000Z</published>
    <updated>2018-11-05T04:38:52.272Z</updated>
    
    <content type="html"><![CDATA[<p>相同点：</p><ul><li>都位于继承的顶端，用于被其他实现或继承</li><li>都不能实例化</li><li>都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。</li></ul><p>不同点：</p><ul><li>接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。</li><li>抽象类可包含骗人通方法和抽象方法，<code>接口只能包含抽象方法（java8之前）</code></li><li>一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）</li><li>成员变量：接口里默认是public static final，抽象类默认包权限</li><li>方法：接口里默认public abstract,抽象类默认包访问权限</li><li>内部类：接口里默认public static，抽象类默认包访问权限</li></ul><p>如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。</p><p>设计模式：接口和抽象类集合使用的（适配器模式）</p><p><code>面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程</code></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wkx.jedis;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUSB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">IUSB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i am moving..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">IUSB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i am printing, dididi..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotherBoard</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IUSB[] usbs = <span class="keyword">new</span> IUSB[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pluginIn</span><span class="params">(IUSB usb)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usbs.length == num) <span class="keyword">return</span>;</span><br><span class="line">        usbs[num] = usb;</span><br><span class="line">        num ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (IUSB usb : usbs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(usb != <span class="keyword">null</span>) usb.swapData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUSBDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Mouse());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Mouse());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Mouse());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Printer());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Printer());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Printer());</span><br><span class="line">        MotherBoard.pluginIn(<span class="keyword">new</span> Printer());</span><br><span class="line">        MotherBoard.doWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都位于继承的顶端，用于被其他实现或继承&lt;/li&gt;
&lt;li&gt;都不能实例化&lt;/li&gt;
&lt;li&gt;都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。&lt;/li&gt;
&lt;li&gt;抽象类可包含骗人通方法和抽象方法，&lt;code&gt;接口只能包含抽象方法（java8之前）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）&lt;/li&gt;
&lt;li&gt;成员变量：接口里默认是public static final，抽象类默认包权限&lt;/li&gt;
&lt;li&gt;方法：接口里默认public abstract,抽象类默认包访问权限&lt;/li&gt;
&lt;li&gt;内部类：接口里默认public static，抽象类默认包访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。&lt;/p&gt;
&lt;p&gt;设计模式：接口和抽象类集合使用的（适配器模式）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="面试" scheme="http://kunxiang.wang/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis之数据类型的内部编码</title>
    <link href="http://kunxiang.wang/2018/11/01/Redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/"/>
    <id>http://kunxiang.wang/2018/11/01/Redis之数据类型的内部编码/</id>
    <published>2018-11-01T03:25:48.000Z</published>
    <updated>2018-11-01T09:00:53.873Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>哈希类型内部编码有两种形式：</p><ol><li><p><code>ziplist</code>(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置(默认512)、同时所有值都小于<code>hash-max-ziplist-value</code>配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。</p></li><li><p><code>hashtable</code>(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).</p></li></ol><a id="more"></a><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>从Redis3.2之后开始提供了<code>quicklist内部编码，它是一种将ziplist和linkedlist结合的一种编码方式</code>。</p><ol><li><code>ziplist</code>(压缩列表):当列表的元素个数小于<code>list-max-ziplist-entries</code>配置(默认512个),同时列表中每个元素值都小于<code>list-max-ziplist-value</code>配置(默认64字节),Redis会选用ziplist来作为列表内部的实现来减小内存使用。</li><li><code>linkedlist</code>(链表):当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。</li></ol><p>Redis3.2之后提供了quicklist内部编码，简单的说它是一个ziplist为节点的linkedlist，它结合了两者的优势，为列表类型提供了一种更为优秀的内部编码实现。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合类型的内部编码也有两种：</p><ol><li><code>intset</code>(整数集合)：当集合中的元素都是<code>整数</code>且<code>元素个数小于set-max-intset-entries配置(默认512个)</code>，Redis会选用intset来作为集合的内部实现，从而减小内存的使用。</li><li><code>hashtable</code>(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;哈希&quot;&gt;&lt;a href=&quot;#哈希&quot; class=&quot;headerlink&quot; title=&quot;哈希&quot;&gt;&lt;/a&gt;哈希&lt;/h4&gt;&lt;p&gt;哈希类型内部编码有两种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ziplist&lt;/code&gt;(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于&lt;code&gt;hash-max-ziplist-entries&lt;/code&gt;配置(默认512)、同时所有值都小于&lt;code&gt;hash-max-ziplist-value&lt;/code&gt;配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hashtable&lt;/code&gt;(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://kunxiang.wang/categories/Redis/"/>
    
      <category term="数据类型" scheme="http://kunxiang.wang/categories/Redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="Redis" scheme="http://kunxiang.wang/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java包装类中的缓存设计</title>
    <link href="http://kunxiang.wang/2018/10/30/Java%E5%8C%85%E8%A3%85%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/"/>
    <id>http://kunxiang.wang/2018/10/30/Java包装类中的缓存设计/</id>
    <published>2018-10-30T07:13:26.000Z</published>
    <updated>2018-10-30T07:50:02.617Z</updated>
    
    <content type="html"><![CDATA[<p>包装类中的<code>缓存设计</code>(<a href="https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin" target="_blank" rel="noopener">享元模式-FlyWeight</a>)，本质就是缓存设计。</p><p><code>Byte/Short/Integer/Long</code>:缓存[-128, 127]区间的数据；<br><code>Character</code>:缓存[0,127]区间的数据.<br><a id="more"></a><br>首先来看一个有意思的面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//case 1</span></span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">        System.out.println(i1 == i2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//case 2</span></span><br><span class="line">        Integer i3 = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">        Integer i4 = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">        System.out.println(i3 == i4); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//case 3</span></span><br><span class="line">        Integer i5 = <span class="number">123</span>; <span class="comment">//自动装箱操作，底层编译后代码为Integer.valueOf(123);    和case2相同</span></span><br><span class="line">        Integer i6 = <span class="number">123</span>;</span><br><span class="line">        System.out.println(i5 == i6); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//case 4</span></span><br><span class="line">        Integer ii1 = <span class="keyword">new</span> Integer(<span class="number">250</span>);</span><br><span class="line">        Integer ii2 = <span class="keyword">new</span> Integer(<span class="number">250</span>);</span><br><span class="line">        System.out.println(ii1 == ii2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//case 5</span></span><br><span class="line">        Integer ii3 = Integer.valueOf(<span class="number">250</span>); <span class="comment">// 250不在缓存区间内，就得new新对象</span></span><br><span class="line">        Integer ii4 = Integer.valueOf(<span class="number">250</span>);</span><br><span class="line">        System.out.println(ii3 == ii4); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 6</span></span><br><span class="line">        Integer ii5 = <span class="number">250</span>;</span><br><span class="line">        Integer ii6 = <span class="number">250</span>;</span><br><span class="line">        System.out.println(ii5 == ii6); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看一下integer源码,如下所示。可以看到Integer的缓存空间在[-128, 127]之间。<br>当传入的数值在此区间内时，之间调用缓存内的数据。反之，重新<code>return new Integer(i);</code>在堆空间返回一个新整形对象。</p><p>那么我们应该如何比较两个对象的值得大小呢？<br>正确的方法是使用<code>equals</code>来比较，equals方法来自于Object根对象，按照官方的建议，在构造子类对象时需要复写父类中的equals方法，来比较我们关心的数据，而不是内存地址（<code>==</code>比较的是内存地址）。现将Integer中的equals拿出来检查一下复写情况</p><p><code>((Integer)obj).intValue()</code>拆箱操作，<code>value == ((Integer)obj).intValue();</code>使用基本的数据类型进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue(); <span class="comment">// 拆箱操作，比较基本数据类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123; <span class="comment">// 初始化操作</span></span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;包装类中的&lt;code&gt;缓存设计&lt;/code&gt;(&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;享元模式-FlyWeight&lt;/a&gt;)，本质就是缓存设计。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Byte/Short/Integer/Long&lt;/code&gt;:缓存[-128, 127]区间的数据；&lt;br&gt;&lt;code&gt;Character&lt;/code&gt;:缓存[0,127]区间的数据.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的单例模式</title>
    <link href="http://kunxiang.wang/2018/10/30/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://kunxiang.wang/2018/10/30/Java中的单例模式/</id>
    <published>2018-10-30T04:00:22.000Z</published>
    <updated>2018-10-30T04:04:25.179Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayUtil.getInstance().sort(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 在该类中，实例化一个实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayUtil instance = <span class="keyword">new</span> ArrayUtil();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 私有化自身的构造器，防止外界通过构造器new对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 对外开放一个静态公共方法，用于获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayUtil <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处编写排序代码</span></span><br><span class="line">        System.out.println(<span class="string">"I'm sorting "</span> + array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-饿汉模式&quot;&gt;&lt;a href=&quot;#1-饿汉模式&quot; class=&quot;headerlink&quot; title=&quot;1. 饿汉模式&quot;&gt;&lt;/a&gt;1. 饿汉模式&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的代码块</title>
    <link href="http://kunxiang.wang/2018/10/30/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>http://kunxiang.wang/2018/10/30/Java中的代码块/</id>
    <published>2018-10-30T01:24:49.000Z</published>
    <updated>2018-10-30T02:43:22.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么是代码块：在类或者方法中，直接使用<code>{}</code>括起来的一段代码，表示一块带啊区域。</p></blockquote><p>代码在块中属于局部变量，只在自己所在的花括号区域内有效。<br>根据代码块所定义的位置不同，代码块分为三种形式</p><ol><li><p><code>局部代码块</code>：直接定义在<code>方法内部</code>的代码块。<br>一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。</p></li><li><p><code>初始化代码块(构造代码块)</code>：直接定义在<code>类</code>中。<br>每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。<code>PS</code>:<code>通过反编译，可以看到，初始化代码也作为构造器最初的语句。</code>一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。</p></li><li><p><code>静态代码块：使用static修饰的初始化代码块。</code><br>静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。<code>一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。</code></p></li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeBlockDemo</span></span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">"初始化代码块"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  CodeBlockDemo()&#123;</span><br><span class="line">    System.out.println(<span class="string">"构造器。。。"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入main方法"</span>);</span><br><span class="line">    <span class="comment">//创建三个匿名对象</span></span><br><span class="line">    <span class="keyword">new</span> CodeBlockDemo();</span><br><span class="line">    <span class="keyword">new</span> CodeBlockDemo();</span><br><span class="line">    <span class="keyword">new</span> CodeBlockDemo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行结果如下</span></span><br><span class="line"><span class="comment">静态代码块</span></span><br><span class="line"><span class="comment">进入main方法</span></span><br><span class="line"><span class="comment">初始化代码块</span></span><br><span class="line"><span class="comment">构造器。。。</span></span><br><span class="line"><span class="comment">初始化代码块</span></span><br><span class="line"><span class="comment">构造器。。。</span></span><br><span class="line"><span class="comment">初始化代码块</span></span><br><span class="line"><span class="comment">构造器。。。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>一道Java面试题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> App d = <span class="keyword">new</span> App();</span><br><span class="line">    <span class="keyword">private</span> SuperClass t = <span class="keyword">new</span> SubClass(); <span class="comment">//先确定依赖，由此开始作为入口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    App()&#123;</span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    SuperClass()&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造SuperClass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubClass()&#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">构造SuperClass</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure></p><p><code>分析：</code></p><ol><li>首先在执行子类subclass构造器的时候先执行隐藏的<code>super();</code>来执行父类的构造器，也就是构造<code>SuperClass</code>在<code>2</code>之前打印.</li><li><p>为什么不先打印4而是先打印子类的1？原因是class App依赖于依赖于subclass，会优先编译subclass，也就是说会优先编译被依赖的优先存在的类。所以首先把subclass加载到虚拟机，因此首先打印1.<code>编译的时候首先确定依赖!!!</code></p></li><li><p>非static字段的初始化都在构造器中执行，也就是说App类反编译后如下。可以看出，打印<code>1</code>后,在APP构造器中实例化subclass，此时，先打印父类构造器中的<code>构造SuperClass</code>,然后打印子类的<code>2</code>。紧接着继续执行APP构造器的代码块，打印app构造器中的<code>3</code>。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> App d = <span class="keyword">new</span> App();</span><br><span class="line">    <span class="keyword">private</span> SuperClass t = <span class="keyword">null</span>; <span class="comment">//先确定依赖，由此开始作为入口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    App()&#123;</span><br><span class="line">        t = <span class="keyword">new</span> SubClass(); <span class="comment">//非static字段的初始化都在构造器中执行</span></span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>以上依赖关系确认完毕，然后开始将App加载进虚拟机，执行由于静态代码块优先于main，静态代码块执行，打印4，最后执行main方法，打印hello.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是代码块：在类或者方法中，直接使用&lt;code&gt;{}&lt;/code&gt;括起来的一段代码，表示一块带啊区域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码在块中属于局部变量，只在自己所在的花括号区域内有效。&lt;br&gt;根据代码块所定义的位置不同，代码块分为三种形式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;局部代码块&lt;/code&gt;：直接定义在&lt;code&gt;方法内部&lt;/code&gt;的代码块。&lt;br&gt;一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;初始化代码块(构造代码块)&lt;/code&gt;：直接定义在&lt;code&gt;类&lt;/code&gt;中。&lt;br&gt;每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。&lt;code&gt;PS&lt;/code&gt;:&lt;code&gt;通过反编译，可以看到，初始化代码也作为构造器最初的语句。&lt;/code&gt;一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;静态代码块：使用static修饰的初始化代码块。&lt;/code&gt;&lt;br&gt;静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。&lt;code&gt;一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java编译类型和运行类型</title>
    <link href="http://kunxiang.wang/2018/10/29/Java%E7%BC%96%E8%AF%91%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E8%A1%8C%E7%B1%BB%E5%9E%8B/"/>
    <id>http://kunxiang.wang/2018/10/29/Java编译类型和运行类型/</id>
    <published>2018-10-29T14:00:41.000Z</published>
    <updated>2018-10-29T14:18:16.575Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">a.eat()<span class="comment">//编译报错</span></span><br><span class="line">((Dog) a).run()<span class="comment">//编译通过</span></span><br></pre></td></tr></table></figure><p>如上的简易代码，编译时会报错。<br>编译类型：Animal a<br>运行类型：new Dog()</p><p>编译时，编译类型会根据a.eat()查找eat方法，找不到就会报错。<br>使用强制类型转换可以解决该问题，即<br>((Dog) a).run()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java之Object根类</title>
    <link href="http://kunxiang.wang/2018/10/29/Java%E4%B9%8BObject%E6%A0%B9%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/10/29/Java之Object根类/</id>
    <published>2018-10-29T03:48:41.000Z</published>
    <updated>2018-10-29T05:11:33.301Z</updated>
    
    <content type="html"><![CDATA[<p>Object本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。</p><p><code>引用数据类型：类/接口/数组</code>，<code>引用类型又称为对象类</code>，<code>所谓的数组变量名称应该指代数组对象</code>。<br>Object类常用方法：</p><ol><li><p><code>protected void finalize()</code>:当垃圾回收器确定不存在对该对象的更多引用时，由对象回收期调用此方法。垃圾回收器在回收某一个对象之前会调用该方法，做扫尾操作。</p></li><li><p><code>Class getClass</code>:返回当前对象的真实类型。</p></li><li><p><code>int hashCode()</code>:返回该对象的哈希值，hashCode决定了对象在哈希表中的存储位置，不同对象的hashCode是不一样的。</p></li><li><p><code>boolean equals(Object obj)</code>: 拿当前对象(this)和参数obj比较。在Object类中的equals方法，本身和’==’符号相同，都是比较的内存地址。官方建议：每个类都应该赋写equals方法，不要比较内存地址，而是比较我们关心的数据。</p></li><li><p><code>String toString()</code>:表示把一个对象转换为字符串表示。在调用打印时，其实打印的就是对象的toString方法。<code>System.out.println(obj);</code>等价于<code>System.out.println(obj.toString);</code>(决堤可以查看Java源代码)。默认情况下打印对象，打印的是对象的十六进制hashCode,但我们更关心对象中的真实存储数据。官方建议：每个类最好赋写toString方法，返回我们关心的数据。</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2952111-d5a996ebf97c420b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-10-29 at 12.08.42.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Object本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;引用数据类型：类/接口/数组&lt;/code&gt;，&lt;code&gt;引用类型又称为对象
      
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java之super和this</title>
    <link href="http://kunxiang.wang/2018/10/29/Java%E4%B9%8Bsuper%E5%92%8Cthis/"/>
    <id>http://kunxiang.wang/2018/10/29/Java之super和this/</id>
    <published>2018-10-29T01:31:49.000Z</published>
    <updated>2018-10-29T03:06:58.118Z</updated>
    
    <content type="html"><![CDATA[<p>this: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。<br>super: 当前对象的父类方法或构造器。使用在继承关系中。</p><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><ol><li><p><code>当new一个子类对象的时候，会先创建一个父类对象</code>。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。</p></li><li><p>如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。</p></li><li><p>如果父类没有提供无参数的构造器，则此时子类必须显式的通过<code>super</code>语句去掉用父类带参数的构造器。</p></li><li><p>子类构建的所有的行为建立在第一条规则基础之上。</p></li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>    age;</span><br><span class="line">    Animal(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"animal constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Animal(String color)&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is a "</span> + color +<span class="string">" color"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animals Say sth..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    Fish()&#123;</span><br><span class="line">       <span class="comment">//构造器中的第一句必须为super，如果不写，则默认调用super()</span></span><br><span class="line">       <span class="keyword">super</span>(<span class="string">"RED"</span>); <span class="comment">//子类没有提供无参数的构造器，必须显示super滴啊用，否则会编译失败</span></span><br><span class="line">       System.out.println(<span class="string">"Fish Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的示意图如下：<br><img src="https://upload-images.jianshu.io/upload_images/2952111-2db47a7c0f8a1ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-10-28 at 22.12.48.png"></p><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h5 id="存在于位置"><a href="#存在于位置" class="headerlink" title="存在于位置"></a>存在于位置</h5><ol><li>在构造器中，表示当前创建的对象</li><li>在方法中，哪一个对象调用this所在的方法，那么此时this就表示哪一个对象。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2952111-bf1b724c2da63d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-10-28 at 16.28.10.png"></p><h5 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h5><ol><li>解决成员变量的参数（局部变量）之间的二义性，必须使用this区分</li><li>同类中实例方法互相调用时可以省略this关键字，但是不建议省略</li><li>将this作为参数传递给另外一个方法</li><li>将this作为方法的返回值（链式方法编程）</li><li>构造器函数的互相调用，this([参数])必须写在构造器内的第一行，与super类似。</li><li>this、super不能static一起使用。原因是当字节码被加载进jvm时，static成员已经存在了，但是此时对象还没有被创建，没有对象，也就没有this。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">User(String name)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">User(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">  <span class="keyword">this</span>(name); <span class="comment">//表示在调用参数为string类型的构造器</span></span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述调用方式为多参数构造器调用少参数构造器，一般工程经验为少参数构造器调用多参数构造器</span></span><br><span class="line"><span class="comment">//对于多余的参数，使用默认值赋值即可，如下</span></span><br><span class="line">User(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User(String name)&#123;</span><br><span class="line">  <span class="keyword">this</span>(name, <span class="number">0</span>);<span class="comment">//此处对int age赋值为0即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2952111-955c8e05df6fd8ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-10-28 at 16.41.16.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-1d10520f4fc5a369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-10-28 at 16.58.54.png"></p><p>是</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。&lt;br&gt;super: 当前对象的父类方法或构造器。使用在继承关系中。&lt;/p&gt;
&lt;h4 id=&quot;super&quot;&gt;&lt;a href=&quot;#super&quot; class=&quot;headerlink&quot; title=&quot;super&quot;&gt;&lt;/a&gt;super&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;当new一个子类对象的时候，会先创建一个父类对象&lt;/code&gt;。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果父类没有提供无参数的构造器，则此时子类必须显式的通过&lt;code&gt;super&lt;/code&gt;语句去掉用父类带参数的构造器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类构建的所有的行为建立在第一条规则基础之上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java方法的值传递机制</title>
    <link href="http://kunxiang.wang/2018/10/26/Java%E6%96%B9%E6%B3%95%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://kunxiang.wang/2018/10/26/Java方法的值传递机制/</id>
    <published>2018-10-26T02:48:38.000Z</published>
    <updated>2018-10-26T07:08:13.589Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对于基本数据类型(八种基本数据类型)来说，方法形参传递的是<code>值的副本</code>;</li><li>对于引用数据类型，方法的形参传递的是<code>引用的地址值的副本</code>;</li></ul><p>对于引用数据类型，JVM中的存储图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-24d050aa031dd985.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_0013.PNG"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;对于基本数据类型(八种基本数据类型)来说，方法形参传递的是&lt;code&gt;值的副本&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;对于引用数据类型，方法的形参传递的是&lt;code&gt;引用的地址值的副本&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于引用数据类型，JVM中的存储图如
      
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
</feed>
