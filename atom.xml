<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quentin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kunxiang.wang/"/>
  <updated>2019-11-14T12:21:24.207Z</updated>
  <id>http://kunxiang.wang/</id>
  
  <author>
    <name>ByiProX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中如何优雅的使用assert断言</title>
    <link href="http://kunxiang.wang/2019/11/14/Python%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8assert%E6%96%AD%E8%A8%80/"/>
    <id>http://kunxiang.wang/2019/11/14/Python中如何优雅的使用assert断言/</id>
    <published>2019-11-14T09:04:42.000Z</published>
    <updated>2019-11-14T12:21:24.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是assert断言"><a href="#什么是assert断言" class="headerlink" title="什么是assert断言"></a>什么是assert断言</h3><blockquote><p>Assert statements are a convenient way to insert debugging assertions into a program</p></blockquote><p>断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于<code>__debug__</code>这个内置变量的，其默认值为<code>True</code>。当<code>__debug__</code>为<code>True</code>时，assert语句才会被执行。</p><p>对于一般的声明，assert expression等价于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression: <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p><p>assert可以同时声明两个个expression，例如<strong>assert expression1, expression2</strong>等价于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression1: <span class="keyword">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure></p><p>如果执行脚本文件时加上<code>-O</code>参数， <code>__debug__</code>则为<code>False</code></p><p>举一个例子，假设我们有一个脚本testAssert.py，内容为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(__debug__)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>当使用<code>python assert.py</code>运行时，<code>__debug__</code>会输出True，assert 1 &gt; 2语句会抛出AssertionError异常。</p><p>当使用<code>python -O assert.py</code>运行时，<code>__debug__</code>会输出False，assert 1 &gt; 2语句由于没有执行不会报任何异常。</p><h3 id="断言和异常的使用场景"><a href="#断言和异常的使用场景" class="headerlink" title="断言和异常的使用场景"></a>断言和异常的使用场景</h3><p>先说结论：</p><blockquote><p>检查<code>先验条件</code>使用断言，检查<code>后验条件</code>使用异常</p></blockquote><p>举个例子来说明一下，在开发中我们经常会遇到读取本地文件的场景。我们定义一个read_file方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> is_instance(file_path, str)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>read_file函数要求在开始执行的时候满足一定条件：file_path必须是str类型，这个条件就是先验条件，如果不满足，就不能调用这个函数，如果真的出现了不满足条件的情况，证明代码中出现了bug，这时候我们就可以使用assert语句来对file_path的类型进行推断，提醒程序员修改代码，也可以使用if…raise…语句来实现assert，但是要繁琐很多。在很多优秀的Python项目中都会看到使用assert进行先验判断的情况，平时可以多多留意。</p><p>read_file函数在被调用执行后，依然需要满足一定条件，比如file_path所指定的文件需要是存在的，并且当前用户有权限读取该文件，这些条件称为后验条件，对于后验条件的检查，我们需要使用异常来处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> is_instance(file_path, str)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_exist(file_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> has_privilege(file_path):</span><br><span class="line">        <span class="keyword">raise</span> PermissionError()</span><br></pre></td></tr></table></figure><p>文件不存在和没有权限，这两种情况并不属于代码bug，是代码逻辑的一部分，上层代码捕获异常后可能会执行其他逻辑，因此我们不能接受这部分代码在生产环境中被忽略。并且，相比于assert语句只能抛出AssertionError，使用异常可以抛出更详细的错误，方便上层代码针对不同错误执行不同的逻辑。</p><p><a href="https://juejin.im/post/5af02413f265da0b776f9e15" target="_blank" rel="noopener">参考链接</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是assert断言&quot;&gt;&lt;a href=&quot;#什么是assert断言&quot; class=&quot;headerlink&quot; title=&quot;什么是assert断言&quot;&gt;&lt;/a&gt;什么是assert断言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Assert statements are a convenient way to insert debugging assertions into a program&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于&lt;code&gt;__debug__&lt;/code&gt;这个内置变量的，其默认值为&lt;code&gt;True&lt;/code&gt;。当&lt;code&gt;__debug__&lt;/code&gt;为&lt;code&gt;True&lt;/code&gt;时，assert语句才会被执行。&lt;/p&gt;
&lt;p&gt;对于一般的声明，assert expression等价于&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __debug__:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; expression: &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; AssertionError&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;assert可以同时声明两个个expression，例如&lt;strong&gt;assert expression1, expression2&lt;/strong&gt;等价于&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __debug__:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; expression1: &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; AssertionError(expression2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果执行脚本文件时加上&lt;code&gt;-O&lt;/code&gt;参数， &lt;code&gt;__debug__&lt;/code&gt;则为&lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;举一个例子，假设我们有一个脚本testAssert.py，内容为：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(__debug__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>神经网络中为什么不能将权重初始值设置为一样的值</title>
    <link href="http://kunxiang.wang/2019/11/04/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%B0%86%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%80%BC%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%80%E6%A0%B7%E7%9A%84%E5%80%BC/"/>
    <id>http://kunxiang.wang/2019/11/04/神经网络中为什么不能将权重初始值设置为一样的值/</id>
    <published>2019-11-04T03:00:31.000Z</published>
    <updated>2019-11-11T05:28:04.426Z</updated>
    
    <content type="html"><![CDATA[<p>先说结论，如果权重初始值设为0的话，将无法正确进行学习。</p><p>这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2层的神经元中全部输入相同的值，这意味着反向传播时第2层的权重全部都会进行相同的更新。因此，权重被更新为相同的值，并拥有了对称的值(重复的值)。这使得神经网络拥有许多不同的权重的意义丧失了。为了防止“权重均一化” (严格地讲，是为了瓦解权重的对称结构)，必须随机生成初始值。</p><p>实际上，考虑一个全连接的神经网络，同一层中的任意神经元是同构的，对于相同的输入他们会有同样的输出，此时如果将参数全部初始化为相同的值，那么无论前向传播还是反向传播，参数的取值还是完全相同，学习将无法打破这种<code>对称性</code>，最终同一网络层中的各个参数仍然是相同的。</p><p>综上，必须随机的初始化神经网络参数的值，以打破这种对称性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说结论，如果权重初始值设为0的话，将无法正确进行学习。&lt;/p&gt;
&lt;p&gt;这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2
      
    
    </summary>
    
      <category term="机器学习" scheme="http://kunxiang.wang/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://kunxiang.wang/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="http://kunxiang.wang/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git分支管理策略及简单操作</title>
    <link href="http://kunxiang.wang/2019/10/10/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://kunxiang.wang/2019/10/10/Git分支管理策略及简单操作/</id>
    <published>2019-10-10T05:59:05.000Z</published>
    <updated>2019-10-10T09:53:47.695Z</updated>
    
    <content type="html"><![CDATA[<p>前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。</p><p>当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。</p><table><thead><tr><th style="text-align:center">分支</th><th style="text-align:center">命名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">主分支</td><td style="text-align:center">master</td><td style="text-align:center">主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</td></tr><tr><td style="text-align:center">开发分支</td><td style="text-align:center">develop</td><td style="text-align:center">开发分支，永远是功能最新最全的分支</td></tr><tr><td style="text-align:center">功能分支</td><td style="text-align:center">feature-*</td><td style="text-align:center">新功能分支，某个功能点正在开发阶段</td></tr><tr><td style="text-align:center">发布版本</td><td style="text-align:center">release-*</td><td style="text-align:center">发布定期要上线的功能</td></tr><tr><td style="text-align:center">修复分支</td><td style="text-align:center">hotfix-*</td><td style="text-align:center">修复线上代码的 bug</td></tr></tbody></table><a id="more"></a><h3 id="1-主分支master"><a href="#1-主分支master" class="headerlink" title="1. 主分支master"></a>1. 主分支master</h3><p>首先，代码库应该有且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。团队成员从主分支(master)获得的都是处于可发布状态的代码。</p><h3 id="2-开发分支develop"><a href="#2-开发分支develop" class="headerlink" title="2. 开发分支develop"></a>2. 开发分支develop</h3><p>日常开发应该在另一条分支上完成。我们把开发用的分支，叫做develop分支。开发分支(develop)应该总能够获得最新开发进展的代码。如果想正式对外发布，就在master分支上，对develop分支进行merge。下面介绍常用的几个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在master分支上创建develop分支</span></span><br><span class="line">git checkout -b develop master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对develop分支合并到当前master分支</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><h3 id="3-临时分支"><a href="#3-临时分支" class="headerlink" title="3. 临时分支"></a>3. 临时分支</h3><p>除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p><ul><li>功能（feature）分支</li><li>预发布（release）分支</li><li>修补bug（bugfix）分支</li></ul><p>这三种分支都属于临时性需要，使用完以后，最好删除，使得代码库的常设分支始终只有master和develop。</p><h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><p>feature分支是为了开发某种特定功能，从develop分支上面分出来的。开发完成后，要再并入develop。功能分支的名字，可以采用feature-xxx的形式命名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从develop创建一个功能分支</span></span><br><span class="line">git checkout -b feature-x develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发完成后，将功能分支合并到develop分支：</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除feature分支</span></span><br><span class="line">git branch -d feature-x</span><br></pre></td></tr></table></figure></p><h4 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h4><p>release分支是指发布正式版本之前（即合并到master分支之前），我们可能需要有一个预发布的版本进行测试而创建的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个预发布分支</span></span><br><span class="line">git checkout -b release-x develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认没有问题后，合并到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再合并到develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，删除预发布分支</span></span><br><span class="line">git branch -d release-x</span><br></pre></td></tr></table></figure></p><h4 id="bug修补分支"><a href="#bug修补分支" class="headerlink" title="bug修补分支"></a>bug修补分支</h4><p>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p><p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进master和develop分支。它的命名，可以采用hotfix-x的形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个修补bug分支</span></span><br><span class="line">git checkout -b hotfix-x master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修补结束后，合并到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff hotfix-x</span><br><span class="line">git tag -a 0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再合并到develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff hotfix-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除"修补bug分支"</span></span><br><span class="line">git branch -d hotfix-x</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191010172919306.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面许多指令使用的–no-ff的意思是no-fast-farward的缩写，使用该命令可以保持更多的版本演进的细节。如果不使用该参数，默认使用了fast-farword进行merge。两者的区别如下图所示：<br><img src="https://img-blog.csdnimg.cn/2019101017424529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后分享一下整体的分支管理策略图示:<br><img src="https://img-blog.csdnimg.cn/20191010174810996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考：</p><blockquote><p><a href="https://nvie.com/posts/a-successful-git-&gt;branching-model/" target="_blank" rel="noopener">A successful Git branching model</a><br>—from <a href="https://nvie.com/about/" target="_blank" rel="noopener">Vincent Driessen</a></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。&lt;/p&gt;
&lt;p&gt;当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;分支&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;命名&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;主分支&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;master&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;主分支，所有提供给用户使用的正式版本，都在这个主分支上发布&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;开发分支&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;develop&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;开发分支，永远是功能最新最全的分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;功能分支&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;feature-*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;新功能分支，某个功能点正在开发阶段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;发布版本&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;release-*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;发布定期要上线的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;修复分支&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;hotfix-*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;修复线上代码的 bug&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Git" scheme="http://kunxiang.wang/categories/Git/"/>
    
    
      <category term="Git" scheme="http://kunxiang.wang/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python中的列表和元组</title>
    <link href="http://kunxiang.wang/2019/10/07/%E6%B5%85%E6%9E%90Python%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/"/>
    <id>http://kunxiang.wang/2019/10/07/浅析Python中的列表和元组/</id>
    <published>2019-10-07T05:25:10.000Z</published>
    <updated>2019-10-07T05:26:09.102Z</updated>
    
    <content type="html"><![CDATA[<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>列表是<code>动态数组</code>，它们可变且可以重设长度(改变其内部元素的个数)。</li><li>元组是<code>静态数组</code>，它们不可变，且其内部数据一旦创建便无法改变。</li><li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。</li></ol><p>这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。</p><a id="more"></a><h4 id="动态数组–列表"><a href="#动态数组–列表" class="headerlink" title="动态数组–列表"></a>动态数组–列表</h4><p>列表可以改变大小及内容不同，列表的可变性的代价在于存储它们需要额外的内存以及使用它们需要额外的计算。我们在<a href="https://mp.weixin.qq.com/s?__biz=MzU5OTUwMTA4NA==&amp;mid=2247483804&amp;idx=1&amp;sn=4cef9561e71e5c6a621529be757a5b2f&amp;chksm=feb2b1efc9c538f9ddcb91175fedd6468cfbc5e2b613b3d8a48077a8ea0194b41a7ff8e20e9d&amp;token=475883438&amp;lang=zh_CN#rd" target="_blank" rel="noopener">浅析Python中列表操作之*和*=</a>中一起研究了cpython的list对象的源码，看到了list对象的动态分配数组的大体过程(调用resize函数)，而且在动态调整数组大小时使用如下的分配公式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_allocated = (<span class="keyword">size_t</span>)newsize + (newsize &gt;&gt; <span class="number">3</span>) + (newsize &lt; <span class="number">9</span> ? <span class="number">3</span> : <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>下图是一个列表多次添加元素时分配空间的变化示意图：</p><p><img src="https://img-blog.csdnimg.cn/20191007131224310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="静态数组–元组"><a href="#静态数组–元组" class="headerlink" title="静态数组–元组"></a>静态数组–元组</h4><p>元组的不可改变性使其成为了一个非常轻量级的数据结构。这意味着存储元组不需要很多的内存开销，而且对元组的操作也非常直观。一旦元组被创建，它的内容无法被修改或它的大小也无法被改变。虽然它们不支持改变大小，但是我们可以将两个元组合并成一个新元组。这一操作类似列表的resize操作，但我们不需要为新生成的元组分配任何<code>额外</code>的空间。任意两个元组相加或者元组乘以一个整数进行repeat始终返回一个新分配的元组。其中两个元组相加调用cpython中的tupleconcat方法，而乘法操作调用的是tuplerepeat方法。上述两个方法的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">tupleconcat(PyTupleObject *a, PyObject *bb)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    size = Py_SIZE(a) + Py_SIZE(b);</span><br><span class="line">    np = tuple_alloc(size);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)np;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">tuplerepeat(PyTupleObject *a, Py_ssize_t n)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    size = Py_SIZE(a) * n;</span><br><span class="line">    np = tuple_alloc(size);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (PyObject *) np;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元组的静态特性的另一个好处体现在一些会在Python后台发生的事:资源缓存。Python是一门垃圾收集语言，这意味着当一个变量不再被使用时，Python会将该变量使用的内存释放回操作系统，以供其他程序(或变量)使用。<code>然而，从源码中可以看到，对于长度为1~20的元组，即使它们不再被使用，它们的空间也不会立刻被还给系统，而是留待未来使用</code>。这意味着当未来需要一个同样大小的新元组时，我们不再需要向操作系统申请一块内存来存放数据，因为我们已经有了预留的内存。</p><p><img src="https://img-blog.csdnimg.cn/20191007131407450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们可以验证资源缓存这一点，可以看到初始化一个列表消耗的时间是初始化一个元组消耗时间的6倍！可以想象一下，某些场景中在一个循环中频繁创建列表，耗时还是非常可观的，此时可以考虑使用元组来提高执行效率。<br><img src="https://img-blog.csdnimg.cn/20191007132116239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;列表是&lt;code&gt;动态数组&lt;/code&gt;，它们可变且可以重设长度(改变其内部元素的个数)。&lt;/li&gt;
&lt;li&gt;元组是&lt;code&gt;静态数组&lt;/code&gt;，它们不可变，且其内部数据一旦创建便无法改变。&lt;/li&gt;
&lt;li&gt;元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
      <category term="Python源码" scheme="http://kunxiang.wang/tags/Python%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python中列表操作之*和*=</title>
    <link href="http://kunxiang.wang/2019/10/07/%E6%B5%85%E6%9E%90Python%E4%B8%AD%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B-%E5%92%8C/"/>
    <id>http://kunxiang.wang/2019/10/07/浅析Python中列表操作之-和/</id>
    <published>2019-10-06T16:42:03.000Z</published>
    <updated>2019-10-07T05:33:14.349Z</updated>
    
    <content type="html"><![CDATA[<p>初学Python时总是会将a*=n理解为a=a*n，稍微深入后就会知道在Python中的不同，其中<em>调用<strong>mul</strong> ，而</em>=调用<strong>imul</strong> 。</p><p>对于list对象也支持乘法操作，截止到Python3.7版本，上述仍然是成立的。我们知道list是由C实现的，所以真正的底层调用肯定是C的实现。观察list对象的C实现的源码我们会知道乘法*操作调用list_repeat，*=会调用list_inplace_repeat，下面分别看一下两者的C实现方式。</p><h3 id="▍-–-gt-list-repeat"><a href="#▍-–-gt-list-repeat" class="headerlink" title="▍* –&gt; list_repeat"></a>▍* –&gt; list_repeat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">list_repeat(PyListObject *a, Py_ssize_t n)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    size = Py_SIZE(a) * n;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> PyList_New(<span class="number">0</span>);</span><br><span class="line">    np = (PyListObject *) list_new_prealloc(size);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (PyObject *) np;</span><br><span class="line">&#125;</span><br><span class="line">从以上可以看出，list_repeat方法需要多少空间就申请多少空间，该操作返回的一个新的列表对象。</span><br></pre></td></tr></table></figure><h3 id="▍-–-gt-list-inplace-repeat"><a href="#▍-–-gt-list-inplace-repeat" class="headerlink" title="▍*= –&gt; list_inplace_repeat"></a>▍*= –&gt; list_inplace_repeat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">list_inplace_repeat(PyListObject *self, Py_ssize_t n)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    size = PyList_GET_SIZE(self);</span><br><span class="line">    <span class="keyword">if</span> (list_resize(self, size*n) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">list_resize(PyListObject *self, Py_ssize_t newsize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        assert(self-&gt;ob_item != <span class="literal">NULL</span> || newsize == <span class="number">0</span>);</span><br><span class="line">        Py_SIZE(self) = newsize;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    new_allocated = (<span class="keyword">size_t</span>)newsize + (newsize &gt;&gt; <span class="number">3</span>) + (newsize &lt; <span class="number">9</span> ? <span class="number">3</span> : <span class="number">6</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>list_inplace_repeat代码中通过调用list_resize来进行扩容，并告诉它这个列表需要容纳size*n个元素。从list_resize代码来看，当allocated空间足够时，不会进行扩容操作。但是新申请的空间总是比所需要的大的。如果进行pop等减小list元素数量的操作来看，实际上列表的大小也会按照相应策略进行缩减操作。</p><blockquote><p>If the newsize falls lower than half the allocated size, then proceed with the realloc() to shrink the list. — From cpython</p></blockquote><h3 id="▍总结"><a href="#▍总结" class="headerlink" title="▍总结"></a>▍总结</h3><ol><li>*=会调用list_resize，可能会引起list空间扩容的情况，而且此时list对象占用空间会比实际list对象中元素占用空间大。</li><li>*会按需获取申请空间大小，不会调用list_resize方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初学Python时总是会将a*=n理解为a=a*n，稍微深入后就会知道在Python中的不同，其中&lt;em&gt;调用&lt;strong&gt;mul&lt;/strong&gt; ，而&lt;/em&gt;=调用&lt;strong&gt;imul&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;对于list对象也支持乘法操作，截止到P
      
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
      <category term="Python源码" scheme="http://kunxiang.wang/tags/Python%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>神经网络的学习为何要设定损失函数？</title>
    <link href="http://kunxiang.wang/2019/10/01/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%BA%E4%BD%95%E8%A6%81%E8%AE%BE%E5%AE%9A%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%EF%BC%9F/"/>
    <id>http://kunxiang.wang/2019/10/01/神经网络的学习为何要设定损失函数？/</id>
    <published>2019-09-30T16:17:38.000Z</published>
    <updated>2019-09-30T16:47:28.497Z</updated>
    
    <content type="html"><![CDATA[<p>这里所说的“学习”是指从训练数据中<strong>自动</strong>获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。</p><p>可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?</p><a id="more"></a><p>听起来很有道理！</p><p>对于这一疑问，我们可以根据<strong>“导数“</strong>在神经网络学习中的作用来回答。 在神经网络的学习中，寻找最优参数(权重和偏置)时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数(确切地讲是梯度)，然后以这个导数为指引， 逐步更新参数的值。</p><p>假设有一个神经网络，现在我们来关注这个神经网络中的某一个权重参数。此时，对该权重参数的损失函数求导，此处导数的含义可以理解为“如果稍微改变这个权重参数的值，损失函数的值会如何变化”。<strong>如果导数的值为负，通过使该权重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值</strong>。不过，当导数为 0 时，无论权重参数向哪个方向变化，损失函数的值都不会改变，此时该权重参数的更新会停在此处。</p><p><strong>在进行神经网络的学习时，不能将识别精度作为指标。因为如果以识别精度为指标，则参数的导数在绝大多数地方都会变为 0，导致参数无法更新。</strong>那为什么用识别精度作为指标时，参数的导数在绝大多数地方都会变成0呢？</p><p>为了回答这个问题，我们来思考另一个具体例子。假设某个神经网络正确识别出了 100个训练数据中的32笔，此时识别精度为 32 %。如果以识别精度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在 32 %，不会出现变化。也就是说，仅仅微调参数，是无法改善识别精度的。即便识别精度有所改善，它的值也不会像 32.0123 . . . % 这样连续变化，而是变为 33 %、 34 % 这样的<strong>不连续的、离散的值</strong>。而如果把损失函数作为指标，则当前损失函数的值可以表示为 0.92543 . . . 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像 0.93432 . . . 这样发生连续性的变化。</p><p>作为激活函数的阶跃函数也有同样的情况。出于相同的原因，如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。原因是阶跃函数的导数在绝大多数地方(除了0以外的地方)均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数<strong>抹杀</strong>，导致损失函数的值不会产生任何变化。</p><p>而 sigmoid 函数，不仅函数的输出(竖轴的值)是连续变化的，曲线的斜率(导数) 也是连续变化的。也就是说，sigmoid 函数的导数在任何地方都不为 0。这对神经网络的学习非常重要。得益于这个斜率不会为 0 的性质，神经网络的学习得以正确进行。</p><p><img src="https://img-blog.csdnimg.cn/20191001001019693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">—-<br>参考数据<br>深度学习入门-Deep Learning from Scratch</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里所说的“学习”是指从训练数据中&lt;strong&gt;自动&lt;/strong&gt;获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。&lt;/p&gt;
&lt;p&gt;可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://kunxiang.wang/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://kunxiang.wang/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="http://kunxiang.wang/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>神经网络的激活函数为什么要使用非线性函数</title>
    <link href="http://kunxiang.wang/2019/09/29/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>http://kunxiang.wang/2019/09/29/神经网络的激活函数为什么要使用非线性函数/</id>
    <published>2019-09-29T02:58:43.000Z</published>
    <updated>2019-09-29T03:02:35.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="▍什么是激活函数"><a href="#▍什么是激活函数" class="headerlink" title="▍什么是激活函数"></a>▍什么是激活函数</h3><p>在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 <code>Activation Function</code>。激活函数在神经网络中的位置如图所示：<br><img src="https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="▍为什么要用非线性函数"><a href="#▍为什么要用非线性函数" class="headerlink" title="▍为什么要用非线性函数"></a>▍为什么要用非线性函数</h3><p>要解释这个问题，可以反过来思考一下，<code>为什么激活函数不能使用线性函数</code>。<br>如果使用线性函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的<code>线性组合</code>。加深神经网络的层数就没有什么意义了。线性函数的问题在于不管加深层数到多少，总是存在与之等效的<code>「无隐藏层」</code>的神经网络。为了稍微直观的理解这一点，考虑下面一个简单的例子。</p><p>存在一个线性函数<code>f(x)=kx(k≠0)</code>作为激活函数，将<code>y=f(f(f(x)))</code>对应三层的神经网络。很明显可以想到同样的处理可以由<code>y=ax(a=k^3)</code>，一个没有隐藏层的神经网络来表示。该例子仅仅是一个近似，实际中的神经网络的运算要比这个例子复杂很多，但不影响结论的成立。也就是说，使用线性激活函数时，无法发挥多层网络带来的优势。</p><p>相反如果使用非线性函数，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p><p>以上！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;▍什么是激活函数&quot;&gt;&lt;a href=&quot;#▍什么是激活函数&quot; class=&quot;headerlink&quot; title=&quot;▍什么是激活函数&quot;&gt;&lt;/a&gt;▍什么是激活函数&lt;/h3&gt;&lt;p&gt;在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 &lt;code&gt;Activation Function&lt;/code&gt;。激活函数在神经网络中的位置如图所示：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://kunxiang.wang/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://kunxiang.wang/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="http://kunxiang.wang/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>服务器中的物理CPU、逻辑CPU和CPU核数</title>
    <link href="http://kunxiang.wang/2019/06/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E7%89%A9%E7%90%86CPU%E3%80%81%E9%80%BB%E8%BE%91CPU%E5%92%8CCPU%E6%A0%B8%E6%95%B0/"/>
    <id>http://kunxiang.wang/2019/06/20/服务器中的物理CPU、逻辑CPU和CPU核数/</id>
    <published>2019-06-20T14:18:07.000Z</published>
    <updated>2019-06-23T14:23:08.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="物理CPU"><a href="#物理CPU" class="headerlink" title="物理CPU"></a>物理CPU</h3><p>实际Server中插槽上的CPU个数<br>物理cpu数量，可以数不重复的 physical id 有几个,查看方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"physical id"</span> /proc/cpuinfo|sort|uniq|wc -l</span><br><span class="line">2</span><br><span class="line">```         </span><br><span class="line"></span><br><span class="line"><span class="comment">### CPU核数           </span></span><br><span class="line">单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。</span><br><span class="line">比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">cat /proc/cpuinfo |grep <span class="string">"cpu cores"</span>|uniq</span><br><span class="line">grep <span class="string">"cpu cores"</span> /proc/cpuinfo|uniq|awk -F <span class="string">":"</span> <span class="string">"&#123;print <span class="variable">$2</span>&#125;"</span></span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="逻辑CPU"><a href="#逻辑CPU" class="headerlink" title="逻辑CPU"></a>逻辑CPU</h3><p>Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的<br>信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。</p><p>一般情况，我们认为<code>一颗cpu可以有多核</code>，加上<code>intel的超线程技术(HT)</code>, 可以在逻辑上再分一倍数量的cpu core出来<br><code>逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)</code>。</p><p><code>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术</code></p><p>备注一下：Linux下top查看的CPU也是逻辑CPU个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep <span class="string">"processor"</span> |wc -l</span><br><span class="line">32（支持超线程）</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="查看方法"><a href="#查看方法" class="headerlink" title="查看方法"></a>查看方法</h2><p>通过cat /proc/cpuinfocpu来查看相关信息。</p><blockquote><ul><li>vendor id     如果处理器为英特尔处理器，则字符串是 GenuineIntel。</li><li>processor     包括这一逻辑处理器的唯一标识符。</li><li>physical id   包括每个物理封装的唯一标识符。</li><li>core id       保存每个内核的唯一标识符。</li><li>siblings      列出了位于相同物理封装中的逻辑处理器的数量。</li><li>cpu cores     包含位于相同物理封装中的内核数量。</li></ul></blockquote><ol><li>拥有相同 physical id 的所有逻辑处理器共享同一个物理插座，每个 physical id 代表一个唯一的物理封装。</li><li>Siblings 表示位于这一物理封装上的逻辑处理器的数量，它们可能支持也可能不支持超线程（HT）技术。</li><li>每个 core id 均代表一个唯一的处理器内核，所有带有相同 core id 的逻辑处理器均位于同一个处理器内核上。简单的说：“siblings”指的是一个物理CPU有几个逻辑CPU，”cpu cores“指的是一个物理CPU有几个核。</li><li>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术。</li><li>如果有两个或两个以上的逻辑处理器拥有相同的 physical id，但是 core id不同，则说明这是一个多内核处理器。cpu cores条目也可以表示是否支持多内核。</li></ol><h2 id="top命令关于cpu使用率"><a href="#top命令关于cpu使用率" class="headerlink" title="top命令关于cpu使用率"></a>top命令关于cpu使用率</h2><p>下面做一个简单的测试，终端中使用如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum /dev/zero &amp;</span><br></pre></td></tr></table></figure></p><p>开启top，如下所示</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-81c2a7654f73c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-06-20 at 22.53.34.png"></p><p>按数字键1后查看所有核的使用率。</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-70b5f8c2b58f77cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-06-20 at 22.56.42.png"></p><p>发现使用top命令，左上角显示的是整体负载，即单核的负载数除以核数。%CPU数值代表单个核的使用率，超过100%代表使用其他核的计算资源。</p><p>第一行：</p><ul><li>10:01:23 — 当前系统时间</li><li>126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）</li><li>2 users — 当前有2个用户登录系统</li><li>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数<code>除以逻辑CPU的数量</code>，<code>结果高于5的时候就表明系统在超负荷运转了。</code></li></ul><p>第二行：</p><ul><li>Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</li></ul><p>第三行：cpu状态</p><ul><li>6.7% us — 用户空间占用CPU的百分比。</li><li>0.4% sy — 内核空间占用CPU的百分比。</li><li>0.0% ni — 改变过优先级的进程占用CPU的百分比</li><li>92.9% id — 空闲CPU百分比</li><li>0.0% wa — IO等待占用CPU的百分比</li><li>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</li><li>0.0% si — 软中断（Software Interrupts）占用CPU的百分比</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;重要概念&quot;&gt;&lt;a href=&quot;#重要概念&quot; class=&quot;headerlink&quot; title=&quot;重要概念&quot;&gt;&lt;/a&gt;重要概念&lt;/h2&gt;&lt;h3 id=&quot;物理CPU&quot;&gt;&lt;a href=&quot;#物理CPU&quot; class=&quot;headerlink&quot; title=&quot;物理CPU&quot;&gt;&lt;/a&gt;物理CPU&lt;/h3&gt;&lt;p&gt;实际Server中插槽上的CPU个数&lt;br&gt;物理cpu数量，可以数不重复的 physical id 有几个,查看方法&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grep &lt;span class=&quot;string&quot;&gt;&quot;physical id&quot;&lt;/span&gt; /proc/cpuinfo|sort|uniq|wc -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### CPU核数           &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/cpuinfo |grep &lt;span class=&quot;string&quot;&gt;&quot;cpu cores&quot;&lt;/span&gt;|uniq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grep &lt;span class=&quot;string&quot;&gt;&quot;cpu cores&quot;&lt;/span&gt; /proc/cpuinfo|uniq|awk -F &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;print &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;逻辑CPU&quot;&gt;&lt;a href=&quot;#逻辑CPU&quot; class=&quot;headerlink&quot; title=&quot;逻辑CPU&quot;&gt;&lt;/a&gt;逻辑CPU&lt;/h3&gt;&lt;p&gt;Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的&lt;br&gt;信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。&lt;/p&gt;
&lt;p&gt;一般情况，我们认为&lt;code&gt;一颗cpu可以有多核&lt;/code&gt;，加上&lt;code&gt;intel的超线程技术(HT)&lt;/code&gt;, 可以在逻辑上再分一倍数量的cpu core出来&lt;br&gt;&lt;code&gt;逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;备注一下：Linux下top查看的CPU也是逻辑CPU个数&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/cpuinfo| grep &lt;span class=&quot;string&quot;&gt;&quot;processor&quot;&lt;/span&gt; |wc -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32（支持超线程）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://kunxiang.wang/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看端口占用情况</title>
    <link href="http://kunxiang.wang/2019/05/28/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <id>http://kunxiang.wang/2019/05/28/Linux查看端口占用情况/</id>
    <published>2019-05-28T02:11:18.000Z</published>
    <updated>2019-05-28T05:53:41.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><ul><li><p>lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。以root用户来执行lsof -i命令</p></li><li><p>lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2952111-34cfaa89c8a414a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-05-28 at 13.50.08.png"></p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>netstat -tunlp用于显示tcp，udp的端口和进程等相关情况</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-79a5c99ebc5ba5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-05-28 at 13.51.26.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;lsof&quot;&gt;&lt;a href=&quot;#lsof&quot; class=&quot;headerlink&quot; title=&quot;lsof&quot;&gt;&lt;/a&gt;lsof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打
      
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://kunxiang.wang/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://kunxiang.wang/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>Java实时读取log日志文件示例代码</title>
    <link href="http://kunxiang.wang/2019/05/21/Java%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96log%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
    <id>http://kunxiang.wang/2019/05/21/Java实时读取log日志文件示例代码/</id>
    <published>2019-05-21T06:28:14.000Z</published>
    <updated>2019-05-23T16:05:06.395Z</updated>
    
    <content type="html"><![CDATA[<p><code>需求</code>：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。</p><p><code>运用的技术</code>：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。</p><p><code>思想</code>：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。</p><p><code>原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile</code></p><p>模拟写日志的类<br>因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inveno.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogSvr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LogSvr.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SimpleDateFormat  dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMsg</span><span class="params">(File logFile,String msgInfo)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!logFile.exists()) &#123;</span><br><span class="line">logFile.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Writer txtWriter = <span class="keyword">new</span> FileWriter(logFile,<span class="keyword">true</span>);</span><br><span class="line">txtWriter.write(dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"\t"</span> + msgInfo + <span class="string">"\n"</span>);</span><br><span class="line">txtWriter.flush();</span><br><span class="line">txtWriter.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(exec != <span class="keyword">null</span>)&#123;</span><br><span class="line">exec.shutdown();</span><br><span class="line">logger.info(<span class="string">"file write stop ！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> LogSvr logSvr = <span class="keyword">new</span> LogSvr();</span><br><span class="line"><span class="keyword">final</span> File tmpLogFile = <span class="keyword">new</span> File(<span class="string">"pathtolog.log"</span>);</span><br><span class="line"><span class="keyword">final</span> String msgInfo = <span class="string">"test !"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动一个线程每5秒向日志文件写一次数据</span></span><br><span class="line">exec.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logSvr.logMsg(tmpLogFile, msgInfo);</span><br><span class="line"><span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">"file write error ！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Start.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pointer = <span class="number">0</span>; <span class="comment">// 文件指针位置</span></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">realtimeShowLog</span><span class="params">(<span class="keyword">final</span> File logFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"logFile can not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动一个线程每2秒读取新增的日志信息</span></span><br><span class="line">        exec.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获得变化部分</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> len = logFile.length();</span><br><span class="line">                    <span class="keyword">if</span> (len &lt; pointer) &#123;</span><br><span class="line">                        logger.info(<span class="string">"Log file was reset. Restarting logging from start of file."</span>);</span><br><span class="line">                        pointer = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//指定文件可读可写</span></span><br><span class="line">                        RandomAccessFile randomFile = <span class="keyword">new</span> RandomAccessFile(logFile, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class="line">                        logger.info(<span class="string">"RandomAccessFile文件指针的初始位置:"</span> + pointer);</span><br><span class="line"></span><br><span class="line">                        randomFile.seek(pointer);<span class="comment">//移动到文件指针位置</span></span><br><span class="line"></span><br><span class="line">                        String tmp;</span><br><span class="line">                        <span class="keyword">while</span> ((tmp = randomFile.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"info : "</span> + <span class="keyword">new</span> String(tmp.getBytes(<span class="string">"utf-8"</span>)));</span><br><span class="line">                            pointer = randomFile.getFilePointer();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        randomFile.close();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充</span></span><br><span class="line">                    logger.error(dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">" File read error, pointer: "</span> + pointer);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//将pointer 落地以便下次启动的时候，直接从指定位置获取</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exec != <span class="keyword">null</span>) &#123;</span><br><span class="line">            exec.shutdown();</span><br><span class="line">            logger.info(<span class="string">"file read stop ！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        LogView view = <span class="keyword">new</span> LogView();</span><br><span class="line">        File tmpLogFile = <span class="keyword">new</span> File(<span class="string">"pathtolog.log"</span>);</span><br><span class="line">        System.out.println(tmpLogFile.getAbsolutePath());</span><br><span class="line">        view.pointer = <span class="number">0</span>;</span><br><span class="line">        view.realtimeShowLog(tmpLogFile);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.travelsky.arch.utils;  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; is like a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;RandomAccessFile&lt;/code&gt;, but it uses a private buffer so that most</span></span><br><span class="line"><span class="comment"> * operations do not require a disk access.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note: The operations on this class are unmonitored. Also, the correct</span></span><br><span class="line"><span class="comment"> * functioning of the &lt;code&gt;RandomAccessFile&lt;/code&gt; methods that are not</span></span><br><span class="line"><span class="comment"> * overridden here relies on the implementation of those methods in the</span></span><br><span class="line"><span class="comment"> * superclass.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * To describe the above fields, we introduce the following abstractions for</span></span><br><span class="line"><span class="comment"> * the file "f":</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * len(f) the length of the file curr(f) the current position in the file</span></span><br><span class="line"><span class="comment"> * c(f) the abstract contents of the file disk(f) the contents of f's</span></span><br><span class="line"><span class="comment"> * backing disk file closed(f) true iff the file is closed</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * "curr(f)" is an index in the closed interval [0, len(f)]. "c(f)" is a</span></span><br><span class="line"><span class="comment"> * character sequence of length "len(f)". "c(f)" and "disk(f)" may differ if</span></span><br><span class="line"><span class="comment"> * "c(f)" contains unflushed writes not reflected in "disk(f)". The flush</span></span><br><span class="line"><span class="comment"> * operation has the effect of making "disk(f)" identical to "c(f)".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A file is said to be *valid* if the following conditions hold:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V1. The "closed" and "curr" fields are correct:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.closed == closed(f) f.curr == curr(f)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V2. The current position is either contained in the buffer, or just past</span></span><br><span class="line"><span class="comment"> * the buffer:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.lo &lt;= f.curr &lt;= f.hi</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V3. Any (possibly) un-flushed characters are stored in "f.buff":</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V4. For all characters not covered by V3, c(f) and disk(f) agree:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) =&gt; c(f)[i] ==</span></span><br><span class="line"><span class="comment"> * disk(f)[i])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V5. "f.dirty" is true iff the buffer contains bytes that should be</span></span><br><span class="line"><span class="comment"> * flushed to the file; by V3 and V4, only part of the buffer can be dirty.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * V6. this.maxHi == this.lo + this.buff.length</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that "f.buff" can be "null" in a valid file, since the range of</span></span><br><span class="line"><span class="comment"> * characters in V3 is empty when "f.lo == f.curr".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A file is said to be *ready* if the buffer contains the current position,</span></span><br><span class="line"><span class="comment"> * i.e., when:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * R1. !f.closed &amp;&amp; f.buff != null &amp;&amp; f.lo &lt;= f.curr &amp;&amp; f.curr &lt; f.hi</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When a file is ready, reading or writing a single byte can be performed</span></span><br><span class="line"><span class="comment"> * by reading or writing the in-memory buffer without performing a disk</span></span><br><span class="line"><span class="comment"> * operation.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * !!!This class come from network ,I just adjust code style!!!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaofeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018 -05-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedRandomAccessFile</span> <span class="keyword">extends</span> <span class="title">RandomAccessFile</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 64K buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOG_BUFF_SZ = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFF_SZ = (<span class="number">1</span> &lt;&lt; LOG_BUFF_SZ);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BUFF_MASK = ~(((<span class="keyword">long</span>) BUFF_SZ) - <span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">private</span> String path_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation is based on the buffer implementation in Modula-3's</span></span><br><span class="line"><span class="comment">     * "Rd", "Wr", "RdClass", and "WrClass" interfaces.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * true iff un-flushed bytes exist</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> dirty_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dirty_ can be cleared by e.g. seek, so track sync separately</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> syncNeeded_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * current position in file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> curr_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bounds on characters in "buff"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lo_, hi_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * local buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] buff_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * this.lo + this.buff.length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxHi_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * buffer contains last file block?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hitEOF_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * disk position</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> diskPos_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on &lt;code&gt;file&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * in mode &lt;code&gt;mode&lt;/code&gt;, which should be "r" for reading only, or</span></span><br><span class="line"><span class="comment">     * "rw" for reading and writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(File file, String mode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(file, mode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Buffered random access file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size the size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(File file, String mode, <span class="keyword">int</span> size)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(file, mode);</span><br><span class="line">        path_ = file.getAbsolutePath();</span><br><span class="line">        <span class="keyword">this</span>.init(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on the file named</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;name&lt;/code&gt; in mode &lt;code&gt;mode&lt;/code&gt;, which should be "r" for</span></span><br><span class="line"><span class="comment">     * reading only, or "rw" for reading and writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(String name, String mode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, mode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Buffered random access file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode the mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size the size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException the file not found exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedRandomAccessFile</span><span class="params">(String name, String mode, <span class="keyword">int</span> size)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mode);</span><br><span class="line">        path_ = name;</span><br><span class="line">        <span class="keyword">this</span>.init(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dirty_ = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.lo_ = <span class="keyword">this</span>.curr_ = <span class="keyword">this</span>.hi_ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.buff_ = (size &gt; BUFF_SZ) ? <span class="keyword">new</span> <span class="keyword">byte</span>[size] : <span class="keyword">new</span> <span class="keyword">byte</span>[BUFF_SZ];</span><br><span class="line">        <span class="keyword">this</span>.maxHi_ = (<span class="keyword">long</span>) BUFF_SZ;</span><br><span class="line">        <span class="keyword">this</span>.hitEOF_ = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.diskPos_ = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sync.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (syncNeeded_) &#123;</span><br><span class="line">            flush();</span><br><span class="line">            getChannel().force(<span class="keyword">true</span>);</span><br><span class="line">            syncNeeded_ = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flush();</span><br><span class="line">        <span class="keyword">this</span>.buff_ = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush any bytes in the file's buffer that have not yet been written to</span></span><br><span class="line"><span class="comment">     * disk. If the file was created read-only, this method is a no-op.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException the io exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush any dirty bytes in the buffer to disk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dirty_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.diskPos_ != <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">                <span class="keyword">super</span>.seek(<span class="keyword">this</span>.lo_);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> len = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">            <span class="keyword">super</span>.write(<span class="keyword">this</span>.buff_, <span class="number">0</span>, len);</span><br><span class="line">            <span class="keyword">this</span>.diskPos_ = <span class="keyword">this</span>.curr_;</span><br><span class="line">            <span class="keyword">this</span>.dirty_ = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read at most "this.buff.length" bytes into "this.buff", returning the</span></span><br><span class="line"><span class="comment">     * number of bytes read. If the return result is less than</span></span><br><span class="line"><span class="comment">     * "this.buff.length", then EOF was read.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fillBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rem = <span class="keyword">this</span>.buff_.length;</span><br><span class="line">        <span class="keyword">while</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">super</span>.read(<span class="keyword">this</span>.buff_, cnt, rem);</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += n;</span><br><span class="line">            rem -= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((cnt &lt; <span class="number">0</span>) &amp;&amp; (<span class="keyword">this</span>.hitEOF_ = (cnt &lt; <span class="keyword">this</span>.buff_.length))) &#123;</span><br><span class="line">            <span class="comment">// make sure buffer that wasn't read is initialized with -1</span></span><br><span class="line">            Arrays.fill(<span class="keyword">this</span>.buff_, cnt, <span class="keyword">this</span>.buff_.length, (<span class="keyword">byte</span>) <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.diskPos_ += cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method positions &lt;code&gt;this.curr&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     * If &lt;code&gt;pos&lt;/code&gt; does not fall in the current buffer, it flushes the</span></span><br><span class="line"><span class="comment">     * current buffer and loads the correct one.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * On exit from this routine &lt;code&gt;this.curr == this.hi&lt;/code&gt; iff &lt;code&gt;pos&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * is at or past the end-of-file, which can only happen if the file was</span></span><br><span class="line"><span class="comment">     * opened in read-only mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seek</span><span class="params">(<span class="keyword">long</span> pos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= <span class="keyword">this</span>.hi_ || pos &lt; <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">            <span class="comment">// seeking outside of current buffer -- flush and read</span></span><br><span class="line">            <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">            <span class="keyword">this</span>.lo_ = pos &amp; BUFF_MASK; <span class="comment">// start at BuffSz boundary</span></span><br><span class="line">            <span class="keyword">this</span>.maxHi_ = <span class="keyword">this</span>.lo_ + (<span class="keyword">long</span>) <span class="keyword">this</span>.buff_.length;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.diskPos_ != <span class="keyword">this</span>.lo_) &#123;</span><br><span class="line">                <span class="keyword">super</span>.seek(<span class="keyword">this</span>.lo_);</span><br><span class="line">                <span class="keyword">this</span>.diskPos_ = <span class="keyword">this</span>.lo_;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">this</span>.fillBuffer();</span><br><span class="line">            <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.lo_ + (<span class="keyword">long</span>) n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// seeking inside current buffer -- no read required</span></span><br><span class="line">            <span class="keyword">if</span> (pos &lt; <span class="keyword">this</span>.curr_) &#123;</span><br><span class="line">                <span class="comment">// if seeking backwards, we must flush to maintain V4</span></span><br><span class="line">                <span class="keyword">this</span>.flushBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.curr_ = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFilePointer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.curr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="keyword">this</span>.curr_, <span class="keyword">super</span>.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (readEnd()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span> res = <span class="keyword">this</span>.buff_[(<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_)];</span><br><span class="line">        <span class="keyword">this</span>.curr_++;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="keyword">int</span>) res) &amp; <span class="number">0xFF</span>; <span class="comment">// convert byte -&gt; int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (readEnd()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.min(len, (<span class="keyword">int</span>) (<span class="keyword">this</span>.hi_ - <span class="keyword">this</span>.curr_));</span><br><span class="line">        <span class="keyword">int</span> buffOff = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.buff_, buffOff, b, off, len);</span><br><span class="line">        <span class="keyword">this</span>.curr_ += len;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readEnd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="comment">// test for EOF</span></span><br><span class="line">            <span class="comment">// if (this.hi &lt; this.maxHi) return -1;</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// slow path -- read another buffer</span></span><br><span class="line">            <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_ &amp;&amp; <span class="keyword">this</span>.hi_ &lt; <span class="keyword">this</span>.maxHi_) &#123;</span><br><span class="line">                <span class="comment">// at EOF -- bump "hi"</span></span><br><span class="line">                <span class="keyword">this</span>.hi_++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// slow path -- write current buffer; read next one</span></span><br><span class="line">                <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                    <span class="comment">// appending to EOF -- bump "hi"</span></span><br><span class="line">                    <span class="keyword">this</span>.hi_++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.buff_[(<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_)] = (<span class="keyword">byte</span>) b;</span><br><span class="line">        <span class="keyword">this</span>.curr_++;</span><br><span class="line">        <span class="keyword">this</span>.dirty_ = <span class="keyword">true</span>;</span><br><span class="line">        syncNeeded_ = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.write(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">this</span>.writeAtMost(b, off, len);</span><br><span class="line">            off += n;</span><br><span class="line">            len -= n;</span><br><span class="line">            <span class="keyword">this</span>.dirty_ = <span class="keyword">true</span>;</span><br><span class="line">            syncNeeded_ = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write at most "len" bytes to "b" starting at position "off", and return</span></span><br><span class="line"><span class="comment">     * the number of bytes written.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">writeAtMost</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ &gt;= <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hitEOF_ &amp;&amp; <span class="keyword">this</span>.hi_ &lt; <span class="keyword">this</span>.maxHi_) &#123;</span><br><span class="line">                <span class="comment">// at EOF -- bump "hi"</span></span><br><span class="line">                <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.maxHi_;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// slow path -- write current buffer; read next one</span></span><br><span class="line">                <span class="keyword">this</span>.seek(<span class="keyword">this</span>.curr_);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.curr_ == <span class="keyword">this</span>.hi_) &#123;</span><br><span class="line">                    <span class="comment">// appending to EOF -- bump "hi"</span></span><br><span class="line">                    <span class="keyword">this</span>.hi_ = <span class="keyword">this</span>.maxHi_;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.min(len, (<span class="keyword">int</span>) (<span class="keyword">this</span>.hi_ - <span class="keyword">this</span>.curr_));</span><br><span class="line">        <span class="keyword">int</span> buffOff = (<span class="keyword">int</span>) (<span class="keyword">this</span>.curr_ - <span class="keyword">this</span>.lo_);</span><br><span class="line">        System.arraycopy(b, off, <span class="keyword">this</span>.buff_, buffOff, len);</span><br><span class="line">        <span class="keyword">this</span>.curr_ += len;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;需求&lt;/code&gt;：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;运用的技术&lt;/code&gt;：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;思想&lt;/code&gt;：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模拟写日志的类&lt;br&gt;因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程读写HashMap遇到的坑</title>
    <link href="http://kunxiang.wang/2019/03/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%BB%E5%86%99HashMap%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://kunxiang.wang/2019/03/29/Java多线程读写HashMap遇到的坑/</id>
    <published>2019-03-29T06:55:09.000Z</published>
    <updated>2019-03-29T06:55:09.897Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python中如何表示正负无穷大</title>
    <link href="http://kunxiang.wang/2019/03/15/Python%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E6%AD%A3%E8%B4%9F%E6%97%A0%E7%A9%B7%E5%A4%A7/"/>
    <id>http://kunxiang.wang/2019/03/15/Python中如何表示正负无穷大/</id>
    <published>2019-03-15T08:12:43.000Z</published>
    <updated>2019-03-15T08:17:59.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cmath-inf"><a href="#cmath-inf" class="headerlink" title="cmath.inf"></a>cmath.inf</h4><p>Floating-point positive infinity. Equivalent to <code>float(&#39;inf&#39;)</code>.<br>负无穷-float(‘-inf’)</p><p>New in version 3.6.</p><a id="more"></a><h4 id="cmath-pi"><a href="#cmath-pi" class="headerlink" title="cmath.pi"></a>cmath.pi</h4><p>The mathematical constant π, as a float.</p><h4 id="cmath-e"><a href="#cmath-e" class="headerlink" title="cmath.e"></a>cmath.e</h4><p>The mathematical constant e, as a float.</p><h4 id="cmath-tau"><a href="#cmath-tau" class="headerlink" title="cmath.tau"></a>cmath.tau</h4><p>The mathematical constant τ, as a float.</p><p>New in version 3.6.</p><h4 id="cmath-infj"><a href="#cmath-infj" class="headerlink" title="cmath.infj"></a>cmath.infj</h4><p>Complex number with zero real part and positive infinity imaginary part. Equivalent to <code>complex(0.0, float(&#39;inf&#39;))</code>.</p><p>New in version 3.6.</p><h4 id="cmath-nan"><a href="#cmath-nan" class="headerlink" title="cmath.nan"></a>cmath.nan</h4><p>A floating-point “not a number” (NaN) value. Equivalent to <code>float(&#39;nan&#39;)</code>.</p><p>New in version 3.6.</p><h4 id="cmath-nanj"><a href="#cmath-nanj" class="headerlink" title="cmath.nanj"></a>cmath.nanj</h4><p>Complex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float(‘nan’)).</p><p>New in version 3.6.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;cmath-inf&quot;&gt;&lt;a href=&quot;#cmath-inf&quot; class=&quot;headerlink&quot; title=&quot;cmath.inf&quot;&gt;&lt;/a&gt;cmath.inf&lt;/h4&gt;&lt;p&gt;Floating-point positive infinity. Equivalent to &lt;code&gt;float(&amp;#39;inf&amp;#39;)&lt;/code&gt;.&lt;br&gt;负无穷-float(‘-inf’)&lt;/p&gt;
&lt;p&gt;New in version 3.6.&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>进程地址空间</title>
    <link href="http://kunxiang.wang/2019/02/21/%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/"/>
    <id>http://kunxiang.wang/2019/02/21/进程地址空间/</id>
    <published>2019-02-21T13:32:36.000Z</published>
    <updated>2019-02-21T13:33:14.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="process address space.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="操作系统" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="多任务处理" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    
    
      <category term="操作系统" scheme="http://kunxiang.wang/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>异常的分类</title>
    <link href="http://kunxiang.wang/2019/02/20/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2019/02/20/异常的分类/</id>
    <published>2019-02-20T07:24:54.000Z</published>
    <updated>2019-02-20T08:03:36.280Z</updated>
    
    <content type="html"><![CDATA[<p>异常可以分为四类：<code>中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)</code>.</p><table><thead><tr><th>类别</th><th>原因</th><th>异步/同步</th><th>返回行为</th></tr></thead><tbody><tr><td>中断</td><td>来自I/O设备的信号</td><td>异步</td><td>总是返回下一条指令</td></tr><tr><td>陷阱</td><td>有意的异常</td><td>同步</td><td>总是返回下一条指令</td></tr><tr><td>故障</td><td>潜在可恢复的错误</td><td>同步</td><td>可能返回到当前指令</td></tr><tr><td>终止</td><td>不可恢复的错误</td><td>同步</td><td>不会返回</td></tr></tbody></table><p>异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。</p><a id="more"></a><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。</p><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p><code>陷阱</code>最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做<code>系统调用</code><br>从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在<code>用户模式</code>中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在<code>内核模式</code>中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。</p><h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><p>故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。</p><p>一个经典的故障示例是<code>缺页异常</code>，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。</p><h2 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h2><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。</p><hr><p>参考资料：《深入理解计算机系统》第三版P504</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常可以分为四类：&lt;code&gt;中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;th&gt;异步/同步&lt;/th&gt;
&lt;th&gt;返回行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中断&lt;/td&gt;
&lt;td&gt;来自I/O设备的信号&lt;/td&gt;
&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;总是返回下一条指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;陷阱&lt;/td&gt;
&lt;td&gt;有意的异常&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;总是返回下一条指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;故障&lt;/td&gt;
&lt;td&gt;潜在可恢复的错误&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;可能返回到当前指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;终止&lt;/td&gt;
&lt;td&gt;不可恢复的错误&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;不会返回&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://kunxiang.wang/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://kunxiang.wang/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>布尔环</title>
    <link href="http://kunxiang.wang/2019/02/15/%E5%B8%83%E5%B0%94%E7%8E%AF/"/>
    <id>http://kunxiang.wang/2019/02/15/布尔环/</id>
    <published>2019-02-15T02:07:21.000Z</published>
    <updated>2019-02-15T02:19:32.592Z</updated>
    
    <content type="html"><![CDATA[<p>布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)<code>-x</code>, 使得<code>x+(-x)=0</code>。布尔环也有类似的属性，这里的加法运算时<code>^</code>,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，<code>a^a=0</code>, 这里用0表示全0的位向量。</p><p>相同道理还有一个有意思的属性，即<code>(a^b)^a=b</code>，该属性可以用来交换两个元素的值，而不需要第三方变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)&lt;code&gt;-x&lt;/code&gt;, 使得&lt;code&gt;x+(-x)=0&lt;/code&gt;。布尔环也有类似的属性，这里的加法运算时&lt;code&gt;^&lt;/code&gt;,不过这时
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://kunxiang.wang/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>搭建Git服务器的一种方法</title>
    <link href="http://kunxiang.wang/2019/02/11/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://kunxiang.wang/2019/02/11/搭建Git服务器的一种方法/</id>
    <published>2019-02-11T05:43:13.000Z</published>
    <updated>2019-02-11T06:11:23.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-确保自己的服务器上安装有Git和ssh"><a href="#1-确保自己的服务器上安装有Git和ssh" class="headerlink" title="1. 确保自己的服务器上安装有Git和ssh"></a>1. 确保自己的服务器上安装有Git和ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ssh</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="2-配置git用户"><a href="#2-配置git用户" class="headerlink" title="2. 配置git用户"></a>2. 配置git用户</h3><h4 id="新建git用户"><a href="#新建git用户" class="headerlink" title="新建git用户"></a>新建git用户</h4><p>主要是为了让大家在上传代码时登录使用，一般使用：git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="配置git用户的ssh登录"><a href="#配置git用户的ssh登录" class="headerlink" title="配置git用户的ssh登录"></a>配置git用户的ssh登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git    //进入git用户文件夹</span><br><span class="line">sudo mkdir .ssh    //创建 .ssh 文件夹</span><br><span class="line">sudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥</span><br></pre></td></tr></table></figure><p><code>authorized_keys</code> 是公钥保存文件，<code>客户端的私钥</code>与<code>服务器的公钥</code>配对成功，则可以登录。<code>之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）</code>。</p><p>客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 <code>pub</code> 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用<code>ssh-keygen</code>命令生成后复制粘贴即可。</p><h3 id="3-初始化裸仓库来保存项目"><a href="#3-初始化裸仓库来保存项目" class="headerlink" title="3. 初始化裸仓库来保存项目"></a>3. 初始化裸仓库来保存项目</h3><p>在<code>/home/git</code>下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos</span><br><span class="line"><span class="built_in">cd</span> repos    //进入repos文件夹</span><br><span class="line">sudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample</span><br></pre></td></tr></table></figure></p><p>repos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。</p><ol><li><p>如果本地没有初始代码，可以直接从服务器克隆仓库到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:repos/sample.git</span><br></pre></td></tr></table></figure><p>git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。</p></li><li><p>如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init    //创建git仓库</span><br><span class="line">git add .    //添加所有文件</span><br><span class="line">git commit -m <span class="string">"your remark"</span>    //将代码提交到本地仓库</span><br><span class="line">git remote add origin git@server:repos/sample.git    //添加远程仓库地址</span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支</span><br></pre></td></tr></table></figure></li></ol><p>有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-确保自己的服务器上安装有Git和ssh&quot;&gt;&lt;a href=&quot;#1-确保自己的服务器上安装有Git和ssh&quot; class=&quot;headerlink&quot; title=&quot;1. 确保自己的服务器上安装有Git和ssh&quot;&gt;&lt;/a&gt;1. 确保自己的服务器上安装有Git和ssh&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-配置git用户&quot;&gt;&lt;a href=&quot;#2-配置git用户&quot; class=&quot;headerlink&quot; title=&quot;2. 配置git用户&quot;&gt;&lt;/a&gt;2. 配置git用户&lt;/h3&gt;&lt;h4 id=&quot;新建git用户&quot;&gt;&lt;a href=&quot;#新建git用户&quot; class=&quot;headerlink&quot; title=&quot;新建git用户&quot;&gt;&lt;/a&gt;新建git用户&lt;/h4&gt;&lt;p&gt;主要是为了让大家在上传代码时登录使用，一般使用：git&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adduser git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://kunxiang.wang/categories/Git/"/>
    
    
      <category term="Git" scheme="http://kunxiang.wang/tags/Git/"/>
    
      <category term="Github" scheme="http://kunxiang.wang/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Python中如何生成一定格式的日期字符串</title>
    <link href="http://kunxiang.wang/2018/12/03/Python%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E4%B8%80%E5%AE%9A%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://kunxiang.wang/2018/12/03/Python中如何生成一定格式的日期字符串/</id>
    <published>2018-12-03T08:20:56.000Z</published>
    <updated>2018-12-03T08:28:40.358Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timeStamp = time.time()</span><br><span class="line">timeArray = time.localtime(time.time())</span><br><span class="line">print(timeArray)</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">formatTime = time.strftime(<span class="string">"%Y%m%d-%H:%M:%S"</span>, timeArray)</span><br><span class="line">print(formatTime)</span><br><span class="line"><span class="comment"># 20181203-16:23:55</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Python中append和extend效率</title>
    <link href="http://kunxiang.wang/2018/11/27/Python%E4%B8%ADappend%E5%92%8Cextend%E6%95%88%E7%8E%87/"/>
    <id>http://kunxiang.wang/2018/11/27/Python中append和extend效率/</id>
    <published>2018-11-27T07:29:14.000Z</published>
    <updated>2018-11-27T07:58:02.098Z</updated>
    
    <content type="html"><![CDATA[<p>python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用<code>data.extend(other)</code>的输出结果与以下代码的输出结果相同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> other:</span><br><span class="line">    data.append(elem)</span><br></pre></td></tr></table></figure></p><p>在任何情况下，运行时间都正比于另一张列表的长度，并且之所以<code>摊销</code>，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。</p><p>在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：</p><ol><li>首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行</li><li>与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。</li><li><code>extend提升的效率来源更新列表的最终大小能提前计算出。</code>例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。</li></ol><a id="more"></a><p>我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在<br>实际效率上会有不同。</p><p>在python中经常使用一个诸如<code>squares = [k*k for k in range(1, n+1)]</code>的例子作为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line">    squares.append(k*k)</span><br></pre></td></tr></table></figure></p><p>的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。</p><p>类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如<code>[0]*100</code>生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用&lt;code&gt;data.extend(other)&lt;/code&gt;的输出结果与以下代码的输出结果相同。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; other:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data.append(elem)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在任何情况下，运行时间都正比于另一张列表的长度，并且之所以&lt;code&gt;摊销&lt;/code&gt;，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。&lt;/p&gt;
&lt;p&gt;在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行&lt;/li&gt;
&lt;li&gt;与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend提升的效率来源更新列表的最终大小能提前计算出。&lt;/code&gt;例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://kunxiang.wang/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://kunxiang.wang/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>IP地址的分类</title>
    <link href="http://kunxiang.wang/2018/11/07/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/11/07/IP地址的分类/</id>
    <published>2018-11-07T11:43:34.000Z</published>
    <updated>2018-11-07T12:10:20.810Z</updated>
    
    <content type="html"><![CDATA[<p>IP地址分类（A类 B类 C类 D类 E类）</p><p>IP地址由两部分组成，即<code>网络地址</code>和<code>主机地址</code>。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。</p><p>IP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。</p><p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    <code>全0和全1的都保留不用</code>。</p><ul><li><p>A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）</p><p>   第一个字节为网络号，后三个字节为主机号。<code>该类IP地址的最前面为“0”</code>，所以地址的网络号取值于1~126之间。</p><p>   一般用于大型网络。</p></li><li><p>B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）</p><p>   前两个字节为网络号，后两个字节为主机号。<code>该类IP地址的最前面为“10”</code>，所以地址的网络号取值于128~191之间。</p><p>   一般用于中等规模网络。</p></li><li><p>C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）</p><p>   前三个字节为网络号，最后一个字节为主机号。<code>该类IP地址的最前面为“110”</code>，所以地址的网络号取值于192~223之间。</p><p>   一般用于小型网络。</p></li><li><p>D类：是<code>多播地址</code>。<code>该类IP地址的最前面为“1110”</code>，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p></li><li><p>E类：是<code>保留地址</code>。<code>该类IP地址的最前面为“1111”</code>，所以地址的网络号取值于240~255之间。</p></li></ul><p>回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 </p><p>一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IP地址分类（A类 B类 C类 D类 E类）&lt;/p&gt;
&lt;p&gt;IP地址由两部分组成，即&lt;code&gt;网络地址&lt;/code&gt;和&lt;code&gt;主机地址&lt;/code&gt;。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。&lt;/p&gt;
&lt;p&gt;IP地址
      
    
    </summary>
    
      <category term="网络" scheme="http://kunxiang.wang/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://kunxiang.wang/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://kunxiang.wang/2018/11/05/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://kunxiang.wang/2018/11/05/Java内部类/</id>
    <published>2018-11-05T04:59:24.000Z</published>
    <updated>2018-11-05T05:23:13.566Z</updated>
    
    <content type="html"><![CDATA[<p>类中的定义成员有三种，分别是</p><ol><li>字段</li><li>方法</li><li>内部类</li></ol><p>内部类：定义在类结构中的另一个类</p><p><code>为什么要使用内部类？</code></p><ol><li>增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类</li><li>内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。</li><li>内部类可以直接访问外部类的成员</li></ol><a id="more"></a><p>内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:</p><ol><li>实例内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类（仅适合于一次使用的类）</li></ol><table><thead><tr><th></th><th>实例内部类</th><th>静态内部类</th><th>局部内部类</th></tr></thead><tbody><tr><td>主要特征</td><td>内部类的实例引用特定的外部类的实例</td><td>内部类的实例不与外部类的任何实例关联</td><td>可见范围是所在的方法</td></tr><tr><td>可用修饰符</td><td>访问控制修饰符，abstract，final</td><td>访问控制修饰符，static，abstract，final</td><td>abstract，final</td></tr><tr><td>可以访问外部类的哪些成员</td><td>可以直接访问外部类的所有成员</td><td>只能直接访问外部类的静态成员</td><td>可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数</td></tr><tr><td>拥有成员类型</td><td>只能拥有实例成员</td><td>可以拥有静态成员和实例成员</td><td>只能拥有实例成员</td></tr><tr><td>外部类如何访问内部类的成员</td><td>必须通过内部类的实例来访问</td><td>对于静态成员，可以通过内部类的完整类名来访问</td><td>必须通过内部类的实例来访问</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类中的定义成员有三种，分别是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字段&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;内部类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内部类：定义在类结构中的另一个类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;为什么要使用内部类？&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类&lt;/li&gt;
&lt;li&gt;内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。&lt;/li&gt;
&lt;li&gt;内部类可以直接访问外部类的成员&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kunxiang.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kunxiang.wang/tags/Java/"/>
    
  </entry>
  
</feed>
