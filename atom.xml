<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quentin&#39;s Blog</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-08T15:41:39.469Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ByiProX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>明天新的一天</title>
    <link href="http://yoursite.com/2018/04/08/%E6%98%8E%E5%A4%A9%E6%96%B0%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2018/04/08/明天新的一天/</id>
    <published>2018-04-08T15:24:11.000Z</published>
    <updated>2018-04-08T15:41:39.469Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上跟HR提交了辞职，然后就是跟HR聊工作以及去向的问题。我明确提出了离职的原因——工资太低。然后就是HR说可以申请提高薪水。我也没有那么傻，既然都提出离职了，我留下来工作怎么做，简直就是给自己挖坑呀。</p><p>对了，我还在好奇为什么富海那边给的工资那么少，至少得调查一下当前北京应届毕业生的薪资水平吧。讲真，这个工资实习生差不多都可以拿到吧。今天HR跟高总讲了我离职的事情，我也听到了高总在那边碎碎念，说什么龚老师的学生又要走了。我为什么走您不好好考虑一下？说真的，我不觉得高总是一个好老板，面试了这么多公司，富海的体验不是很好，面试过程很令人尴尬。</p><p>明天就可以去新公司上班了，虽然是实习，但内心也是开心的，年轻人多，交流成本比较低。最重要的是做自己喜欢做的工作。准备睡觉，明天去独到科技学习新知识喽，逃~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天早上跟HR提交了辞职，然后就是跟HR聊工作以及去向的问题。我明确提出了离职的原因——工资太低。然后就是HR说可以申请提高薪水。我也没有那么傻，既然都提出离职了，我留下来工作怎么做，简直就是给自己挖坑呀。&lt;/p&gt;
&lt;p&gt;对了，我还在好奇为什么富海那边给的工资那么少，至少得
      
    
    </summary>
    
    
      <category term="成长日记" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3 解包和压包</title>
    <link href="http://yoursite.com/2018/04/06/Python3-%E8%A7%A3%E5%8C%85%E5%92%8C%E5%8E%8B%E5%8C%85/"/>
    <id>http://yoursite.com/2018/04/06/Python3-解包和压包/</id>
    <published>2018-04-06T15:31:01.000Z</published>
    <updated>2018-04-06T17:14:14.402Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。</p><h2 id="可迭代对象每个元素赋值给一个变量"><a href="#可迭代对象每个元素赋值给一个变量" class="headerlink" title="可迭代对象每个元素赋值给一个变量"></a><strong>可迭代对象每个元素赋值给一个变量</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, age, date = [<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="string">'2018-1-1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date</span><br><span class="line"><span class="string">'2018-1-1'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = enumerate([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">0</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="星号”-”的使用—解包"><a href="#星号”-”的使用—解包" class="headerlink" title="星号”*”的使用—解包"></a><strong>星号”*”的使用—解包</strong></h2><p>比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>small, *new, big = sorted([<span class="number">93</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">55</span>,<span class="number">99</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new</span><br><span class="line">[<span class="number">33</span>, <span class="number">55</span>, <span class="number">93</span>]</span><br></pre></td></tr></table></figure></p><h2 id="压包与解包"><a href="#压包与解包" class="headerlink" title="压包与解包"></a><strong>压包与解包</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> zip(a, b):</span><br><span class="line">    print(i+j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>分析以上代码：</p><ol><li>zip函数将a, b压包程一个可迭代对象</li><li>对可迭代对象的每一个元素（(‘a’, 1)）进行解包（i, j = (‘a’, 1)）</li><li>接下来可以分别调用i, j变量进行计算</li></ol><p>再举一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    (<span class="string">'Bob'</span>, <span class="string">'1991'</span>, <span class="string">'60'</span>),</span><br><span class="line">    (<span class="string">'Bill'</span>, <span class="string">'1992'</span>, <span class="string">'65'</span>),</span><br><span class="line">    (<span class="string">'Mike'</span>, <span class="string">'1993'</span>, <span class="string">'70'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> name, *args <span class="keyword">in</span> l:</span><br><span class="line">    print(name, args)</span><br><span class="line"></span><br><span class="line">Bob [<span class="string">'1991'</span>, <span class="string">'60'</span>]</span><br><span class="line">Bill [<span class="string">'1992'</span>, <span class="string">'65'</span>]</span><br><span class="line">Mike [<span class="string">'1993'</span>, <span class="string">'70'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="“-”的用法"><a href="#“-”的用法" class="headerlink" title="“_”的用法"></a><strong>“_”的用法</strong></h2><p>当一些变量不用时，用<code>_</code>表示是更好的写法，可以让读代码的人知道这个元素是不要的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = (<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="number">50</span>, (<span class="number">11</span>,<span class="number">20</span>,<span class="number">2000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, *_, (*_, year) = p</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year</span><br><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure></p><h2 id="多变量同时赋值"><a href="#多变量同时赋值" class="headerlink" title="多变量同时赋值"></a><strong>多变量同时赋值</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>下面用法都会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*a = <span class="number">1</span>, <span class="number">3</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><code>但是这种写法是可以的</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>*a, = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><h2 id="“-”之可变参数"><a href="#“-”之可变参数" class="headerlink" title="“*”之可变参数"></a><strong>“*”之可变参数</strong></h2><p>函数定义时，我们使用*的可变参数，其实也是压包解包过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>参数用<em>num表示，num变量就可以当成元组调用了。<br>其实这个过程相当于</em>num, = 1,2,5,6</p><h2 id="“-”之关键字参数"><a href="#“-”之关键字参数" class="headerlink" title="“*”之关键字参数"></a><strong>“*”之关键字参数</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(name = <span class="string">'Bob'</span>, age = <span class="number">10</span>, weight = <span class="number">60</span>)</span><br><span class="line">&#123;<span class="string">'name'</span> = <span class="string">'Bob'</span>, <span class="string">'age'</span> = <span class="number">10</span>, <span class="string">'weight'</span> = <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure><p>键值对传入**kw，kw就可以表示相应字典。</p><p><code>**</code>的用法只在函数定义中使用，<code>不能这样使用</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, **b = &#123;<span class="string">'name'</span> = <span class="string">'Bob'</span>, <span class="string">'age'</span> = <span class="number">10</span>, <span class="string">'weight'</span> = <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="可变参数与关键字参数的细节问题"><a href="#可变参数与关键字参数的细节问题" class="headerlink" title="可变参数与关键字参数的细节问题"></a><strong>可变参数与关键字参数的细节问题</strong></h2><h3 id="函数传入实参时，可变参数-之前的参数不能指定参数名"><a href="#函数传入实参时，可变参数-之前的参数不能指定参数名" class="headerlink" title="函数传入实参时，可变参数*之前的参数不能指定参数名"></a>函数传入实参时，可变参数<code>*</code>之前的参数不能指定参数名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">File <span class="string">"&lt;ipython-input-17-978eea76866e&gt;"</span>, line <span class="number">1</span></span><br><span class="line">  func(a=<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">           ^</span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中"><a href="#函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中" class="headerlink" title="函数传入实参时，可变参数*之后的参数必须指定参数名，否则就会被归到可变参数之中"></a>函数传入实参时，可变参数<code>*</code>之后的参数必须指定参数名，否则就会被归到可变参数之中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b, c = None)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,c=<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*, a, b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a = <span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来</p><h3 id="关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以"><a href="#关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以" class="headerlink" title="关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以"></a>关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b, c, **d)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,c=<span class="number">4</span>,m=<span class="number">5</span>,n=<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&#123;<span class="string">'m'</span>: <span class="number">5</span>, <span class="string">'n'</span>:<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数与关键词参数共同使用以表示任意参数"><a href="#可变参数与关键词参数共同使用以表示任意参数" class="headerlink" title="可变参数与关键词参数共同使用以表示任意参数"></a><code>可变参数与关键词参数共同使用以表示任意参数</code></h3><p>下面是这一点在装饰器当中的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'i am using a decorator'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@mydecorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(<span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line">i am using a decorator</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>wrapper函数使用<code>*args</code>, <code>**kw</code>作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用<code>*args</code>, <code>**kw</code>完全没有问题。</p><h2 id="解包作为参数传入函数中"><a href="#解包作为参数传入函数中" class="headerlink" title="解包作为参数传入函数中"></a>解包作为参数传入函数中</h2><p>首先定义一个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br></pre></td></tr></table></figure></p><p>列表|元组的解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*n)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>字典的解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(**mydict)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*mydict)</span><br><span class="line"><span class="string">'ab'</span></span><br></pre></td></tr></table></figure></p><p>一个简单的应用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Bob = &#123;<span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;name&#125;'s age is &#123;age&#125;"</span>.format(**Bob)</span><br><span class="line"><span class="string">"Bob's age is 20"</span></span><br></pre></td></tr></table></figure></p><h2 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h2><p>下面过程也涉及到了解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a+<span class="number">1</span>, b+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m,n = myfun(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>其本身是一个元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = myfun(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。&lt;/p&gt;
&lt;h2 id=&quot;可迭代对象每个元素赋值给一个变量&quot;&gt;&lt;a href=&quot;#可迭代对象每个元素赋值给一个变量&quot; class=&quot;headerlink&quot; title=&quot;可迭代对象每个元素赋值给一个变量&quot;&gt;&lt;/a&gt;&lt;strong&gt;可迭代对象每个元素赋值给一个变量&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name, age, date = [&lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2018-1-1&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;2018-1-1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = enumerate([&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;.items()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;.values()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = (x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>北京落户要看专业？？？</title>
    <link href="http://yoursite.com/2018/03/30/%E5%8C%97%E4%BA%AC%E8%90%BD%E6%88%B7%E8%A6%81%E7%9C%8B%E4%B8%93%E4%B8%9A%EF%BC%9F%EF%BC%9F%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/30/北京落户要看专业？？？/</id>
    <published>2018-03-30T15:36:06.000Z</published>
    <updated>2018-03-30T15:39:48.408Z</updated>
    
    <content type="html"><![CDATA[<p>本来想转行去互联网公司（进了终面了），顺便可以那个户口，一举两得多美好啊。然鹅，HR告诉我说（出于好意），北京落户需要看专业，如果不是计算机专业的话落户有点悬。</p><p>我本科、硕士都干了些啥啊！！！</p><p>突然无比讨厌我这个专业。。。<br>无fuck说！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来想转行去互联网公司（进了终面了），顺便可以那个户口，一举两得多美好啊。然鹅，HR告诉我说（出于好意），北京落户需要看专业，如果不是计算机专业的话落户有点悬。&lt;/p&gt;
&lt;p&gt;我本科、硕士都干了些啥啊！！！&lt;/p&gt;
&lt;p&gt;突然无比讨厌我这个专业。。。&lt;br&gt;无fuck说！&lt;
      
    
    </summary>
    
    
      <category term="成长日记" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3 对象操作的时间复杂度总结</title>
    <link href="http://yoursite.com/2018/03/29/Python3-%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/29/Python3-对象操作的时间复杂度总结/</id>
    <published>2018-03-29T11:27:04.000Z</published>
    <updated>2018-03-29T12:11:59.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。</p><table><thead><tr><th>Operation</th><th>Average Case</th><th><a href="http://en.wikipedia.org/wiki/Amortized_analysis" target="_blank" rel="noopener">Amortized Worst Case</a></th></tr></thead><tbody><tr><td>Copy</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Append[1]</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Pop last</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Pop intermediate</td><td>O(k)</td><td>O(k)</td></tr><tr><td>Insert</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Item</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Set Item</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Delete Item</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Iteration</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Slice</td><td>O(k)</td><td>O(k)</td></tr><tr><td>Del Slice</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Set Slice</td><td>O(k+n)</td><td>O(k+n)</td></tr><tr><td>Extend[1]</td><td>O(k)</td><td>O(k)</td></tr><tr><td><a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt" target="_blank" rel="noopener">Sort</a></td><td>O(n log n)</td><td>O(n log n)</td></tr><tr><td>Multiply</td><td>O(nk)</td><td>O(nk)</td></tr><tr><td>x in s</td><td>O(n)</td><td></td></tr><tr><td>min(s), max(s)</td><td>O(n)</td><td></td></tr><tr><td>Get Length</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><a id="more"></a><h2 id="双向队列-collections-deque"><a href="#双向队列-collections-deque" class="headerlink" title="双向队列 collections.deque"></a>双向队列 collections.deque</h2><p>deque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。</p><table><thead><tr><th style="text-align:center"><strong>操作</strong></th><th style="text-align:center"><strong>平均情况</strong></th><th style="text-align:center"><strong>最坏情况</strong></th></tr></thead><tbody><tr><td style="text-align:center">复制</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">append</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">appendleft</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">pop</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">popleft</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">extend</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">extendleft</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">rotate</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">remove</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td></tr></tbody></table><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h2><table><thead><tr><th><strong>Operation</strong></th><th><strong>Average case</strong></th><th><strong>Worst Case</strong></th><th><strong>notes</strong></th></tr></thead><tbody><tr><td>x in s</td><td>O(1)</td><td>O(n)</td><td></td></tr><tr><td>Union s\</td><td>t</td><td><a href="https://wiki.python.org/moin/TimeComplexity_%28SetCode%29" target="_blank" rel="noopener">O(len(s)+len(t))</a></td><td></td><td></td></tr><tr><td>Intersection s&amp;t</td><td>O(min(len(s), len(t))</td><td>O(len(s) * len(t))</td><td>replace “min” with “max” if t is not a set</td></tr><tr><td>Multiple intersection s1&amp;s2&amp;..&amp;sn</td><td></td><td>(n-1)*O(l) where l is max(len(s1),..,len(sn))</td><td></td></tr><tr><td>Difference s-t</td><td>O(len(s))</td><td></td><td></td></tr><tr><td>s.difference_update(t)</td><td>O(len(t))</td><td></td><td></td></tr><tr><td>Symmetric Difference s^t</td><td>O(len(s))</td><td>O(len(s) * len(t))</td><td></td></tr><tr><td>s.symmetric_difference_update(t)</td><td>O(len(t))</td><td>O(len(t) * len(s))</td></tr></tbody></table><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h2><p>字典的平均情况基于以下假设：</p><ol><li>对象的散列函数足够撸棒（robust），不会发生冲突。</li><li>字典的键是从所有可能的键的集合中随机选择的。</li></ol><table><thead><tr><th><strong>Operation</strong></th><th><strong>Average Case</strong></th><th><strong>Amortized Worst Case</strong></th></tr></thead><tbody><tr><td>Copy[2]</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Item</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Set Item[1]</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Delete Item</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Iteration[2]</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="noopener">https://wiki.python.org/moin/TimeComplexity</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表-list&quot;&gt;&lt;a href=&quot;#列表-list&quot; class=&quot;headerlink&quot; title=&quot;列表 list&quot;&gt;&lt;/a&gt;列表 list&lt;/h2&gt;&lt;p&gt;列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Average Case&lt;/th&gt;
&lt;th&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Amortized_analysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amortized Worst Case&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Copy&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Append[1]&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pop last&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pop intermediate&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Item&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set Item&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete Item&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iteration&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Slice&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Del Slice&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set Slice&lt;/td&gt;
&lt;td&gt;O(k+n)&lt;/td&gt;
&lt;td&gt;O(k+n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extend[1]&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiply&lt;/td&gt;
&lt;td&gt;O(nk)&lt;/td&gt;
&lt;td&gt;O(nk)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x in s&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(s), max(s)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Length&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python3 for ... else ...陷阱</title>
    <link href="http://yoursite.com/2018/03/29/Python3-for-else-%E9%99%B7%E9%98%B1/"/>
    <id>http://yoursite.com/2018/03/29/Python3-for-else-陷阱/</id>
    <published>2018-03-29T09:49:49.000Z</published>
    <updated>2018-03-29T10:00:17.633Z</updated>
    
    <content type="html"><![CDATA[<p>假设有如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'found it! i = %s'</span> % i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not found it ...'</span></span><br></pre></td></tr></table></figure></p><p>我们期望的结果是，当找到5时打印出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">found it! i = <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>实际上打印出来的结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found it! i = <span class="number">5</span></span><br><span class="line"><span class="keyword">not</span> found it ...</span><br></pre></td></tr></table></figure></p><p>显然这不是我们期望的结果。<br><a id="more"></a></p><p>根据官方文档说法：</p><blockquote><p>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.</p></blockquote><blockquote><p>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.</p></blockquote><blockquote><p><a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" target="_blank" rel="noopener">https://docs.python.org/2/reference/compound_stmts.html#the-for-statement</a></p></blockquote><p>大意是说<code>当迭代的对象迭代完并为空时，位于else的子句将执行</code>，<code>而如果在for循环中含有break时则直接终止循环，并不会执行else子句</code>。</p><p>所以正确的写法应该为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'found it! i = %s'</span> % i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not found it ...'</span></span><br></pre></td></tr></table></figure></p><p>当使用pylint检测代码时会提示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Else clause on loop without a <span class="keyword">break</span> statement (useless-<span class="keyword">else</span>-on-loop)</span><br></pre></td></tr></table></figure></p><p>所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。</p><p><strong>同样的原理适用于<code>while ... else</code>循环</strong></p><p><strong>参考</strong></p><ol><li><a href="https://www.cnblogs.com/dspace/p/6622799.html" target="_blank" rel="noopener">https://www.cnblogs.com/dspace/p/6622799.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有如下代码：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;found it! i = %s&#39;&lt;/span&gt; % i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;not found it ...&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们期望的结果是，当找到5时打印出：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;found it! i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上打印出来的结果为：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;found it! i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; found it ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显然这不是我们期望的结果。&lt;br&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>What is the difference between “ is None ” and “ ==None ” --- Reprint</title>
    <link href="http://yoursite.com/2018/03/29/What-is-the-difference-between-%E2%80%9C-is-None-%E2%80%9D-and-%E2%80%9C-None-%E2%80%9D-Reprint/"/>
    <id>http://yoursite.com/2018/03/29/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint/</id>
    <published>2018-03-28T19:08:51.000Z</published>
    <updated>2018-03-28T19:23:18.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer 1"></a>Answer 1</h2><p>The answer is explained <a href="http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html" target="_blank" rel="noopener">here</a>.</p><p>To quote:</p><blockquote><p>A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).</p></blockquote><p>Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use <code>is None</code> as a general rule.</p><p><code>is None</code> is a bit (~50%) faster than <code>== None</code> :) – <a href="https://stackoverflow.com/users/226086/nas-banov" target="_blank" rel="noopener">Nas Banov</a></p><a id="more"></a><h2 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer 2"></a>Answer 2</h2><p><code>is</code> always returns <code>True</code> if it compares the same object instance</p><p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p><p>i.e.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">foo=Foo()</span><br><span class="line"></span><br><span class="line">print(foo==<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">print(foo <span class="keyword">is</span> <span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="Answer-3"><a href="#Answer-3" class="headerlink" title="Answer 3"></a>Answer 3</h2><p>In this case, they are the same. <code>None</code> is a singleton object (there only ever exists one <code>None</code>).</p><p><code>is</code> checks to see if the object is the same object, while == just checks if they are equivalent.</p><p>For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span>]</span><br><span class="line">q = [<span class="number">1</span>]</span><br><span class="line">p <span class="keyword">is</span> q <span class="comment"># False because they are not the same actual object</span></span><br><span class="line">p == q <span class="comment"># True because they are equivalent</span></span><br></pre></td></tr></table></figure></p><p>But since there is only one <code>None</code>, they will always be the same, and <code>is</code> will return True.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="keyword">None</span></span><br><span class="line">q = <span class="keyword">None</span></span><br><span class="line">p <span class="keyword">is</span> q <span class="comment"># True because they are both pointing to the same "None"</span></span><br></pre></td></tr></table></figure><h2 id="Answer-4"><a href="#Answer-4" class="headerlink" title="Answer 4"></a>Answer 4</h2><p><code>(ob1 is ob2)</code> equal to <code>(id(ob1) == id(ob2))</code></p><p>… but (ob is ob2) is a LOT faster. Timeit says “(a is b)” is 0.0365 usec per loop and “(id(a)==id(b))” is 0.153 usec per loop. 4.2x faster! – <a href="https://stackoverflow.com/users/51685/akx" target="_blank" rel="noopener">AKX</a></p><p><code>{} is {}</code> is false and <code>id({}) == id({})</code> can be (and <strong>is</strong> in CPython) true.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none" target="_blank" rel="noopener">What is the difference between “ is None ” and “ ==None ”</a></li><li><a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none" target="_blank" rel="noopener">Is there any difference between “foo is None” and “foo == None”?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Answer-1&quot;&gt;&lt;a href=&quot;#Answer-1&quot; class=&quot;headerlink&quot; title=&quot;Answer 1&quot;&gt;&lt;/a&gt;Answer 1&lt;/h2&gt;&lt;p&gt;The answer is explained &lt;a href=&quot;http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use &lt;code&gt;is None&lt;/code&gt; as a general rule.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is None&lt;/code&gt; is a bit (~50%) faster than &lt;code&gt;== None&lt;/code&gt; :) – &lt;a href=&quot;https://stackoverflow.com/users/226086/nas-banov&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nas Banov&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Differences between `==` and `is` in Python3?---(Reprint)</title>
    <link href="http://yoursite.com/2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/"/>
    <id>http://yoursite.com/2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/</id>
    <published>2018-03-28T18:47:37.000Z</published>
    <updated>2018-03-28T19:25:46.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source-Question"><a href="#Source-Question" class="headerlink" title="Source Question"></a>Source Question</h2><p>My <a href="https://english.stackexchange.com/questions/19967/what-does-google-fu-mean" target="_blank" rel="noopener">Google-fu</a> has failed me.</p><p>In Python, are the following two tests for equality equivalent?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="comment"># Test one.</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test two.</span></span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">is</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br></pre></td></tr></table></figure><p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p><p>Okay, so this kind of answers my question:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">L.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> L == [<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"><span class="comment"># Holds true, but...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> L <span class="keyword">is</span> [<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"><span class="comment"># Doesn't.</span></span><br></pre></td></tr></table></figure><p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p><a id="more"></a><h2 id="Answers-1"><a href="#Answers-1" class="headerlink" title="Answers 1"></a>Answers 1</h2><p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>In your case, the second test only works <code>because Python caches small integer objects</code>, which is an implementation detail. For <code>larger integers</code>, this does not work:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1000</span> <span class="keyword">is</span> <span class="number">10</span>**<span class="number">3</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1000</span> == <span class="number">10</span>**<span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>The same holds true for <code>string literals</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"a"</span> <span class="keyword">is</span> <span class="string">"a"</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> <span class="string">"a"</span> * <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">"a"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> x * <span class="number">2</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> intern(x*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>Please see <a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none" target="_blank" rel="noopener">this question</a> as well.</p><h2 id="Answers-2"><a href="#Answers-2" class="headerlink" title="Answers 2"></a>Answers 2</h2><p>There is a simple rule of thumb to tell you when to use <code>==</code> or <code>is</code>.</p><ul><li><code>==</code> is for <em>value equality</em>. Use it when you would like to know if two objects have the same value.</li><li><code>is</code> is for <em>reference equality</em>. Use it when you would like to know if two references refer to the same object.</li></ul><p>In general, when you are comparing something to a simple type, you are usually checking for <em>value equality</em>, so you should use <code>==</code>. For example, the intention of your example is probably to check whether x has a value equal to 2 (<code>==</code>), not whether <code>x</code> is literally referring to the same object as 2.</p><p>Something else to note: because of the way the CPython reference implementation works, you’ll get unexpected and inconsistent results if you mistakenly use <code>is</code> to compare for reference equality on integers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">500</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">500</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>That’s pretty much what we expected: <code>a</code> and <code>b</code> have the same value, but are distinct entities. But what about this?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c == d</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>This is inconsistent with the earlier result. What’s going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here’s an example demonstrating this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">250</span>, <span class="number">260</span>): a = i; <span class="keyword">print</span> <span class="string">"%i: %s"</span> % (i, a <span class="keyword">is</span> int(str(i)));</span><br><span class="line">...</span><br><span class="line"><span class="number">250</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">251</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">252</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">253</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">254</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">255</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">256</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">257</span>: <span class="keyword">False</span></span><br><span class="line"><span class="number">258</span>: <span class="keyword">False</span></span><br><span class="line"><span class="number">259</span>: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>This is another obvious reason not to use <code>is</code>: the behavior is left up to implementations when you’re erroneously using it for value equality.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659" target="_blank" rel="noopener">Is there a difference between <code>==</code> and <code>is</code> in Python?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Source-Question&quot;&gt;&lt;a href=&quot;#Source-Question&quot; class=&quot;headerlink&quot; title=&quot;Source Question&quot;&gt;&lt;/a&gt;Source Question&lt;/h2&gt;&lt;p&gt;My &lt;a href=&quot;https://english.stackexchange.com/questions/19967/what-does-google-fu-mean&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google-fu&lt;/a&gt; has failed me.&lt;/p&gt;
&lt;p&gt;In Python, are the following two tests for equality equivalent?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test one.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test two.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Does this hold true for objects where you would be comparing instances (a &lt;code&gt;list&lt;/code&gt; say)?&lt;/p&gt;
&lt;p&gt;Okay, so this kind of answers my question:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L.append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; L == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Holds true, but...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; L &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Doesn&#39;t.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So &lt;code&gt;==&lt;/code&gt; tests value where &lt;code&gt;is&lt;/code&gt; tests to see if they are the same object?&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>原码、反码、补码</title>
    <link href="http://yoursite.com/2018/03/27/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
    <id>http://yoursite.com/2018/03/27/原码、反码、补码/</id>
    <published>2018-03-27T08:10:24.000Z</published>
    <updated>2018-03-27T13:05:48.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器数和真值"><a href="#机器数和真值" class="headerlink" title="机器数和真值"></a>机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念</p><h3 id="机器数"><a href="#机器数" class="headerlink" title="机器数"></a>机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p><blockquote><p>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 <code>00000011</code>。如果是 -3 ，就是 <code>10000011</code> 。那么，这里的 &gt;<code>00000011</code> 和 <code>10000011</code> 就是机器数。</p></blockquote><h3 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 <code>10000011</code>，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（<code>10000011</code> 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p><blockquote><p>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1</p></blockquote><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念<br><a id="more"></a></p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:</p><blockquote><p>[+1]原 = 0000 0001</p></blockquote><blockquote><p>[-1]原 = 1000 0001</p></blockquote><p>因为第一位是符号位, 所以 8 位二进制数的取值范围就是:</p><blockquote><p>[1111 1111 , 0111 1111] 即 [-127 , 127]</p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>反码的表示方法是:  <strong>正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反</p></blockquote><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>补码的表示方法是:  <strong>正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. <code>(即在反码的基础上 +1)</code></strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p><h2 id="为何要使用原码-反码和补码"><a href="#为何要使用原码-反码和补码" class="headerlink" title="为何要使用原码, 反码和补码"></a>为何要使用原码, 反码和补码</h2><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:</p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><p>是对于负数:</p><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p><p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以<code>机器可以只有加法而没有减法</code>, 这样计算机运算的设计就更简单了.</p><p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p><blockquote><p>// 计算十进制的表达式: 1 - 1 = 0</p></blockquote><blockquote><p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p></blockquote><p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.<code>这也就是为何计算机内部不使用原码表示一个数</code>。</p><p><strong>为了解决原码做减法的问题, 出现了反码:</strong></p><blockquote><p>// 计算十进制的表达式: 1 - 1 = 0</p></blockquote><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p></blockquote><p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 <code>[0000 0000]原</code> 和 <code>[1000 0000]原</code> 两个编码表示 0.</p><p><strong>于是补码的出现, 解决了0的符号以及两个编码的问题:</strong></p><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p></blockquote><p>这样 0 用 <code>[0000 0000]</code> 表示, 而以前出现问题的 -0 则不存在了.而且可以用<code>[1000 0000]</code>表示 -128:</p><blockquote><p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p></blockquote><p>-1-127 的结果应该是 -128, 在用补码运算的结果中, <code>[1000 0000]补</code> 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, <strong>所以 -128 并没有原码和反码表示</strong> (对 -128 的补码表示 <code>[1000 0000]补</code> 算出来的原码是<code>[0000 0000]原</code> , 这是不正确的)</p><p>使用补码, <code>不仅仅修复了 0 的符号以及存在两个编码的问题</code>, 而且<code>还能够多表示一个最低数</code>. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].</p><p><strong>故机器的存储是使用补码</strong>, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.<code>而使用补码表示时又可以多保存一个最小值。</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/279d9eba0985" target="_blank" rel="noopener">https://www.jianshu.com/p/279d9eba0985</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;机器数和真值&quot;&gt;&lt;a href=&quot;#机器数和真值&quot; class=&quot;headerlink&quot; title=&quot;机器数和真值&quot;&gt;&lt;/a&gt;机器数和真值&lt;/h2&gt;&lt;p&gt;在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念&lt;/p&gt;
&lt;h3 id=&quot;机器数&quot;&gt;&lt;a href=&quot;#机器数&quot; class=&quot;headerlink&quot; title=&quot;机器数&quot;&gt;&lt;/a&gt;机器数&lt;/h3&gt;&lt;p&gt;一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 &lt;code&gt;00000011&lt;/code&gt;。如果是 -3 ，就是 &lt;code&gt;10000011&lt;/code&gt; 。那么，这里的 &amp;gt;&lt;code&gt;00000011&lt;/code&gt; 和 &lt;code&gt;10000011&lt;/code&gt; 就是机器数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;真值&quot;&gt;&lt;a href=&quot;#真值&quot; class=&quot;headerlink&quot; title=&quot;真值&quot;&gt;&lt;/a&gt;真值&lt;/h3&gt;&lt;p&gt;因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 &lt;code&gt;10000011&lt;/code&gt;，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（&lt;code&gt;10000011&lt;/code&gt; 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>正向代理和反向代理</title>
    <link href="http://yoursite.com/2018/03/26/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/26/正向代理和反向代理/</id>
    <published>2018-03-26T07:11:57.000Z</published>
    <updated>2018-03-26T08:26:56.270Z</updated>
    
    <content type="html"><![CDATA[<p>正向代理（forward proxy）代理客户端，隐藏真实客户端，<br>反向代理（reverse proxy）代理服务器，隐藏真实服务端。</p><a id="more"></a><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>举例:用户想访问：”<a href="http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me" target="_blank" rel="noopener">http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me</a> 这个域名对应的服务器就设置了反向代理功能。</p><p>结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p><p>在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。</p><h3 id="反向代理用途"><a href="#反向代理用途" class="headerlink" title="反向代理用途"></a>反向代理用途</h3><ol><li>保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ol><h3 id="反向代理的实现"><a href="#反向代理的实现" class="headerlink" title="反向代理的实现"></a>反向代理的实现</h3><ol><li>需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上</li><li>服务器返回自己的服务到负载均衡设备</li><li>负载均衡将服务器的服务返回用户</li></ol><p>以上的潜台词是：用户和负载均衡设备直接通信，也意味着<code>用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP</code>，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。</p><p>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><h3 id="正向代理的用途"><a href="#正向代理的用途" class="headerlink" title="正向代理的用途"></a>正向代理的用途</h3><ol><li>访问原来无法访问的资源，如google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ol><p>为了便于理解，摘自<a href="https://www.zhihu.com/question/24723688/answer/48369770" target="_blank" rel="noopener">阿笠博士的回答</a>,<br><img src="https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理.jpg"><br>正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p><h2 id="正向代理和反向代理的区别"><a href="#正向代理和反向代理的区别" class="headerlink" title="正向代理和反向代理的区别"></a>正向代理和反向代理的区别</h2><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p><p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p><p>打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.zhihu.com/question/24723688/answer/160252724" target="_blank" rel="noopener">https://www.zhihu.com/question/24723688/answer/160252724</a></li><li><a href="https://blog.csdn.net/andyzhaojianhui/article/details/48247969" target="_blank" rel="noopener">https://blog.csdn.net/andyzhaojianhui/article/details/48247969</a></li><li><a href="https://www.cnblogs.com/Anker/p/6056540.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/6056540.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正向代理（forward proxy）代理客户端，隐藏真实客户端，&lt;br&gt;反向代理（reverse proxy）代理服务器，隐藏真实服务端。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>烦~~~</title>
    <link href="http://yoursite.com/2018/03/25/%E7%83%A6/"/>
    <id>http://yoursite.com/2018/03/25/烦/</id>
    <published>2018-03-25T15:18:53.000Z</published>
    <updated>2018-03-25T15:34:03.120Z</updated>
    
    <content type="html"><![CDATA[<p>想到前几天某公司面试的情形。讲真，面试体验超级差，感觉不被尊重。我估计这帮人在体制内呆久了都这副嘴脸吧，真他妈恶心。</p><p>想到自己的转行过程，太他妈坎坷了。算了一下，2017年几乎就是在出差中度过的，哪有那么多时间看书写代码。好歹拼了命的把毕业做完了，毕业答辩的那一天，很痛苦，答辩完的那一刻，我一点也高兴不起来。唯一能让我心里舒服一点的就是我可以有专门的时间来做自己想做的事情。</p><p>心里有一万个字想去写，但是我不能在浪费这个时间。还是好好学习，天天向上吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想到前几天某公司面试的情形。讲真，面试体验超级差，感觉不被尊重。我估计这帮人在体制内呆久了都这副嘴脸吧，真他妈恶心。&lt;/p&gt;
&lt;p&gt;想到自己的转行过程，太他妈坎坷了。算了一下，2017年几乎就是在出差中度过的，哪有那么多时间看书写代码。好歹拼了命的把毕业做完了，毕业答辩的那
      
    
    </summary>
    
    
      <category term="成长日记" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>今天买了个腾讯云服务器，✧(≖ ◡ ≖✿)嘿嘿</title>
    <link href="http://yoursite.com/2018/03/23/%E4%BB%8A%E5%A4%A9%E4%B9%B0%E4%BA%86%E4%B8%AA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E2%9C%A7-%E2%89%96-%E2%97%A1-%E2%89%96%E2%9C%BF-%E5%98%BF%E5%98%BF/"/>
    <id>http://yoursite.com/2018/03/23/今天买了个腾讯云服务器，✧-≖-◡-≖✿-嘿嘿/</id>
    <published>2018-03-23T15:18:34.000Z</published>
    <updated>2018-03-23T16:05:19.148Z</updated>
    
    <content type="html"><![CDATA[<p>有点后悔读书的时候没有购买相关的学生优惠的云服务产品，你看，现在毕业了，买个最低配置的云服务器，都感觉心在滴血呢。毕业了，日子确实难过了，前几天面试还被一个美国人鄙视一番，唉，现在有钱人放个屁都是真理，可惜，我不吃那一套的。最近没有工作，一直在努力的转行中，手头确实紧。不过还好，女朋友也没有嫌弃我，还挺支持我，我也要加油了。</p><p>不说了，去折腾服务器了，一天差不多一块钱呢，逃~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有点后悔读书的时候没有购买相关的学生优惠的云服务产品，你看，现在毕业了，买个最低配置的云服务器，都感觉心在滴血呢。毕业了，日子确实难过了，前几天面试还被一个美国人鄙视一番，唉，现在有钱人放个屁都是真理，可惜，我不吃那一套的。最近没有工作，一直在努力的转行中，手头确实紧。不过
      
    
    </summary>
    
    
      <category term="成长日记" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>今天被无情的鄙视了。。。</title>
    <link href="http://yoursite.com/2018/03/22/%E4%BB%8A%E5%A4%A9%E8%A2%AB%E6%97%A0%E6%83%85%E7%9A%84%E9%84%99%E8%A7%86%E4%BA%86%E3%80%82%E3%80%82%E3%80%82/"/>
    <id>http://yoursite.com/2018/03/22/今天被无情的鄙视了。。。/</id>
    <published>2018-03-21T17:07:14.000Z</published>
    <updated>2018-03-23T15:19:34.016Z</updated>
    
    <content type="html"><![CDATA[<p>他是一个移民美国的人中老年人，面试谈话过程感觉超级不舒服，哎~~~</p><p>算了，刚毕业初入社会，真他妈的见识到了，什么人都有啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;他是一个移民美国的人中老年人，面试谈话过程感觉超级不舒服，哎~~~&lt;/p&gt;
&lt;p&gt;算了，刚毕业初入社会，真他妈的见识到了，什么人都有啊。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="成长日记" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一次完整的HTTP请求流程</title>
    <link href="http://yoursite.com/2018/03/20/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/20/一次完整的HTTP请求流程/</id>
    <published>2018-03-19T17:34:08.000Z</published>
    <updated>2018-03-19T18:00:53.753Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><h2 id="1-建立TCP连接："><a href="#1-建立TCP连接：" class="headerlink" title="1. 建立TCP连接："></a>1. 建立TCP连接：</h2><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，</p><p>即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，</p><p>因此，首先要建立TCP连接，一般TCP连接的端口号是80。</p><h2 id="2-Web浏览器向Web服务器发送请求命令："><a href="#2-Web浏览器向Web服务器发送请求命令：" class="headerlink" title="2. Web浏览器向Web服务器发送请求命令："></a>2. Web浏览器向Web服务器发送请求命令：</h2><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</p><h2 id="3-Web浏览器发送请求头信息-："><a href="#3-Web浏览器发送请求头信息-：" class="headerlink" title="3. Web浏览器发送请求头信息 ："></a>3. Web浏览器发送请求头信息 ：</h2><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p><h2 id="4-Web服务器应答-："><a href="#4-Web服务器应答-：" class="headerlink" title="4. Web服务器应答 ："></a>4. Web服务器应答 ：</h2><p>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</p><h2 id="5-Web服务器发送应答头信息："><a href="#5-Web服务器发送应答头信息：" class="headerlink" title="5. Web服务器发送应答头信息："></a>5. Web服务器发送应答头信息：</h2><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p><h2 id="6-Web服务器向浏览器发送数据："><a href="#6-Web服务器向浏览器发送数据：" class="headerlink" title="6. Web服务器向浏览器发送数据："></a>6. Web服务器向浏览器发送数据：</h2><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p><h2 id="7-Web服务器关闭TCP连接-："><a href="#7-Web服务器关闭TCP连接-：" class="headerlink" title="7. Web服务器关闭TCP连接 ："></a>7. Web服务器关闭TCP连接 ：</h2><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；</p><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/2952111-d8db37f9da639c61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="http请求.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-建立TCP连接：&quot;&gt;&lt;a href=&quot;#1-建立TCP连接：&quot; class=&quot;headerlink&quot; title=&quot;1. 建立TCP连接：&quot;&gt;&lt;/a&gt;1. 建立TCP连接：&lt;/h2&gt;&lt;p&gt;在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，&lt;/p&gt;
&lt;p&gt;即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，&lt;/p&gt;
&lt;p&gt;因此，首先要建立TCP连接，一般TCP连接的端口号是80。&lt;/p&gt;
&lt;h2 id=&quot;2-Web浏览器向Web服务器发送请求命令：&quot;&gt;&lt;a href=&quot;#2-Web浏览器向Web服务器发送请求命令：&quot; class=&quot;headerlink&quot; title=&quot;2. Web浏览器向Web服务器发送请求命令：&quot;&gt;&lt;/a&gt;2. Web浏览器向Web服务器发送请求命令：&lt;/h2&gt;&lt;p&gt;一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。&lt;/p&gt;
&lt;h2 id=&quot;3-Web浏览器发送请求头信息-：&quot;&gt;&lt;a href=&quot;#3-Web浏览器发送请求头信息-：&quot; class=&quot;headerlink&quot; title=&quot;3. Web浏览器发送请求头信息 ：&quot;&gt;&lt;/a&gt;3. Web浏览器发送请求头信息 ：&lt;/h2&gt;&lt;p&gt;浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。&lt;/p&gt;
&lt;h2 id=&quot;4-Web服务器应答-：&quot;&gt;&lt;a href=&quot;#4-Web服务器应答-：&quot; class=&quot;headerlink&quot; title=&quot;4. Web服务器应答 ：&quot;&gt;&lt;/a&gt;4. Web服务器应答 ：&lt;/h2&gt;&lt;p&gt;客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。&lt;/p&gt;
&lt;h2 id=&quot;5-Web服务器发送应答头信息：&quot;&gt;&lt;a href=&quot;#5-Web服务器发送应答头信息：&quot; class=&quot;headerlink&quot; title=&quot;5. Web服务器发送应答头信息：&quot;&gt;&lt;/a&gt;5. Web服务器发送应答头信息：&lt;/h2&gt;&lt;p&gt;正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。&lt;/p&gt;
&lt;h2 id=&quot;6-Web服务器向浏览器发送数据：&quot;&gt;&lt;a href=&quot;#6-Web服务器向浏览器发送数据：&quot; class=&quot;headerlink&quot; title=&quot;6. Web服务器向浏览器发送数据：&quot;&gt;&lt;/a&gt;6. Web服务器向浏览器发送数据：&lt;/h2&gt;&lt;p&gt;Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。&lt;/p&gt;
&lt;h2 id=&quot;7-Web服务器关闭TCP连接-：&quot;&gt;&lt;a href=&quot;#7-Web服务器关闭TCP连接-：&quot; class=&quot;headerlink&quot; title=&quot;7. Web服务器关闭TCP连接 ：&quot;&gt;&lt;/a&gt;7. Web服务器关闭TCP连接 ：&lt;/h2&gt;&lt;p&gt;一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；&lt;/p&gt;
&lt;p&gt;TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>三次握手 | 四次挥手</title>
    <link href="http://yoursite.com/2018/03/19/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20%7C%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2018/03/19/三次握手 | 四次挥手/</id>
    <published>2018-03-19T15:30:52.000Z</published>
    <updated>2018-03-19T16:01:53.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><strong>第一次握手</strong></p><p>建立连接时，客户端发送<code>syn包（syn=j）</code>到服务器，并进入SYN_SENT状态，等待服务器确认；<br>SYN即<code>同步序列编号</code>(synchronize sequence numbers)。</p><p><strong>第二次握手</strong></p><p>服务器收到<code>syn包</code>，必须确认客户的SYN（ack = j+1）,同时自己也发送一个SYN包（syn=k），即发<code>送SYN和ACK包</code>，此时服务器进入<code>SYN_RECV</code>状态。</p><p><strong>第三次握手</strong></p><p>客户端收到服务器的<code>SYN+ACK包</code>，向服务器发送确认<code>包ACK（ack=k+1）</code>，此包发送完毕，客户端和服务器进入<code>ESTABLISHED</code>状态，TCP连接成功，完成三次握手。</p><p>完成上述三次握手后，客户端和服务器开始传送数据。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的字段）。TCP关闭连接的步骤如下</p><ol><li>当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN=finish）</li><li>当主机B收到这个FIN报文段之后，并不立即用FIN报文回复主机A，而是想主机A发送一个确认序号ACK，同时通知自己的应用程序：对方要求关闭连接。【先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文】</li><li>主机B的应用程序告诉TCP：我要彻底关闭连接，TCP向主机A发送一个FIN报文段。</li><li>主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一次握手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建立连接时，客户端发送&lt;code&gt;syn包（syn=j）&lt;/co
      
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python3 回文字符串的判断</title>
    <link href="http://yoursite.com/2018/03/19/Python3-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2018/03/19/Python3-回文字符串的判断/</id>
    <published>2018-03-19T10:25:12.000Z</published>
    <updated>2018-03-19T10:33:22.228Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(str_)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(str_) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> str_[<span class="number">0</span>] != str_[<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isPalindrome(str_[<span class="number">1</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python3 单例模式</title>
    <link href="http://yoursite.com/2018/03/19/Python3-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/19/Python3-单例模式/</id>
    <published>2018-03-19T05:44:05.000Z</published>
    <updated>2018-03-19T18:56:37.784Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。<a id="more"></a><h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li></ul><p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong> 构造函数是私有的。</p><p><strong>应用实例：</strong> 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong> 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><p><strong>注意事项：</strong> getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><p>在 Python 中，我们可以用多种方法来实现单例模式：</p><ul><li>使用基类 <code>__new__</code></li><li>使用模块</li><li>使用装饰器（decorator）</li><li>使用元类（metaclass）</li></ul><h3 id="使用基类-new"><a href="#使用基类-new" class="headerlink" title="使用基类 __new__"></a>使用基类 <code>__new__</code></h3><p><code>__new__</code> 是真正创建实例对象的方法，所以重写基类的<code>__new__</code>方法，以此来保证创建对象的时候只生成一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span>  </span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。执行结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one == two</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one <span class="keyword">is</span> two</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class="line">(<span class="number">4303862608</span>, <span class="number">4303862608</span>)</span><br></pre></td></tr></table></figure></p><h3 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h3><p>元类（参考：<a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">深刻理解Python中的元类</a>）是用于创建类对象的类，类对象创建实例对象时一定会调用<code>__call__</code>方法，因此在调用<code>__call__</code>时候保证始终只创建一个实例即可，<code>type</code>是python中的一个元类。</p><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p><ul><li>拦截类的创建</li><li>修改类的定义</li><li>返回修改后的类</li></ul><p>使用元类实现单例模式的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(metaclass=Singleton)</span>:</span>  </span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行结果如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one == two</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one <span class="keyword">is</span> two</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class="line">(<span class="number">4303862608</span>, <span class="number">4303862608</span>)</span><br></pre></td></tr></table></figure><h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><p>装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>将装饰器写成类形式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">single03</span><span class="params">(object)</span>:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cls)</span>:</span>  </span><br><span class="line">            self._cls = cls  </span><br><span class="line">            self._instances = <span class="keyword">None</span>;  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span>  </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._instances:  </span><br><span class="line">                self._instances = self._cls(*args)  </span><br><span class="line">            <span class="keyword">return</span> self._instances  </span><br><span class="line"></span><br><span class="line"><span class="meta">@single03  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>  </span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure></p><p>在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 <code>warpper</code>，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，<code>cls(*args, **kw)</code> 作为 value 存到 instances 中，否则，直接返回 instances[cls]</p><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br></pre></td></tr></table></figure></p><p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://python.jobbole.com/87294/" target="_blank" rel="noopener">http://python.jobbole.com/87294/</a></li><li><a href="http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts" target="_blank" rel="noopener">http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;br&gt;这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、单例类只能有一个实例。&lt;/li&gt;
&lt;li&gt;2、单例类必须自己创建自己的唯一实例。&lt;/li&gt;
&lt;li&gt;3、单例类必须给所有其他对象提供这一实例。
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python3 基于链表技术实现栈</title>
    <link href="http://yoursite.com/2018/03/17/Python3-%E5%9F%BA%E4%BA%8E%E9%93%BE%E8%A1%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://yoursite.com/2018/03/17/Python3-基于链表技术实现栈/</id>
    <published>2018-03-17T07:40:12.000Z</published>
    <updated>2018-03-18T20:13:11.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义异常类"><a href="#定义异常类" class="headerlink" title="定义异常类"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackUnderflow</span><span class="params">(ValueError)</span>:</span>  <span class="comment"># 栈下溢，空栈访问</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="定义一个表结点类"><a href="#定义一个表结点类" class="headerlink" title="定义一个表结点类"></a>定义一个表结点类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem, next_=None)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = next_</span><br></pre></td></tr></table></figure><p>方法的第二个参数用名字<code>next_</code>，是为了避免与Python<code>标准函数next</code>重名</p><a id="more"></a><h2 id="栈的链接表实现"><a href="#栈的链接表实现" class="headerlink" title="栈的链接表实现"></a>栈的链接表实现</h2><p>由于所有栈的操作都在线性表的一端进行，采用链接表技术，自然应该用表头一端作为栈顶，表尾作为栈底，是操作实现方便，效率也高。按照这种安排，容易定义出一个链接栈类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._top = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._top <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._top <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StackUnderflow(<span class="string">'in LStack.top()'</span>)</span><br><span class="line">        <span class="keyword">return</span> self._top.elem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self._top = LNode(elem, self._top)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._top <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StackUnderflow(<span class="string">'in LStack.pop()'</span>)</span><br><span class="line">        p = self._top</span><br><span class="line">        self._top = p.next</span><br><span class="line">        <span class="keyword">return</span> p.elem</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>《数据结构与算法Python语言描述》 — 裘宗燕</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义异常类&quot;&gt;&lt;a href=&quot;#定义异常类&quot; class=&quot;headerlink&quot; title=&quot;定义异常类&quot;&gt;&lt;/a&gt;定义异常类&lt;/h2&gt;&lt;p&gt;实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackUnderflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ValueError)&lt;/span&gt;:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 栈下溢，空栈访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义一个表结点类&quot;&gt;&lt;a href=&quot;#定义一个表结点类&quot; class=&quot;headerlink&quot; title=&quot;定义一个表结点类&quot;&gt;&lt;/a&gt;定义一个表结点类&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LNode&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, elem, next_=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.elem = elem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.next = next_&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法的第二个参数用名字&lt;code&gt;next_&lt;/code&gt;，是为了避免与Python&lt;code&gt;标准函数next&lt;/code&gt;重名&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structures" scheme="http://yoursite.com/categories/Data-Structures/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Data Structures" scheme="http://yoursite.com/tags/Data-Structures/"/>
    
  </entry>
  
  <entry>
    <title>Python3 基于顺序表技术实现栈类</title>
    <link href="http://yoursite.com/2018/03/17/Python3-%E5%9F%BA%E4%BA%8E%E9%A1%BA%E5%BA%8F%E8%A1%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/03/17/Python3-基于顺序表技术实现栈类/</id>
    <published>2018-03-17T06:40:55.000Z</published>
    <updated>2018-03-17T07:12:09.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义异常类"><a href="#定义异常类" class="headerlink" title="定义异常类"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackUnderflow</span><span class="params">(ValueError)</span>:</span>  <span class="comment"># 栈下溢，空栈访问</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>上面把异常<code>StackUnderflow</code>定义为<code>ValueError</code>子类，只简单定义了一个类名，类体部分只有一个<code>pass</code>语句，未定义任何新属性，因为不准备提供<code>ValueError</code>之外的新功能，只是想与其他<code>ValueError</code>异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过<code>except</code>进行捕捉和处理，但只能通过<code>raise</code>语句引发。</p><a id="more"></a><h2 id="栈类定义"><a href="#栈类定义" class="headerlink" title="栈类定义"></a>栈类定义</h2><p>把list当做栈使用时，完全可以满足应用需要。但是，这样建立的对象实际上还是list，提供了list类型的所有操作。特别是提供了一大批栈结构原本不应该支持的操作，威胁栈的使用安全性(例如，栈要求未经弹出的元素应该存在，但表运行任意删除)。另外，这样的“栈”不是一个独立的类型，因此没有独立类型的所有重要性质。</p><p>为了概念更清晰，实现更安全，操作名也更容易理解，，可以考虑使用顺序表定义一个栈类，使之成为一个独立的类型，把Python的list隐藏在类内部，作为其实现基础。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">基于顺序表实现栈类</span></span><br><span class="line"><span class="string">用list对象 _elems存储栈中的元素</span></span><br><span class="line"><span class="string">所有的栈操作都映射到list操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._elems = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._elems == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._elems == []:</span><br><span class="line">            <span class="keyword">raise</span> StackUnderflow(<span class="string">'in SStack.top()'</span>)</span><br><span class="line">        <span class="keyword">return</span> self._elems[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self._elems.append(elem)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._elems == []:</span><br><span class="line">            <span class="keyword">raise</span> StackUnderflow(<span class="string">'in SStack.pop()'</span>)</span><br><span class="line">        <span class="keyword">return</span> self._elems.pop()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>《数据结构与算法Python语言描述》 — 裘宗燕</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义异常类&quot;&gt;&lt;a href=&quot;#定义异常类&quot; class=&quot;headerlink&quot; title=&quot;定义异常类&quot;&gt;&lt;/a&gt;定义异常类&lt;/h2&gt;&lt;p&gt;实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackUnderflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ValueError)&lt;/span&gt;:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 栈下溢，空栈访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面把异常&lt;code&gt;StackUnderflow&lt;/code&gt;定义为&lt;code&gt;ValueError&lt;/code&gt;子类，只简单定义了一个类名，类体部分只有一个&lt;code&gt;pass&lt;/code&gt;语句，未定义任何新属性，因为不准备提供&lt;code&gt;ValueError&lt;/code&gt;之外的新功能，只是想与其他&lt;code&gt;ValueError&lt;/code&gt;异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过&lt;code&gt;except&lt;/code&gt;进行捕捉和处理，但只能通过&lt;code&gt;raise&lt;/code&gt;语句引发。&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structures" scheme="http://yoursite.com/categories/Data-Structures/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Data Structures" scheme="http://yoursite.com/tags/Data-Structures/"/>
    
  </entry>
  
  <entry>
    <title>Python3 实现二叉树前、中、后序遍历及按层遍历</title>
    <link href="http://yoursite.com/2018/03/15/Python3-%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%8F%8A%E6%8C%89%E5%B1%82%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2018/03/15/Python3-实现二叉树前、中、后序遍历及按层遍历/</id>
    <published>2018-03-15T15:57:26.000Z</published>
    <updated>2018-03-18T20:12:31.302Z</updated>
    
    <content type="html"><![CDATA[<p>假设有这么一个二叉树如下：<br><img src="https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二叉树.png"></p><p>前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10<br>中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7<br>后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1</p><h2 id="二叉树的类实现"><a href="#二叉树的类实现" class="headerlink" title="二叉树的类实现"></a>二叉树的类实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=None, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tree = Node(<span class="number">1</span>, Node(<span class="number">2</span>, Node(<span class="number">4</span>),</span><br><span class="line">                           Node(<span class="number">5</span>, Node(<span class="number">8</span>),</span><br><span class="line">                                   Node(<span class="number">9</span>, left=Node(<span class="number">11</span>)))),</span><br><span class="line">                   Node(<span class="number">3</span>, Node(<span class="number">6</span>),</span><br><span class="line">                           Node(<span class="number">7</span>, left=Node(<span class="number">10</span>))))</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前序遍历（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_deep_func</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(root.value, end = <span class="string">' '</span>)  <span class="comment"># print 放到下一行 就是中序遍历，放到最后 就是后序遍历</span></span><br><span class="line">    pre_deep_func(root.left)</span><br><span class="line">    pre_deep_func(root.right)</span><br></pre></td></tr></table></figure><h3 id="非递归法"><a href="#非递归法" class="headerlink" title="非递归法"></a>非递归法</h3><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>根据已有的认识，此函数需要一个栈，保存树尚未访问过的部分信息。对于前序遍历也会有不同的实现方法，下面考虑一种方法，即：</p><ol><li>由于采取先序遍历，遇到结点就应该访问，下一步就应该沿着树的坐分支下行</li><li>但结点的右分支（右子树）还没有访问，因此需要记录，将右子结点入栈。</li><li>遇到空树时回溯，取出栈中保存的一个右分支，像一颗二叉树一样遍历它。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 方法一 常规打印</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_nonrec</span><span class="params">(root)</span>:</span></span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">while</span> s <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:  <span class="comment"># 沿左分支下行</span></span><br><span class="line">            print(root.value, end = <span class="string">' '</span>)  <span class="comment"># 先处理根数据</span></span><br><span class="line">            s.append(root.right)          <span class="comment"># 右分支入栈</span></span><br><span class="line">            root = root.left</span><br><span class="line">        root = s.pop()                    <span class="comment">#  遇到空树，回溯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法二 通过生成器函数遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_elements</span><span class="params">(root)</span>:</span></span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">while</span> s <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            s.append(root.right)</span><br><span class="line">            <span class="keyword">yield</span> root.value</span><br><span class="line">            root = root.left</span><br><span class="line">        root = s.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法三</span></span><br><span class="line"><span class="comment"># 前序遍历（根左右）:模拟压栈过程</span></span><br><span class="line"><span class="comment"># 入栈之前读（根、左），这样出栈时再读右（也是右结点子节点们的根）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_deep_func2</span><span class="params">(root)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            print(root.value, end = <span class="string">' '</span>)</span><br><span class="line">            a.append(root)  <span class="comment">## 根入栈</span></span><br><span class="line">            root = root.left</span><br><span class="line">        h = a.pop()</span><br><span class="line">        root = h.right</span><br></pre></td></tr></table></figure><p>非递归算法的一个价值是把算法过程完整的暴露出来，便于进行细致的分析。<br>时间复杂度：在非递归的算法中，因为在执行的过程中访问每个结点一次，一部分子树(所有右子树，方法一、二)被压入和弹出各一次(栈操作是O(1)时间)，所以整个遍历过程需要的时间复杂度为O(n)。<br>空间复杂度：这里的关键因素是遍历中栈可能达到的最大深度（栈中元素的最大深度个数），而栈的最大深度由被遍历的二叉树的高度决定。由于二叉树的高度可能达到O(n)，所以在最坏情况下，算法的空间复杂度为O(n)，n个结点的二叉树的平均高度为O(log n)，所以非递归前序遍历的平均空间复杂度为O(log n)。<br>在一些情况下，修改实现方法也可能降低空间的开销。对于上面函数，修改其定义，只把非空的右子树进栈，在很多情况下能减小一些空间开销。</p><p>其他非递归的遍历算法，包括中序遍历和后续遍历算法以及层次遍历算法，都可以直接了当的修改成迭代器。但是递归算法不可以。</p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中序遍历（左根右）:模拟压栈过程</span></span><br><span class="line"><span class="comment"># 出栈之后读（左、根），这样出栈后指针变更再读右</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mid_deep_func2</span><span class="params">(root)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            a.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        h = a.pop()</span><br><span class="line">        <span class="keyword">print</span> h.value</span><br><span class="line">        root = h.right</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后序遍历（左右根）:模拟逆序(根右左)存入数组b，然后再数组b逆序输出</span></span><br><span class="line"><span class="comment"># (根右左)与(根左右)类似，入栈a前读（根、右），出栈后指针变更再读左</span></span><br><span class="line"><span class="comment">## 方法 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_deep_func2</span><span class="params">(root)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            b.append(root.value)</span><br><span class="line">            a.append(root.left)</span><br><span class="line">            root = root.right</span><br><span class="line">        root = a.pop()</span><br><span class="line">    print(b[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_deep_func2</span><span class="params">(root)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">or</span> root:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            b.append(root.value)</span><br><span class="line">            a.append(root)</span><br><span class="line">            root = root.right</span><br><span class="line">        h = a.pop()</span><br><span class="line">        root = h.left</span><br><span class="line">    <span class="keyword">print</span> b[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_func</span><span class="params">(root)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    a.append(root)</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        head = a.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">print</span> head.value</span><br><span class="line">        <span class="keyword">if</span> head.left:</span><br><span class="line">            a.append(head.left)</span><br><span class="line">        <span class="keyword">if</span> head.right:</span><br><span class="line">            a.append(head.right)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.csdn.net/su92chen/article/details/70242822" target="_blank" rel="noopener">http://blog.csdn.net/su92chen/article/details/70242822</a></li><li>《数据结构与算法Python语言描述》 — 裘宗燕</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有这么一个二叉树如下：&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;二叉树.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10&lt;br&gt;中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7&lt;br&gt;后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1&lt;/p&gt;
&lt;h2 id=&quot;二叉树的类实现&quot;&gt;&lt;a href=&quot;#二叉树的类实现&quot; class=&quot;headerlink&quot; title=&quot;二叉树的类实现&quot;&gt;&lt;/a&gt;二叉树的类实现&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, value=None, left=None, right=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.left = left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.right = right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree = Node(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, Node(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, Node(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           Node(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, Node(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   Node(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, left=Node(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)))),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Node(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, Node(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           Node(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, left=Node(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Data Structures" scheme="http://yoursite.com/categories/Data-Structures/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Data Structures" scheme="http://yoursite.com/tags/Data-Structures/"/>
    
  </entry>
  
  <entry>
    <title>什么是Socket(转)</title>
    <link href="http://yoursite.com/2018/03/13/%E4%BB%80%E4%B9%88%E6%98%AFSocket-%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/03/13/什么是Socket-转/</id>
    <published>2018-03-12T16:49:26.000Z</published>
    <updated>2018-03-12T17:03:47.890Z</updated>
    
    <content type="html"><![CDATA[<p>对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：</p><ol><li>什么是TCP/IP、UDP？</li><li>Socket在哪里呢？</li><li>Socket是什么呢？</li><li>你会使用它们吗？</li></ol><h2 id="什么是TCP-IP、UDP"><a href="#什么是TCP-IP、UDP" class="headerlink" title="什么是TCP/IP、UDP"></a>什么是TCP/IP、UDP</h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p><a id="more"></a><p>TCP/IP协议族包括运输层、网络层、链路层。由上图可以知道TCP/IP与UDP的关系。</p><h2 id="Socket在哪里"><a href="#Socket在哪里" class="headerlink" title="Socket在哪里"></a>Socket在哪里</h2><p><img src="https://upload-images.jianshu.io/upload_images/2952111-1dd2ce6b61d08816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.jpg"></p><h2 id="Socket是什么"><a href="#Socket是什么" class="headerlink" title="Socket是什么"></a>Socket是什么</h2><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。<br>一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。<br>生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-99ebc49204f5b380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.jpg"></p><p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><p>在这里我就举个简单的例子，我们走的是TCP协议这条路（见图2）。例子用MFC编写，运行的界面如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-36073682cf397e4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/2952111-61b92a5dbbb8bf69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.jpg"></p><p>在客户端输入服务器端的IP地址和发送的数据，然后按发送按钮，服务器端接收到数据，然后回应客户端。客户端读取回应的数据，显示在界面上。</p><p>客户端就一个函数完成了一次通信。在这里IP地址为何用127.0.0.1呢？使用这个IP地址，服务器端和客户端就能运行在同一台机器上，这样调试方便多了。当然你可以在你朋友的机器上运行Server程序(本人在局域网中测试过)，在自己的机器上运行Client程序，当然输入的IP地址就该是你朋友机器的IP地址了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是TCP/IP、UDP？&lt;/li&gt;
&lt;li&gt;Socket在哪里呢？&lt;/li&gt;
&lt;li&gt;Socket是什么呢？&lt;/li&gt;
&lt;li&gt;你会使用它们吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;什么是TCP-IP、UDP&quot;&gt;&lt;a href=&quot;#什么是TCP-IP、UDP&quot; class=&quot;headerlink&quot; title=&quot;什么是TCP/IP、UDP&quot;&gt;&lt;/a&gt;什么是TCP/IP、UDP&lt;/h2&gt;&lt;p&gt;TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。&lt;br&gt;UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
