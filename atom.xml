<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quentin&#39;s Blog</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-30T06:13:47.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ByiProX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令英文缩写</title>
    <link href="http://yoursite.com/2018/08/30/Linux%E5%91%BD%E4%BB%A4%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/"/>
    <id>http://yoursite.com/2018/08/30/Linux命令英文缩写/</id>
    <published>2018-08-30T01:35:47.000Z</published>
    <updated>2018-08-30T06:13:47.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h2><ul><li>ls: list(列出目录内容)</li><li>cd: Change Directory（改变目录）</li><li>su: switch user 切换用户</li><li>rpm: redhat package manager 红帽子打包管理器</li><li>pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径</li><li>ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf <code>ps auxf</code> 显示进程状态</li><li>df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</li><li>rpm:  即RedHat Package Management，是RedHat的发明之一</li><li>rmdir: Remove Directory（删除目录）</li><li>rm: Remove（删除目录或文件）</li><li>cat:  concatenate连锁 <code>cat file1 file2 &gt;&gt; file3</code>把文件1和文件2的内容联合起来放到file3中</li><li>insmod:  install module,载入模块</li><li>ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式</li><li>mkdir: Make Directory</li><li>ps: Process Status</li><li>uname: Unix name</li><li>tar: Tape Archive</li><li>grep: General Regular Expression Print</li></ul><a id="more"></a><h2 id="目录名"><a href="#目录名" class="headerlink" title="目录名"></a>目录名</h2><ul><li>/boot: 顾名思义</li><li>/root : 同上</li><li>/lost+found: 同上</li><li>/run: 同上</li><li>/home: 同上</li><li>/etc: ETCetera</li><li>/bin: BINaries</li><li>/dev: DEVices</li><li>/lib: LIBraries</li><li>/mnt: MouNT</li><li>/proc: PROCesses</li><li>/tmp: TeMPorary</li><li>/var: VARiable</li><li>/srv: SeRVices</li><li>/opt: OPTion</li><li>/sbin: Super BINaries（又作Superuser BINaries）</li><li>/sys: SYStem</li><li>/usr: 一鼓而作Unix System Resources，再而作Unix Software Resources,三而作Unix Shared Resources（这个很重要，很多人会认为这个是user）</li></ul><h2 id="软件及软件包管理"><a href="#软件及软件包管理" class="headerlink" title="软件及软件包管理"></a>软件及软件包管理</h2><ul><li>man – MANual</li><li>apt – Advanced Packaging Tool</li><li>dpkg – Debian PacKaGe</li><li>yum – Yellow dog Updater, Modified</li><li>rpm – RPM Package Manager（又作Redhat Package Manager，不过我比较喜欢前者，因为魔性）</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>SELinux – Security Enhanced Linux, 安全强化的Linux</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令缩写&quot;&gt;&lt;a href=&quot;#命令缩写&quot; class=&quot;headerlink&quot; title=&quot;命令缩写&quot;&gt;&lt;/a&gt;命令缩写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ls: list(列出目录内容)&lt;/li&gt;
&lt;li&gt;cd: Change Directory（改变目录）&lt;/li&gt;
&lt;li&gt;su: switch user 切换用户&lt;/li&gt;
&lt;li&gt;rpm: redhat package manager 红帽子打包管理器&lt;/li&gt;
&lt;li&gt;pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径&lt;/li&gt;
&lt;li&gt;ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf &lt;code&gt;ps auxf&lt;/code&gt; 显示进程状态&lt;/li&gt;
&lt;li&gt;df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。&lt;/li&gt;
&lt;li&gt;rpm:  即RedHat Package Management，是RedHat的发明之一&lt;/li&gt;
&lt;li&gt;rmdir: Remove Directory（删除目录）&lt;/li&gt;
&lt;li&gt;rm: Remove（删除目录或文件）&lt;/li&gt;
&lt;li&gt;cat:  concatenate连锁 &lt;code&gt;cat file1 file2 &amp;gt;&amp;gt; file3&lt;/code&gt;把文件1和文件2的内容联合起来放到file3中&lt;/li&gt;
&lt;li&gt;insmod:  install module,载入模块&lt;/li&gt;
&lt;li&gt;ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式&lt;/li&gt;
&lt;li&gt;mkdir: Make Directory&lt;/li&gt;
&lt;li&gt;ps: Process Status&lt;/li&gt;
&lt;li&gt;uname: Unix name&lt;/li&gt;
&lt;li&gt;tar: Tape Archive&lt;/li&gt;
&lt;li&gt;grep: General Regular Expression Print&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>SQL语法练习(一)</title>
    <link href="http://yoursite.com/2018/08/28/SQL%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/28/SQL语法练习-一/</id>
    <published>2018-08-27T16:32:31.000Z</published>
    <updated>2018-08-28T08:52:37.974Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查询学习课程”python”比课程 “java” 成绩高的学生的学号;<br>– 思路：<br>– 获取所有有python课程的人（学号，成绩） - 临时表<br>– 获取所有有java课程的人（学号，成绩） - 临时表<br>– 根据学号连接两个临时表：<br>– 学号 | 物理成绩 | 生物成绩<br>– 然后再进行筛选<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.s_id <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> s_id, <span class="keyword">num</span> <span class="keyword">as</span> python <span class="keyword">from</span> score <span class="keyword">left</span> <span class="keyword">join</span> course <span class="keyword">on</span> score.c_id = course.c_id <span class="keyword">where</span> course.c_name = <span class="string">'python'</span>) <span class="keyword">as</span> A</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> s_id, <span class="keyword">num</span> <span class="keyword">as</span> <span class="keyword">java</span>   <span class="keyword">from</span> score <span class="keyword">left</span> <span class="keyword">join</span> course <span class="keyword">on</span> score.c_id = course.c_id <span class="keyword">where</span> course.c_name = <span class="string">'java'</span>)   <span class="keyword">as</span> B</span><br><span class="line"><span class="keyword">on</span> A.s_id = B.s_id <span class="keyword">where</span> A.python &gt; B.java;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li><p>查询平均成绩大于65分的同学的姓名和平均成绩(保留两位小数);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.s_name <span class="keyword">as</span> <span class="keyword">names</span>, <span class="keyword">round</span>(<span class="keyword">AVG</span>(score.num), <span class="number">2</span>) <span class="keyword">as</span> average</span><br><span class="line"><span class="keyword">FROM</span> student, score</span><br><span class="line"><span class="keyword">WHERE</span> student.s_id = score.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> student.s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(score.num) &gt; <span class="number">65</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询所有同学的姓名、选课数、总成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.s_name, <span class="keyword">COUNT</span>(score.s_id) <span class="keyword">as</span> course_num, <span class="keyword">SUM</span>(score.num) <span class="keyword">as</span> total_grades</span><br><span class="line"><span class="keyword">FROM</span> student, score</span><br><span class="line"><span class="keyword">WHERE</span> student.s_id = score.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> student.s_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student.s_name;</span><br></pre></td></tr></table></figure></li><li><p>查询所有的课程的名称以及对应的任课老师姓名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> course.c_name, teacher.t_name  </span><br><span class="line"><span class="keyword">FROM</span> course, teacher</span><br><span class="line"><span class="keyword">WHERE</span> course.t_id = teacher.t_id;</span><br></pre></td></tr></table></figure></li><li><p>查询没学过“alex”老师课的同学的姓名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student.s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> score.s_id</span><br><span class="line"><span class="keyword">FROM</span> score, course, teacher</span><br><span class="line"><span class="keyword">WHERE</span> course.c_id = score.c_id <span class="keyword">AND</span> teacher.t_id = course.t_id <span class="keyword">AND</span> teacher.t_name = <span class="string">'alex'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>查询学过’python’并且也学过编号’java’课程的同学的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course</span><br><span class="line"> <span class="keyword">WHERE</span> score.c_id = course.c_id <span class="keyword">AND</span> (course.c_name = <span class="string">'python'</span> <span class="keyword">OR</span> course.c_name = <span class="string">'java'</span>)) <span class="keyword">as</span> B</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询学过“alex”老师所教的全部课程的同学的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course, teacher</span><br><span class="line"> <span class="keyword">WHERE</span> score.c_id = course.c_id <span class="keyword">AND</span> teacher.t_id = course.t_id <span class="keyword">AND</span> teacher.t_name = <span class="string">'alex'</span>) <span class="keyword">as</span> B</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(course.c_id) <span class="keyword">FROM</span></span><br><span class="line">course, teacher</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">teacher.t_id = course.t_id <span class="keyword">AND</span> teacher.t_name=<span class="string">'alex'</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询挂科超过两门(包括两门)的学生姓名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course</span><br><span class="line"> <span class="keyword">WHERE</span> score.c_id = course.c_id  <span class="keyword">AND</span> (score.num &lt; <span class="number">60</span> <span class="keyword">OR</span> score.num <span class="keyword">ISNULL</span>)) <span class="keyword">as</span> B</span><br><span class="line">     <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询有课程成绩小于60分的同学的姓名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course</span><br><span class="line"> <span class="keyword">WHERE</span> score.c_id = course.c_id  <span class="keyword">AND</span> score.num &lt; <span class="number">60</span>) <span class="keyword">as</span> B</span><br><span class="line">     <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name;</span><br></pre></td></tr></table></figure></li><li><p>查询选修了全部课程的学生姓名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course</span><br><span class="line"> <span class="keyword">WHERE</span> score.c_id = course.c_id) <span class="keyword">as</span> B</span><br><span class="line">     <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> course);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">student</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score <span class="keyword">ON</span> student.s_id = score.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> course)</span><br></pre></td></tr></table></figure></li><li><p>查询至少有一门课程与“貂蝉”同学所学课程相同的同学姓名；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name</span><br><span class="line"><span class="keyword">FROM</span> student, score</span><br><span class="line"><span class="keyword">WHERE</span> student.s_id = score.s_id <span class="keyword">AND</span> student.s_name != <span class="string">'貂蝉'</span> <span class="keyword">AND</span> score.c_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score, student</span><br><span class="line"> <span class="keyword">WHERE</span> score.s_id = student.s_id <span class="keyword">AND</span> student.s_name = <span class="string">'貂蝉'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name;</span><br></pre></td></tr></table></figure></li><li><p>查询学过’貂蝉’同学全部课程的其他同学姓名；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_name <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> score.s_id <span class="keyword">as</span> <span class="keyword">sid</span>, score.c_id <span class="keyword">as</span> cid</span><br><span class="line"> <span class="keyword">FROM</span> score, course, student</span><br><span class="line"> <span class="keyword">WHERE</span></span><br><span class="line">     score.c_id = course.c_id <span class="keyword">AND</span></span><br><span class="line"> student.s_id = score.s_id <span class="keyword">AND</span></span><br><span class="line"> student.s_name != <span class="string">'貂蝉'</span> <span class="keyword">AND</span></span><br><span class="line"> score.c_id <span class="keyword">in</span> (<span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score, student <span class="keyword">WHERE</span> student.s_name = <span class="string">'貂蝉'</span> <span class="keyword">AND</span> student.s_id = score.s_id)</span><br><span class="line">) <span class="keyword">as</span> B</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> B.sid = student.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s_name) &gt;= (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(score.c_id) <span class="keyword">FROM</span> score, student <span class="keyword">WHERE</span> student.s_name = <span class="string">'貂蝉'</span> <span class="keyword">AND</span> student.s_id = score.s_id);</span><br></pre></td></tr></table></figure></li></ol><p>– ——————————————————————————————————————————————————————————————<br>– INSERT INTO student VALUES (1, ‘鲁班’, 12, ‘男’);<br>– INSERT INTO student VALUES (2, ‘貂蝉’, 20, ‘女’);<br>– INSERT INTO student VALUES (3, ‘刘备’, 35, ‘男’);<br>– INSERT INTO student VALUES (4, ‘关羽’, 34, ‘男’);</p><h2 id="–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’"><a href="#–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’" class="headerlink" title="– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);"></a>– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);</h2><p>–</p><p>–<br>– INSERT INTO teacher VALUES (1, ‘大王’);<br>– INSERT INTO teacher VALUES (2, ‘alex’);<br>– INSERT INTO teacher VALUES (3, ‘egon’);</p><h2 id="–-INSERT-INTO-teacher-VALUES-4-‘peiqi’"><a href="#–-INSERT-INTO-teacher-VALUES-4-‘peiqi’" class="headerlink" title="– INSERT INTO teacher VALUES (4, ‘peiqi’);"></a>– INSERT INTO teacher VALUES (4, ‘peiqi’);</h2><p>– INSERT INTO course VALUES (1, ‘python’, 1);<br>– INSERT INTO course VALUES (2, ‘java’, 2);<br>– INSERT INTO course VALUES (3, ‘linux’, 3);<br>– INSERT INTO course VALUES (4, ‘go’, 2);</p><p>– INSERT INTO score VALUES (1, 1, 1, 79);<br>– INSERT INTO score VALUES (2, 1, 2, 77);<br>– INSERT INTO score VALUES (3, 1, 3, 58);<br>– INSERT INTO score VALUES (4, 2, 2, 66);<br>– INSERT INTO score VALUES (5, 2, 3, 77);<br>– INSERT INTO score VALUES (6, 3, 1, 61);<br>– INSERT INTO score VALUES (7, 3, 2, 64);</p><h2 id="–-INSERT-INTO-score-VALUES-8-4-3-70"><a href="#–-INSERT-INTO-score-VALUES-8-4-3-70" class="headerlink" title="– INSERT INTO score VALUES (8, 4, 3, 70);"></a>– INSERT INTO score VALUES (8, 4, 3, 70);</h2>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;查询学习课程”python”比课程 “java” 成绩高的学生的学号;&lt;br&gt;– 思路：&lt;br&gt;– 获取所有有python课程的人（学号，成绩） - 临时表&lt;br&gt;– 获取所有有java课程的人（学号，成绩） - 临时表&lt;br&gt;– 根据学号连接两个临时表：&lt;br&gt;– 学号 | 物理成绩 | 生物成绩&lt;br&gt;– 然后再进行筛选&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; A.s_id &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; s_id, &lt;span class=&quot;keyword&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; python &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; score &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; course &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; score.c_id = course.c_id &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; course.c_name = &lt;span class=&quot;string&quot;&gt;&#39;python&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; s_id, &lt;span class=&quot;keyword&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;java&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; score &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; course &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; score.c_id = course.c_id &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; course.c_name = &lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;)   &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; A.s_id = B.s_id &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; A.python &amp;gt; B.java;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用useradd命令时发生了什么</title>
    <link href="http://yoursite.com/2018/08/24/Linux-%E4%BD%BF%E7%94%A8useradd%E5%91%BD%E4%BB%A4%E6%97%B6%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2018/08/24/Linux-使用useradd命令时发生了什么/</id>
    <published>2018-08-24T03:38:49.000Z</published>
    <updated>2018-08-24T03:46:08.219Z</updated>
    
    <content type="html"><![CDATA[<p>使用useradd命令创建用户时首先会参考</p><ul><li>/etc/default/useradd</li><li>/etc/login.defs</li><li>/etc/skel/*</li></ul><p>命令执行后，接下来就会创建</p><ul><li>/etc/passwd</li><li>/etc/shadow</li><li>/etc/group</li><li>/etc/gshadow</li><li>主文件目录（如果配置有的话）</li></ul><p>所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用useradd命令创建用户时首先会参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/default/useradd&lt;/li&gt;
&lt;li&gt;/etc/login.defs&lt;/li&gt;
&lt;li&gt;/etc/skel/*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令执行后，接下来就会创建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/passwd&lt;/li&gt;
&lt;li&gt;/etc/shadow&lt;/li&gt;
&lt;li&gt;/etc/group&lt;/li&gt;
&lt;li&gt;/etc/gshadow&lt;/li&gt;
&lt;li&gt;主文件目录（如果配置有的话）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。&lt;br&gt;
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件特殊权限之SUID、GUID、SBIT</title>
    <link href="http://yoursite.com/2018/08/23/Linux-%E6%96%87%E4%BB%B6%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90%E4%B9%8BSUID%E3%80%81GUID%E3%80%81SBIT/"/>
    <id>http://yoursite.com/2018/08/23/Linux-文件特殊权限之SUID、GUID、SBIT/</id>
    <published>2018-08-23T02:48:57.000Z</published>
    <updated>2018-08-23T06:15:54.976Z</updated>
    
    <content type="html"><![CDATA[<ul><li>文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码</li><li>目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同</li><li>目录就有SBIT的特殊权限时，代表在该目录下用户创建的文件只有自己和root能够删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码&lt;/li&gt;
&lt;li&gt;目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>Linux根目录下目录介绍及各项缩写全称</title>
    <link href="http://yoursite.com/2018/08/22/Linux%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%90%84%E9%A1%B9%E7%BC%A9%E5%86%99%E5%85%A8%E7%A7%B0/"/>
    <id>http://yoursite.com/2018/08/22/Linux根目录下目录介绍及各项缩写全称/</id>
    <published>2018-08-22T12:43:53.000Z</published>
    <updated>2018-08-22T12:55:23.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li>bin  （binary） : 常见linux命令、系统所有用户命令目录文件</li><li>sbin （superuser binary） : root用户命令文件</li><li>dev  （device） : 设备驱动存储目录文件</li><li>proc （process）: 进程信息文件</li><li>usr  （UNIX Software Resource）: 与软件安装/执行相关</li><li>var  （variable）: 变量文件目录，与系统运作过程有关</li><li>etc  （etcetera）: 所有程序所需要的配置文件</li><li>lib  （library）: 系统默认库路径文件</li><li>mnt  （mount）: 挂载目录</li><li>tmp  （temporary）: 临时文件目录</li><li>opt  （option）: 可选目录（可以选择安装应用程序的目录）</li><li>boot  : 引导程序文件</li><li>home  : 家目录（用户目录）</li><li>root  : root根目录</li><li>media : 多媒体及挂载目录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;bin  （binary） : 常见linux命令、系统所有用户命令目录文件&lt;/li&gt;
&lt;li&gt;sbin （superuser binary） : root用户命令文件&lt;/li&gt;
&lt;li&gt;dev  （device） : 设备驱动存储目录文件&lt;/li&gt;
&lt;li&gt;p
      
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>TCP 套接字编程</title>
    <link href="http://yoursite.com/2018/07/25/TCP-%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/TCP-套接字编程/</id>
    <published>2018-07-25T12:50:59.000Z</published>
    <updated>2018-07-28T06:47:41.361Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-07-25 at 19.55.29.png"></p><a id="more"></a><h2 id="TCPClient-py"><a href="#TCPClient-py" class="headerlink" title="TCPClient.py"></a>TCPClient.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverName = <span class="string">'server.kunxiang.wang'</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line"></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class="line">clientSocket.bind((<span class="string">''</span>, <span class="number">34567</span>))</span><br><span class="line"></span><br><span class="line">clientSocket.connect((serverName, serverPort))</span><br><span class="line"></span><br><span class="line">msg = input(<span class="string">'please input lowercase sentence: '</span>).encode()</span><br><span class="line"></span><br><span class="line">clientSocket.send(msg)</span><br><span class="line"></span><br><span class="line">modifiedMsg = clientSocket.recv(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">print(modifiedMsg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><h2 id="TCPServer-py"><a href="#TCPServer-py" class="headerlink" title="TCPServer.py"></a>TCPServer.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line"></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSocket.bind((<span class="string">''</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'the server is ready to receive'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    connectionSocket, clientAddress = serverSocket.accept()</span><br><span class="line">    print(connectionSocket, clientAddress)</span><br><span class="line"></span><br><span class="line">    msg = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(msg)</span><br><span class="line"></span><br><span class="line">    modifiedMsg = msg.upper()</span><br><span class="line">    connectionSocket.send(modifiedMsg)</span><br><span class="line">    connectionSocket.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Screen Shot 2018-07-25 at 19.55.29.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>UDP 套接字编程</title>
    <link href="http://yoursite.com/2018/07/25/UDP-%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/UDP-套接字编程/</id>
    <published>2018-07-25T11:31:29.000Z</published>
    <updated>2018-07-28T06:49:20.474Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2018-07-25 at 19.54.43.png"></p><a id="more"></a><h2 id="UDPClient-py"><a href="#UDPClient-py" class="headerlink" title="UDPClient.py"></a>UDPClient.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># serverName = '140.143.38.125'</span></span><br><span class="line">serverName = <span class="string">'server.kunxiang.wang'</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class="line">clientSocket.bind((<span class="string">''</span>, <span class="number">34567</span>))</span><br><span class="line"></span><br><span class="line">msg = input(<span class="string">'please input lowercase sentence: '</span>).encode()</span><br><span class="line">clientSocket.sendto(msg, (serverName, serverPort))</span><br><span class="line"></span><br><span class="line">modifiedMsg, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">print(modifiedMsg, serverAddress, end=<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><h2 id="UDPServer-py"><a href="#UDPServer-py" class="headerlink" title="UDPServer.py"></a>UDPServer.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">serverSocket.bind((<span class="string">''</span>, serverPort))</span><br><span class="line">print(<span class="string">'The server is ready to receive'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    message, clientAddress = serverSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line">    print(message)</span><br><span class="line">    print(clientAddress)</span><br><span class="line">    modifiedMessage = message.upper()</span><br><span class="line">    serverSocket.sendto(modifiedMessage, clientAddress)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Screen Shot 2018-07-25 at 19.54.43.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Mac下打开swf文件</title>
    <link href="http://yoursite.com/2018/05/11/Mac%E4%B8%8B%E6%89%93%E5%BC%80swf%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/05/11/Mac下打开swf文件/</id>
    <published>2018-05-11T05:23:17.000Z</published>
    <updated>2018-05-11T05:30:19.985Z</updated>
    
    <content type="html"><![CDATA[<p>编辑一个HTML文件，写入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"your-file-name-of-swf.swf"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编辑一个HTML文件，写入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;embed&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;your-file-name-of-swf.swf&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;500&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;embed&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。&lt;br&gt;
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>Mac下profile文件</title>
    <link href="http://yoursite.com/2018/05/08/Mac%E4%B8%8Bprofile%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/05/08/Mac下profile文件/</id>
    <published>2018-05-08T10:50:47.000Z</published>
    <updated>2018-05-11T06:11:47.289Z</updated>
    
    <content type="html"><![CDATA[<p>当你的home下面有<code>.bash_profile</code>或者<code>.bash_login</code>的时候,会忽略调<code>.profile</code>.   </p><p><code>.profile</code>主要有一下几种方式<br>/etc/profile<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc<br>~/.bash_logout   </p><p>/etc/profile<br><code>登录的时候</code>读入,默认的设定文件.<br>~/.bash_profile<br><code>登录之后</code>在/etc/profile载入之后载入,十分重要的配置文件<br>~/.bash_login<br><code>登录之后</code>如果~/.bash_profile不存在的话,载入这个文件<br>~/.profile<br>登录之后~/.bash_login不存在的话,才载入这个文件<br>~/.bashrc<br>bash shell打开的时候载入</p><a id="more"></a><p><code>etc下的配置是针对系统,~下的主要是针对用户</code></p><p>参考：<a href="https://blog.csdn.net/xdonx/article/details/8312938" target="_blank" rel="noopener">https://blog.csdn.net/xdonx/article/details/8312938</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你的home下面有&lt;code&gt;.bash_profile&lt;/code&gt;或者&lt;code&gt;.bash_login&lt;/code&gt;的时候,会忽略调&lt;code&gt;.profile&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;.profile&lt;/code&gt;主要有一下几种方式&lt;br&gt;/etc/profile&lt;br&gt;~/.bash_profile&lt;br&gt;~/.bash_login&lt;br&gt;~/.profile&lt;br&gt;~/.bashrc&lt;br&gt;~/.bash_logout   &lt;/p&gt;
&lt;p&gt;/etc/profile&lt;br&gt;&lt;code&gt;登录的时候&lt;/code&gt;读入,默认的设定文件.&lt;br&gt;~/.bash_profile&lt;br&gt;&lt;code&gt;登录之后&lt;/code&gt;在/etc/profile载入之后载入,十分重要的配置文件&lt;br&gt;~/.bash_login&lt;br&gt;&lt;code&gt;登录之后&lt;/code&gt;如果~/.bash_profile不存在的话,载入这个文件&lt;br&gt;~/.profile&lt;br&gt;登录之后~/.bash_login不存在的话,才载入这个文件&lt;br&gt;~/.bashrc&lt;br&gt;bash shell打开的时候载入&lt;/p&gt;
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>Linux之crontab命令</title>
    <link href="http://yoursite.com/2018/05/05/Linux%E4%B9%8Bcrontab%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/05/Linux之crontab命令/</id>
    <published>2018-05-05T15:24:12.000Z</published>
    <updated>2018-05-08T10:14:10.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tldr-基本用法"><a href="#tldr-基本用法" class="headerlink" title="tldr 基本用法"></a>tldr 基本用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Schedule cron <span class="built_in">jobs</span> to run on a time interval <span class="keyword">for</span> the current user.</span><br><span class="line">Job definition format: <span class="string">"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute"</span>.</span><br><span class="line"></span><br><span class="line">- Edit the crontab file <span class="keyword">for</span> the current user:</span><br><span class="line">    crontab -e</span><br><span class="line"></span><br><span class="line">- View a list of existing cron <span class="built_in">jobs</span> <span class="keyword">for</span> current user:</span><br><span class="line">    crontab -l</span><br><span class="line"></span><br><span class="line">- Remove all cron <span class="built_in">jobs</span> <span class="keyword">for</span> the current user:</span><br><span class="line">    crontab -r</span><br><span class="line"></span><br><span class="line">- Sample job <span class="built_in">which</span> runs at 10:00 every day. * means any value:</span><br><span class="line">    0 10 * * * path/to/script.sh</span><br><span class="line"></span><br><span class="line">- Sample job <span class="built_in">which</span> runs every minute on the 3rd of April:</span><br><span class="line">    * * 3 Apr * path/to/script.sh</span><br><span class="line"></span><br><span class="line">- Sample job <span class="built_in">which</span> runs at 02:30 every Friday:</span><br><span class="line">    30 2 * * Fri path/to/script.sh</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h2><p>crontab通过固定的的时间设置格式设置任务的执行时间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure></p><p>第一个参数代表分，其次是小时，然后是日期，之后是月份，最后是所在周的周几。各个字段可以使用特殊字符来代表时间逻辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">星号（*）：        代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class="line">逗号（a,b,c）： 可以用逗号隔开的值指定一个列表范围，例如，“<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>”</span><br><span class="line">中杠（x-y）：    可以用整数之间的中杠表示一个整数范围，例如“<span class="number">2</span><span class="number">-6</span>”表示“<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>”</span><br><span class="line">正斜线（/）：    可以用正斜线指定时间的间隔频率，例如“<span class="number">0</span><span class="number">-23</span>/<span class="number">2</span>”表示每两小时执行一次。</span><br><span class="line">组合（*/x）：    指定时间类型下，每x分钟或每小时执行一次</span><br><span class="line">组合(x-y/z)：    指定时间类型下，从x到y时间段内，每z分或每z秒执行一次</span><br></pre></td></tr></table></figure><p>如果是当前用户设置自己的定时任务，可以直接通过crontab -e编辑任务，命令格式<em> </em> <em> </em> * command即可。<br>编辑好任务需要重启crontab，注意需要以root身份执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tldr-基本用法&quot;&gt;&lt;a href=&quot;#tldr-基本用法&quot; class=&quot;headerlink&quot; title=&quot;tldr 基本用法&quot;&gt;&lt;/a&gt;tldr 基本用法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Schedule cron &lt;span class=&quot;built_in&quot;&gt;jobs&lt;/span&gt; to run on a time interval &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the current user.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Job definition format: &lt;span class=&quot;string&quot;&gt;&quot;(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute&quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Edit the crontab file &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the current user:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    crontab -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- View a list of existing cron &lt;span class=&quot;built_in&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; current user:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    crontab -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Remove all cron &lt;span class=&quot;built_in&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the current user:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    crontab -r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Sample job &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; runs at 10:00 every day. * means any value:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0 10 * * * path/to/script.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Sample job &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; runs every minute on the 3rd of April:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * * 3 Apr * path/to/script.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Sample job &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; runs at 02:30 every Friday:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    30 2 * * Fri path/to/script.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>终端格式化打印json数据的方法</title>
    <link href="http://yoursite.com/2018/04/25/%E7%BB%88%E7%AB%AF%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%89%93%E5%8D%B0json%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/25/终端格式化打印json数据的方法/</id>
    <published>2018-04-25T03:26:54.000Z</published>
    <updated>2018-05-05T15:30:58.502Z</updated>
    
    <content type="html"><![CDATA[<p>命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'&#123;"status":200,"data":[&#123;"id":1000,"name":"John"&#125;,&#123;"id":1004,"name":"Tom"&#125;]&#125;'</span> | python -m json.tool</span><br></pre></td></tr></table></figure></p><p>即终端打印的json数据通过管道符号经过python json工具格式化输出，搞定!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/categories/Linux-Mac-OS/"/>
    
    
      <category term="Linux/Mac OS" scheme="http://yoursite.com/tags/Linux-Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>python3 产生随机字符串</title>
    <link href="http://yoursite.com/2018/04/19/python3-%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/04/19/python3-产生随机字符串/</id>
    <published>2018-04-19T08:26:53.000Z</published>
    <updated>2018-04-19T08:28:16.623Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度为16的随机字符串</span></span><br><span class="line">rand_str = <span class="string">''</span>.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">16</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>HTML里引入CSS的四种方式</title>
    <link href="http://yoursite.com/2018/04/09/HTML%E9%87%8C%E5%BC%95%E5%85%A5CSS%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/09/HTML里引入CSS的四种方式/</id>
    <published>2018-04-09T14:42:46.000Z</published>
    <updated>2018-04-21T03:34:43.171Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；</p></li><li><p>嵌入式：将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中；</p></li><li><p>链接式：跟第4个的导入式都称外部式或者外联式，使用link引用外部CSS文件；</p></li><li><p>导入式：使用@import引用外部CSS文件；</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嵌入式：将CSS样式集中写在网页的&lt;head&gt;&lt;/head&gt;标签对的&lt;style&gt;&lt;/style&gt;标签对中；&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="Frontend" scheme="http://yoursite.com/categories/Frontend/"/>
    
    
      <category term="Frontend" scheme="http://yoursite.com/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Python3 解包和压包</title>
    <link href="http://yoursite.com/2018/04/06/Python3-%E8%A7%A3%E5%8C%85%E5%92%8C%E5%8E%8B%E5%8C%85/"/>
    <id>http://yoursite.com/2018/04/06/Python3-解包和压包/</id>
    <published>2018-04-06T15:31:01.000Z</published>
    <updated>2018-04-06T17:14:14.402Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。</p><h2 id="可迭代对象每个元素赋值给一个变量"><a href="#可迭代对象每个元素赋值给一个变量" class="headerlink" title="可迭代对象每个元素赋值给一个变量"></a><strong>可迭代对象每个元素赋值给一个变量</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, age, date = [<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="string">'2018-1-1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date</span><br><span class="line"><span class="string">'2018-1-1'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = enumerate([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">0</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="星号”-”的使用—解包"><a href="#星号”-”的使用—解包" class="headerlink" title="星号”*”的使用—解包"></a><strong>星号”*”的使用—解包</strong></h2><p>比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>small, *new, big = sorted([<span class="number">93</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">55</span>,<span class="number">99</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new</span><br><span class="line">[<span class="number">33</span>, <span class="number">55</span>, <span class="number">93</span>]</span><br></pre></td></tr></table></figure></p><h2 id="压包与解包"><a href="#压包与解包" class="headerlink" title="压包与解包"></a><strong>压包与解包</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> zip(a, b):</span><br><span class="line">    print(i+j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>分析以上代码：</p><ol><li>zip函数将a, b压包程一个可迭代对象</li><li>对可迭代对象的每一个元素（(‘a’, 1)）进行解包（i, j = (‘a’, 1)）</li><li>接下来可以分别调用i, j变量进行计算</li></ol><p>再举一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    (<span class="string">'Bob'</span>, <span class="string">'1991'</span>, <span class="string">'60'</span>),</span><br><span class="line">    (<span class="string">'Bill'</span>, <span class="string">'1992'</span>, <span class="string">'65'</span>),</span><br><span class="line">    (<span class="string">'Mike'</span>, <span class="string">'1993'</span>, <span class="string">'70'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> name, *args <span class="keyword">in</span> l:</span><br><span class="line">    print(name, args)</span><br><span class="line"></span><br><span class="line">Bob [<span class="string">'1991'</span>, <span class="string">'60'</span>]</span><br><span class="line">Bill [<span class="string">'1992'</span>, <span class="string">'65'</span>]</span><br><span class="line">Mike [<span class="string">'1993'</span>, <span class="string">'70'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="“-”的用法"><a href="#“-”的用法" class="headerlink" title="“_”的用法"></a><strong>“_”的用法</strong></h2><p>当一些变量不用时，用<code>_</code>表示是更好的写法，可以让读代码的人知道这个元素是不要的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = (<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="number">50</span>, (<span class="number">11</span>,<span class="number">20</span>,<span class="number">2000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, *_, (*_, year) = p</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year</span><br><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure></p><h2 id="多变量同时赋值"><a href="#多变量同时赋值" class="headerlink" title="多变量同时赋值"></a><strong>多变量同时赋值</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>下面用法都会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*a = <span class="number">1</span>, <span class="number">3</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><code>但是这种写法是可以的</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>*a, = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><h2 id="“-”之可变参数"><a href="#“-”之可变参数" class="headerlink" title="“*”之可变参数"></a><strong>“*”之可变参数</strong></h2><p>函数定义时，我们使用*的可变参数，其实也是压包解包过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>参数用<em>num表示，num变量就可以当成元组调用了。<br>其实这个过程相当于</em>num, = 1,2,5,6</p><h2 id="“-”之关键字参数"><a href="#“-”之关键字参数" class="headerlink" title="“*”之关键字参数"></a><strong>“*”之关键字参数</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(name = <span class="string">'Bob'</span>, age = <span class="number">10</span>, weight = <span class="number">60</span>)</span><br><span class="line">&#123;<span class="string">'name'</span> = <span class="string">'Bob'</span>, <span class="string">'age'</span> = <span class="number">10</span>, <span class="string">'weight'</span> = <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure><p>键值对传入**kw，kw就可以表示相应字典。</p><p><code>**</code>的用法只在函数定义中使用，<code>不能这样使用</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, **b = &#123;<span class="string">'name'</span> = <span class="string">'Bob'</span>, <span class="string">'age'</span> = <span class="number">10</span>, <span class="string">'weight'</span> = <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="可变参数与关键字参数的细节问题"><a href="#可变参数与关键字参数的细节问题" class="headerlink" title="可变参数与关键字参数的细节问题"></a><strong>可变参数与关键字参数的细节问题</strong></h2><h3 id="函数传入实参时，可变参数-之前的参数不能指定参数名"><a href="#函数传入实参时，可变参数-之前的参数不能指定参数名" class="headerlink" title="函数传入实参时，可变参数*之前的参数不能指定参数名"></a>函数传入实参时，可变参数<code>*</code>之前的参数不能指定参数名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a=<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">File <span class="string">"&lt;ipython-input-17-978eea76866e&gt;"</span>, line <span class="number">1</span></span><br><span class="line">  func(a=<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">           ^</span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中"><a href="#函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中" class="headerlink" title="函数传入实参时，可变参数*之后的参数必须指定参数名，否则就会被归到可变参数之中"></a>函数传入实参时，可变参数<code>*</code>之后的参数必须指定参数名，否则就会被归到可变参数之中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b, c = None)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,c=<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*, a, b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(a = <span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来</p><h3 id="关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以"><a href="#关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以" class="headerlink" title="关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以"></a>关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b, c, **d)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,c=<span class="number">4</span>,m=<span class="number">5</span>,n=<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&#123;<span class="string">'m'</span>: <span class="number">5</span>, <span class="string">'n'</span>:<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数与关键词参数共同使用以表示任意参数"><a href="#可变参数与关键词参数共同使用以表示任意参数" class="headerlink" title="可变参数与关键词参数共同使用以表示任意参数"></a><code>可变参数与关键词参数共同使用以表示任意参数</code></h3><p>下面是这一点在装饰器当中的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'i am using a decorator'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@mydecorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(<span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line">i am using a decorator</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>wrapper函数使用<code>*args</code>, <code>**kw</code>作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用<code>*args</code>, <code>**kw</code>完全没有问题。</p><h2 id="解包作为参数传入函数中"><a href="#解包作为参数传入函数中" class="headerlink" title="解包作为参数传入函数中"></a>解包作为参数传入函数中</h2><p>首先定义一个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br></pre></td></tr></table></figure></p><p>列表|元组的解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*n)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>字典的解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(**mydict)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*mydict)</span><br><span class="line"><span class="string">'ab'</span></span><br></pre></td></tr></table></figure></p><p>一个简单的应用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Bob = &#123;<span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;name&#125;'s age is &#123;age&#125;"</span>.format(**Bob)</span><br><span class="line"><span class="string">"Bob's age is 20"</span></span><br></pre></td></tr></table></figure></p><h2 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h2><p>下面过程也涉及到了解包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a+<span class="number">1</span>, b+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m,n = myfun(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>其本身是一个元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = myfun(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。&lt;/p&gt;
&lt;h2 id=&quot;可迭代对象每个元素赋值给一个变量&quot;&gt;&lt;a href=&quot;#可迭代对象每个元素赋值给一个变量&quot; class=&quot;headerlink&quot; title=&quot;可迭代对象每个元素赋值给一个变量&quot;&gt;&lt;/a&gt;&lt;strong&gt;可迭代对象每个元素赋值给一个变量&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name, age, date = [&lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2018-1-1&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;2018-1-1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = enumerate([&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 元组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;.items()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;.values()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a, b, c = (x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Python3 对象操作的时间复杂度总结</title>
    <link href="http://yoursite.com/2018/03/29/Python3-%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/29/Python3-对象操作的时间复杂度总结/</id>
    <published>2018-03-29T11:27:04.000Z</published>
    <updated>2018-03-29T12:11:59.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。</p><table><thead><tr><th>Operation</th><th>Average Case</th><th><a href="http://en.wikipedia.org/wiki/Amortized_analysis" target="_blank" rel="noopener">Amortized Worst Case</a></th></tr></thead><tbody><tr><td>Copy</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Append[1]</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Pop last</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Pop intermediate</td><td>O(k)</td><td>O(k)</td></tr><tr><td>Insert</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Item</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Set Item</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Delete Item</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Iteration</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Slice</td><td>O(k)</td><td>O(k)</td></tr><tr><td>Del Slice</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Set Slice</td><td>O(k+n)</td><td>O(k+n)</td></tr><tr><td>Extend[1]</td><td>O(k)</td><td>O(k)</td></tr><tr><td><a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt" target="_blank" rel="noopener">Sort</a></td><td>O(n log n)</td><td>O(n log n)</td></tr><tr><td>Multiply</td><td>O(nk)</td><td>O(nk)</td></tr><tr><td>x in s</td><td>O(n)</td><td></td></tr><tr><td>min(s), max(s)</td><td>O(n)</td><td></td></tr><tr><td>Get Length</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><a id="more"></a><h2 id="双向队列-collections-deque"><a href="#双向队列-collections-deque" class="headerlink" title="双向队列 collections.deque"></a>双向队列 collections.deque</h2><p>deque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。</p><table><thead><tr><th style="text-align:center"><strong>操作</strong></th><th style="text-align:center"><strong>平均情况</strong></th><th style="text-align:center"><strong>最坏情况</strong></th></tr></thead><tbody><tr><td style="text-align:center">复制</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">append</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">appendleft</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">pop</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">popleft</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">extend</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">extendleft</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">rotate</td><td style="text-align:center">O(k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">remove</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td></tr></tbody></table><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h2><table><thead><tr><th><strong>Operation</strong></th><th><strong>Average case</strong></th><th><strong>Worst Case</strong></th><th><strong>notes</strong></th></tr></thead><tbody><tr><td>x in s</td><td>O(1)</td><td>O(n)</td><td></td></tr><tr><td>Union s\</td><td>t</td><td><a href="https://wiki.python.org/moin/TimeComplexity_%28SetCode%29" target="_blank" rel="noopener">O(len(s)+len(t))</a></td><td></td><td></td></tr><tr><td>Intersection s&amp;t</td><td>O(min(len(s), len(t))</td><td>O(len(s) * len(t))</td><td>replace “min” with “max” if t is not a set</td></tr><tr><td>Multiple intersection s1&amp;s2&amp;..&amp;sn</td><td></td><td>(n-1)*O(l) where l is max(len(s1),..,len(sn))</td><td></td></tr><tr><td>Difference s-t</td><td>O(len(s))</td><td></td><td></td></tr><tr><td>s.difference_update(t)</td><td>O(len(t))</td><td></td><td></td></tr><tr><td>Symmetric Difference s^t</td><td>O(len(s))</td><td>O(len(s) * len(t))</td><td></td></tr><tr><td>s.symmetric_difference_update(t)</td><td>O(len(t))</td><td>O(len(t) * len(s))</td></tr></tbody></table><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h2><p>字典的平均情况基于以下假设：</p><ol><li>对象的散列函数足够撸棒（robust），不会发生冲突。</li><li>字典的键是从所有可能的键的集合中随机选择的。</li></ol><table><thead><tr><th><strong>Operation</strong></th><th><strong>Average Case</strong></th><th><strong>Amortized Worst Case</strong></th></tr></thead><tbody><tr><td>Copy[2]</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Get Item</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Set Item[1]</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Delete Item</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Iteration[2]</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="noopener">https://wiki.python.org/moin/TimeComplexity</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表-list&quot;&gt;&lt;a href=&quot;#列表-list&quot; class=&quot;headerlink&quot; title=&quot;列表 list&quot;&gt;&lt;/a&gt;列表 list&lt;/h2&gt;&lt;p&gt;列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Average Case&lt;/th&gt;
&lt;th&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Amortized_analysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amortized Worst Case&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Copy&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Append[1]&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pop last&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pop intermediate&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Item&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set Item&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete Item&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iteration&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Slice&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Del Slice&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set Slice&lt;/td&gt;
&lt;td&gt;O(k+n)&lt;/td&gt;
&lt;td&gt;O(k+n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extend[1]&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiply&lt;/td&gt;
&lt;td&gt;O(nk)&lt;/td&gt;
&lt;td&gt;O(nk)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x in s&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(s), max(s)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get Length&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python3 for ... else ...陷阱</title>
    <link href="http://yoursite.com/2018/03/29/Python3-for-else-%E9%99%B7%E9%98%B1/"/>
    <id>http://yoursite.com/2018/03/29/Python3-for-else-陷阱/</id>
    <published>2018-03-29T09:49:49.000Z</published>
    <updated>2018-03-29T10:00:17.633Z</updated>
    
    <content type="html"><![CDATA[<p>假设有如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'found it! i = %s'</span> % i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not found it ...'</span></span><br></pre></td></tr></table></figure></p><p>我们期望的结果是，当找到5时打印出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">found it! i = <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>实际上打印出来的结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found it! i = <span class="number">5</span></span><br><span class="line"><span class="keyword">not</span> found it ...</span><br></pre></td></tr></table></figure></p><p>显然这不是我们期望的结果。<br><a id="more"></a></p><p>根据官方文档说法：</p><blockquote><p>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.</p></blockquote><blockquote><p>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.</p></blockquote><blockquote><p><a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" target="_blank" rel="noopener">https://docs.python.org/2/reference/compound_stmts.html#the-for-statement</a></p></blockquote><p>大意是说<code>当迭代的对象迭代完并为空时，位于else的子句将执行</code>，<code>而如果在for循环中含有break时则直接终止循环，并不会执行else子句</code>。</p><p>所以正确的写法应该为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'found it! i = %s'</span> % i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not found it ...'</span></span><br></pre></td></tr></table></figure></p><p>当使用pylint检测代码时会提示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Else clause on loop without a <span class="keyword">break</span> statement (useless-<span class="keyword">else</span>-on-loop)</span><br></pre></td></tr></table></figure></p><p>所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。</p><p><strong>同样的原理适用于<code>while ... else</code>循环</strong></p><p><strong>参考</strong></p><ol><li><a href="https://www.cnblogs.com/dspace/p/6622799.html" target="_blank" rel="noopener">https://www.cnblogs.com/dspace/p/6622799.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有如下代码：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;found it! i = %s&#39;&lt;/span&gt; % i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;not found it ...&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们期望的结果是，当找到5时打印出：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;found it! i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上打印出来的结果为：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;found it! i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; found it ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显然这不是我们期望的结果。&lt;br&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>What is the difference between “ is None ” and “ ==None ” --- Reprint</title>
    <link href="http://yoursite.com/2018/03/29/What-is-the-difference-between-%E2%80%9C-is-None-%E2%80%9D-and-%E2%80%9C-None-%E2%80%9D-Reprint/"/>
    <id>http://yoursite.com/2018/03/29/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint/</id>
    <published>2018-03-28T19:08:51.000Z</published>
    <updated>2018-03-28T19:23:18.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer 1"></a>Answer 1</h2><p>The answer is explained <a href="http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html" target="_blank" rel="noopener">here</a>.</p><p>To quote:</p><blockquote><p>A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).</p></blockquote><p>Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use <code>is None</code> as a general rule.</p><p><code>is None</code> is a bit (~50%) faster than <code>== None</code> :) – <a href="https://stackoverflow.com/users/226086/nas-banov" target="_blank" rel="noopener">Nas Banov</a></p><a id="more"></a><h2 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer 2"></a>Answer 2</h2><p><code>is</code> always returns <code>True</code> if it compares the same object instance</p><p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p><p>i.e.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">foo=Foo()</span><br><span class="line"></span><br><span class="line">print(foo==<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">print(foo <span class="keyword">is</span> <span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="Answer-3"><a href="#Answer-3" class="headerlink" title="Answer 3"></a>Answer 3</h2><p>In this case, they are the same. <code>None</code> is a singleton object (there only ever exists one <code>None</code>).</p><p><code>is</code> checks to see if the object is the same object, while == just checks if they are equivalent.</p><p>For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">1</span>]</span><br><span class="line">q = [<span class="number">1</span>]</span><br><span class="line">p <span class="keyword">is</span> q <span class="comment"># False because they are not the same actual object</span></span><br><span class="line">p == q <span class="comment"># True because they are equivalent</span></span><br></pre></td></tr></table></figure></p><p>But since there is only one <code>None</code>, they will always be the same, and <code>is</code> will return True.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="keyword">None</span></span><br><span class="line">q = <span class="keyword">None</span></span><br><span class="line">p <span class="keyword">is</span> q <span class="comment"># True because they are both pointing to the same "None"</span></span><br></pre></td></tr></table></figure><h2 id="Answer-4"><a href="#Answer-4" class="headerlink" title="Answer 4"></a>Answer 4</h2><p><code>(ob1 is ob2)</code> equal to <code>(id(ob1) == id(ob2))</code></p><p>… but (ob is ob2) is a LOT faster. Timeit says “(a is b)” is 0.0365 usec per loop and “(id(a)==id(b))” is 0.153 usec per loop. 4.2x faster! – <a href="https://stackoverflow.com/users/51685/akx" target="_blank" rel="noopener">AKX</a></p><p><code>{} is {}</code> is false and <code>id({}) == id({})</code> can be (and <strong>is</strong> in CPython) true.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none" target="_blank" rel="noopener">What is the difference between “ is None ” and “ ==None ”</a></li><li><a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none" target="_blank" rel="noopener">Is there any difference between “foo is None” and “foo == None”?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Answer-1&quot;&gt;&lt;a href=&quot;#Answer-1&quot; class=&quot;headerlink&quot; title=&quot;Answer 1&quot;&gt;&lt;/a&gt;Answer 1&lt;/h2&gt;&lt;p&gt;The answer is explained &lt;a href=&quot;http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use &lt;code&gt;is None&lt;/code&gt; as a general rule.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is None&lt;/code&gt; is a bit (~50%) faster than &lt;code&gt;== None&lt;/code&gt; :) – &lt;a href=&quot;https://stackoverflow.com/users/226086/nas-banov&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nas Banov&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Differences between `==` and `is` in Python3?---(Reprint)</title>
    <link href="http://yoursite.com/2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/"/>
    <id>http://yoursite.com/2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/</id>
    <published>2018-03-28T18:47:37.000Z</published>
    <updated>2018-03-28T19:25:46.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source-Question"><a href="#Source-Question" class="headerlink" title="Source Question"></a>Source Question</h2><p>My <a href="https://english.stackexchange.com/questions/19967/what-does-google-fu-mean" target="_blank" rel="noopener">Google-fu</a> has failed me.</p><p>In Python, are the following two tests for equality equivalent?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="comment"># Test one.</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test two.</span></span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">is</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br></pre></td></tr></table></figure><p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p><p>Okay, so this kind of answers my question:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">L.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> L == [<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"><span class="comment"># Holds true, but...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> L <span class="keyword">is</span> [<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Yay!'</span></span><br><span class="line"><span class="comment"># Doesn't.</span></span><br></pre></td></tr></table></figure><p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p><a id="more"></a><h2 id="Answers-1"><a href="#Answers-1" class="headerlink" title="Answers 1"></a>Answers 1</h2><p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>In your case, the second test only works <code>because Python caches small integer objects</code>, which is an implementation detail. For <code>larger integers</code>, this does not work:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1000</span> <span class="keyword">is</span> <span class="number">10</span>**<span class="number">3</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1000</span> == <span class="number">10</span>**<span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>The same holds true for <code>string literals</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"a"</span> <span class="keyword">is</span> <span class="string">"a"</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> <span class="string">"a"</span> * <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">"a"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> x * <span class="number">2</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aa"</span> <span class="keyword">is</span> intern(x*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>Please see <a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none" target="_blank" rel="noopener">this question</a> as well.</p><h2 id="Answers-2"><a href="#Answers-2" class="headerlink" title="Answers 2"></a>Answers 2</h2><p>There is a simple rule of thumb to tell you when to use <code>==</code> or <code>is</code>.</p><ul><li><code>==</code> is for <em>value equality</em>. Use it when you would like to know if two objects have the same value.</li><li><code>is</code> is for <em>reference equality</em>. Use it when you would like to know if two references refer to the same object.</li></ul><p>In general, when you are comparing something to a simple type, you are usually checking for <em>value equality</em>, so you should use <code>==</code>. For example, the intention of your example is probably to check whether x has a value equal to 2 (<code>==</code>), not whether <code>x</code> is literally referring to the same object as 2.</p><p>Something else to note: because of the way the CPython reference implementation works, you’ll get unexpected and inconsistent results if you mistakenly use <code>is</code> to compare for reference equality on integers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">500</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">500</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>That’s pretty much what we expected: <code>a</code> and <code>b</code> have the same value, but are distinct entities. But what about this?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c == d</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>This is inconsistent with the earlier result. What’s going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here’s an example demonstrating this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">250</span>, <span class="number">260</span>): a = i; <span class="keyword">print</span> <span class="string">"%i: %s"</span> % (i, a <span class="keyword">is</span> int(str(i)));</span><br><span class="line">...</span><br><span class="line"><span class="number">250</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">251</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">252</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">253</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">254</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">255</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">256</span>: <span class="keyword">True</span></span><br><span class="line"><span class="number">257</span>: <span class="keyword">False</span></span><br><span class="line"><span class="number">258</span>: <span class="keyword">False</span></span><br><span class="line"><span class="number">259</span>: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>This is another obvious reason not to use <code>is</code>: the behavior is left up to implementations when you’re erroneously using it for value equality.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659" target="_blank" rel="noopener">Is there a difference between <code>==</code> and <code>is</code> in Python?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Source-Question&quot;&gt;&lt;a href=&quot;#Source-Question&quot; class=&quot;headerlink&quot; title=&quot;Source Question&quot;&gt;&lt;/a&gt;Source Question&lt;/h2&gt;&lt;p&gt;My &lt;a href=&quot;https://english.stackexchange.com/questions/19967/what-does-google-fu-mean&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google-fu&lt;/a&gt; has failed me.&lt;/p&gt;
&lt;p&gt;In Python, are the following two tests for equality equivalent?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test one.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test two.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Does this hold true for objects where you would be comparing instances (a &lt;code&gt;list&lt;/code&gt; say)?&lt;/p&gt;
&lt;p&gt;Okay, so this kind of answers my question:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L.append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; L == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Holds true, but...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; L &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Doesn&#39;t.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So &lt;code&gt;==&lt;/code&gt; tests value where &lt;code&gt;is&lt;/code&gt; tests to see if they are the same object?&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 进阶" scheme="http://yoursite.com/categories/Python3-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>原码、反码、补码</title>
    <link href="http://yoursite.com/2018/03/27/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
    <id>http://yoursite.com/2018/03/27/原码、反码、补码/</id>
    <published>2018-03-27T08:10:24.000Z</published>
    <updated>2018-03-27T13:05:48.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器数和真值"><a href="#机器数和真值" class="headerlink" title="机器数和真值"></a>机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念</p><h3 id="机器数"><a href="#机器数" class="headerlink" title="机器数"></a>机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p><blockquote><p>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 <code>00000011</code>。如果是 -3 ，就是 <code>10000011</code> 。那么，这里的 &gt;<code>00000011</code> 和 <code>10000011</code> 就是机器数。</p></blockquote><h3 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 <code>10000011</code>，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（<code>10000011</code> 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p><blockquote><p>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1</p></blockquote><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念<br><a id="more"></a></p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:</p><blockquote><p>[+1]原 = 0000 0001</p></blockquote><blockquote><p>[-1]原 = 1000 0001</p></blockquote><p>因为第一位是符号位, 所以 8 位二进制数的取值范围就是:</p><blockquote><p>[1111 1111 , 0111 1111] 即 [-127 , 127]</p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>反码的表示方法是:  <strong>正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反</p></blockquote><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>补码的表示方法是:  <strong>正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. <code>(即在反码的基础上 +1)</code></strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p><h2 id="为何要使用原码-反码和补码"><a href="#为何要使用原码-反码和补码" class="headerlink" title="为何要使用原码, 反码和补码"></a>为何要使用原码, 反码和补码</h2><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:</p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><p>是对于负数:</p><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p><p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以<code>机器可以只有加法而没有减法</code>, 这样计算机运算的设计就更简单了.</p><p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p><blockquote><p>// 计算十进制的表达式: 1 - 1 = 0</p></blockquote><blockquote><p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p></blockquote><p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.<code>这也就是为何计算机内部不使用原码表示一个数</code>。</p><p><strong>为了解决原码做减法的问题, 出现了反码:</strong></p><blockquote><p>// 计算十进制的表达式: 1 - 1 = 0</p></blockquote><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p></blockquote><p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 <code>[0000 0000]原</code> 和 <code>[1000 0000]原</code> 两个编码表示 0.</p><p><strong>于是补码的出现, 解决了0的符号以及两个编码的问题:</strong></p><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p></blockquote><p>这样 0 用 <code>[0000 0000]</code> 表示, 而以前出现问题的 -0 则不存在了.而且可以用<code>[1000 0000]</code>表示 -128:</p><blockquote><p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p></blockquote><p>-1-127 的结果应该是 -128, 在用补码运算的结果中, <code>[1000 0000]补</code> 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, <strong>所以 -128 并没有原码和反码表示</strong> (对 -128 的补码表示 <code>[1000 0000]补</code> 算出来的原码是<code>[0000 0000]原</code> , 这是不正确的)</p><p>使用补码, <code>不仅仅修复了 0 的符号以及存在两个编码的问题</code>, 而且<code>还能够多表示一个最低数</code>. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].</p><p><strong>故机器的存储是使用补码</strong>, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.<code>而使用补码表示时又可以多保存一个最小值。</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/279d9eba0985" target="_blank" rel="noopener">https://www.jianshu.com/p/279d9eba0985</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;机器数和真值&quot;&gt;&lt;a href=&quot;#机器数和真值&quot; class=&quot;headerlink&quot; title=&quot;机器数和真值&quot;&gt;&lt;/a&gt;机器数和真值&lt;/h2&gt;&lt;p&gt;在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念&lt;/p&gt;
&lt;h3 id=&quot;机器数&quot;&gt;&lt;a href=&quot;#机器数&quot; class=&quot;headerlink&quot; title=&quot;机器数&quot;&gt;&lt;/a&gt;机器数&lt;/h3&gt;&lt;p&gt;一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 &lt;code&gt;00000011&lt;/code&gt;。如果是 -3 ，就是 &lt;code&gt;10000011&lt;/code&gt; 。那么，这里的 &amp;gt;&lt;code&gt;00000011&lt;/code&gt; 和 &lt;code&gt;10000011&lt;/code&gt; 就是机器数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;真值&quot;&gt;&lt;a href=&quot;#真值&quot; class=&quot;headerlink&quot; title=&quot;真值&quot;&gt;&lt;/a&gt;真值&lt;/h3&gt;&lt;p&gt;因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 &lt;code&gt;10000011&lt;/code&gt;，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（&lt;code&gt;10000011&lt;/code&gt; 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>正向代理和反向代理</title>
    <link href="http://yoursite.com/2018/03/26/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/26/正向代理和反向代理/</id>
    <published>2018-03-26T07:11:57.000Z</published>
    <updated>2018-03-26T08:26:56.270Z</updated>
    
    <content type="html"><![CDATA[<p>正向代理（forward proxy）代理客户端，隐藏真实客户端，<br>反向代理（reverse proxy）代理服务器，隐藏真实服务端。</p><a id="more"></a><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>举例:用户想访问：”<a href="http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me" target="_blank" rel="noopener">http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me</a> 这个域名对应的服务器就设置了反向代理功能。</p><p>结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p><p>在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。</p><h3 id="反向代理用途"><a href="#反向代理用途" class="headerlink" title="反向代理用途"></a>反向代理用途</h3><ol><li>保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ol><h3 id="反向代理的实现"><a href="#反向代理的实现" class="headerlink" title="反向代理的实现"></a>反向代理的实现</h3><ol><li>需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上</li><li>服务器返回自己的服务到负载均衡设备</li><li>负载均衡将服务器的服务返回用户</li></ol><p>以上的潜台词是：用户和负载均衡设备直接通信，也意味着<code>用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP</code>，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。</p><p>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><h3 id="正向代理的用途"><a href="#正向代理的用途" class="headerlink" title="正向代理的用途"></a>正向代理的用途</h3><ol><li>访问原来无法访问的资源，如google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ol><p>为了便于理解，摘自<a href="https://www.zhihu.com/question/24723688/answer/48369770" target="_blank" rel="noopener">阿笠博士的回答</a>,<br><img src="https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理.jpg"><br>正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p><h2 id="正向代理和反向代理的区别"><a href="#正向代理和反向代理的区别" class="headerlink" title="正向代理和反向代理的区别"></a>正向代理和反向代理的区别</h2><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p><p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p><p>打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.zhihu.com/question/24723688/answer/160252724" target="_blank" rel="noopener">https://www.zhihu.com/question/24723688/answer/160252724</a></li><li><a href="https://blog.csdn.net/andyzhaojianhui/article/details/48247969" target="_blank" rel="noopener">https://blog.csdn.net/andyzhaojianhui/article/details/48247969</a></li><li><a href="https://www.cnblogs.com/Anker/p/6056540.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/6056540.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正向代理（forward proxy）代理客户端，隐藏真实客户端，&lt;br&gt;反向代理（reverse proxy）代理服务器，隐藏真实服务端。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
