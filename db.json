{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"6ed882b38b103cf190e6e9d7b6db0f27b3480713","modified":1519797698193},{"_id":"themes/next/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1519703664064},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1519624147209},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1519624147209},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1519624147210},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1519624147209},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1519624147210},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1519624147211},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1519624147211},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1519624147211},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1519624147211},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1519624147211},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1519624147212},{"_id":"themes/next/_config.yml","hash":"b6e54c66e7c3504277cbc8776b548098b3dd886c","modified":1519793631323},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1519624147212},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1519624147214},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1519624147214},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1519624147243},{"_id":"source/_posts/Django2-0-1搭建电影网站.md","hash":"9ccb572e15d1f52614d6ca6dfb07f4dc390ffb0e","modified":1519713719694},{"_id":"source/_posts/Github多分支管理Hexo-Blog项目.md","hash":"005d4f3688fd9edb4a3712f675f81d44c1c24dcc","modified":1519713656801},{"_id":"source/_posts/Hexo博客Next主题添加Fork-me-on-GitHub标签.md","hash":"165fac5df8b750ddd0b4ec9a7fe1c94dcb2f1677","modified":1519814115748},{"_id":"source/_posts/Hexo部署的网站项目-deploy-git-中添加README-md.md","hash":"2b664378eee7ddaace2b2a47b57c6a3794f7b56e","modified":1519799364312},{"_id":"source/_posts/IO密集型任务、计算密集型任务，以及多线程、多进程.md","hash":"0535c19510cd22b19892dfa4e6ce7971635a42d2","modified":1520265257211},{"_id":"source/_posts/Mac-OS-命令之文件-夹-删除.md","hash":"fc92200dde61fc919a60ba9cd3784ea5c2cf3773","modified":1520056156813},{"_id":"source/_posts/Markdown小技巧之空格输入.md","hash":"1ff677079c2129c379663b06bc8950dfcc486d84","modified":1520053674804},{"_id":"source/_posts/Python2-x与Python3-x差异.md","hash":"deb8af34ad8293e80708272926da1b06fb716685","modified":1520270464364},{"_id":"source/_posts/Python3-is和-的区别.md","hash":"943017ea2ed4fc4a86039a82d9ce90e9f8d274eb","modified":1520053934031},{"_id":"source/_posts/Python3-staticmethod和-classmethod.md","hash":"f360bdbf1b118b696a7a30a4726c8d20fd7c1426","modified":1519886180315},{"_id":"source/_posts/Python3-作用域.md","hash":"8daa35ac6f77dadb18dd65d5ad134118bec8ac00","modified":1520049390508},{"_id":"source/_posts/Python3-使用Selenium-PhantomJS爬火影忍者漫画.md","hash":"75b5bad4d74ee4c557fff100159c6061e0f19efd","modified":1520015145955},{"_id":"source/_posts/Python3-使用virtualenv搭建虚拟环境.md","hash":"a58749c6683d391b6d5bf7ed2136ff10ac9dc764","modified":1520055163613},{"_id":"source/_posts/Python3-函数重载.md","hash":"b703ad58e952ce0c740093f29cf8b00eb88fea5d","modified":1520048772845},{"_id":"source/_posts/Python3-单下划线和双下划线.md","hash":"9b5a3bf36a7164397847293f1d52023047a2e4e7","modified":1520015101034},{"_id":"source/_posts/Python3-垃圾回收机制.md","hash":"9608340625e70d7dacd84d7148badd2e3f2ba4dc","modified":1520268680605},{"_id":"source/_posts/Python3-子类的查看与类的对象判断.md","hash":"c7629edc3f117b5f8fa3a8513e6c0749efd1ed72","modified":1520044766058},{"_id":"source/_posts/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy.md","hash":"a74d664264a764b3099a2d3289b0d036ac198d18","modified":1520050449659},{"_id":"source/_posts/Python3-真假值对照表.md","hash":"14dd84be5b7590e2fbdc8507efd446aa024bad17","modified":1520054516663},{"_id":"source/_posts/Python3-类变量和实例变量.md","hash":"dcb3717191c637f8aa3535f343806ff8bd54695c","modified":1519891539909},{"_id":"source/_posts/Python3-自省.md","hash":"254d0ccbc934629c705becbd840cf235e899ff48","modified":1520011436828},{"_id":"source/_posts/Python3-鸭子类型.md","hash":"6015069f6196fac57c839f54ab2eb5df13e24acd","modified":1520055654624},{"_id":"source/_posts/hello-world.md","hash":"b8cefcae6e00fb9fc954a93587aa026a34878325","modified":1519713823774},{"_id":"source/_posts/if-name-main.md","hash":"13ecb200736f1cd552d82c258019a85c27bdb81c","modified":1519906398245},{"_id":"source/_posts/python3-可迭代对象、迭代器和生成器.md","hash":"d97214db029e0a17a4302443642046e6eabb8eda","modified":1519966521925},{"_id":"source/_posts/python3-如何用一个表达式合并两个字典.md","hash":"b9f61028aec496143c62b71283853aeb486058b2","modified":1520010697046},{"_id":"source/_posts/一种Git保留两个repo的commit信息进行合并的方法.md","hash":"483550b7fff39bb7aca857887ba23a3637839aee","modified":1519715982036},{"_id":"source/_posts/从零开始学爬虫-01.md","hash":"d30857c41ef0b23aa34919b95a6896069d3670f0","modified":1519751080535},{"_id":"source/_posts/从零开始学爬虫-02.md","hash":"82c11b9d4650984af091d6e580e5ef3dfd0f4dd8","modified":1519751082158},{"_id":"source/_posts/从零开始学爬虫-03.md","hash":"6714ad7f64bdfaa8d5a899adb3adc285b0d589c1","modified":1519751083829},{"_id":"source/_posts/从零开始学爬虫-04.md","hash":"df009a65165b62f9cfb15c801f91270f8055493a","modified":1519751905138},{"_id":"source/_posts/从零开始学爬虫-05.md","hash":"616044ff7f3ef6558b80c583598de43bc0ad8d20","modified":1519752171289},{"_id":"source/_posts/简谈爬虫攻与防.md","hash":"df903bc1ed7c31b3cba3619fc658f892ea3b5385","modified":1520099041793},{"_id":"source/_posts/进程、线程、协程.md","hash":"d417798073b3218e0b2272c1be7de5b7d2ebb180","modified":1520103647035},{"_id":"source/about/index.md","hash":"a413a7fd056cc4f8093fcaeb1497ce0ef5473a6b","modified":1519725856738},{"_id":"source/categories/index.md","hash":"e675535fc5444a91757d1878ea74869cfba250dc","modified":1519728606227},{"_id":"source/tags/index.md","hash":"c246461b696977ca1c1d9f018c95fe08579b9fbc","modified":1519728623228},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519624147194},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1519726463025},{"_id":"themes/next/.git/index","hash":"4040cf935f10a7ba374f6c7adfe534e71a76b6b7","modified":1519640275157},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1519624147186},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519624135722},{"_id":"themes/next/.git/ORIG_HEAD","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1519726468756},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d67b7cbcc31216dec8e0329efb4eed8c0eec4cdb","modified":1519726468734},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1519624147209},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1519624147209},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1519624147210},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1519624147210},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1519624147215},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1519624147215},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1519624147216},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1519624147217},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1519624147216},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1519624147217},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1519624147218},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1519624147218},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1519624147218},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1519624147218},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1519624147218},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1519624147219},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1519624147219},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1519624147219},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1519624147220},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1519624147219},{"_id":"themes/next/layout/_layout.swig","hash":"9f2e3f209579bdc27f87a4d1ef02a06a58fce03e","modified":1519795139298},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1519624147240},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1519624147241},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1519624147242},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1519624147241},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1519624147242},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1519624147242},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1519624147243},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1519624147245},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1519624147244},{"_id":"themes/next/source/.DS_Store","hash":"6266fdba27b0249947350a7214c960c4bc33b9b0","modified":1519703767860},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1519624147345},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1519624147345},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1519624147346},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147279},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519624135723},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519624135726},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519624135725},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519624135726},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519624135726},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1519624135724},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519624135724},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519624135725},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519624135722},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519624135726},{"_id":"themes/next/.git/logs/HEAD","hash":"bc2442b4b1e426d613ede948ab87bb34810af65c","modified":1519624147197},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519624135727},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1519624147220},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1519624147221},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1519624147222},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1519624147222},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1519624147222},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1519624147222},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1519624147221},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1519624147228},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1519624147228},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1519624147221},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1519624147229},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1519624147223},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1519624147223},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1519624147223},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1519624147224},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1519624147225},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1519624147225},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1519624147225},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1519624147236},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1519624147236},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1519624147237},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1519624147237},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1519624147238},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1519624147237},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1519624147238},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1519624147245},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1519624147245},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1519624147246},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1519624147246},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1519624147246},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1519624147246},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1519624147246},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1519624147246},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1519624147247},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1519624147279},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1519624147279},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1519624147280},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1519624147280},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1519624147281},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1519624147281},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1519624147281},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1519624147282},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1519624147282},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1519624147282},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1519624147283},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1519624147283},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519624147284},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1519624147283},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1519624147284},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519624147284},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1519624147285},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1519624147285},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1519624147285},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"486f26a392d7783a3e9ac1a81ddecbde060f47e5","modified":1519703513674},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147229},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147229},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147270},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147270},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147270},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147278},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519624147279},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1519624147195},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1519624147229},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1519624147228},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1519624147229},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1519624147224},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1519624147224},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1519624147226},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1519624147226},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1519624147226},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1519624147227},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1519624147227},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1519624147227},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1519624147228},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1519624147230},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1519624147230},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1519624147230},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1519624147231},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1519624147231},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1519624147231},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1519624147231},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1519624147232},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1519624147232},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1519624147232},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1519624147232},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1519624147233},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1519624147233},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1519624147234},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1519624147234},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1519624147235},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1519624147235},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1519624147235},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1519624147235},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1519624147236},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1519624147236},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1519624147236},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1519624147238},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1519624147239},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1519624147239},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1519624147240},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1519624147269},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1519624147270},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1519624147270},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1519624147270},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1519624147278},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1519624147277},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1519624147278},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1519624147286},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1519624147286},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1519624147286},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1519624147287},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1519624147287},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1519624147287},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1519624147288},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1519624147287},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1519624147288},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1519624147289},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1519624147289},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1519624147295},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519624147299},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1519624147299},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1519624147278},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1519624147307},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1519624147307},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1519624147307},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1519624147300},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1519624147309},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1519624147300},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1519624147310},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1519624147310},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1519624147306},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1519624147309},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1519624147309},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1519624147326},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1519624147324},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1519624147326},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1519624147327},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1519624147326},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1519624147327},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1519624147327},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1519624147328},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1519624147328},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1519624147329},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1519624147329},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1519624147329},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1519624147330},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1519624147330},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1519624147330},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1519624147330},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1519624147331},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1519624147331},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1519624147331},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1519624147332},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1519624147332},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1519624147332},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1519624147333},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1519624147333},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1519624147334},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1519624147334},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1519624147335},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1519624147341},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1519624147344},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1519624147344},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1519624147345},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1519624147341},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519624147325},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519624147193},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"bc2442b4b1e426d613ede948ab87bb34810af65c","modified":1519624147198},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1519624147238},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1519624147238},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1519624147247},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1519624147248},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1519624147248},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1519624147247},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1519624147252},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1519624147248},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1519624147261},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1519624147268},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1519624147268},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1519624147267},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1519624147267},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1519624147268},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1519624147269},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1519624147269},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1519624147271},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1519624147271},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1519624147272},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1519624147272},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1519624147272},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1519624147273},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1519624147271},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1519624147273},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1519624147274},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1519624147274},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1519624147275},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1519624147275},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1519624147275},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1519624147276},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1519624147276},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1519624147276},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1519624147277},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1519624147277},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1519624147276},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1519624147288},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1519624147292},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1519624147294},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1519624147294},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519624147301},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519624147301},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519624147301},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519624147302},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519624147302},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519624147302},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1519624147305},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1519624147306},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1519624147306},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1519624147308},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1519624147308},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1519624147311},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1519624147311},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1519624147311},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1519624147340},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1519624147340},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1519624147293},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1519624147323},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1519624147324},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1519624147343},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"bc2442b4b1e426d613ede948ab87bb34810af65c","modified":1519624147193},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1519624147248},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1519624147249},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1519624147248},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1519624147249},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1519624147250},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1519624147249},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1519624147249},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1519624147250},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1519624147250},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1519624147251},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1519624147251},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1519624147251},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1519624147252},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1519624147253},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1519624147253},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1519624147253},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1519624147252},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1519624147254},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1519624147254},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1519624147254},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1519624147255},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1519624147255},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1519624147255},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1519624147255},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1519624147256},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1519624147256},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1519624147256},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1519624147257},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1519624147257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1519624147258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1519624147259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1519624147257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1519624147259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1519624147259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1519624147260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1519624147260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1519624147260},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1519624147261},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1519624147261},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1519624147262},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1519624147262},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1519624147262},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1519624147259},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1519624147262},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1519624147263},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1519624147263},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1519624147263},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1519624147264},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1519624147264},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1519624147264},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1519624147265},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1519624147265},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1519624147265},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1519624147265},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1519624147266},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1519624147266},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1519624147266},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1519624147266},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1519624147290},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1519624147290},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1519624147291},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1519624147291},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1519624147292},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519624147303},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519624147303},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1519624147274},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1519624147273},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1519624147304},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1519624147275},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1519624147304},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519624147304},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1519624147305},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1519624147313},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1519624147316},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1519624147322},{"_id":"themes/next/.git/objects/pack/pack-b8112ba9b2c5bcb1cb04d783dc033a5ffee52826.idx","hash":"40b3e03b5059218f1654f42fa247459300719d43","modified":1519624147160},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1519624147299},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1519624147339},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1519624147320},{"_id":"themes/next/.git/objects/pack/pack-b8112ba9b2c5bcb1cb04d783dc033a5ffee52826.pack","hash":"e3ce8bde10cc496dd49a3dbb6e8adf7035e5faad","modified":1519624147155},{"_id":"public/atom.xml","hash":"1ea30f1ca208802ddc7362f8c3cb338298968dd5","modified":1520270524448},{"_id":"public/search.xml","hash":"a426dc91d80369a6e0550a64d0a6508e12c8b82d","modified":1520270524565},{"_id":"public/about/index.html","hash":"92b56ca29678c7d436a452b69aa887da19925855","modified":1520270027318},{"_id":"public/categories/index.html","hash":"641e6452e1c533223b41e957f88414a59dcd8f85","modified":1520270027319},{"_id":"public/tags/index.html","hash":"aad8882c785399b9de19f3a21140f7f4e748a5c4","modified":1520270027319},{"_id":"public/2018/03/05/IO密集型任务、计算密集型任务，以及多线程、多进程/index.html","hash":"2449bc317dea37396dac47bad178b73e50864120","modified":1520270027319},{"_id":"public/2018/03/05/Python3-垃圾回收机制/index.html","hash":"f9a4f3dcd3ea927676b6b0ca3fa61b6820a596a0","modified":1520270027319},{"_id":"public/2018/03/04/进程、线程、协程/index.html","hash":"7f2823d889f528637967d21c8d8baf6a372d2247","modified":1520270027319},{"_id":"public/2018/03/03/Mac-OS-命令之文件-夹-删除/index.html","hash":"d7d86e62182bbfacdd17036efac38581e001557a","modified":1520270027320},{"_id":"public/2018/03/03/Python3-使用virtualenv搭建虚拟环境/index.html","hash":"bf6ea4146a4c9d0956d6f5bc4cc813544d2dbb6a","modified":1520270027320},{"_id":"public/2018/03/03/Python3-真假值对照表/index.html","hash":"6da2c32ab472fc68e92b81bba557f96f907f85d2","modified":1520270027320},{"_id":"public/2018/03/03/Markdown小技巧之空格输入/index.html","hash":"f73c8c3910123c802c7eea0ab0e58263c6941dde","modified":1520270027320},{"_id":"public/2018/03/03/Python3-is和-的区别/index.html","hash":"513c2a013410f9dbe7504ea5354260d8f04372d4","modified":1520270027320},{"_id":"public/2018/03/03/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy/index.html","hash":"5f8a8a42e0339e6873c8ad8814c6d093811ec268","modified":1520270027320},{"_id":"public/2018/03/03/Python3-作用域/index.html","hash":"b6f41351bf0a3a9d6348ea9f793fbbe191bb1adf","modified":1520270027320},{"_id":"public/2018/03/03/Python3-函数重载/index.html","hash":"16c148bf977145f15dff41f2b7ce63be0cc4b67d","modified":1520270027320},{"_id":"public/2018/03/03/Python3-子类的查看与类的对象判断/index.html","hash":"e5acb8d596425a3b971e98386583eea9502945ba","modified":1520270027320},{"_id":"public/2018/03/03/python3-如何用一个表达式合并两个字典/index.html","hash":"2906860428833b6977e7132fd4c8e34f8b5610bf","modified":1520270027321},{"_id":"public/2018/03/01/python3-可迭代对象、迭代器和生成器/index.html","hash":"bd66d501cf85e7170568155894b03cae23267e3d","modified":1520270027321},{"_id":"public/2018/03/01/if-name-main/index.html","hash":"520fc9f7c47a7cb79e26d2b3ac9ffa701cda244d","modified":1520270027321},{"_id":"public/2018/03/01/Python3-单下划线和双下划线/index.html","hash":"242260e0bfa2cefaf27e3ce0346e652384184c76","modified":1520270027322},{"_id":"public/2018/03/01/Python3-自省/index.html","hash":"e36c5f40ecf06346c2a4240e438017aab1063b2a","modified":1520270027322},{"_id":"public/2018/03/01/Python3-类变量和实例变量/index.html","hash":"056924bb13ffc7ecb4715cba8a2f65b3578ebeb8","modified":1520270027323},{"_id":"public/2018/03/01/Python3-staticmethod和-classmethod/index.html","hash":"47fe26003849f2e1336ce7ccfb408b6fac1720ef","modified":1520270027324},{"_id":"public/2018/02/28/Hexo博客Next主题添加Fork-me-on-GitHub标签/index.html","hash":"e0bb066ef79a609cde8c00ffb13d63745f89e2c1","modified":1520270027324},{"_id":"public/2018/02/28/Hexo部署的网站项目-deploy-git-中添加README-md/index.html","hash":"c902168be872839401ae334405070e352875c8a9","modified":1520270027324},{"_id":"public/2018/02/28/从零开始学爬虫-05/index.html","hash":"8b1f37b4d156d827c65728c3f6028d2734ba878c","modified":1520270027324},{"_id":"public/2018/02/28/从零开始学爬虫-04/index.html","hash":"bddf2f68c102075b12ab303a0330dbf57ab759b7","modified":1520270027324},{"_id":"public/2018/02/28/从零开始学爬虫-03/index.html","hash":"94a859228b0290d37316490d2de4a0f1f8fb6e68","modified":1520270027324},{"_id":"public/2018/02/28/从零开始学爬虫-02/index.html","hash":"89642d72187b0649963e55d69eb4133c2a210328","modified":1520270027324},{"_id":"public/2018/02/28/从零开始学爬虫-01/index.html","hash":"21cedbe79c64f7c3bf436366504b36ed019a2765","modified":1520270027324},{"_id":"public/2018/02/27/一种Git保留两个repo的commit信息进行合并的方法/index.html","hash":"3b972a3cfc66c8338a35fee4efd09307a0386a96","modified":1520270027325},{"_id":"public/2018/02/27/Python3-使用Selenium-PhantomJS爬火影忍者漫画/index.html","hash":"c85de2b3d7868a132e2162812956706564ca9cd0","modified":1520270027325},{"_id":"public/2018/02/27/Django2-0-1搭建电影网站/index.html","hash":"730e8568ea6370b141815bc05096e6c63109d14f","modified":1520270027325},{"_id":"public/2018/02/27/简谈爬虫攻与防/index.html","hash":"277422cbf64f1dc40dfd754cb331f60a8e5bb5ef","modified":1520270027325},{"_id":"public/2018/02/27/Github多分支管理Hexo-Blog项目/index.html","hash":"c4831a2ee0c285a160ccba82140bd737718b145f","modified":1520270027325},{"_id":"public/2018/02/26/hello-world/index.html","hash":"aff6c5d6304d3a20d463c3e34669965ec1e22a7b","modified":1520270027325},{"_id":"public/categories/Django/index.html","hash":"60fc54e72e4f769b16f058567a612ad87654e284","modified":1520270027325},{"_id":"public/categories/Hexo/index.html","hash":"c9fa763e9f3151d82c23b05e4a49cc898322064d","modified":1520270027325},{"_id":"public/categories/Mac-OS-命令行/index.html","hash":"4ffad6662a306904d7a0482f6d5c9a5b39182d1e","modified":1520270027325},{"_id":"public/categories/操作系统/index.html","hash":"c8b7acdb216264cae22e60bdeef2e4709fa37068","modified":1520270027325},{"_id":"public/categories/Markdown/index.html","hash":"2645b27017584dbb9868d433f9a1e026dcf014d4","modified":1520270027325},{"_id":"public/categories/Python3-进阶/index.html","hash":"7512d0a3e681e360c3c008580261ab4e9bf9716e","modified":1520270027325},{"_id":"public/categories/Python3-进阶/page/2/index.html","hash":"97bc452795bf94fda5169f033d98912b9b4980e0","modified":1520270027325},{"_id":"public/categories/Spider/index.html","hash":"8a81602778e969fb8edc0c34a37aee357fb74146","modified":1520270027325},{"_id":"public/categories/操作系统/多任务处理/index.html","hash":"08a9bdba5e48e95c5dabfcc7121b52a6dc4db23b","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-True-or-False/index.html","hash":"f00074cf2a2db7c5bda73b6962cc2ea3f6869d7a","modified":1520270027326},{"_id":"public/categories/Python3-进阶/类变量-和-实例变量/index.html","hash":"29b0218254e37f24547f1647bddc7015036e3c57","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-自省/index.html","hash":"02d81dcaba763b82d7bb3fb075daff778b5711e2","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-鸭子类型/index.html","hash":"33e2e7c1cbd7c16380feaec320a7fa34f6968e3b","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Staticmethod-Classmethod/index.html","hash":"7abbcac64e8033c80c1499db1d9721fc00f1803b","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-迭代器和生成器/index.html","hash":"86e9edb0de98cba96e8e20f93da7fa8d4d460eb0","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-作用域/index.html","hash":"ed27abe30cc024f9924e2a2dd5a91e1e8b358584","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-数据结构/index.html","hash":"c95645a9755def9c613d59e4e5245da27ce62f6c","modified":1520270027326},{"_id":"public/categories/Git/index.html","hash":"b26e117f944c2f68845713b3108696c9987e8375","modified":1520270027326},{"_id":"public/categories/Spider/Selenium/index.html","hash":"8acbd26afaff1ab7337ba20a94799a119c0a2d7e","modified":1520270027326},{"_id":"public/categories/Spider/Urllib/index.html","hash":"0ef161c36a40c22e147f27b6c12184f1b97dc7e1","modified":1520270027326},{"_id":"public/categories/Python3-进阶/Python3-virtualenv/index.html","hash":"596b78258d7bcd8fed55cbc8bb8a4b155b817b19","modified":1520270027327},{"_id":"public/categories/Python3-进阶/Python3-重载/index.html","hash":"7ceed8caae0588e3fa9a9411f471190256977788","modified":1520270027327},{"_id":"public/categories/Spider/Scrapy/index.html","hash":"ca23b4084eedfe1717a1670d988c837606cb29c9","modified":1520270027327},{"_id":"public/categories/Python3-进阶/Python3-下划线/index.html","hash":"702a6f43d4e2d07dcb7a455f6c3bdc2f3e049dac","modified":1520270027327},{"_id":"public/categories/Python3-进阶/Python3-拷贝对象/index.html","hash":"04d2f50025ecc448b6aa0d797387150d45016c7e","modified":1520270027327},{"_id":"public/archives/index.html","hash":"d94a0e6d442b6a3f9477f93167dce643cd78b29b","modified":1520270027328},{"_id":"public/archives/page/2/index.html","hash":"1a4e9f9aead10e63b66e200f4a1b44a58cc04dfe","modified":1520270027328},{"_id":"public/archives/page/3/index.html","hash":"977ff1db9a5d4f198774f6537e98e819f7ee4b24","modified":1520270027328},{"_id":"public/archives/page/4/index.html","hash":"2d2e2f24cd639ebdf7372e0337351f9cd50187cb","modified":1520270027328},{"_id":"public/archives/2018/index.html","hash":"0be45cc1c2f683dc384dfe9405ebdff761f23c0f","modified":1520270027328},{"_id":"public/archives/2018/page/2/index.html","hash":"6b1079fd3103237d9354ebf06fda16415fd87c21","modified":1520270027328},{"_id":"public/archives/2018/page/3/index.html","hash":"daebefc83cddf8f543eba2f93e0af851a3db12f5","modified":1520270027328},{"_id":"public/archives/2018/page/4/index.html","hash":"ee9070a2b81c22acda73e90344845109d88bc246","modified":1520270027328},{"_id":"public/2018/03/03/Python3-鸭子类型/index.html","hash":"a16b53720fda6e83cb5806ec3eddc5646a2cbbcb","modified":1520270027328},{"_id":"public/archives/2018/02/index.html","hash":"58c1757fd8af753dab03521a2966a4eb2b225ccc","modified":1520270027328},{"_id":"public/archives/2018/02/page/2/index.html","hash":"cff7022f23b8e94490ddbfd31f9583ee76c2849a","modified":1520270027329},{"_id":"public/archives/2018/03/index.html","hash":"6b2db7efe17adf6ea73a7b201ddcfd7c03564dc7","modified":1520270027329},{"_id":"public/archives/2018/03/page/2/index.html","hash":"5c30684bff0eb77d30f7693f0d0b4e5facbc51a2","modified":1520270027329},{"_id":"public/index.html","hash":"9061488ab699e56b5b5306d9396738cfcb116f1e","modified":1520270524602},{"_id":"public/page/2/index.html","hash":"d1e4ef70fd1cc450a77fd297e55a1c7398e2ca5e","modified":1520270027329},{"_id":"public/page/3/index.html","hash":"9196924a543baf261baac7cff7ddb02e45402e4f","modified":1520270027329},{"_id":"public/page/4/index.html","hash":"b780b9d2f1821bf917acc8da74175bcae65335ec","modified":1520270027329},{"_id":"public/tags/Django/index.html","hash":"ec468ad330f0490a28a7adfce2caa1018e01da4d","modified":1520270027330},{"_id":"public/tags/Python3/index.html","hash":"031f695a672032f14ce010fed0d4eec607af3023","modified":1520270027330},{"_id":"public/tags/Python3/page/2/index.html","hash":"41d5fc173bb0e18962e719edf7d3da40fcc5e790","modified":1520270027330},{"_id":"public/tags/Python3/page/3/index.html","hash":"316f4b471e7393570027b904724a343d8513f6a9","modified":1520270027330},{"_id":"public/tags/Hexo/index.html","hash":"3e8ba258b51bedcad61c14bb7edeb999302368c6","modified":1520270027330},{"_id":"public/tags/Git/index.html","hash":"d8ed19c33eca0600c49c00872174299f50113e3a","modified":1520270027330},{"_id":"public/tags/Mac-OS-命令行/index.html","hash":"787e97854bbdc19d8ce63587fd39ca71667506e2","modified":1520270027330},{"_id":"public/tags/操作系统/index.html","hash":"e9f8c75875cce6fd87a96b06096f0ccbee95045b","modified":1520270027330},{"_id":"public/tags/Markdown/index.html","hash":"cedd22c6e26a5309d4c5c3c53ee2e7d999b4fb1e","modified":1520270027330},{"_id":"public/tags/Spider/index.html","hash":"0ca0f21dde8eb74f996f2c8f4636c6996eacaf1a","modified":1520270027330},{"_id":"public/tags/Selenium/index.html","hash":"eaaaf77e3b3b431ae49f2375d8b873b0769a9ba4","modified":1520270027331},{"_id":"public/tags/PhantomJS/index.html","hash":"525966b45d74a844211db39b48b8d24471c884ce","modified":1520270027331},{"_id":"public/tags/Urllib/index.html","hash":"c23d9eb718c5ff940164533c60da1c0d8a3c8f50","modified":1520270027331},{"_id":"public/tags/Scrapy/index.html","hash":"753cbeffc5a94cdc4e667c8a45a02898e436751b","modified":1520270027331},{"_id":"public/2018/03/06/Python2-x与Python3-x差异/index.html","hash":"a181100f5464d886d3e0f67b14736e4f655048ee","modified":1520270524602},{"_id":"public/archives/2018/03/page/3/index.html","hash":"7d6eeb066ccfa4e2b0f0712e72bb0559883304b9","modified":1520270027344},{"_id":"public/README.md","hash":"6ed882b38b103cf190e6e9d7b6db0f27b3480713","modified":1520270027365},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1520270027365},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520270027365},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520270027365},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1520270027365},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1520270027365},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1520270027365},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1520270027365},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1520270027365},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1520270027366},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1520270027366},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520270027366},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520270027366},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520270027366},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1520270027366},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520270027366},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520270027366},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1520270027366},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1520270027366},{"_id":"public/uploads/avatar.jpg","hash":"486f26a392d7783a3e9ac1a81ddecbde060f47e5","modified":1520270027366},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1520270027366},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1520270027367},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520270027367},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520270027367},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520270027367},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520270027367},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520270027367},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520270027367},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1520270027367},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520270027367},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520270027367},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520270027367},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520270027367},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520270027368},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520270027368},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520270029099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520270029113},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1520270029201},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1520270029201},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1520270029201},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1520270029206},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1520270029215},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1520270029216},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1520270029217},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1520270029217},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1520270029217},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1520270029218},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520270029220},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520270029220},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1520270029221},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1520270029233},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1520270029233},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1520270029233},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1520270029233},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1520270029233},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1520270029234},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1520270029234},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1520270029234},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1520270029239},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520270029240},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520270029251},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520270029252},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520270029252},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520270029253},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520270029253},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520270029266},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520270029272},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520270029273},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520270029275},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520270029279},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520270029281},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520270029282},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1520270029282},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1520270029282},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1520270029283},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1520270029283},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1520270029283},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1520270029283},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520270029283},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1520270029287},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1520270029295},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1520270029295},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1520270029296},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1520270029296},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1520270029296},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1520270029296},{"_id":"public/css/main.css","hash":"e1011f96ae472473f78b7c2d583618ab4b6b8c28","modified":1520270029305},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1520270029305},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1520270029306},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1520270029310},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1520270029313},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1520270029314},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1520270029315},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1520270029315},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520270029315},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1520270029317},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1520270029318},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1520270029318},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1520270029319},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1520270029319},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1520270029319},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1520270029320},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1520270029320},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1520270029323},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1520270029330},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1520270029332},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1520270029332},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520270029333},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520270029339},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520270029351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1520270030075}],"Category":[{"name":"Django","_id":"cjeehimqn0004qkotqkpnt0fw"},{"name":"Hexo","_id":"cjeehimr00009qkotf8ym323u"},{"name":"Mac OS 命令行","_id":"cjeehimrg000rqkothpjwvgl0"},{"name":"操作系统","_id":"cjeehimrk000zqkottsdbjh8n"},{"name":"Markdown","_id":"cjeehimro0016qkot0mlfe4an"},{"name":"Python3 进阶","_id":"cjeehimrt001dqkot5gvhpyho"},{"name":"Spider","_id":"cjeehims60025qkothyt5sdik"},{"name":"多任务处理","parent":"cjeehimrk000zqkottsdbjh8n","_id":"cjeehimsk002uqkot1u4utz0u"},{"name":"Python3 True or False","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimso003aqkotsaogh9lo"},{"name":"类变量 和 实例变量","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsp003eqkot9rbpbjtr"},{"name":"Python3 自省","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsq003jqkottqslj7ii"},{"name":"Python3 鸭子类型","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsq003oqkotht9o13zf"},{"name":"Staticmethod & Classmethod","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsr003tqkotb8tkhoox"},{"name":"Python3 迭代器和生成器","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsr003yqkot7gl4ic3c"},{"name":"Python3 作用域","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimss0044qkotk6jdtsd3"},{"name":"Python3 数据结构","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimst0047qkotcy95qgt8"},{"name":"Git","_id":"cjeehimst004aqkotx2bxy746"},{"name":"Selenium","parent":"cjeehims60025qkothyt5sdik","_id":"cjeehimst004dqkotb3lvbr19"},{"name":"Urllib","parent":"cjeehims60025qkothyt5sdik","_id":"cjeehimsu004gqkotgtbqtd1p"},{"name":"Python3 virtualenv","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsw004kqkot9z4tnmr9"},{"name":"Python3 重载","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsy004tqkotraipvh1j"},{"name":"Scrapy","parent":"cjeehims60025qkothyt5sdik","_id":"cjeehimt0004zqkothwbsf55v"},{"name":"Python3 下划线","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimt10053qkotyon6wp2v"},{"name":"Python3 拷贝对象","parent":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimt30058qkotdjdortcs"}],"Data":[],"Page":[{"title":"about","date":"2018-02-27T10:04:16.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-27 18:04:16\n---\n","updated":"2018-02-27T10:04:16.738Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjeehimqg0001qkottmptfsfq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-02-26T07:16:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-26 15:16:43\ntype: \"categories\"\n---\n","updated":"2018-02-27T10:50:06.227Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjeehimqk0003qkotz7vm2eqt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-26T07:13:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-26 15:13:29\ntype: \"tags\"\n---\n","updated":"2018-02-27T10:50:23.228Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjeehimyo005fqkot5avc0szf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Django2.0.1搭建电影网站","date":"2018-02-27T05:48:44.000Z","_content":"![首页](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png)\n\n本项目已经部署到服务器，可以通过该IP查看\nhttp://59.110.221.56/\n[GitHub源代码](https://github.com/ByiProX/ThoughtWorks-Cinema)\n<!--more-->\n\n## 技术栈\n> Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust\n\n\n## 本地服务运行方法\n\n终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：\n\n```python\nsource ../venv/bin/activate.fish\nsource ../venv/bin/activate\nsource ../venv/bin/activate.csh\n```\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n**如果报错**，终端进入requirements.txt所在目录，运行命令：\n```python3\npip3 install -r requirements.txt\n```\n\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n## 单元测试运行方法 ##\n在manage.py路径下终端运行\n\n```python\npython3 manage.py test\n```\n\n## 网站功能描述\n\n- 实现导航栏搜索电影，支持按年份搜索和类型搜索\n    -- 显示分类列表\n    -- 点击分类显示符合分类要求的电影\n\n- 实现搜索功能，支持按电影名称模糊搜索\n\n- 实现电影详细信息查看功能\n    -- 显示电影详细信息\n    -- 显示豆瓣 Top 5 影评\n    -- 在电影详细页面显示相似电影推荐\n    -- 增加电影观看链接\n\n## API\n\n- 按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545\n\n- 按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼\n\n- 按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish\n\n- 按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情\n\n- 按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003\n\n\n## 网站性能测试结果\n\n在文件locustfile.py路径下运行\n```python3\nlocust --host=http://59.110.221.56\n```\n\n### 压力测试\n* 采取的框架：**locust**\n* 服务器性能：\n    * CPU：1核\n    * 内存：2 GB (I/O优化)\n    * 带宽：1Mbps\n* 测试结果：\n    * 500人：100%正确\n    * 1000人：40%出错率\n* 测试截图\n\n\n\n![Screen Shot 2018-02-08 at 16.15.49.png](http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.14.10.png](http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.13.49.png](http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 电影网站的其他截图\n\n![list](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png)\n![detail](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png)\n\n\n## Reference\n\n[Locust 简介以及使用](https://my.oschina.net/u/1447352/blog/1499428/)\n","source":"_posts/Django2-0-1搭建电影网站.md","raw":"---\ntitle: Django2.0.1搭建电影网站\ndate: 2018-02-27 13:48:44\ntags:\n  - Django\n  - Python3\ncategories:\n  - Django\n---\n![首页](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png)\n\n本项目已经部署到服务器，可以通过该IP查看\nhttp://59.110.221.56/\n[GitHub源代码](https://github.com/ByiProX/ThoughtWorks-Cinema)\n<!--more-->\n\n## 技术栈\n> Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust\n\n\n## 本地服务运行方法\n\n终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：\n\n```python\nsource ../venv/bin/activate.fish\nsource ../venv/bin/activate\nsource ../venv/bin/activate.csh\n```\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n**如果报错**，终端进入requirements.txt所在目录，运行命令：\n```python3\npip3 install -r requirements.txt\n```\n\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n## 单元测试运行方法 ##\n在manage.py路径下终端运行\n\n```python\npython3 manage.py test\n```\n\n## 网站功能描述\n\n- 实现导航栏搜索电影，支持按年份搜索和类型搜索\n    -- 显示分类列表\n    -- 点击分类显示符合分类要求的电影\n\n- 实现搜索功能，支持按电影名称模糊搜索\n\n- 实现电影详细信息查看功能\n    -- 显示电影详细信息\n    -- 显示豆瓣 Top 5 影评\n    -- 在电影详细页面显示相似电影推荐\n    -- 增加电影观看链接\n\n## API\n\n- 按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545\n\n- 按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼\n\n- 按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish\n\n- 按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情\n\n- 按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003\n\n\n## 网站性能测试结果\n\n在文件locustfile.py路径下运行\n```python3\nlocust --host=http://59.110.221.56\n```\n\n### 压力测试\n* 采取的框架：**locust**\n* 服务器性能：\n    * CPU：1核\n    * 内存：2 GB (I/O优化)\n    * 带宽：1Mbps\n* 测试结果：\n    * 500人：100%正确\n    * 1000人：40%出错率\n* 测试截图\n\n\n\n![Screen Shot 2018-02-08 at 16.15.49.png](http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.14.10.png](http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.13.49.png](http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 电影网站的其他截图\n\n![list](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png)\n![detail](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png)\n\n\n## Reference\n\n[Locust 简介以及使用](https://my.oschina.net/u/1447352/blog/1499428/)\n","slug":"Django2-0-1搭建电影网站","published":1,"updated":"2018-02-27T06:41:59.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimqb0000qkot6riik8zf","content":"<p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png\" alt=\"首页\"></p>\n<p>本项目已经部署到服务器，可以通过该IP查看<br><a href=\"http://59.110.221.56/\" target=\"_blank\" rel=\"noopener\">http://59.110.221.56/</a><br><a href=\"https://github.com/ByiProX/ThoughtWorks-Cinema\" target=\"_blank\" rel=\"noopener\">GitHub源代码</a><br><a id=\"more\"></a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><blockquote>\n<p>Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust</p>\n</blockquote>\n<h2 id=\"本地服务运行方法\"><a href=\"#本地服务运行方法\" class=\"headerlink\" title=\"本地服务运行方法\"></a>本地服务运行方法</h2><p>终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ../venv/bin/activate.fish</span><br><span class=\"line\">source ../venv/bin/activate</span><br><span class=\"line\">source ../venv/bin/activate.csh</span><br></pre></td></tr></table></figure>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果报错</strong>，终端进入requirements.txt所在目录，运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单元测试运行方法\"><a href=\"#单元测试运行方法\" class=\"headerlink\" title=\"单元测试运行方法\"></a>单元测试运行方法</h2><p>在manage.py路径下终端运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py test</span><br></pre></td></tr></table></figure>\n<h2 id=\"网站功能描述\"><a href=\"#网站功能描述\" class=\"headerlink\" title=\"网站功能描述\"></a>网站功能描述</h2><ul>\n<li><p>实现导航栏搜索电影，支持按年份搜索和类型搜索<br>  – 显示分类列表<br>  – 点击分类显示符合分类要求的电影</p>\n</li>\n<li><p>实现搜索功能，支持按电影名称模糊搜索</p>\n</li>\n<li><p>实现电影详细信息查看功能<br>  – 显示电影详细信息<br>  – 显示豆瓣 Top 5 影评<br>  – 在电影详细页面显示相似电影推荐<br>  – 增加电影观看链接</p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><p>按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545</p>\n</li>\n<li><p>按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼</p>\n</li>\n<li><p>按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish</p>\n</li>\n<li><p>按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情</p>\n</li>\n<li><p>按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003</p>\n</li>\n</ul>\n<h2 id=\"网站性能测试结果\"><a href=\"#网站性能测试结果\" class=\"headerlink\" title=\"网站性能测试结果\"></a>网站性能测试结果</h2><p>在文件locustfile.py路径下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locust --host=http://59.110.221.56</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><ul>\n<li>采取的框架：<strong>locust</strong></li>\n<li>服务器性能：<ul>\n<li>CPU：1核</li>\n<li>内存：2 GB (I/O优化)</li>\n<li>带宽：1Mbps</li>\n</ul>\n</li>\n<li>测试结果：<ul>\n<li>500人：100%正确</li>\n<li>1000人：40%出错率</li>\n</ul>\n</li>\n<li>测试截图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.15.49.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.14.10.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.13.49.png\"></p>\n<h2 id=\"电影网站的其他截图\"><a href=\"#电影网站的其他截图\" class=\"headerlink\" title=\"电影网站的其他截图\"></a>电影网站的其他截图</h2><p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png\" alt=\"list\"><br><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png\" alt=\"detail\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://my.oschina.net/u/1447352/blog/1499428/\" target=\"_blank\" rel=\"noopener\">Locust 简介以及使用</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png\" alt=\"首页\"></p>\n<p>本项目已经部署到服务器，可以通过该IP查看<br><a href=\"http://59.110.221.56/\" target=\"_blank\" rel=\"noopener\">http://59.110.221.56/</a><br><a href=\"https://github.com/ByiProX/ThoughtWorks-Cinema\" target=\"_blank\" rel=\"noopener\">GitHub源代码</a><br>","more":"</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><blockquote>\n<p>Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust</p>\n</blockquote>\n<h2 id=\"本地服务运行方法\"><a href=\"#本地服务运行方法\" class=\"headerlink\" title=\"本地服务运行方法\"></a>本地服务运行方法</h2><p>终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ../venv/bin/activate.fish</span><br><span class=\"line\">source ../venv/bin/activate</span><br><span class=\"line\">source ../venv/bin/activate.csh</span><br></pre></td></tr></table></figure>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果报错</strong>，终端进入requirements.txt所在目录，运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单元测试运行方法\"><a href=\"#单元测试运行方法\" class=\"headerlink\" title=\"单元测试运行方法\"></a>单元测试运行方法</h2><p>在manage.py路径下终端运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py test</span><br></pre></td></tr></table></figure>\n<h2 id=\"网站功能描述\"><a href=\"#网站功能描述\" class=\"headerlink\" title=\"网站功能描述\"></a>网站功能描述</h2><ul>\n<li><p>实现导航栏搜索电影，支持按年份搜索和类型搜索<br>  – 显示分类列表<br>  – 点击分类显示符合分类要求的电影</p>\n</li>\n<li><p>实现搜索功能，支持按电影名称模糊搜索</p>\n</li>\n<li><p>实现电影详细信息查看功能<br>  – 显示电影详细信息<br>  – 显示豆瓣 Top 5 影评<br>  – 在电影详细页面显示相似电影推荐<br>  – 增加电影观看链接</p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><p>按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545</p>\n</li>\n<li><p>按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼</p>\n</li>\n<li><p>按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish</p>\n</li>\n<li><p>按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情</p>\n</li>\n<li><p>按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003</p>\n</li>\n</ul>\n<h2 id=\"网站性能测试结果\"><a href=\"#网站性能测试结果\" class=\"headerlink\" title=\"网站性能测试结果\"></a>网站性能测试结果</h2><p>在文件locustfile.py路径下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locust --host=http://59.110.221.56</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><ul>\n<li>采取的框架：<strong>locust</strong></li>\n<li>服务器性能：<ul>\n<li>CPU：1核</li>\n<li>内存：2 GB (I/O优化)</li>\n<li>带宽：1Mbps</li>\n</ul>\n</li>\n<li>测试结果：<ul>\n<li>500人：100%正确</li>\n<li>1000人：40%出错率</li>\n</ul>\n</li>\n<li>测试截图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.15.49.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.14.10.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.13.49.png\"></p>\n<h2 id=\"电影网站的其他截图\"><a href=\"#电影网站的其他截图\" class=\"headerlink\" title=\"电影网站的其他截图\"></a>电影网站的其他截图</h2><p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png\" alt=\"list\"><br><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png\" alt=\"detail\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://my.oschina.net/u/1447352/blog/1499428/\" target=\"_blank\" rel=\"noopener\">Locust 简介以及使用</a></p>"},{"title":"Hexo博客Next主题添加Fork me on GitHub标签","date":"2018-02-28T10:09:26.000Z","_content":"\n给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。\n\n打开文件：**hexo博客根目录/themes/next/layout/_layout.swig** 找到如下代码块\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    [样式代码]\n...\n\n```\n<!-- more -->\n样式代码 [**看这里**](https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons) ，挑选自己喜欢的样式。\n\n然后将样式代码添加到上述 **_layout.swig** 代码块后面，比如选择黑色经典款，即：\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    # [样式代码]\n    <a href=\"https://github.com/you\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n\n...\n\n```\n\n\n重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。\n大家看我的，感觉很搭( ⊙ o ⊙ )！\n![fork me on github](http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Hexo博客Next主题添加Fork-me-on-GitHub标签.md","raw":"---\ntitle: Hexo博客Next主题添加Fork me on GitHub标签\ndate: 2018-02-28 18:09:26\ntags:\n  - Hexo\ncategories:\n  - Hexo\n---\n\n给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。\n\n打开文件：**hexo博客根目录/themes/next/layout/_layout.swig** 找到如下代码块\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    [样式代码]\n...\n\n```\n<!-- more -->\n样式代码 [**看这里**](https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons) ，挑选自己喜欢的样式。\n\n然后将样式代码添加到上述 **_layout.swig** 代码块后面，比如选择黑色经典款，即：\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    # [样式代码]\n    <a href=\"https://github.com/you\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n\n...\n\n```\n\n\n重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。\n大家看我的，感觉很搭( ⊙ o ⊙ )！\n![fork me on github](http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Hexo博客Next主题添加Fork-me-on-GitHub标签","published":1,"updated":"2018-02-28T10:35:15.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimqh0002qkotjbhaebwx","content":"<p>给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。</p>\n<p>打开文件：<strong>hexo博客根目录/themes/next/layout/_layout.swig</strong> 找到如下代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    [样式代码]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>样式代码 <a href=\"https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\"><strong>看这里</strong></a> ，挑选自己喜欢的样式。</p>\n<p>然后将样式代码添加到上述 <strong>_layout.swig</strong> 代码块后面，比如选择黑色经典款，即：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"comment\"># [样式代码]</span></span><br><span class=\"line\">    &lt;a href=\"https://github.com/you\"&gt;&lt;img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。<br>大家看我的，感觉很搭( ⊙ o ⊙ )！<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fork me on github\"></p>\n","site":{"data":{}},"excerpt":"<p>给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。</p>\n<p>打开文件：<strong>hexo博客根目录/themes/next/layout/_layout.swig</strong> 找到如下代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    [样式代码]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>","more":"<p>样式代码 <a href=\"https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\"><strong>看这里</strong></a> ，挑选自己喜欢的样式。</p>\n<p>然后将样式代码添加到上述 <strong>_layout.swig</strong> 代码块后面，比如选择黑色经典款，即：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"comment\"># [样式代码]</span></span><br><span class=\"line\">    &lt;a href=\"https://github.com/you\"&gt;&lt;img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。<br>大家看我的，感觉很搭( ⊙ o ⊙ )！<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fork me on github\"></p>"},{"title":"Hexo部署的网站项目(.deploy_git)中添加README.md","date":"2018-02-28T06:05:20.000Z","_content":"终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。\n<!-- more -->\n需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。\n\n配置截图如下：\n\n![](http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Hexo部署的网站项目-deploy-git-中添加README-md.md","raw":"---\ntitle: Hexo部署的网站项目(.deploy_git)中添加README.md\ndate: 2018-02-28 14:05:20\ntags:\n  - Hexo\ncategories:\n  - Hexo\n---\n终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。\n<!-- more -->\n需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。\n\n配置截图如下：\n\n![](http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Hexo部署的网站项目-deploy-git-中添加README-md","published":1,"updated":"2018-02-28T06:29:24.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimqu0006qkotk4j295y6","content":"<p>终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。<br><a id=\"more\"></a><br>需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。</p>\n<p>配置截图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。<br>","more":"<br>需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。</p>\n<p>配置截图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>"},{"title":"Github多分支管理Hexo-Blog项目","date":"2018-02-26T16:23:41.000Z","_content":"\nHexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。\n\n<!--more-->\n\n备份之前，需要了解博客根目录下面的文件以及文件夹作用：\n```python\n.deploy_git/        网站静态文件(git)\nnode_modules/       插件\npublic/             网站静态文件\nscaffolds/          文章模板\nsource/             博文等\nthemes/             主题\n_config.yml         网站配置文件\npackage.json        Hexo信息\ndb.json             数据文件\n```\n## 备份的思路\n`master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。`实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个**.gitignore**文件来建立“黑名单”，禁止备份。\n\n## 编辑**.gitignore**过滤文件\n文件内容如下：\n```python\n.DS_Store\npublic/\n.deploy*/\n```\n## 关于备份\n终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：\n```Bash\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\t\t\n# username为博客项目的名称，也就是git的用户名\n$ git add .\n$ git commit -m \"ready for backup of the project\"\n$ git push origin master:Hexo-Blog\n```\n\n执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。\n以后，开始写博文时，即终端运行\n```Bash\n$ hexo new [layout] <title>\n```\n完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备\n```Bash\n    $ git add .\n    $ git commit -m \"add one article\"\n    $ git push origin master:Hexo-Blog\n```\n\n## 部署\n运行一下命令进行仓库master分支静态文件部署\n```Bash\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n以上完成项目源文件以及静态文件的Git管理\n\n## 参考文献及进阶\n[Hexo+github搭建个人博客并实现多终端管理](https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[如何在github上面备份Hexo](https://blog.zaihua.me/post/blog_github_backup.html)\n[Hexo的版本控制与持续集成](https://formulahendry.github.io/2016/12/04/hexo-ci/)\n[使用hexo，如果换了电脑怎么更新博客](https://www.zhihu.com/question/21193762)\n","source":"_posts/Github多分支管理Hexo-Blog项目.md","raw":"---\ntitle: Github多分支管理Hexo-Blog项目\ndate: 2018-02-27 00:23:41\ntags:\n  - Hexo\n  - Git\ncategories:\n  - Hexo\n---\n\nHexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。\n\n<!--more-->\n\n备份之前，需要了解博客根目录下面的文件以及文件夹作用：\n```python\n.deploy_git/        网站静态文件(git)\nnode_modules/       插件\npublic/             网站静态文件\nscaffolds/          文章模板\nsource/             博文等\nthemes/             主题\n_config.yml         网站配置文件\npackage.json        Hexo信息\ndb.json             数据文件\n```\n## 备份的思路\n`master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。`实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个**.gitignore**文件来建立“黑名单”，禁止备份。\n\n## 编辑**.gitignore**过滤文件\n文件内容如下：\n```python\n.DS_Store\npublic/\n.deploy*/\n```\n## 关于备份\n终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：\n```Bash\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\t\t\n# username为博客项目的名称，也就是git的用户名\n$ git add .\n$ git commit -m \"ready for backup of the project\"\n$ git push origin master:Hexo-Blog\n```\n\n执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。\n以后，开始写博文时，即终端运行\n```Bash\n$ hexo new [layout] <title>\n```\n完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备\n```Bash\n    $ git add .\n    $ git commit -m \"add one article\"\n    $ git push origin master:Hexo-Blog\n```\n\n## 部署\n运行一下命令进行仓库master分支静态文件部署\n```Bash\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n以上完成项目源文件以及静态文件的Git管理\n\n## 参考文献及进阶\n[Hexo+github搭建个人博客并实现多终端管理](https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[如何在github上面备份Hexo](https://blog.zaihua.me/post/blog_github_backup.html)\n[Hexo的版本控制与持续集成](https://formulahendry.github.io/2016/12/04/hexo-ci/)\n[使用hexo，如果换了电脑怎么更新博客](https://www.zhihu.com/question/21193762)\n","slug":"Github多分支管理Hexo-Blog项目","published":1,"updated":"2018-02-27T06:40:56.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimqx0007qkote0e88iku","content":"<p>Hexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。</p>\n<a id=\"more\"></a>\n<p>备份之前，需要了解博客根目录下面的文件以及文件夹作用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.deploy_git/        网站静态文件(git)</span><br><span class=\"line\">node_modules/       插件</span><br><span class=\"line\">public/             网站静态文件</span><br><span class=\"line\">scaffolds/          文章模板</span><br><span class=\"line\">source/             博文等</span><br><span class=\"line\">themes/             主题</span><br><span class=\"line\">_config.yml         网站配置文件</span><br><span class=\"line\">package.json        Hexo信息</span><br><span class=\"line\">db.json             数据文件</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份的思路\"><a href=\"#备份的思路\" class=\"headerlink\" title=\"备份的思路\"></a>备份的思路</h2><p><code>master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。</code>实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个<strong>.gitignore</strong>文件来建立“黑名单”，禁止备份。</p>\n<h2 id=\"编辑-gitignore过滤文件\"><a href=\"#编辑-gitignore过滤文件\" class=\"headerlink\" title=\"编辑.gitignore过滤文件\"></a>编辑<strong>.gitignore</strong>过滤文件</h2><p>文件内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于备份\"><a href=\"#关于备份\" class=\"headerlink\" title=\"关于备份\"></a>关于备份</h2><p>终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username/username.github.io.git\t\t</span><br><span class=\"line\"><span class=\"comment\"># username为博客项目的名称，也就是git的用户名</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"ready for backup of the project\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<p>执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。<br>以后，开始写博文时，即终端运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add one article\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>运行一下命令进行仓库master分支静态文件部署<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>以上完成项目源文件以及静态文件的Git管理</p>\n<h2 id=\"参考文献及进阶\"><a href=\"#参考文献及进阶\" class=\"headerlink\" title=\"参考文献及进阶\"></a>参考文献及进阶</h2><p><a href=\"https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">Hexo+github搭建个人博客并实现多终端管理</a><br><a href=\"https://blog.zaihua.me/post/blog_github_backup.html\" target=\"_blank\" rel=\"noopener\">如何在github上面备份Hexo</a><br><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/\" target=\"_blank\" rel=\"noopener\">Hexo的版本控制与持续集成</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客</a></p>\n","site":{"data":{}},"excerpt":"<p>Hexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。</p>","more":"<p>备份之前，需要了解博客根目录下面的文件以及文件夹作用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.deploy_git/        网站静态文件(git)</span><br><span class=\"line\">node_modules/       插件</span><br><span class=\"line\">public/             网站静态文件</span><br><span class=\"line\">scaffolds/          文章模板</span><br><span class=\"line\">source/             博文等</span><br><span class=\"line\">themes/             主题</span><br><span class=\"line\">_config.yml         网站配置文件</span><br><span class=\"line\">package.json        Hexo信息</span><br><span class=\"line\">db.json             数据文件</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份的思路\"><a href=\"#备份的思路\" class=\"headerlink\" title=\"备份的思路\"></a>备份的思路</h2><p><code>master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。</code>实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个<strong>.gitignore</strong>文件来建立“黑名单”，禁止备份。</p>\n<h2 id=\"编辑-gitignore过滤文件\"><a href=\"#编辑-gitignore过滤文件\" class=\"headerlink\" title=\"编辑.gitignore过滤文件\"></a>编辑<strong>.gitignore</strong>过滤文件</h2><p>文件内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于备份\"><a href=\"#关于备份\" class=\"headerlink\" title=\"关于备份\"></a>关于备份</h2><p>终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username/username.github.io.git\t\t</span><br><span class=\"line\"><span class=\"comment\"># username为博客项目的名称，也就是git的用户名</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"ready for backup of the project\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<p>执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。<br>以后，开始写博文时，即终端运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add one article\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>运行一下命令进行仓库master分支静态文件部署<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>以上完成项目源文件以及静态文件的Git管理</p>\n<h2 id=\"参考文献及进阶\"><a href=\"#参考文献及进阶\" class=\"headerlink\" title=\"参考文献及进阶\"></a>参考文献及进阶</h2><p><a href=\"https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">Hexo+github搭建个人博客并实现多终端管理</a><br><a href=\"https://blog.zaihua.me/post/blog_github_backup.html\" target=\"_blank\" rel=\"noopener\">如何在github上面备份Hexo</a><br><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/\" target=\"_blank\" rel=\"noopener\">Hexo的版本控制与持续集成</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客</a></p>"},{"title":"Mac OS 命令之文件(夹)删除","date":"2018-03-03T05:40:34.000Z","_content":"`rmdir`删除空目录，不过一旦目录非空会提示\nDirectiry not empty\n\n使用`rm`既可以删除文件又可以删除文件夹\n删除文件夹（无论文件夹是否为空），使用 `-rf` 命令即可。\n即：\n```bash\n$ rm -rf 目录名字\n```\n`-r` 就是向下递归，不管有多少级目录，一并删除\n`-f` 就是直接强行删除，不作任何提示的意思\n<!-- more -->\n删除`文件夹`实例：\n```bash\n$ rm -rf  /User/Dhyana/desktop\n```\n将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹\n\n删除`文件`使用实例：\n```bash\n$ rm -f  /User/Dhyana/desktop/test.py\n```\n将会**强制删除**/User/Dhyana/desktop/test.py这个文件\n\n值得注意的是：\n使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入\n```bash\n$ rm -rf /.*\n# 千万不要输入此命令，否则清空整个操作系统，后果自负\n```\n","source":"_posts/Mac-OS-命令之文件-夹-删除.md","raw":"---\ntitle: Mac OS 命令之文件(夹)删除\ndate: 2018-03-03 13:40:34\ntags:\n  - Mac OS 命令行\ncategories:\n  - Mac OS 命令行\n---\n`rmdir`删除空目录，不过一旦目录非空会提示\nDirectiry not empty\n\n使用`rm`既可以删除文件又可以删除文件夹\n删除文件夹（无论文件夹是否为空），使用 `-rf` 命令即可。\n即：\n```bash\n$ rm -rf 目录名字\n```\n`-r` 就是向下递归，不管有多少级目录，一并删除\n`-f` 就是直接强行删除，不作任何提示的意思\n<!-- more -->\n删除`文件夹`实例：\n```bash\n$ rm -rf  /User/Dhyana/desktop\n```\n将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹\n\n删除`文件`使用实例：\n```bash\n$ rm -f  /User/Dhyana/desktop/test.py\n```\n将会**强制删除**/User/Dhyana/desktop/test.py这个文件\n\n值得注意的是：\n使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入\n```bash\n$ rm -rf /.*\n# 千万不要输入此命令，否则清空整个操作系统，后果自负\n```\n","slug":"Mac-OS-命令之文件-夹-删除","published":1,"updated":"2018-03-03T05:49:16.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimqz0008qkotm3uzdpyl","content":"<p><code>rmdir</code>删除空目录，不过一旦目录非空会提示<br>Directiry not empty</p>\n<p>使用<code>rm</code>既可以删除文件又可以删除文件夹<br>删除文件夹（无论文件夹是否为空），使用 <code>-rf</code> 命令即可。<br>即：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf 目录名字</span><br></pre></td></tr></table></figure></p>\n<p><code>-r</code> 就是向下递归，不管有多少级目录，一并删除<br><code>-f</code> 就是直接强行删除，不作任何提示的意思<br><a id=\"more\"></a><br>删除<code>文件夹</code>实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf  /User/Dhyana/desktop</span><br></pre></td></tr></table></figure></p>\n<p>将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹</p>\n<p>删除<code>文件</code>使用实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f  /User/Dhyana/desktop/test.py</span><br></pre></td></tr></table></figure></p>\n<p>将会<strong>强制删除</strong>/User/Dhyana/desktop/test.py这个文件</p>\n<p>值得注意的是：<br>使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /.*</span><br><span class=\"line\"><span class=\"comment\"># 千万不要输入此命令，否则清空整个操作系统，后果自负</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><code>rmdir</code>删除空目录，不过一旦目录非空会提示<br>Directiry not empty</p>\n<p>使用<code>rm</code>既可以删除文件又可以删除文件夹<br>删除文件夹（无论文件夹是否为空），使用 <code>-rf</code> 命令即可。<br>即：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf 目录名字</span><br></pre></td></tr></table></figure></p>\n<p><code>-r</code> 就是向下递归，不管有多少级目录，一并删除<br><code>-f</code> 就是直接强行删除，不作任何提示的意思<br>","more":"<br>删除<code>文件夹</code>实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf  /User/Dhyana/desktop</span><br></pre></td></tr></table></figure></p>\n<p>将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹</p>\n<p>删除<code>文件</code>使用实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f  /User/Dhyana/desktop/test.py</span><br></pre></td></tr></table></figure></p>\n<p>将会<strong>强制删除</strong>/User/Dhyana/desktop/test.py这个文件</p>\n<p>值得注意的是：<br>使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /.*</span><br><span class=\"line\"><span class=\"comment\"># 千万不要输入此命令，否则清空整个操作系统，后果自负</span></span><br></pre></td></tr></table></figure></p>"},{"title":"IO密集型任务、计算密集型任务，以及多线程、多进程","date":"2018-03-05T02:41:27.000Z","_content":"## IO密集型任务 vs 计算密集型任务\n\n  * 所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  \n\n  * 所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n<!-- more -->\n计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。\n\n计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。\n\n第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。\n\nIO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。\n\n\n## 多线程 VS 多进程\n### 多线程\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![](https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg)\n\n所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。\n\nPython提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。\n\n多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。\n\n在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。\n\n### 多进程\n由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。\n\n![](https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg)\n\nPython中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。\n\n多进程模式最大的`优点`就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。\n\n多进程模式的`缺点`是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。\n\n## 举个栗子\n**实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务**\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：\n\n```Python\nimport multiprocessing\n\n# 定义全局变量Queue\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        print(g_queue.get())\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据\n\n```python\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\ng_search_list = list(range(10000))\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3*2, 3*2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n```\n\n准备完上述代码之后，进行试验：\n```python\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行cpu密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n```\n\n结果说明：\n\n**对于IO密集型任务：**\n\n  * 直接执行用时：10.0333秒\n  * 多线程执行用时：4.0156秒\n  * 多进程执行用时：5.0182秒\n\n说明多线程适合IO密集型任务。\n\n**对于计算密集型任务**  \n\n\n* 直接执行用时：10.0273秒\n* 多线程执行用时：13.247秒\n* 多进程执行用时：6.8377秒\n\n说明多进程适合计算密集型任务\n\n\n## 参考\n\n1. https://zhuanlan.zhihu.com/p/24283040\n","source":"_posts/IO密集型任务、计算密集型任务，以及多线程、多进程.md","raw":"---\ntitle: IO密集型任务、计算密集型任务，以及多线程、多进程\ndate: 2018-03-05 10:41:27\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n## IO密集型任务 vs 计算密集型任务\n\n  * 所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  \n\n  * 所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n<!-- more -->\n计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。\n\n计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。\n\n第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。\n\nIO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。\n\n\n## 多线程 VS 多进程\n### 多线程\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![](https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg)\n\n所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。\n\nPython提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。\n\n多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。\n\n在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。\n\n### 多进程\n由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。\n\n![](https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg)\n\nPython中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。\n\n多进程模式最大的`优点`就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。\n\n多进程模式的`缺点`是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。\n\n## 举个栗子\n**实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务**\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：\n\n```Python\nimport multiprocessing\n\n# 定义全局变量Queue\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        print(g_queue.get())\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据\n\n```python\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\ng_search_list = list(range(10000))\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3*2, 3*2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n```\n\n准备完上述代码之后，进行试验：\n```python\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行cpu密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n```\n\n结果说明：\n\n**对于IO密集型任务：**\n\n  * 直接执行用时：10.0333秒\n  * 多线程执行用时：4.0156秒\n  * 多进程执行用时：5.0182秒\n\n说明多线程适合IO密集型任务。\n\n**对于计算密集型任务**  \n\n\n* 直接执行用时：10.0273秒\n* 多线程执行用时：13.247秒\n* 多进程执行用时：6.8377秒\n\n说明多进程适合计算密集型任务\n\n\n## 参考\n\n1. https://zhuanlan.zhihu.com/p/24283040\n","slug":"IO密集型任务、计算密集型任务，以及多线程、多进程","published":1,"updated":"2018-03-05T15:54:17.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimr2000bqkot1c4bfl6d","content":"<h2 id=\"IO密集型任务-vs-计算密集型任务\"><a href=\"#IO密集型任务-vs-计算密集型任务\" class=\"headerlink\" title=\"IO密集型任务 vs 计算密集型任务\"></a>IO密集型任务 vs 计算密集型任务</h2><ul>\n<li><p>所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  </p>\n</li>\n<li><p>所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p>\n<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>\n<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>\n<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>\n<h2 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h2><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg\" alt=\"\"></p>\n<p>所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。</p>\n<p>Python提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。</p>\n<p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p>\n<p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>\n<h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><p>由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg\" alt=\"\"></p>\n<p>Python中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。</p>\n<p>多进程模式最大的<code>优点</code>就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p>\n<p>多进程模式的<code>缺点</code>是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p><strong>实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务</strong></p>\n<p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义全局变量Queue</span></span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_queue</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue start\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        print(g_queue.get())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _index <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue end\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个IO密集型任务：利用time.sleep()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_io</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_cpu</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">            count += pow(<span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>) <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> g_search_list <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"cpu count:\"</span>, multiprocessing.cpu_count(), <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行cpu密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果说明：</p>\n<p><strong>对于IO密集型任务：</strong></p>\n<ul>\n<li>直接执行用时：10.0333秒</li>\n<li>多线程执行用时：4.0156秒</li>\n<li>多进程执行用时：5.0182秒</li>\n</ul>\n<p>说明多线程适合IO密集型任务。</p>\n<p><strong>对于计算密集型任务</strong>  </p>\n<ul>\n<li>直接执行用时：10.0273秒</li>\n<li>多线程执行用时：13.247秒</li>\n<li>多进程执行用时：6.8377秒</li>\n</ul>\n<p>说明多进程适合计算密集型任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24283040</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"IO密集型任务-vs-计算密集型任务\"><a href=\"#IO密集型任务-vs-计算密集型任务\" class=\"headerlink\" title=\"IO密集型任务 vs 计算密集型任务\"></a>IO密集型任务 vs 计算密集型任务</h2><ul>\n<li><p>所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  </p>\n</li>\n<li><p>所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n</li>\n</ul>","more":"<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p>\n<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>\n<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>\n<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>\n<h2 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h2><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg\" alt=\"\"></p>\n<p>所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。</p>\n<p>Python提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。</p>\n<p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p>\n<p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>\n<h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><p>由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg\" alt=\"\"></p>\n<p>Python中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。</p>\n<p>多进程模式最大的<code>优点</code>就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p>\n<p>多进程模式的<code>缺点</code>是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p><strong>实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务</strong></p>\n<p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义全局变量Queue</span></span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_queue</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue start\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        print(g_queue.get())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _index <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue end\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个IO密集型任务：利用time.sleep()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_io</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_cpu</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">            count += pow(<span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>) <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> g_search_list <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"cpu count:\"</span>, multiprocessing.cpu_count(), <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行cpu密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果说明：</p>\n<p><strong>对于IO密集型任务：</strong></p>\n<ul>\n<li>直接执行用时：10.0333秒</li>\n<li>多线程执行用时：4.0156秒</li>\n<li>多进程执行用时：5.0182秒</li>\n</ul>\n<p>说明多线程适合IO密集型任务。</p>\n<p><strong>对于计算密集型任务</strong>  </p>\n<ul>\n<li>直接执行用时：10.0273秒</li>\n<li>多线程执行用时：13.247秒</li>\n<li>多进程执行用时：6.8377秒</li>\n</ul>\n<p>说明多进程适合计算密集型任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24283040</a></li>\n</ol>"},{"title":"Markdown小技巧之空格输入","date":"2018-03-03T05:06:47.000Z","_content":"在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。\n\n1. 手动输入空格 （**&nbsp；**）。**注意！此时的分号为英文分号**，但是不推荐使用此方法，太麻烦！\n\n2. 使用**全角空格**。即：在**全角**输入状态下直接使用空格键就ok了\n","source":"_posts/Markdown小技巧之空格输入.md","raw":"---\ntitle: Markdown小技巧之空格输入\ndate: 2018-03-03 13:06:47\ntags:\n  - Markdown\ncategories:\n  - Markdown\n---\n在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。\n\n1. 手动输入空格 （**&nbsp；**）。**注意！此时的分号为英文分号**，但是不推荐使用此方法，太麻烦！\n\n2. 使用**全角空格**。即：在**全角**输入状态下直接使用空格键就ok了\n","slug":"Markdown小技巧之空格输入","published":1,"updated":"2018-03-03T05:07:54.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimr4000cqkotod1aflb0","content":"<p>在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。</p>\n<ol>\n<li><p>手动输入空格 （<strong>&amp;nbsp；</strong>）。<strong>注意！此时的分号为英文分号</strong>，但是不推荐使用此方法，太麻烦！</p>\n</li>\n<li><p>使用<strong>全角空格</strong>。即：在<strong>全角</strong>输入状态下直接使用空格键就ok了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。</p>\n<ol>\n<li><p>手动输入空格 （<strong>&amp;nbsp；</strong>）。<strong>注意！此时的分号为英文分号</strong>，但是不推荐使用此方法，太麻烦！</p>\n</li>\n<li><p>使用<strong>全角空格</strong>。即：在<strong>全角</strong>输入状态下直接使用空格键就ok了</p>\n</li>\n</ol>\n"},{"title":"Python2.x与Python3.x差异","date":"2018-03-05T17:08:15.000Z","_content":"**Contents**\n\n1. [`__future__模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97)\n2. [`print函数`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0)\n3. [`整除`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4)\n4. [`Unicode`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode)\n5. [`xrange模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97)\n6. [`Python3中的range对象的__contains__方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95)\n7. [`Raising exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions)\n8. [`Handling exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions)\n9. [`next()函数 and .next()方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next()\n10. [`For循环变量和全局命名空间泄漏`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F)\n11. [`比较不可排序类型`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B)\n12. [`通过input()解析用户的输入`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input()\n13. [`返回可迭代对象，而不是列表`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8)\n14. [`更多的关于 Python 2 和 Python 3 的文章`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0)\n\n **参考：**\n 1. [Python2.x与Python3.x差异](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/)\n","source":"_posts/Python2-x与Python3-x差异.md","raw":"---\ntitle: Python2.x与Python3.x差异\ndate: 2018-03-06 01:08:15\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n**Contents**\n\n1. [`__future__模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97)\n2. [`print函数`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0)\n3. [`整除`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4)\n4. [`Unicode`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode)\n5. [`xrange模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97)\n6. [`Python3中的range对象的__contains__方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95)\n7. [`Raising exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions)\n8. [`Handling exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions)\n9. [`next()函数 and .next()方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next()\n10. [`For循环变量和全局命名空间泄漏`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F)\n11. [`比较不可排序类型`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B)\n12. [`通过input()解析用户的输入`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input()\n13. [`返回可迭代对象，而不是列表`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8)\n14. [`更多的关于 Python 2 和 Python 3 的文章`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0)\n\n **参考：**\n 1. [Python2.x与Python3.x差异](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/)\n","slug":"Python2-x与Python3-x差异","published":1,"updated":"2018-03-05T17:21:04.364Z","_id":"cjeehimr9000gqkoto6jcg269","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Contents</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>__future__模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\"><code>print函数</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4\" target=\"_blank\" rel=\"noopener\"><code>整除</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode\" target=\"_blank\" rel=\"noopener\"><code>Unicode</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>xrange模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\"><code>Python3中的range对象的__contains__方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Raising exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Handling exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next(\" target=\"_blank\" rel=\"noopener\"><code>next()函数 and .next()方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F\" target=\"_blank\" rel=\"noopener\"><code>For循环变量和全局命名空间泄漏</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\"><code>比较不可排序类型</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input(\" target=\"_blank\" rel=\"noopener\"><code>通过input()解析用户的输入</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"noopener\"><code>返回可迭代对象，而不是列表</code></a></li>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0\" target=\"_blank\" rel=\"noopener\"><code>更多的关于 Python 2 和 Python 3 的文章</code></a></p>\n<p><strong>参考：</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/\" target=\"_blank\" rel=\"noopener\">Python2.x与Python3.x差异</a></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Contents</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>__future__模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\"><code>print函数</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4\" target=\"_blank\" rel=\"noopener\"><code>整除</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode\" target=\"_blank\" rel=\"noopener\"><code>Unicode</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>xrange模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\"><code>Python3中的range对象的__contains__方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Raising exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Handling exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next(\" target=\"_blank\" rel=\"noopener\"><code>next()函数 and .next()方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F\" target=\"_blank\" rel=\"noopener\"><code>For循环变量和全局命名空间泄漏</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\"><code>比较不可排序类型</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input(\" target=\"_blank\" rel=\"noopener\"><code>通过input()解析用户的输入</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"noopener\"><code>返回可迭代对象，而不是列表</code></a></li>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0\" target=\"_blank\" rel=\"noopener\"><code>更多的关于 Python 2 和 Python 3 的文章</code></a></p>\n<p><strong>参考：</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/\" target=\"_blank\" rel=\"noopener\">Python2.x与Python3.x差异</a></li>\n</ol>\n</li>\n</ol>\n"},{"title":"Python3 is和==的区别","date":"2018-03-03T04:16:34.000Z","_content":"\n## Python 对象三要素\n要理解Python中is和==的区别，首先要理解Python对象的三个要素:\n\n\n| 要素        | 说明         |获取方式   |\n| :-----:       | :-----:      | :-----:   |\n| id      | 身份标识，基本就是内存地址，用来唯一标识一个对象  | id(obj)  |\n|type      | 数据类型   | type(obj)  |\n|value      | 值   | :-----:   |\n\n<!-- more -->\n## is和==区别\n\n| 标识       | 名称         |判断方法   |\n| :-----:       | :-----:      | :-----:   |\n| is      | 同一性运算符  | id  |\n| ==      | 比较运算符  | value  |\n\n---\n## 程序举例\n\n### 例1：\n![屏幕截图2.jpg](http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\na = {\"a\":1, \"b\":2}\nb = a.copy()\n\na == b  # True value一样\na is b  # False id不一样\n```\n---\n### 例2：\n![屏幕截图.jpg](http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\n>>> x = y = [4,5,6]\n>>> z = [4,5,6]\n>>> x == y\nTrue\n>>> x == z\nTrue\n>>> x is y\nTrue\n>>> x is z\nFalse\n>>>\n>>> print id(x)\n>>> print id(y)\n>>> print id(z)\n```\n\n---\n```python\n>>> a = 1 #a和b为数值类型\n>>> b = 1\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = 'cheesezh' #a和b为字符串类型\n>>> b = 'cheesezh'\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = (1,2,3) #a和b为元组类型\n>>> b = (1,2,3)\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = [1,2,3] #a和b为list类型\n>>> b = [1,2,3]\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = {'cheese':1,'zh':2} #a和b为dict类型\n>>> b = {'cheese':1,'zh':2}\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = set([1,2,3])#a和b为set类型\n>>> b = set([1,2,3])\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n```\n","source":"_posts/Python3-is和-的区别.md","raw":"---\ntitle: Python3 is和==的区别\ndate: 2018-03-03 12:16:34\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n## Python 对象三要素\n要理解Python中is和==的区别，首先要理解Python对象的三个要素:\n\n\n| 要素        | 说明         |获取方式   |\n| :-----:       | :-----:      | :-----:   |\n| id      | 身份标识，基本就是内存地址，用来唯一标识一个对象  | id(obj)  |\n|type      | 数据类型   | type(obj)  |\n|value      | 值   | :-----:   |\n\n<!-- more -->\n## is和==区别\n\n| 标识       | 名称         |判断方法   |\n| :-----:       | :-----:      | :-----:   |\n| is      | 同一性运算符  | id  |\n| ==      | 比较运算符  | value  |\n\n---\n## 程序举例\n\n### 例1：\n![屏幕截图2.jpg](http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\na = {\"a\":1, \"b\":2}\nb = a.copy()\n\na == b  # True value一样\na is b  # False id不一样\n```\n---\n### 例2：\n![屏幕截图.jpg](http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\n>>> x = y = [4,5,6]\n>>> z = [4,5,6]\n>>> x == y\nTrue\n>>> x == z\nTrue\n>>> x is y\nTrue\n>>> x is z\nFalse\n>>>\n>>> print id(x)\n>>> print id(y)\n>>> print id(z)\n```\n\n---\n```python\n>>> a = 1 #a和b为数值类型\n>>> b = 1\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = 'cheesezh' #a和b为字符串类型\n>>> b = 'cheesezh'\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = (1,2,3) #a和b为元组类型\n>>> b = (1,2,3)\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = [1,2,3] #a和b为list类型\n>>> b = [1,2,3]\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = {'cheese':1,'zh':2} #a和b为dict类型\n>>> b = {'cheese':1,'zh':2}\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = set([1,2,3])#a和b为set类型\n>>> b = set([1,2,3])\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n```\n","slug":"Python3-is和-的区别","published":1,"updated":"2018-03-03T05:12:14.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrb000iqkot56tmev4x","content":"<h2 id=\"Python-对象三要素\"><a href=\"#Python-对象三要素\" class=\"headerlink\" title=\"Python 对象三要素\"></a>Python 对象三要素</h2><p>要理解Python中is和==的区别，首先要理解Python对象的三个要素:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">要素</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">获取方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">身份标识，基本就是内存地址，用来唯一标识一个对象</td>\n<td style=\"text-align:center\">id(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">数据类型</td>\n<td style=\"text-align:center\">type(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">值</td>\n<td style=\"text-align:center\">:—–:</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"is和-区别\"><a href=\"#is和-区别\" class=\"headerlink\" title=\"is和==区别\"></a>is和==区别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">判断方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">同一性运算符</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">比较运算符</td>\n<td style=\"text-align:center\">value</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"程序举例\"><a href=\"#程序举例\" class=\"headerlink\" title=\"程序举例\"></a>程序举例</h2><h3 id=\"例1：\"><a href=\"#例1：\" class=\"headerlink\" title=\"例1：\"></a>例1：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图2.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">b = a.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  <span class=\"comment\"># True value一样</span></span><br><span class=\"line\">a <span class=\"keyword\">is</span> b  <span class=\"comment\"># False id不一样</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"例2：\"><a href=\"#例2：\" class=\"headerlink\" title=\"例2：\"></a>例2：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = y = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == z</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> z</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(z)</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span> <span class=\"comment\">#a和b为数值类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'cheesezh'</span> <span class=\"comment\">#a和b为字符串类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">'cheesezh'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">#a和b为元组类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#a和b为list类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125; <span class=\"comment\">#a和b为dict类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])<span class=\"comment\">#a和b为set类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python-对象三要素\"><a href=\"#Python-对象三要素\" class=\"headerlink\" title=\"Python 对象三要素\"></a>Python 对象三要素</h2><p>要理解Python中is和==的区别，首先要理解Python对象的三个要素:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">要素</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">获取方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">身份标识，基本就是内存地址，用来唯一标识一个对象</td>\n<td style=\"text-align:center\">id(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">数据类型</td>\n<td style=\"text-align:center\">type(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">值</td>\n<td style=\"text-align:center\">:—–:</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"is和-区别\"><a href=\"#is和-区别\" class=\"headerlink\" title=\"is和==区别\"></a>is和==区别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">判断方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">同一性运算符</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">比较运算符</td>\n<td style=\"text-align:center\">value</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"程序举例\"><a href=\"#程序举例\" class=\"headerlink\" title=\"程序举例\"></a>程序举例</h2><h3 id=\"例1：\"><a href=\"#例1：\" class=\"headerlink\" title=\"例1：\"></a>例1：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图2.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">b = a.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  <span class=\"comment\"># True value一样</span></span><br><span class=\"line\">a <span class=\"keyword\">is</span> b  <span class=\"comment\"># False id不一样</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"例2：\"><a href=\"#例2：\" class=\"headerlink\" title=\"例2：\"></a>例2：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = y = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == z</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> z</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(z)</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span> <span class=\"comment\">#a和b为数值类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'cheesezh'</span> <span class=\"comment\">#a和b为字符串类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">'cheesezh'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">#a和b为元组类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#a和b为list类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125; <span class=\"comment\">#a和b为dict类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])<span class=\"comment\">#a和b为set类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br></pre></td></tr></table></figure>"},{"title":"Python3 @staticmethod和@classmethod","date":"2018-02-28T18:01:19.000Z","_content":"\nPython其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:\n\n```python\ndef foo(x):\n    print \"executing foo(%s)\"%(x)\n\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x\n\na=A()\n\n```\n<!-- more -->\n这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用`foo(x)`,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。\n对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是`foo(self, x)`,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的`a.foo(x)`(其实是`foo(a, x)`)。\n类方法一样,只不过它传递的是`类`而不是实例,`A.class_foo(x)`。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。\n\n对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用`a.static_foo(x)`或者`A.static_foo(x)`来调用.\n\n| \\\\      | 实例方法     | 类方法            | 静态方法            |\n| :------ | :------- | :------------- | :-------------- |\n| a = A() | a.foo(x) | a.class_foo(x) | a.static_foo(x) |\n| A       | 不可用      | A.class_foo(x) | A.static_foo(x) |\n\n更多关于这个问题:\n1. http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\n2. https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\n","source":"_posts/Python3-staticmethod和-classmethod.md","raw":"---\ntitle: Python3 @staticmethod和@classmethod\ndate: 2018-03-01 02:01:19\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Staticmethod & Classmethod\n---\n\nPython其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:\n\n```python\ndef foo(x):\n    print \"executing foo(%s)\"%(x)\n\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x\n\na=A()\n\n```\n<!-- more -->\n这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用`foo(x)`,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。\n对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是`foo(self, x)`,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的`a.foo(x)`(其实是`foo(a, x)`)。\n类方法一样,只不过它传递的是`类`而不是实例,`A.class_foo(x)`。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。\n\n对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用`a.static_foo(x)`或者`A.static_foo(x)`来调用.\n\n| \\\\      | 实例方法     | 类方法            | 静态方法            |\n| :------ | :------- | :------------- | :-------------- |\n| a = A() | a.foo(x) | a.class_foo(x) | a.static_foo(x) |\n| A       | 不可用      | A.class_foo(x) | A.static_foo(x) |\n\n更多关于这个问题:\n1. http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\n2. https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\n","slug":"Python3-staticmethod和-classmethod","published":1,"updated":"2018-03-01T06:36:20.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimre000nqkotv5493uf3","content":"<p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s)\"</span>%(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x</span><br><span class=\"line\"></span><br><span class=\"line\">a=A()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。<br>对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>)。<br>类方法一样,只不过它传递的是<code>类</code>而不是实例,<code>A.class_foo(x)</code>。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。</p>\n<p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">\\</th>\n<th style=\"text-align:left\">实例方法</th>\n<th style=\"text-align:left\">类方法</th>\n<th style=\"text-align:left\">静态方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = A()</td>\n<td style=\"text-align:left\">a.foo(x)</td>\n<td style=\"text-align:left\">a.class_foo(x)</td>\n<td style=\"text-align:left\">a.static_foo(x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td style=\"text-align:left\">不可用</td>\n<td style=\"text-align:left\">A.class_foo(x)</td>\n<td style=\"text-align:left\">A.static_foo(x)</td>\n</tr>\n</tbody>\n</table>\n<p>更多关于这个问题:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li>\n<li><a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\" target=\"_blank\" rel=\"noopener\">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s)\"</span>%(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x</span><br><span class=\"line\"></span><br><span class=\"line\">a=A()</span><br></pre></td></tr></table></figure>","more":"<p>这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。<br>对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>)。<br>类方法一样,只不过它传递的是<code>类</code>而不是实例,<code>A.class_foo(x)</code>。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。</p>\n<p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">\\</th>\n<th style=\"text-align:left\">实例方法</th>\n<th style=\"text-align:left\">类方法</th>\n<th style=\"text-align:left\">静态方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = A()</td>\n<td style=\"text-align:left\">a.foo(x)</td>\n<td style=\"text-align:left\">a.class_foo(x)</td>\n<td style=\"text-align:left\">a.static_foo(x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td style=\"text-align:left\">不可用</td>\n<td style=\"text-align:left\">A.class_foo(x)</td>\n<td style=\"text-align:left\">A.static_foo(x)</td>\n</tr>\n</tbody>\n</table>\n<p>更多关于这个问题:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li>\n<li><a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\" target=\"_blank\" rel=\"noopener\">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li>\n</ol>"},{"title":"Python3 作用域","date":"2018-03-03T03:48:30.000Z","_content":"Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。\n\nPython 获取变量中的值的搜索顺序为：\n\n本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）\n","source":"_posts/Python3-作用域.md","raw":"---\ntitle: Python3 作用域\ndate: 2018-03-03 11:48:30\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 作用域\n---\nPython 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。\n\nPython 获取变量中的值的搜索顺序为：\n\n本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）\n","slug":"Python3-作用域","published":1,"updated":"2018-03-03T03:56:30.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrf000pqkoth2tsyyqq","content":"<p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p>\n<p>Python 获取变量中的值的搜索顺序为：</p>\n<p>本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p>\n<p>Python 获取变量中的值的搜索顺序为：</p>\n<p>本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）</p>\n"},{"title":"Python3 使用Selenium&PhantomJS爬火影忍者漫画","date":"2018-02-27T06:16:38.000Z","_content":"\n近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。\n\nSelenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。\n\n<!--more-->\n\n## 爬虫使用到的模块\n```Python\nfrom selenium import webdriver\nfrom myLogging import MyLogging\nimport os\nimport time\nimport re\n```\n\nmyLogging模块是自己配置的日志包，想要的可以点击**_[这里](http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS)_**自己看\n\n爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。\n\n## 爬取图片思路：\n\n  * 已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下\n  * 采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用**requests.get(comicUrl).content**方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 **get_screenshot_as_file()** 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：\n  ![对比](http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  * 找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。\n  * 在新网页的基础上保存图片，设置循环如此反复。\n\n爬取网页的URL为：[爬取火影漫画第一话](http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm)\n\n## 代码\n\n```Python\nclass DownloadPics(object):\n\n    def __init__(self, url):\n        self.url = url\n        self.log = MyLogging()\n        self.browser = self.get_browser()\n        self.save_pics(self.browser)\n\n    def get_browser(self):\n        browser = webdriver.PhantomJS()\n        try:\n            browser.get(self.url)\n        except:\n            MyLogging.error('open the url %s failed' % self.url)\n        browser.implicitly_wait(20)\n        return browser\n\n    def save_pics(self, browser):\n        pics_title = browser.title.split('_')[0]\n        self.create_dir(pics_title)\n        os.chdir(pics_title)\n        sum_page = self.find_total_page_num(browser)\n        i = 1\n        while i < sum_page:\n            image_name = str(i) + '.png'\n            browser.get_screenshot_as_file(image_name)  \n            # 使用PhantomJS避免了截图的不完整，可以与Chrome比较\n            self.log.info('saving image %s' % image_name)\n            i += 1\n            css_selector = \"a[href='/comiclist/3/3/%s.htm']\" % i  \n            # 该方法感觉还不错呢，不过这个网站确实挺差劲的\n            next_page = browser.find_element_by_css_selector(css_selector)\n            next_page.click()\n            time.sleep(2)\n            # browser.implicitly_wait(20)\n\n    def find_total_page_num(self, browser):\n        page_element = browser.find_element_by_css_selector(\"table[cellspacing='1']\")\n        num = re.search(r'共\\d+页', page_element.text).group()[1:-1]  \n        return int(num)\n\n    def create_dir(self, dir_name):\n        if os.path.exists(dir_name):\n            self.log.error('create directory %s failed cause a same directory exists' % dir_name)\n        else:\n            try:\n                os.makedirs(dir_name)\n            except:\n                self.log.error('create directory %s failed' % dir_name)\n            else:\n                self.log.info('create directory %s success' % dir_name)\n\nif __name__ == '__main__':\n    start_url = 'http://comic.kukudm.com/comiclist/3/3/1.htm'\n    DL = DownloadPics(start_url)\n```\n\n## 运行结果\n\n\n![gif](http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip)\n","source":"_posts/Python3-使用Selenium-PhantomJS爬火影忍者漫画.md","raw":"---\ntitle: Python3 使用Selenium&PhantomJS爬火影忍者漫画\ndate: 2018-02-27 14:16:38\ntags:\n  - Spider\n  - Selenium\n  - PhantomJS\n  - Python3\ncategories:\n  - Spider\n  - Selenium\n\n---\n\n近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。\n\nSelenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。\n\n<!--more-->\n\n## 爬虫使用到的模块\n```Python\nfrom selenium import webdriver\nfrom myLogging import MyLogging\nimport os\nimport time\nimport re\n```\n\nmyLogging模块是自己配置的日志包，想要的可以点击**_[这里](http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS)_**自己看\n\n爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。\n\n## 爬取图片思路：\n\n  * 已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下\n  * 采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用**requests.get(comicUrl).content**方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 **get_screenshot_as_file()** 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：\n  ![对比](http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  * 找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。\n  * 在新网页的基础上保存图片，设置循环如此反复。\n\n爬取网页的URL为：[爬取火影漫画第一话](http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm)\n\n## 代码\n\n```Python\nclass DownloadPics(object):\n\n    def __init__(self, url):\n        self.url = url\n        self.log = MyLogging()\n        self.browser = self.get_browser()\n        self.save_pics(self.browser)\n\n    def get_browser(self):\n        browser = webdriver.PhantomJS()\n        try:\n            browser.get(self.url)\n        except:\n            MyLogging.error('open the url %s failed' % self.url)\n        browser.implicitly_wait(20)\n        return browser\n\n    def save_pics(self, browser):\n        pics_title = browser.title.split('_')[0]\n        self.create_dir(pics_title)\n        os.chdir(pics_title)\n        sum_page = self.find_total_page_num(browser)\n        i = 1\n        while i < sum_page:\n            image_name = str(i) + '.png'\n            browser.get_screenshot_as_file(image_name)  \n            # 使用PhantomJS避免了截图的不完整，可以与Chrome比较\n            self.log.info('saving image %s' % image_name)\n            i += 1\n            css_selector = \"a[href='/comiclist/3/3/%s.htm']\" % i  \n            # 该方法感觉还不错呢，不过这个网站确实挺差劲的\n            next_page = browser.find_element_by_css_selector(css_selector)\n            next_page.click()\n            time.sleep(2)\n            # browser.implicitly_wait(20)\n\n    def find_total_page_num(self, browser):\n        page_element = browser.find_element_by_css_selector(\"table[cellspacing='1']\")\n        num = re.search(r'共\\d+页', page_element.text).group()[1:-1]  \n        return int(num)\n\n    def create_dir(self, dir_name):\n        if os.path.exists(dir_name):\n            self.log.error('create directory %s failed cause a same directory exists' % dir_name)\n        else:\n            try:\n                os.makedirs(dir_name)\n            except:\n                self.log.error('create directory %s failed' % dir_name)\n            else:\n                self.log.info('create directory %s success' % dir_name)\n\nif __name__ == '__main__':\n    start_url = 'http://comic.kukudm.com/comiclist/3/3/1.htm'\n    DL = DownloadPics(start_url)\n```\n\n## 运行结果\n\n\n![gif](http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip)\n","slug":"Python3-使用Selenium-PhantomJS爬火影忍者漫画","published":1,"updated":"2018-03-02T18:25:45.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrh000uqkotf92rya20","content":"<p>近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。</p>\n<p>Selenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"爬虫使用到的模块\"><a href=\"#爬虫使用到的模块\" class=\"headerlink\" title=\"爬虫使用到的模块\"></a>爬虫使用到的模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> myLogging <span class=\"keyword\">import</span> MyLogging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n<p>myLogging模块是自己配置的日志包，想要的可以点击<strong><em><a href=\"http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS\" target=\"_blank\" rel=\"noopener\">这里</a></em></strong>自己看</p>\n<p>爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。</p>\n<h2 id=\"爬取图片思路：\"><a href=\"#爬取图片思路：\" class=\"headerlink\" title=\"爬取图片思路：\"></a>爬取图片思路：</h2><ul>\n<li>已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下</li>\n<li>采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用<strong>requests.get(comicUrl).content</strong>方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 <strong>get_screenshot_as_file()</strong> 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比\"></li>\n<li>找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。</li>\n<li>在新网页的基础上保存图片，设置循环如此反复。</li>\n</ul>\n<p>爬取网页的URL为：<a href=\"http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm\" target=\"_blank\" rel=\"noopener\">爬取火影漫画第一话</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadPics</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        self.url = url</span><br><span class=\"line\">        self.log = MyLogging()</span><br><span class=\"line\">        self.browser = self.get_browser()</span><br><span class=\"line\">        self.save_pics(self.browser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_browser</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        browser = webdriver.PhantomJS()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            browser.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            MyLogging.error(<span class=\"string\">'open the url %s failed'</span> % self.url)</span><br><span class=\"line\">        browser.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_pics</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        pics_title = browser.title.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.create_dir(pics_title)</span><br><span class=\"line\">        os.chdir(pics_title)</span><br><span class=\"line\">        sum_page = self.find_total_page_num(browser)</span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; sum_page:</span><br><span class=\"line\">            image_name = str(i) + <span class=\"string\">'.png'</span></span><br><span class=\"line\">            browser.get_screenshot_as_file(image_name)  </span><br><span class=\"line\">            <span class=\"comment\"># 使用PhantomJS避免了截图的不完整，可以与Chrome比较</span></span><br><span class=\"line\">            self.log.info(<span class=\"string\">'saving image %s'</span> % image_name)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            css_selector = <span class=\"string\">\"a[href='/comiclist/3/3/%s.htm']\"</span> % i  </span><br><span class=\"line\">            <span class=\"comment\"># 该方法感觉还不错呢，不过这个网站确实挺差劲的</span></span><br><span class=\"line\">            next_page = browser.find_element_by_css_selector(css_selector)</span><br><span class=\"line\">            next_page.click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"comment\"># browser.implicitly_wait(20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_total_page_num</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        page_element = browser.find_element_by_css_selector(<span class=\"string\">\"table[cellspacing='1']\"</span>)</span><br><span class=\"line\">        num = re.search(<span class=\"string\">r'共\\d+页'</span>, page_element.text).group()[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dir</span><span class=\"params\">(self, dir_name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">            self.log.error(<span class=\"string\">'create directory %s failed cause a same directory exists'</span> % dir_name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                os.makedirs(dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                self.log.error(<span class=\"string\">'create directory %s failed'</span> % dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.log.info(<span class=\"string\">'create directory %s success'</span> % dir_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    start_url = <span class=\"string\">'http://comic.kukudm.com/comiclist/3/3/1.htm'</span></span><br><span class=\"line\">    DL = DownloadPics(start_url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip\" alt=\"gif\"></p>\n","site":{"data":{}},"excerpt":"<p>近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。</p>\n<p>Selenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。</p>","more":"<h2 id=\"爬虫使用到的模块\"><a href=\"#爬虫使用到的模块\" class=\"headerlink\" title=\"爬虫使用到的模块\"></a>爬虫使用到的模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> myLogging <span class=\"keyword\">import</span> MyLogging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n<p>myLogging模块是自己配置的日志包，想要的可以点击<strong><em><a href=\"http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS\" target=\"_blank\" rel=\"noopener\">这里</a></em></strong>自己看</p>\n<p>爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。</p>\n<h2 id=\"爬取图片思路：\"><a href=\"#爬取图片思路：\" class=\"headerlink\" title=\"爬取图片思路：\"></a>爬取图片思路：</h2><ul>\n<li>已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下</li>\n<li>采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用<strong>requests.get(comicUrl).content</strong>方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 <strong>get_screenshot_as_file()</strong> 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比\"></li>\n<li>找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。</li>\n<li>在新网页的基础上保存图片，设置循环如此反复。</li>\n</ul>\n<p>爬取网页的URL为：<a href=\"http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm\" target=\"_blank\" rel=\"noopener\">爬取火影漫画第一话</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadPics</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        self.url = url</span><br><span class=\"line\">        self.log = MyLogging()</span><br><span class=\"line\">        self.browser = self.get_browser()</span><br><span class=\"line\">        self.save_pics(self.browser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_browser</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        browser = webdriver.PhantomJS()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            browser.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            MyLogging.error(<span class=\"string\">'open the url %s failed'</span> % self.url)</span><br><span class=\"line\">        browser.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_pics</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        pics_title = browser.title.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.create_dir(pics_title)</span><br><span class=\"line\">        os.chdir(pics_title)</span><br><span class=\"line\">        sum_page = self.find_total_page_num(browser)</span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; sum_page:</span><br><span class=\"line\">            image_name = str(i) + <span class=\"string\">'.png'</span></span><br><span class=\"line\">            browser.get_screenshot_as_file(image_name)  </span><br><span class=\"line\">            <span class=\"comment\"># 使用PhantomJS避免了截图的不完整，可以与Chrome比较</span></span><br><span class=\"line\">            self.log.info(<span class=\"string\">'saving image %s'</span> % image_name)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            css_selector = <span class=\"string\">\"a[href='/comiclist/3/3/%s.htm']\"</span> % i  </span><br><span class=\"line\">            <span class=\"comment\"># 该方法感觉还不错呢，不过这个网站确实挺差劲的</span></span><br><span class=\"line\">            next_page = browser.find_element_by_css_selector(css_selector)</span><br><span class=\"line\">            next_page.click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"comment\"># browser.implicitly_wait(20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_total_page_num</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        page_element = browser.find_element_by_css_selector(<span class=\"string\">\"table[cellspacing='1']\"</span>)</span><br><span class=\"line\">        num = re.search(<span class=\"string\">r'共\\d+页'</span>, page_element.text).group()[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dir</span><span class=\"params\">(self, dir_name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">            self.log.error(<span class=\"string\">'create directory %s failed cause a same directory exists'</span> % dir_name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                os.makedirs(dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                self.log.error(<span class=\"string\">'create directory %s failed'</span> % dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.log.info(<span class=\"string\">'create directory %s success'</span> % dir_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    start_url = <span class=\"string\">'http://comic.kukudm.com/comiclist/3/3/1.htm'</span></span><br><span class=\"line\">    DL = DownloadPics(start_url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip\" alt=\"gif\"></p>"},{"title":"Python3 使用virtualenv搭建虚拟环境","date":"2018-03-03T05:28:31.000Z","_content":"\n在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。\n\nPython虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。\n<!-- more -->\n#### 1.虚拟环境安装\n\n在终端中执行命令：\n```bash\n$ pip install virtualenv\n```\n#### 2.虚拟环境使用  \n\n\n假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：\n```bash\n$ cd   [项目所在目录]\n$ virtualenv venv\n```\n该命令执行后，将在当前目录下建立一个venv目录，**该目录拷贝一份完整的当前系统的Python环境**；\n\n我么也可以执行\n```bash\n$ virtualenv --no-site-packages venv\n```\n这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。\n\n有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：\n```bash\n$ source venv/bin/activate[.fish|.zsh]\n```\n注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。\n\n退出当前的venv环境，使用deactivate命令：\n```bash\n$ deactivate\n```\n此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n#### 3.注意\n\n为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。\n\n最后附上[Virtualenv的官方文档](https://virtualenv.pypa.io/en/stable/)\n","source":"_posts/Python3-使用virtualenv搭建虚拟环境.md","raw":"---\ntitle: Python3 使用virtualenv搭建虚拟环境\ndate: 2018-03-03 13:28:31\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 virtualenv\n---\n\n在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。\n\nPython虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。\n<!-- more -->\n#### 1.虚拟环境安装\n\n在终端中执行命令：\n```bash\n$ pip install virtualenv\n```\n#### 2.虚拟环境使用  \n\n\n假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：\n```bash\n$ cd   [项目所在目录]\n$ virtualenv venv\n```\n该命令执行后，将在当前目录下建立一个venv目录，**该目录拷贝一份完整的当前系统的Python环境**；\n\n我么也可以执行\n```bash\n$ virtualenv --no-site-packages venv\n```\n这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。\n\n有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：\n```bash\n$ source venv/bin/activate[.fish|.zsh]\n```\n注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。\n\n退出当前的venv环境，使用deactivate命令：\n```bash\n$ deactivate\n```\n此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n#### 3.注意\n\n为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。\n\n最后附上[Virtualenv的官方文档](https://virtualenv.pypa.io/en/stable/)\n","slug":"Python3-使用virtualenv搭建虚拟环境","published":1,"updated":"2018-03-03T05:32:43.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimri000wqkotzucfjtsc","content":"<p>在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。</p>\n<p>Python虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。<br><a id=\"more\"></a></p>\n<h4 id=\"1-虚拟环境安装\"><a href=\"#1-虚拟环境安装\" class=\"headerlink\" title=\"1.虚拟环境安装\"></a>1.虚拟环境安装</h4><p>在终端中执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-虚拟环境使用\"><a href=\"#2-虚拟环境使用\" class=\"headerlink\" title=\"2.虚拟环境使用\"></a>2.虚拟环境使用</h4><p>假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span>   [项目所在目录]</span><br><span class=\"line\">$ virtualenv venv</span><br></pre></td></tr></table></figure></p>\n<p>该命令执行后，将在当前目录下建立一个venv目录，<strong>该目录拷贝一份完整的当前系统的Python环境</strong>；</p>\n<p>我么也可以执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure></p>\n<p>这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。</p>\n<p>有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate[.fish|.zsh]</span><br></pre></td></tr></table></figure></p>\n<p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。</p>\n<p>退出当前的venv环境，使用deactivate命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure></p>\n<p>此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><p>为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。</p>\n<p>最后附上<a href=\"https://virtualenv.pypa.io/en/stable/\" target=\"_blank\" rel=\"noopener\">Virtualenv的官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。</p>\n<p>Python虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。<br>","more":"</p>\n<h4 id=\"1-虚拟环境安装\"><a href=\"#1-虚拟环境安装\" class=\"headerlink\" title=\"1.虚拟环境安装\"></a>1.虚拟环境安装</h4><p>在终端中执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-虚拟环境使用\"><a href=\"#2-虚拟环境使用\" class=\"headerlink\" title=\"2.虚拟环境使用\"></a>2.虚拟环境使用</h4><p>假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span>   [项目所在目录]</span><br><span class=\"line\">$ virtualenv venv</span><br></pre></td></tr></table></figure></p>\n<p>该命令执行后，将在当前目录下建立一个venv目录，<strong>该目录拷贝一份完整的当前系统的Python环境</strong>；</p>\n<p>我么也可以执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure></p>\n<p>这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。</p>\n<p>有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate[.fish|.zsh]</span><br></pre></td></tr></table></figure></p>\n<p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。</p>\n<p>退出当前的venv环境，使用deactivate命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure></p>\n<p>此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><p>为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。</p>\n<p>最后附上<a href=\"https://virtualenv.pypa.io/en/stable/\" target=\"_blank\" rel=\"noopener\">Virtualenv的官方文档</a></p>"},{"title":"Python3 函数重载","date":"2018-03-03T02:54:44.000Z","_content":"## 函数重载的目的\n\n动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。\n\n在Python中实现函数重载：\n```python\nfrom io import StringIO\n\nclass Writer:\n    @staticmethod\n    def write(output, content):\n        # output对象只要实现了write方法就行\n        output.write(content)\n\n# stringIO类型\noutput = StringIO()\nWriter.write(output, 'hello world')\n\n# file 类型\noutput = open('out.txt', 'w')\nWriter.write(output, 'hello world')  \n\n```\n<!-- more -->\n在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。\n\n在Java中实现函数重载：\n```python\n\nclass Writer{\n    public static void write(StringIO output, String content){\n        output.write(content);\n        return null;\n    }\n\n    public static void write(File output, String content){\n        output.write(content);\n        return null;\n    }\n\n```\n\n参考自知乎用户刘志军：https://www.zhihu.com/question/20053359\n\n---\n\n## 函数重载主要是为了解决两个问题\n\n1. 可变参数类型。\n2. 可变参数个数。\n\n>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。\n\n那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。\n\n那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是`缺省参数`。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。\n\n参考自知乎用户`pansz`：https://www.zhihu.com/question/20053359\n","source":"_posts/Python3-函数重载.md","raw":"---\ntitle: Python3 函数重载\ndate: 2018-03-03 10:54:44\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 重载\n---\n## 函数重载的目的\n\n动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。\n\n在Python中实现函数重载：\n```python\nfrom io import StringIO\n\nclass Writer:\n    @staticmethod\n    def write(output, content):\n        # output对象只要实现了write方法就行\n        output.write(content)\n\n# stringIO类型\noutput = StringIO()\nWriter.write(output, 'hello world')\n\n# file 类型\noutput = open('out.txt', 'w')\nWriter.write(output, 'hello world')  \n\n```\n<!-- more -->\n在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。\n\n在Java中实现函数重载：\n```python\n\nclass Writer{\n    public static void write(StringIO output, String content){\n        output.write(content);\n        return null;\n    }\n\n    public static void write(File output, String content){\n        output.write(content);\n        return null;\n    }\n\n```\n\n参考自知乎用户刘志军：https://www.zhihu.com/question/20053359\n\n---\n\n## 函数重载主要是为了解决两个问题\n\n1. 可变参数类型。\n2. 可变参数个数。\n\n>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。\n\n那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。\n\n那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是`缺省参数`。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。\n\n参考自知乎用户`pansz`：https://www.zhihu.com/question/20053359\n","slug":"Python3-函数重载","published":1,"updated":"2018-03-03T03:46:12.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrl0011qkotltwghgzr","content":"<h2 id=\"函数重载的目的\"><a href=\"#函数重载的目的\" class=\"headerlink\" title=\"函数重载的目的\"></a>函数重载的目的</h2><p>动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。</p>\n<p>在Python中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(output, content)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># output对象只要实现了write方法就行</span></span><br><span class=\"line\">        output.write(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stringIO类型</span></span><br><span class=\"line\">output = StringIO()</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># file 类型</span></span><br><span class=\"line\">output = open(<span class=\"string\">'out.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。</p>\n<p>在Java中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Writer&#123;</span><br><span class=\"line\">    public static void write(StringIO output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void write(File output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考自知乎用户刘志军：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n<hr>\n<h2 id=\"函数重载主要是为了解决两个问题\"><a href=\"#函数重载主要是为了解决两个问题\" class=\"headerlink\" title=\"函数重载主要是为了解决两个问题\"></a>函数重载主要是为了解决两个问题</h2><ol>\n<li>可变参数类型。</li>\n<li>可变参数个数。</li>\n</ol>\n<blockquote>\n<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>\n</blockquote>\n<p>那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>\n<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是<code>缺省参数</code>。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>\n<p>参考自知乎用户<code>pansz</code>：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数重载的目的\"><a href=\"#函数重载的目的\" class=\"headerlink\" title=\"函数重载的目的\"></a>函数重载的目的</h2><p>动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。</p>\n<p>在Python中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(output, content)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># output对象只要实现了write方法就行</span></span><br><span class=\"line\">        output.write(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stringIO类型</span></span><br><span class=\"line\">output = StringIO()</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># file 类型</span></span><br><span class=\"line\">output = open(<span class=\"string\">'out.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure></p>","more":"<p>在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。</p>\n<p>在Java中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Writer&#123;</span><br><span class=\"line\">    public static void write(StringIO output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void write(File output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考自知乎用户刘志军：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n<hr>\n<h2 id=\"函数重载主要是为了解决两个问题\"><a href=\"#函数重载主要是为了解决两个问题\" class=\"headerlink\" title=\"函数重载主要是为了解决两个问题\"></a>函数重载主要是为了解决两个问题</h2><ol>\n<li>可变参数类型。</li>\n<li>可变参数个数。</li>\n</ol>\n<blockquote>\n<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>\n</blockquote>\n<p>那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>\n<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是<code>缺省参数</code>。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>\n<p>参考自知乎用户<code>pansz</code>：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>"},{"title":"Python3 中的单下划线和双下划线","date":"2018-03-01T10:01:50.000Z","_content":"\n### 单下划线\n\n#### 在解释器中\n在交互解释器中，`_`符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。\n\n#### 作为名称使用\n这个跟上面有点类似。`_`用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：\n```Python\nn = 42\nfor _ in range(n):\n    do_something()\n```\n\n<!-- more -->\n#### i18n\n`_`还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 [Django documentation for translation](https://docs.djangoproject.com/en/dev/topics/i18n/translation/) 中你可能会看到：\n\n```python\nfrom django.utils.translation import ugettext as _\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n**注意**：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。\n\n#### 单下划线前缀的名称\n\n\n首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 `from a_module import *` 导入时，这部分变量和函数不会被导入。**不过值得注意的是**，如果使用 `import a_module` 这样导入模块，仍然可以用 `a_module._some_var` 这样的形式访问到这样的对象。\n\n另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 `_struct` 的一个 Python 包装。\n\n#### 单下划线后缀的名称\n在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。\n\n\n\n### 双下划线\n\n双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 `Test 类`里有一成员 `__x`，那么 dir(Test) 时会看到 `_Test__x` 而非 `__x`。这是为了避免该成员的名称与子类中的名称冲突。**但要注意这要求该名称末尾最多有一个下划线** [python document](https://docs.python.org/3.4/tutorial/classes.html#tut-private).\n\n双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 `__init__`、`__del__`、`__add__`、`__getitem__` 等，以及全局的 `__file__`、`__name__` 等。 Python `官方推荐永远不要`将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。\n\n### 举个栗子\n\n\n```python\n>>> class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n>>> mc = MyClass()\n>>> print mc.__superprivate\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: myClass instance has no attribute '__superprivate'\n>>> print mc._semiprivate\n, world!\n>>> print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n```\n\n`__foo__`:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如`__init__()`,`__del__()`,`__call__()`这些特殊方法\n\n`_foo`:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；\n\n`__foo`:这个有真正的意义:解析器用`_classname__foo`来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 `_类名__xxx` 这样的方式可以访问.\n\n### 参考\n详情见:\n1. http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\n\n2. http://www.zhihu.com/question/19754941\n\n3. https://segmentfault.com/a/1190000002611411\n\n4. https://docs.python.org/3.4/tutorial/classes.html#tut-private\n","source":"_posts/Python3-单下划线和双下划线.md","raw":"---\ntitle: Python3 中的单下划线和双下划线\ndate: 2018-03-01 18:01:50\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 下划线\n---\n\n### 单下划线\n\n#### 在解释器中\n在交互解释器中，`_`符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。\n\n#### 作为名称使用\n这个跟上面有点类似。`_`用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：\n```Python\nn = 42\nfor _ in range(n):\n    do_something()\n```\n\n<!-- more -->\n#### i18n\n`_`还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 [Django documentation for translation](https://docs.djangoproject.com/en/dev/topics/i18n/translation/) 中你可能会看到：\n\n```python\nfrom django.utils.translation import ugettext as _\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n**注意**：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。\n\n#### 单下划线前缀的名称\n\n\n首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 `from a_module import *` 导入时，这部分变量和函数不会被导入。**不过值得注意的是**，如果使用 `import a_module` 这样导入模块，仍然可以用 `a_module._some_var` 这样的形式访问到这样的对象。\n\n另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 `_struct` 的一个 Python 包装。\n\n#### 单下划线后缀的名称\n在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。\n\n\n\n### 双下划线\n\n双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 `Test 类`里有一成员 `__x`，那么 dir(Test) 时会看到 `_Test__x` 而非 `__x`。这是为了避免该成员的名称与子类中的名称冲突。**但要注意这要求该名称末尾最多有一个下划线** [python document](https://docs.python.org/3.4/tutorial/classes.html#tut-private).\n\n双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 `__init__`、`__del__`、`__add__`、`__getitem__` 等，以及全局的 `__file__`、`__name__` 等。 Python `官方推荐永远不要`将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。\n\n### 举个栗子\n\n\n```python\n>>> class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n>>> mc = MyClass()\n>>> print mc.__superprivate\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: myClass instance has no attribute '__superprivate'\n>>> print mc._semiprivate\n, world!\n>>> print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n```\n\n`__foo__`:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如`__init__()`,`__del__()`,`__call__()`这些特殊方法\n\n`_foo`:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；\n\n`__foo`:这个有真正的意义:解析器用`_classname__foo`来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 `_类名__xxx` 这样的方式可以访问.\n\n### 参考\n详情见:\n1. http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\n\n2. http://www.zhihu.com/question/19754941\n\n3. https://segmentfault.com/a/1190000002611411\n\n4. https://docs.python.org/3.4/tutorial/classes.html#tut-private\n","slug":"Python3-单下划线和双下划线","published":1,"updated":"2018-03-02T18:25:01.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrm0013qkotsy55j7xe","content":"<h3 id=\"单下划线\"><a href=\"#单下划线\" class=\"headerlink\" title=\"单下划线\"></a>单下划线</h3><h4 id=\"在解释器中\"><a href=\"#在解释器中\" class=\"headerlink\" title=\"在解释器中\"></a>在解释器中</h4><p>在交互解释器中，<code>_</code>符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。</p>\n<h4 id=\"作为名称使用\"><a href=\"#作为名称使用\" class=\"headerlink\" title=\"作为名称使用\"></a>作为名称使用</h4><p>这个跟上面有点类似。<code>_</code>用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    do_something()</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h4><p><code>_</code>还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 <a href=\"https://docs.djangoproject.com/en/dev/topics/i18n/translation/\" target=\"_blank\" rel=\"noopener\">Django documentation for translation</a> 中你可能会看到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    output = _(<span class=\"string\">\"Welcome to my site.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。</p>\n<h4 id=\"单下划线前缀的名称\"><a href=\"#单下划线前缀的名称\" class=\"headerlink\" title=\"单下划线前缀的名称\"></a>单下划线前缀的名称</h4><p>首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 <code>from a_module import *</code> 导入时，这部分变量和函数不会被导入。<strong>不过值得注意的是</strong>，如果使用 <code>import a_module</code> 这样导入模块，仍然可以用 <code>a_module._some_var</code> 这样的形式访问到这样的对象。</p>\n<p>另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 <code>_struct</code> 的一个 Python 包装。</p>\n<h4 id=\"单下划线后缀的名称\"><a href=\"#单下划线后缀的名称\" class=\"headerlink\" title=\"单下划线后缀的名称\"></a>单下划线后缀的名称</h4><p>在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。</p>\n<h3 id=\"双下划线\"><a href=\"#双下划线\" class=\"headerlink\" title=\"双下划线\"></a>双下划线</h3><p>双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 <code>Test 类</code>里有一成员 <code>__x</code>，那么 dir(Test) 时会看到 <code>_Test__x</code> 而非 <code>__x</code>。这是为了避免该成员的名称与子类中的名称冲突。<strong>但要注意这要求该名称末尾最多有一个下划线</strong> <a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">python document</a>.</p>\n<p>双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 <code>__init__</code>、<code>__del__</code>、<code>__add__</code>、<code>__getitem__</code> 等，以及全局的 <code>__file__</code>、<code>__name__</code> 等。 Python <code>官方推荐永远不要</code>将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self.__superprivate = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self._semiprivate = <span class=\"string\">\", world!\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__superprivate</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">AttributeError: myClass instance has no attribute <span class=\"string\">'__superprivate'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc._semiprivate</span><br><span class=\"line\">, world!</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__dict__</span><br><span class=\"line\">&#123;<span class=\"string\">'_MyClass__superprivate'</span>: <span class=\"string\">'Hello'</span>, <span class=\"string\">'_semiprivate'</span>: <span class=\"string\">', world!'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p>\n<p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p>\n<p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 <code>_类名__xxx</code> 这样的方式可以访问.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>详情见:</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19754941\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19754941</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002611411\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002611411</a></p>\n</li>\n<li><p><a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3.4/tutorial/classes.html#tut-private</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"单下划线\"><a href=\"#单下划线\" class=\"headerlink\" title=\"单下划线\"></a>单下划线</h3><h4 id=\"在解释器中\"><a href=\"#在解释器中\" class=\"headerlink\" title=\"在解释器中\"></a>在解释器中</h4><p>在交互解释器中，<code>_</code>符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。</p>\n<h4 id=\"作为名称使用\"><a href=\"#作为名称使用\" class=\"headerlink\" title=\"作为名称使用\"></a>作为名称使用</h4><p>这个跟上面有点类似。<code>_</code>用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    do_something()</span><br></pre></td></tr></table></figure></p>","more":"<h4 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h4><p><code>_</code>还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 <a href=\"https://docs.djangoproject.com/en/dev/topics/i18n/translation/\" target=\"_blank\" rel=\"noopener\">Django documentation for translation</a> 中你可能会看到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    output = _(<span class=\"string\">\"Welcome to my site.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。</p>\n<h4 id=\"单下划线前缀的名称\"><a href=\"#单下划线前缀的名称\" class=\"headerlink\" title=\"单下划线前缀的名称\"></a>单下划线前缀的名称</h4><p>首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 <code>from a_module import *</code> 导入时，这部分变量和函数不会被导入。<strong>不过值得注意的是</strong>，如果使用 <code>import a_module</code> 这样导入模块，仍然可以用 <code>a_module._some_var</code> 这样的形式访问到这样的对象。</p>\n<p>另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 <code>_struct</code> 的一个 Python 包装。</p>\n<h4 id=\"单下划线后缀的名称\"><a href=\"#单下划线后缀的名称\" class=\"headerlink\" title=\"单下划线后缀的名称\"></a>单下划线后缀的名称</h4><p>在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。</p>\n<h3 id=\"双下划线\"><a href=\"#双下划线\" class=\"headerlink\" title=\"双下划线\"></a>双下划线</h3><p>双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 <code>Test 类</code>里有一成员 <code>__x</code>，那么 dir(Test) 时会看到 <code>_Test__x</code> 而非 <code>__x</code>。这是为了避免该成员的名称与子类中的名称冲突。<strong>但要注意这要求该名称末尾最多有一个下划线</strong> <a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">python document</a>.</p>\n<p>双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 <code>__init__</code>、<code>__del__</code>、<code>__add__</code>、<code>__getitem__</code> 等，以及全局的 <code>__file__</code>、<code>__name__</code> 等。 Python <code>官方推荐永远不要</code>将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self.__superprivate = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self._semiprivate = <span class=\"string\">\", world!\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__superprivate</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">AttributeError: myClass instance has no attribute <span class=\"string\">'__superprivate'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc._semiprivate</span><br><span class=\"line\">, world!</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__dict__</span><br><span class=\"line\">&#123;<span class=\"string\">'_MyClass__superprivate'</span>: <span class=\"string\">'Hello'</span>, <span class=\"string\">'_semiprivate'</span>: <span class=\"string\">', world!'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p>\n<p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p>\n<p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 <code>_类名__xxx</code> 这样的方式可以访问.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>详情见:</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19754941\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19754941</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002611411\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002611411</a></p>\n</li>\n<li><p><a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3.4/tutorial/classes.html#tut-private</a></p>\n</li>\n</ol>"},{"title":"Python3 垃圾回收机制","date":"2018-03-05T13:38:25.000Z","_content":"Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。\n分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。\n\n<!-- more -->\n## 引用计数\n\nPython语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个`ob_ref`字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。\n\n导致引用计数+1的情况\n  1. 对象被创建，例如`a=23`\n  2. 对象被引用，例如`b=a`\n  3. 对象被作为参数，传入到一个函数中，例如`func(a)`\n  4. 对象作为一个元素，存储在容器中，例如`list1=[a,a]`\n导致引用计数-1的情况\n  1. 对象的别名被显式销毁，例如`del a`\n  2. 对象的别名被赋予新的对象，例如`a=24`\n  3. 一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）\n  4. 对象所在的容器被销毁，或从容器中删除对象\n\n## 标记清除\n\n『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![mark-sweepg](https://foofish.net/images/mark-sweep.svg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。\n\n标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n\n## 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，`分代回收是建立在标记清除技术基础之上`。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象\n\n## Python中的GC阈值\n\n随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。\n\n当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。\n\n随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。\n\n通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。\n\n\n## gc模块\n[Garbage Collector interface](https://docs.python.org/2/library/gc.html)  \ngc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。\n\n### 常用函数：\n\n  1. gc.set_debug(flags)  \n设置gc的debug日志，一般设置为gc.DEBUG_LEAK\n  2. gc.collect([generation])  \n显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。  \n返回不可达（unreachable objects）对象的数目\n  3. gc.set_threshold(threshold0[, threshold1[, threshold2])  \n设置自动执行垃圾回收的频率。\n  4. gc.get_count()  \n获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表\n\n### gc模块的自动垃圾回收机制\n\n必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。  \n这个机制的主要作用就是发现并处理不可达的垃圾对象。\n\n`垃圾回收=垃圾检查+垃圾回收`  \n\n在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。\n\ngc模块里面会有一个长度为3的列表的计数器，可以通过`gc.get_count()`获取。  \n例如`(488,3,0)`，其中`488`是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，**注意是内存分配，而不是引用计数的增加**。例如：\n```Python\nprint gc.get_count()  # (590, 8, 0)\na = ClassA()\nprint gc.get_count()  # (591, 8, 0)\ndel a\nprint gc.get_count()  # (590, 8, 0)\n```\n`3`是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，`0`是指距离上一次2代垃圾检查，1代垃圾检查的次数。\n\ngc模快有一个自动垃圾回收的阀值，即通过`gc.get_threshold`函数获取到的长度为3的元组，例如`(700,10,10)`  \n每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器  \n例如，假设阀值是`(700,10,10)`：\n\n  * 当计数器从`(699,3,0)`增加到`(700,3,0)`，gc模块就会执行`gc.collect(0)`,即检查0代对象的垃圾，并重置计数器为`(0,4,0)`\n  * 当计数器从`(699,9,0)`增加到`(700,9,0)`，gc模块就会执行`gc.collect(1)`,即检查1、2代对象的垃圾，并重置计数器为`(0,0,1)`\n  * 当计数器从`(699,9,9)`增加到`(700,9,9)`，gc模块就会执行`gc.collect(2)`,即检查0、1、2代对象的垃圾，并重置计数器为`(0,0,0)`\n\n\n## 应用\n\n1. 项目中避免循环引用\n2. 引入gc模块，启动gc模块的自动清理循环引用的对象机制\n3. 由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗\n4. gc模块唯一处理不了的是循环引用的类都有`__del__`方法，所以项目中要避免定义_`_del__`方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用`gc.garbage`里面的对象的`__del__`来打破僵局\n\n\n## 参考\n1. http://python.jobbole.com/87843/\n2. https://www.cnblogs.com/pinganzi/p/6646742.html\n3. http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","source":"_posts/Python3-垃圾回收机制.md","raw":"---\ntitle: Python3 垃圾回收机制\ndate: 2018-03-05 21:38:25\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\nPython中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。\n分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。\n\n<!-- more -->\n## 引用计数\n\nPython语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个`ob_ref`字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。\n\n导致引用计数+1的情况\n  1. 对象被创建，例如`a=23`\n  2. 对象被引用，例如`b=a`\n  3. 对象被作为参数，传入到一个函数中，例如`func(a)`\n  4. 对象作为一个元素，存储在容器中，例如`list1=[a,a]`\n导致引用计数-1的情况\n  1. 对象的别名被显式销毁，例如`del a`\n  2. 对象的别名被赋予新的对象，例如`a=24`\n  3. 一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）\n  4. 对象所在的容器被销毁，或从容器中删除对象\n\n## 标记清除\n\n『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![mark-sweepg](https://foofish.net/images/mark-sweep.svg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。\n\n标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n\n## 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，`分代回收是建立在标记清除技术基础之上`。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象\n\n## Python中的GC阈值\n\n随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。\n\n当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。\n\n随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。\n\n通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。\n\n\n## gc模块\n[Garbage Collector interface](https://docs.python.org/2/library/gc.html)  \ngc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。\n\n### 常用函数：\n\n  1. gc.set_debug(flags)  \n设置gc的debug日志，一般设置为gc.DEBUG_LEAK\n  2. gc.collect([generation])  \n显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。  \n返回不可达（unreachable objects）对象的数目\n  3. gc.set_threshold(threshold0[, threshold1[, threshold2])  \n设置自动执行垃圾回收的频率。\n  4. gc.get_count()  \n获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表\n\n### gc模块的自动垃圾回收机制\n\n必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。  \n这个机制的主要作用就是发现并处理不可达的垃圾对象。\n\n`垃圾回收=垃圾检查+垃圾回收`  \n\n在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。\n\ngc模块里面会有一个长度为3的列表的计数器，可以通过`gc.get_count()`获取。  \n例如`(488,3,0)`，其中`488`是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，**注意是内存分配，而不是引用计数的增加**。例如：\n```Python\nprint gc.get_count()  # (590, 8, 0)\na = ClassA()\nprint gc.get_count()  # (591, 8, 0)\ndel a\nprint gc.get_count()  # (590, 8, 0)\n```\n`3`是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，`0`是指距离上一次2代垃圾检查，1代垃圾检查的次数。\n\ngc模快有一个自动垃圾回收的阀值，即通过`gc.get_threshold`函数获取到的长度为3的元组，例如`(700,10,10)`  \n每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器  \n例如，假设阀值是`(700,10,10)`：\n\n  * 当计数器从`(699,3,0)`增加到`(700,3,0)`，gc模块就会执行`gc.collect(0)`,即检查0代对象的垃圾，并重置计数器为`(0,4,0)`\n  * 当计数器从`(699,9,0)`增加到`(700,9,0)`，gc模块就会执行`gc.collect(1)`,即检查1、2代对象的垃圾，并重置计数器为`(0,0,1)`\n  * 当计数器从`(699,9,9)`增加到`(700,9,9)`，gc模块就会执行`gc.collect(2)`,即检查0、1、2代对象的垃圾，并重置计数器为`(0,0,0)`\n\n\n## 应用\n\n1. 项目中避免循环引用\n2. 引入gc模块，启动gc模块的自动清理循环引用的对象机制\n3. 由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗\n4. gc模块唯一处理不了的是循环引用的类都有`__del__`方法，所以项目中要避免定义_`_del__`方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用`gc.garbage`里面的对象的`__del__`来打破僵局\n\n\n## 参考\n1. http://python.jobbole.com/87843/\n2. https://www.cnblogs.com/pinganzi/p/6646742.html\n3. http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","slug":"Python3-垃圾回收机制","published":1,"updated":"2018-03-05T16:51:20.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrp0018qkota6e1w8qk","content":"<p>Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。</p>\n<a id=\"more\"></a>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</p>\n<p>导致引用计数+1的情况</p>\n<ol>\n<li>对象被创建，例如<code>a=23</code></li>\n<li>对象被引用，例如<code>b=a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code><br>导致引用计数-1的情况</li>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ol>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"https://foofish.net/images/mark-sweep.svg\" alt=\"mark-sweepg\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>\n<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h2 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h2><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，<code>分代回收是建立在标记清除技术基础之上</code>。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p>\n<h2 id=\"Python中的GC阈值\"><a href=\"#Python中的GC阈值\" class=\"headerlink\" title=\"Python中的GC阈值\"></a>Python中的GC阈值</h2><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。</p>\n<p>当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。</p>\n<p>随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。</p>\n<p>通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。</p>\n<h2 id=\"gc模块\"><a href=\"#gc模块\" class=\"headerlink\" title=\"gc模块\"></a>gc模块</h2><p><a href=\"https://docs.python.org/2/library/gc.html\" target=\"_blank\" rel=\"noopener\">Garbage Collector interface</a><br>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>\n<h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><ol>\n<li>gc.set_debug(flags)<br>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</li>\n<li>gc.collect([generation])<br>显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。<br>返回不可达（unreachable objects）对象的数目</li>\n<li>gc.set_threshold(threshold0[, threshold1[, threshold2])<br>设置自动执行垃圾回收的频率。</li>\n<li>gc.get_count()<br>获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>\n</ol>\n<h3 id=\"gc模块的自动垃圾回收机制\"><a href=\"#gc模块的自动垃圾回收机制\" class=\"headerlink\" title=\"gc模块的自动垃圾回收机制\"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>\n<p><code>垃圾回收=垃圾检查+垃圾回收</code>  </p>\n<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>\n<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。<br>例如<code>(488,3,0)</code>，其中<code>488</code>是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，<strong>注意是内存分配，而不是引用计数的增加</strong>。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br><span class=\"line\">a = ClassA()</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (591, 8, 0)</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>3</code>是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，<code>0</code>是指距离上一次2代垃圾检查，1代垃圾检查的次数。</p>\n<p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器<br>例如，假设阀值是<code>(700,10,10)</code>：</p>\n<ul>\n<li>当计数器从<code>(699,3,0)</code>增加到<code>(700,3,0)</code>，gc模块就会执行<code>gc.collect(0)</code>,即检查0代对象的垃圾，并重置计数器为<code>(0,4,0)</code></li>\n<li>当计数器从<code>(699,9,0)</code>增加到<code>(700,9,0)</code>，gc模块就会执行<code>gc.collect(1)</code>,即检查1、2代对象的垃圾，并重置计数器为<code>(0,0,1)</code></li>\n<li>当计数器从<code>(699,9,9)</code>增加到<code>(700,9,9)</code>，gc模块就会执行<code>gc.collect(2)</code>,即检查0、1、2代对象的垃圾，并重置计数器为<code>(0,0,0)</code></li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>项目中避免循环引用</li>\n<li>引入gc模块，启动gc模块的自动清理循环引用的对象机制</li>\n<li>由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗</li>\n<li>gc模块唯一处理不了的是循环引用的类都有<code>__del__</code>方法，所以项目中要避免定义_<code>_del__</code>方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用<code>gc.garbage</code>里面的对象的<code>__del__</code>来打破僵局</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87843/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87843/</a></li>\n<li><a href=\"https://www.cnblogs.com/pinganzi/p/6646742.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pinganzi/p/6646742.html</a></li>\n<li><a href=\"http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。</p>","more":"<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</p>\n<p>导致引用计数+1的情况</p>\n<ol>\n<li>对象被创建，例如<code>a=23</code></li>\n<li>对象被引用，例如<code>b=a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code><br>导致引用计数-1的情况</li>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ol>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"https://foofish.net/images/mark-sweep.svg\" alt=\"mark-sweepg\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>\n<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h2 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h2><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，<code>分代回收是建立在标记清除技术基础之上</code>。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p>\n<h2 id=\"Python中的GC阈值\"><a href=\"#Python中的GC阈值\" class=\"headerlink\" title=\"Python中的GC阈值\"></a>Python中的GC阈值</h2><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。</p>\n<p>当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。</p>\n<p>随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。</p>\n<p>通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。</p>\n<h2 id=\"gc模块\"><a href=\"#gc模块\" class=\"headerlink\" title=\"gc模块\"></a>gc模块</h2><p><a href=\"https://docs.python.org/2/library/gc.html\" target=\"_blank\" rel=\"noopener\">Garbage Collector interface</a><br>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>\n<h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><ol>\n<li>gc.set_debug(flags)<br>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</li>\n<li>gc.collect([generation])<br>显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。<br>返回不可达（unreachable objects）对象的数目</li>\n<li>gc.set_threshold(threshold0[, threshold1[, threshold2])<br>设置自动执行垃圾回收的频率。</li>\n<li>gc.get_count()<br>获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>\n</ol>\n<h3 id=\"gc模块的自动垃圾回收机制\"><a href=\"#gc模块的自动垃圾回收机制\" class=\"headerlink\" title=\"gc模块的自动垃圾回收机制\"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>\n<p><code>垃圾回收=垃圾检查+垃圾回收</code>  </p>\n<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>\n<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。<br>例如<code>(488,3,0)</code>，其中<code>488</code>是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，<strong>注意是内存分配，而不是引用计数的增加</strong>。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br><span class=\"line\">a = ClassA()</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (591, 8, 0)</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>3</code>是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，<code>0</code>是指距离上一次2代垃圾检查，1代垃圾检查的次数。</p>\n<p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器<br>例如，假设阀值是<code>(700,10,10)</code>：</p>\n<ul>\n<li>当计数器从<code>(699,3,0)</code>增加到<code>(700,3,0)</code>，gc模块就会执行<code>gc.collect(0)</code>,即检查0代对象的垃圾，并重置计数器为<code>(0,4,0)</code></li>\n<li>当计数器从<code>(699,9,0)</code>增加到<code>(700,9,0)</code>，gc模块就会执行<code>gc.collect(1)</code>,即检查1、2代对象的垃圾，并重置计数器为<code>(0,0,1)</code></li>\n<li>当计数器从<code>(699,9,9)</code>增加到<code>(700,9,9)</code>，gc模块就会执行<code>gc.collect(2)</code>,即检查0、1、2代对象的垃圾，并重置计数器为<code>(0,0,0)</code></li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>项目中避免循环引用</li>\n<li>引入gc模块，启动gc模块的自动清理循环引用的对象机制</li>\n<li>由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗</li>\n<li>gc模块唯一处理不了的是循环引用的类都有<code>__del__</code>方法，所以项目中要避免定义_<code>_del__</code>方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用<code>gc.garbage</code>里面的对象的<code>__del__</code>来打破僵局</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87843/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87843/</a></li>\n<li><a href=\"https://www.cnblogs.com/pinganzi/p/6646742.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pinganzi/p/6646742.html</a></li>\n<li><a href=\"http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>"},{"title":"Python3 子类的查看与类的对象判断","date":"2018-03-02T18:24:21.000Z","_content":"1. 如果想要查看一个类是不是另一个类的子类，可以使用內建的 `issubclass` 函数或者使用它的特殊特性`__base__`；\n\n2. 如果想要检查一个对象是不是一个类的实例，可以使用內建的 `isinstance` 函数或者使用它的特殊特性`__class__`;\n<!-- more -->\n\n```python\n# -*- coding: utf-8 -*-  \n__metaclass__ = type #确定使新式类  \n\n\nclass father():  \n    def init(self):  \n        print(\"father()已经创建\")  \n\nclass son(father):  \n    def init(self):  \n        print(\"son()已经创建\")  \n\n#下面测试issubclass()函数  \nprint(issubclass(father,son))  # output: False\nprint(issubclass(son,father))  # output: True\n\n#下面使用__bases__  \nprint(\"father.__bases__:\",father.__bases__)  # output: father.__bases__: (<class 'object'>,)  \nprint(\"son.__bases__:\",son.__bases__)        # output: son.__bases__: (<class '__main__.father'>,)  \n\n#下面测试isinstance()函数  \ns = son()  \nprint(isinstance(s,son))    # output: True\nprint(isinstance(s,father)) # output: True\nprint(isinstance(s,str))    # output: False\n\n#下面使用__class__  \nprint(\"s.__class__:\",s.__class__) # output: s.__class__: <class '__main__.son'>  \n```\n","source":"_posts/Python3-子类的查看与类的对象判断.md","raw":"---\ntitle: Python3 子类的查看与类的对象判断\ndate: 2018-03-03 02:24:21\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n1. 如果想要查看一个类是不是另一个类的子类，可以使用內建的 `issubclass` 函数或者使用它的特殊特性`__base__`；\n\n2. 如果想要检查一个对象是不是一个类的实例，可以使用內建的 `isinstance` 函数或者使用它的特殊特性`__class__`;\n<!-- more -->\n\n```python\n# -*- coding: utf-8 -*-  \n__metaclass__ = type #确定使新式类  \n\n\nclass father():  \n    def init(self):  \n        print(\"father()已经创建\")  \n\nclass son(father):  \n    def init(self):  \n        print(\"son()已经创建\")  \n\n#下面测试issubclass()函数  \nprint(issubclass(father,son))  # output: False\nprint(issubclass(son,father))  # output: True\n\n#下面使用__bases__  \nprint(\"father.__bases__:\",father.__bases__)  # output: father.__bases__: (<class 'object'>,)  \nprint(\"son.__bases__:\",son.__bases__)        # output: son.__bases__: (<class '__main__.father'>,)  \n\n#下面测试isinstance()函数  \ns = son()  \nprint(isinstance(s,son))    # output: True\nprint(isinstance(s,father)) # output: True\nprint(isinstance(s,str))    # output: False\n\n#下面使用__class__  \nprint(\"s.__class__:\",s.__class__) # output: s.__class__: <class '__main__.son'>  \n```\n","slug":"Python3-子类的查看与类的对象判断","published":1,"updated":"2018-03-03T02:39:26.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrr001aqkotqvk32t02","content":"<ol>\n<li><p>如果想要查看一个类是不是另一个类的子类，可以使用內建的 <code>issubclass</code> 函数或者使用它的特殊特性<code>__base__</code>；</p>\n</li>\n<li><p>如果想要检查一个对象是不是一个类的实例，可以使用內建的 <code>isinstance</code> 函数或者使用它的特殊特性<code>__class__</code>;</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-  </span></span><br><span class=\"line\">__metaclass__ = type <span class=\"comment\">#确定使新式类  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span><span class=\"params\">()</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"father()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span><span class=\"params\">(father)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"son()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试issubclass()函数  </span></span><br><span class=\"line\">print(issubclass(father,son))  <span class=\"comment\"># output: False</span></span><br><span class=\"line\">print(issubclass(son,father))  <span class=\"comment\"># output: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__bases__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"father.__bases__:\"</span>,father.__bases__)  <span class=\"comment\"># output: father.__bases__: (&lt;class 'object'&gt;,)  </span></span><br><span class=\"line\">print(<span class=\"string\">\"son.__bases__:\"</span>,son.__bases__)        <span class=\"comment\"># output: son.__bases__: (&lt;class '__main__.father'&gt;,)  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试isinstance()函数  </span></span><br><span class=\"line\">s = son()  </span><br><span class=\"line\">print(isinstance(s,son))    <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,father)) <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,str))    <span class=\"comment\"># output: False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__class__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"s.__class__:\"</span>,s.__class__) <span class=\"comment\"># output: s.__class__: &lt;class '__main__.son'&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>如果想要查看一个类是不是另一个类的子类，可以使用內建的 <code>issubclass</code> 函数或者使用它的特殊特性<code>__base__</code>；</p>\n</li>\n<li><p>如果想要检查一个对象是不是一个类的实例，可以使用內建的 <code>isinstance</code> 函数或者使用它的特殊特性<code>__class__</code>;</p>","more":"</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-  </span></span><br><span class=\"line\">__metaclass__ = type <span class=\"comment\">#确定使新式类  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span><span class=\"params\">()</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"father()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span><span class=\"params\">(father)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"son()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试issubclass()函数  </span></span><br><span class=\"line\">print(issubclass(father,son))  <span class=\"comment\"># output: False</span></span><br><span class=\"line\">print(issubclass(son,father))  <span class=\"comment\"># output: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__bases__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"father.__bases__:\"</span>,father.__bases__)  <span class=\"comment\"># output: father.__bases__: (&lt;class 'object'&gt;,)  </span></span><br><span class=\"line\">print(<span class=\"string\">\"son.__bases__:\"</span>,son.__bases__)        <span class=\"comment\"># output: son.__bases__: (&lt;class '__main__.father'&gt;,)  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试isinstance()函数  </span></span><br><span class=\"line\">s = son()  </span><br><span class=\"line\">print(isinstance(s,son))    <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,father)) <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,str))    <span class=\"comment\"># output: False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__class__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"s.__class__:\"</span>,s.__class__) <span class=\"comment\"># output: s.__class__: &lt;class '__main__.son'&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Python3 拷贝对象(深拷贝deepcopy和浅拷贝copy)","date":"2018-03-03T04:10:54.000Z","_content":"\n1. copy.copy 浅拷贝 `只拷贝父对象`，不会拷贝对象的内部的子对象。\n2. copy.deepcopy 深拷贝 `拷贝对象及其子对象`\n---\n![屏幕截图3.jpg](http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```python\n# -*-coding:utf-8 -*-\nimport copy\na = [1, 2, 3, 4, ['a', 'b']] #原始对象\n\nb = a #赋值，传对象的引用\nc = copy.copy(a) #对象拷贝，浅拷贝\nd = copy.deepcopy(a) #对象拷贝，深拷贝\n\na.append(5) #修改对象a\na[4].append('c') #修改对象a中的['a', 'b']数组对象\n\nprint 'a = ', a\nprint 'b = ', b\nprint 'c = ', c\nprint 'd = ', d\n输出结果：\na =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nb =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nc =  [1, 2, 3, 4, ['a', 'b', 'c']]\nd =  [1, 2, 3, 4, ['a', 'b']]\n```\n","source":"_posts/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy.md","raw":"---\ntitle: Python3 拷贝对象(深拷贝deepcopy和浅拷贝copy)\ndate: 2018-03-03 12:10:54\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 拷贝对象\n---\n\n1. copy.copy 浅拷贝 `只拷贝父对象`，不会拷贝对象的内部的子对象。\n2. copy.deepcopy 深拷贝 `拷贝对象及其子对象`\n---\n![屏幕截图3.jpg](http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```python\n# -*-coding:utf-8 -*-\nimport copy\na = [1, 2, 3, 4, ['a', 'b']] #原始对象\n\nb = a #赋值，传对象的引用\nc = copy.copy(a) #对象拷贝，浅拷贝\nd = copy.deepcopy(a) #对象拷贝，深拷贝\n\na.append(5) #修改对象a\na[4].append('c') #修改对象a中的['a', 'b']数组对象\n\nprint 'a = ', a\nprint 'b = ', b\nprint 'c = ', c\nprint 'd = ', d\n输出结果：\na =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nb =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nc =  [1, 2, 3, 4, ['a', 'b', 'c']]\nd =  [1, 2, 3, 4, ['a', 'b']]\n```\n","slug":"Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy","published":1,"updated":"2018-03-03T04:14:09.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrs001cqkotfyoqb6bg","content":"<ol>\n<li>copy.copy 浅拷贝 <code>只拷贝父对象</code>，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 <code>拷贝对象及其子对象</code></li>\n</ol>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图3.jpg\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]] <span class=\"comment\">#原始对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = a <span class=\"comment\">#赋值，传对象的引用</span></span><br><span class=\"line\">c = copy.copy(a) <span class=\"comment\">#对象拷贝，浅拷贝</span></span><br><span class=\"line\">d = copy.deepcopy(a) <span class=\"comment\">#对象拷贝，深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(<span class=\"number\">5</span>) <span class=\"comment\">#修改对象a</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>].append(<span class=\"string\">'c'</span>) <span class=\"comment\">#修改对象a中的['a', 'b']数组对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'a = '</span>, a</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'b = '</span>, b</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'c = '</span>, c</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'d = '</span>, d</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">a =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">b =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">c =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]]</span><br><span class=\"line\">d =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ol>\n<li>copy.copy 浅拷贝 <code>只拷贝父对象</code>，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 <code>拷贝对象及其子对象</code></li>\n</ol>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图3.jpg\"></p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]] <span class=\"comment\">#原始对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = a <span class=\"comment\">#赋值，传对象的引用</span></span><br><span class=\"line\">c = copy.copy(a) <span class=\"comment\">#对象拷贝，浅拷贝</span></span><br><span class=\"line\">d = copy.deepcopy(a) <span class=\"comment\">#对象拷贝，深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(<span class=\"number\">5</span>) <span class=\"comment\">#修改对象a</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>].append(<span class=\"string\">'c'</span>) <span class=\"comment\">#修改对象a中的['a', 'b']数组对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'a = '</span>, a</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'b = '</span>, b</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'c = '</span>, c</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'d = '</span>, d</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">a =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">b =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">c =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]]</span><br><span class=\"line\">d =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]]</span><br></pre></td></tr></table></figure>"},{"title":"Python3 真假值对照表","date":"2018-03-03T05:14:45.000Z","_content":"\n| 类型              | False                       |True   |\n| :-----:           | :-----:                    | :-----:   |\n|布尔               |False(与0等价)                |True(与1等价)   |\n|数值                | 0, &nbsp;&nbsp;0.0         |非零的数值   |\n|字符串              | '',&nbsp;&nbsp;\"\"(空字符串)  |非空字符串   |\n|容器   |[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set() |至少有一个元素的容器对象|\n|None          |None|非None对象|\n","source":"_posts/Python3-真假值对照表.md","raw":"---\ntitle: Python3 真假值对照表\ndate: 2018-03-03 13:14:45\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 True or False\n---\n\n| 类型              | False                       |True   |\n| :-----:           | :-----:                    | :-----:   |\n|布尔               |False(与0等价)                |True(与1等价)   |\n|数值                | 0, &nbsp;&nbsp;0.0         |非零的数值   |\n|字符串              | '',&nbsp;&nbsp;\"\"(空字符串)  |非空字符串   |\n|容器   |[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set() |至少有一个元素的容器对象|\n|None          |None|非None对象|\n","slug":"Python3-真假值对照表","published":1,"updated":"2018-03-03T05:21:56.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrt001gqkotontpn03b","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">False</th>\n<th style=\"text-align:center\">True</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">False(与0等价)</td>\n<td style=\"text-align:center\">True(与1等价)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\">0, &nbsp;&nbsp;0.0</td>\n<td style=\"text-align:center\">非零的数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\">‘’,&nbsp;&nbsp;””(空字符串)</td>\n<td style=\"text-align:center\">非空字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器</td>\n<td style=\"text-align:center\">[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set()</td>\n<td style=\"text-align:center\">至少有一个元素的容器对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">非None对象</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">False</th>\n<th style=\"text-align:center\">True</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">False(与0等价)</td>\n<td style=\"text-align:center\">True(与1等价)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\">0, &nbsp;&nbsp;0.0</td>\n<td style=\"text-align:center\">非零的数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\">‘’,&nbsp;&nbsp;””(空字符串)</td>\n<td style=\"text-align:center\">非空字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器</td>\n<td style=\"text-align:center\">[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set()</td>\n<td style=\"text-align:center\">至少有一个元素的容器对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">非None对象</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Python3 类变量和实例变量","date":"2018-03-01T05:21:38.000Z","_content":"### 写在前面\n首先来一张图\n![classvariable.png](http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 类变量和实例变量\n\n在Python Tutorial中对于类变量和实例变量是这样描述的：\n>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:\n\n```python\nclass Dog:\n    kind = 'canine'         # class variable shared by all instances\n    def __init__(self, name):\n        self.name = name    # instance variable unique to each instance\n```\n\n类`Dog`中，类属性`kind`为所有实例所共享；实例属性`name`为每个`Dog`的实例独有。\n<!-- more -->\n\n#### 类变量：\n\n> ​\t是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。\n\n#### 实例变量：\n\n> 实例化之后，每个实例单独拥有的变量。\n\n\n```python\nclass Test(object):  \n    num_of_instance = 0  \n    def __init__(self, name):  \n        self.name = name  \n        Test.num_of_instance += 1  \n\nif __name__ == '__main__':  \n    print Test.num_of_instance   # 0\n    t1 = Test('jack')  \n    print Test.num_of_instance   # 1\n    t2 = Test('lucy')  \n    print t1.name , t1.num_of_instance  # jack 2\n    print t2.name , t2.num_of_instance  # lucy 2\n```\n\n> 补充的例子\n\n```python\nclass Person:\n    name=\"aaa\"\n\np1=Person()\np2=Person()\np1.name=\"bbb\"\nprint p1.name  # bbb\nprint p2.name  # aaa\nprint Person.name  # aaa\n```\n\n这里`p1.name=\"bbb\"`是实例调用了类变量,属于函数传参的问题,`p1.name`一开始是指向的类变量`name=\"aaa\"`,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.\n\n可以看看下面的例子:\n\n```python\nclass Person:\n    name=[]\n\np1=Person()\np2=Person()\np1.name.append(1)\nprint p1.name  # [1]\nprint p2.name  # [1]\nprint Person.name  # [1]\n```\n\n### 类对象和实例对象\n\n#### 类对象\n`Python`中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如\n```python    \nclass Dog:\n    pass\n```\n会在当前作用域定义名字`Dog`，指向类对象`Dog`。\n\n**类对象支持的操作**：  \n总的来说，类对象仅支持两个操作：\n\n  1. 实例化；使用`instance_name = class_name()`的方式实例化，实例化操作创建该类的实例。\n  2. 属性引用；使用`class_name.attr_name`的方式引用类属性。\n\n#### 实例对象\n\n**实例对象是类对象实例化的产物，实例对象仅支持一个操作**:\n\n  1. 属性引用；与类对象属性引用的方式相同，使用`instance_name.attr_name`的方式。\n\n按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在`Python`中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。\n\n在[Python tutorial](https://docs.python.org/3/tutorial/classes.html#class-definition-syntax)关于类定义也这么说：\n\n> In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.\n\n实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。\n\n这里说的其他语句，就是指类属性的绑定语句。\n\n\n### 属性绑定\n\n在定义类时，通常我们说的定义属性，其实是分为两个方面的：\n\n  1. 类属性绑定\n  2. 实例属性绑定\n\n用**绑定**这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。\n\n我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用\n\n    objname.attr = attr_value\n\n的方式，为对象`objname`绑定属性`attr`。\n\n这分两种情况：\n\n  1. 若属性`attr`已经存在，绑定操作会将属性名指向新的对象；\n  2. 若不存在，则为该对象添加新的属性，后面就可以引用新增属性。\n\n#### 类属性绑定\n\n`Python`作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n下面这个例子说明了类属性绑定发生的时期：\n```python\nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\ndel Dog.kind\nprint(Dog.kind, ' - ', Dog.country)\n# AttributeError: type object 'Dog' has no attribute 'kind'\n```\n在类定义中，类属性的绑定并没有使用`objname.attr = attr_value`的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。  \n因为是动态语言，所以可以在运行时增加属性，删除属性。\n\n#### 实例属性绑定\n\n与类属性绑定相同，实例属性绑定也发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n示例：\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndog = Dog('Lily', 3)\ndog.fur_color = 'red'\nprint('%s is %s years old, it has %s fur' % (dog.name, dog.age, dog.fur_color))\n# Output: Lily is 3 years old, it has red fur\n```\n`Python`类实例有两个特殊之处：\n\n  1. `__init__`在实例化时执行\n  2. `Python`实例调用方法时，会将实例对象作为第一个参数传递\n\n因此，`__init__`方法中的`self`就是实例对象本身，这里是`dog`，语句\n```python\nself.name = name\nself.age = age\n```\n以及后面的语句\n```python\ndog.fur_color = 'red'\n```\n为实例`dog`增加三个属性`name`, `age`, `fur_color`。\n\n### 属性引用\n\n#### 类属属性引用\n\n类属性的引用，肯定是需要类对象的，属性分为两种：\n\n  1. 数据属性\n  2. 函数属性\n\n数据属性引用很简单，示例：\n```python    \nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\n```\n通常很少有引用类函数属性的需求，示例：\n```python\nclass Dog:\n    kind = 'canine'\n    def tell_kind():\n        print(Dog.kind)\n\nDog.tell_kind() # Output: canine\n```\n函数`tell_kind`在引用`kind`需要使用`Dog.kind`而不是直接使用`kind`，涉及到作用域，这一点在我的另一篇文章中有介绍：[Python进阶 - 命名空间与作用域](http://www.cnblogs.com/crazyrunning/p/6914080.html)\n\n\n#### 实例属性引用\n\n使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：\n\n  1. 总是先到实例对象中查找属性，再到类属性中查找属性；\n  2. 属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。\n\n##### 数据属性引用\n\n示例1：\n```Python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country)\n# output: Lily 3 canine Britain\n\n```\n类对象`Dog`与实例对象`dog`均有属性`country`，按照规则，`dog.country`会引用到实例对象的属性；但实例对象`dog`没有属性`kind`，按照规则会引用类对象的属性。\n\n示例2：\n```python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 canine Britain\nprint(dog.__dict__) # {'name': 'Lily', 'age': 3, 'country': 'Britain'}\n\ndog.kind = 'feline'\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 feline Britain\nprint(dog.__dict__)  # {'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'}\nprint(Dog.kind) # canine 没有改变类属性的指向\n\n```\n\n示例3，可变类属性引用：\n\n```python\n\nclass Dog:\n\n    tricks = []\n\n    def __init__(self, name):\n        self.name = name\n\n    def add_trick(self, trick):\n        # self.tricks.append(trick)\n        Dog.tricks.append(trick)\n\nd = Dog('Fido')\ne = Dog('Buddy')\nd.add_trick('roll over')\ne.add_trick('play dead')\nprint(d.tricks) # ['roll over', 'play dead']\n```\n\n语句`self.tricks.append(trick)`并不是属性绑定语句，因此还是在类属性上修改可变对象。\n\n##### 方法属性引用\n\n与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：\n\n```Python\nclass MethodTest:\n\n    def inner_test(self):\n        print('in class')\n\ndef outer_test():\n    print('out of class')\n\nmt = MethodTest()\nmt.outer_test = outer_test\n\nprint(type(MethodTest.inner_test))  # <class 'function'> 类函数\nprint(type(mt.inner_test))          #<class 'method'> 类方法\nprint(type(mt.outer_test))          #<class 'function'> 类函数\n\n```\n可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。\n\nPython tutorial中这样介绍方法对象：\n\n>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.\n\n引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。\n\n那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。  \n所以可以使用如下方式直接调用方法与函数：\n\n```python\nmt.inner_test()\nmt.outer_test()\n```\n除了方法与函数的区别，其引用与数据属性都是一样的\n\n### 最佳实践\n\n虽然`Python`作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。\n\n\n\n\n\n\n\n\n参考:\n1. http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\n2. https://www.cnblogs.com/crazyrunning/p/6945183.html\n","source":"_posts/Python3-类变量和实例变量.md","raw":"---\ntitle: Python3 类变量和实例变量\ndate: 2018-03-01 13:21:38\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - 类变量 和 实例变量\n---\n### 写在前面\n首先来一张图\n![classvariable.png](http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 类变量和实例变量\n\n在Python Tutorial中对于类变量和实例变量是这样描述的：\n>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:\n\n```python\nclass Dog:\n    kind = 'canine'         # class variable shared by all instances\n    def __init__(self, name):\n        self.name = name    # instance variable unique to each instance\n```\n\n类`Dog`中，类属性`kind`为所有实例所共享；实例属性`name`为每个`Dog`的实例独有。\n<!-- more -->\n\n#### 类变量：\n\n> ​\t是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。\n\n#### 实例变量：\n\n> 实例化之后，每个实例单独拥有的变量。\n\n\n```python\nclass Test(object):  \n    num_of_instance = 0  \n    def __init__(self, name):  \n        self.name = name  \n        Test.num_of_instance += 1  \n\nif __name__ == '__main__':  \n    print Test.num_of_instance   # 0\n    t1 = Test('jack')  \n    print Test.num_of_instance   # 1\n    t2 = Test('lucy')  \n    print t1.name , t1.num_of_instance  # jack 2\n    print t2.name , t2.num_of_instance  # lucy 2\n```\n\n> 补充的例子\n\n```python\nclass Person:\n    name=\"aaa\"\n\np1=Person()\np2=Person()\np1.name=\"bbb\"\nprint p1.name  # bbb\nprint p2.name  # aaa\nprint Person.name  # aaa\n```\n\n这里`p1.name=\"bbb\"`是实例调用了类变量,属于函数传参的问题,`p1.name`一开始是指向的类变量`name=\"aaa\"`,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.\n\n可以看看下面的例子:\n\n```python\nclass Person:\n    name=[]\n\np1=Person()\np2=Person()\np1.name.append(1)\nprint p1.name  # [1]\nprint p2.name  # [1]\nprint Person.name  # [1]\n```\n\n### 类对象和实例对象\n\n#### 类对象\n`Python`中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如\n```python    \nclass Dog:\n    pass\n```\n会在当前作用域定义名字`Dog`，指向类对象`Dog`。\n\n**类对象支持的操作**：  \n总的来说，类对象仅支持两个操作：\n\n  1. 实例化；使用`instance_name = class_name()`的方式实例化，实例化操作创建该类的实例。\n  2. 属性引用；使用`class_name.attr_name`的方式引用类属性。\n\n#### 实例对象\n\n**实例对象是类对象实例化的产物，实例对象仅支持一个操作**:\n\n  1. 属性引用；与类对象属性引用的方式相同，使用`instance_name.attr_name`的方式。\n\n按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在`Python`中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。\n\n在[Python tutorial](https://docs.python.org/3/tutorial/classes.html#class-definition-syntax)关于类定义也这么说：\n\n> In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.\n\n实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。\n\n这里说的其他语句，就是指类属性的绑定语句。\n\n\n### 属性绑定\n\n在定义类时，通常我们说的定义属性，其实是分为两个方面的：\n\n  1. 类属性绑定\n  2. 实例属性绑定\n\n用**绑定**这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。\n\n我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用\n\n    objname.attr = attr_value\n\n的方式，为对象`objname`绑定属性`attr`。\n\n这分两种情况：\n\n  1. 若属性`attr`已经存在，绑定操作会将属性名指向新的对象；\n  2. 若不存在，则为该对象添加新的属性，后面就可以引用新增属性。\n\n#### 类属性绑定\n\n`Python`作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n下面这个例子说明了类属性绑定发生的时期：\n```python\nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\ndel Dog.kind\nprint(Dog.kind, ' - ', Dog.country)\n# AttributeError: type object 'Dog' has no attribute 'kind'\n```\n在类定义中，类属性的绑定并没有使用`objname.attr = attr_value`的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。  \n因为是动态语言，所以可以在运行时增加属性，删除属性。\n\n#### 实例属性绑定\n\n与类属性绑定相同，实例属性绑定也发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n示例：\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndog = Dog('Lily', 3)\ndog.fur_color = 'red'\nprint('%s is %s years old, it has %s fur' % (dog.name, dog.age, dog.fur_color))\n# Output: Lily is 3 years old, it has red fur\n```\n`Python`类实例有两个特殊之处：\n\n  1. `__init__`在实例化时执行\n  2. `Python`实例调用方法时，会将实例对象作为第一个参数传递\n\n因此，`__init__`方法中的`self`就是实例对象本身，这里是`dog`，语句\n```python\nself.name = name\nself.age = age\n```\n以及后面的语句\n```python\ndog.fur_color = 'red'\n```\n为实例`dog`增加三个属性`name`, `age`, `fur_color`。\n\n### 属性引用\n\n#### 类属属性引用\n\n类属性的引用，肯定是需要类对象的，属性分为两种：\n\n  1. 数据属性\n  2. 函数属性\n\n数据属性引用很简单，示例：\n```python    \nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\n```\n通常很少有引用类函数属性的需求，示例：\n```python\nclass Dog:\n    kind = 'canine'\n    def tell_kind():\n        print(Dog.kind)\n\nDog.tell_kind() # Output: canine\n```\n函数`tell_kind`在引用`kind`需要使用`Dog.kind`而不是直接使用`kind`，涉及到作用域，这一点在我的另一篇文章中有介绍：[Python进阶 - 命名空间与作用域](http://www.cnblogs.com/crazyrunning/p/6914080.html)\n\n\n#### 实例属性引用\n\n使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：\n\n  1. 总是先到实例对象中查找属性，再到类属性中查找属性；\n  2. 属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。\n\n##### 数据属性引用\n\n示例1：\n```Python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country)\n# output: Lily 3 canine Britain\n\n```\n类对象`Dog`与实例对象`dog`均有属性`country`，按照规则，`dog.country`会引用到实例对象的属性；但实例对象`dog`没有属性`kind`，按照规则会引用类对象的属性。\n\n示例2：\n```python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 canine Britain\nprint(dog.__dict__) # {'name': 'Lily', 'age': 3, 'country': 'Britain'}\n\ndog.kind = 'feline'\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 feline Britain\nprint(dog.__dict__)  # {'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'}\nprint(Dog.kind) # canine 没有改变类属性的指向\n\n```\n\n示例3，可变类属性引用：\n\n```python\n\nclass Dog:\n\n    tricks = []\n\n    def __init__(self, name):\n        self.name = name\n\n    def add_trick(self, trick):\n        # self.tricks.append(trick)\n        Dog.tricks.append(trick)\n\nd = Dog('Fido')\ne = Dog('Buddy')\nd.add_trick('roll over')\ne.add_trick('play dead')\nprint(d.tricks) # ['roll over', 'play dead']\n```\n\n语句`self.tricks.append(trick)`并不是属性绑定语句，因此还是在类属性上修改可变对象。\n\n##### 方法属性引用\n\n与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：\n\n```Python\nclass MethodTest:\n\n    def inner_test(self):\n        print('in class')\n\ndef outer_test():\n    print('out of class')\n\nmt = MethodTest()\nmt.outer_test = outer_test\n\nprint(type(MethodTest.inner_test))  # <class 'function'> 类函数\nprint(type(mt.inner_test))          #<class 'method'> 类方法\nprint(type(mt.outer_test))          #<class 'function'> 类函数\n\n```\n可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。\n\nPython tutorial中这样介绍方法对象：\n\n>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.\n\n引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。\n\n那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。  \n所以可以使用如下方式直接调用方法与函数：\n\n```python\nmt.inner_test()\nmt.outer_test()\n```\n除了方法与函数的区别，其引用与数据属性都是一样的\n\n### 最佳实践\n\n虽然`Python`作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。\n\n\n\n\n\n\n\n\n参考:\n1. http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\n2. https://www.cnblogs.com/crazyrunning/p/6945183.html\n","slug":"Python3-类变量和实例变量","published":1,"updated":"2018-03-01T08:05:39.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimru001iqkotpqcg0o26","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>首先来一张图<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"classvariable.png\"></p>\n<h3 id=\"类变量和实例变量\"><a href=\"#类变量和实例变量\" class=\"headerlink\" title=\"类变量和实例变量\"></a>类变量和实例变量</h3><p>在Python Tutorial中对于类变量和实例变量是这样描述的：</p>\n<blockquote>\n<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span>         <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name    <span class=\"comment\"># instance variable unique to each instance</span></span><br></pre></td></tr></table></figure>\n<p>类<code>Dog</code>中，类属性<code>kind</code>为所有实例所共享；实例属性<code>name</code>为每个<code>Dog</code>的实例独有。<br><a id=\"more\"></a></p>\n<h4 id=\"类变量：\"><a href=\"#类变量：\" class=\"headerlink\" title=\"类变量：\"></a>类变量：</h4><blockquote>\n<p>​    是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p>\n</blockquote>\n<h4 id=\"实例变量：\"><a href=\"#实例变量：\" class=\"headerlink\" title=\"实例变量：\"></a>实例变量：</h4><blockquote>\n<p>实例化之后，每个实例单独拥有的变量。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    num_of_instance = <span class=\"number\">0</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name  </span><br><span class=\"line\">        Test.num_of_instance += <span class=\"number\">1</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    t1 = Test(<span class=\"string\">'jack'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    t2 = Test(<span class=\"string\">'lucy'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> t1.name , t1.num_of_instance  <span class=\"comment\"># jack 2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> t2.name , t2.num_of_instance  <span class=\"comment\"># lucy 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充的例子</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=<span class=\"string\">\"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name=<span class=\"string\">\"bbb\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># bbb</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># aaa</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># aaa</span></span><br></pre></td></tr></table></figure>\n<p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,属于函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p>\n<p>可以看看下面的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=[]</span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类对象和实例对象\"><a href=\"#类对象和实例对象\" class=\"headerlink\" title=\"类对象和实例对象\"></a>类对象和实例对象</h3><h4 id=\"类对象\"><a href=\"#类对象\" class=\"headerlink\" title=\"类对象\"></a>类对象</h4><p><code>Python</code>中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>会在当前作用域定义名字<code>Dog</code>，指向类对象<code>Dog</code>。</p>\n<p><strong>类对象支持的操作</strong>：<br>总的来说，类对象仅支持两个操作：</p>\n<ol>\n<li>实例化；使用<code>instance_name = class_name()</code>的方式实例化，实例化操作创建该类的实例。</li>\n<li>属性引用；使用<code>class_name.attr_name</code>的方式引用类属性。</li>\n</ol>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p><strong>实例对象是类对象实例化的产物，实例对象仅支持一个操作</strong>:</p>\n<ol>\n<li>属性引用；与类对象属性引用的方式相同，使用<code>instance_name.attr_name</code>的方式。</li>\n</ol>\n<p>按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在<code>Python</code>中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。</p>\n<p>在<a href=\"https://docs.python.org/3/tutorial/classes.html#class-definition-syntax\" target=\"_blank\" rel=\"noopener\">Python tutorial</a>关于类定义也这么说：</p>\n<blockquote>\n<p>In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.</p>\n</blockquote>\n<p>实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。</p>\n<p>这里说的其他语句，就是指类属性的绑定语句。</p>\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><p>在定义类时，通常我们说的定义属性，其实是分为两个方面的：</p>\n<ol>\n<li>类属性绑定</li>\n<li>实例属性绑定</li>\n</ol>\n<p>用<strong>绑定</strong>这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。</p>\n<p>我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用</p>\n<pre><code>objname.attr = attr_value\n</code></pre><p>的方式，为对象<code>objname</code>绑定属性<code>attr</code>。</p>\n<p>这分两种情况：</p>\n<ol>\n<li>若属性<code>attr</code>已经存在，绑定操作会将属性名指向新的对象；</li>\n<li>若不存在，则为该对象添加新的属性，后面就可以引用新增属性。</li>\n</ol>\n<h4 id=\"类属性绑定\"><a href=\"#类属性绑定\" class=\"headerlink\" title=\"类属性绑定\"></a>类属性绑定</h4><p><code>Python</code>作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>下面这个例子说明了类属性绑定发生的时期：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> Dog.kind</span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country)</span><br><span class=\"line\"><span class=\"comment\"># AttributeError: type object 'Dog' has no attribute 'kind'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类定义中，类属性的绑定并没有使用<code>objname.attr = attr_value</code>的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。<br>因为是动态语言，所以可以在运行时增加属性，删除属性。</p>\n<h4 id=\"实例属性绑定\"><a href=\"#实例属性绑定\" class=\"headerlink\" title=\"实例属性绑定\"></a>实例属性绑定</h4><p>与类属性绑定相同，实例属性绑定也发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s is %s years old, it has %s fur'</span> % (dog.name, dog.age, dog.fur_color))</span><br><span class=\"line\"><span class=\"comment\"># Output: Lily is 3 years old, it has red fur</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Python</code>类实例有两个特殊之处：</p>\n<ol>\n<li><code>__init__</code>在实例化时执行</li>\n<li><code>Python</code>实例调用方法时，会将实例对象作为第一个参数传递</li>\n</ol>\n<p>因此，<code>__init__</code>方法中的<code>self</code>就是实例对象本身，这里是<code>dog</code>，语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = name</span><br><span class=\"line\">self.age = age</span><br></pre></td></tr></table></figure></p>\n<p>以及后面的语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br></pre></td></tr></table></figure></p>\n<p>为实例<code>dog</code>增加三个属性<code>name</code>, <code>age</code>, <code>fur_color</code>。</p>\n<h3 id=\"属性引用\"><a href=\"#属性引用\" class=\"headerlink\" title=\"属性引用\"></a>属性引用</h3><h4 id=\"类属属性引用\"><a href=\"#类属属性引用\" class=\"headerlink\" title=\"类属属性引用\"></a>类属属性引用</h4><p>类属性的引用，肯定是需要类对象的，属性分为两种：</p>\n<ol>\n<li>数据属性</li>\n<li>函数属性</li>\n</ol>\n<p>数据属性引用很简单，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br></pre></td></tr></table></figure></p>\n<p>通常很少有引用类函数属性的需求，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell_kind</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(Dog.kind)</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.tell_kind() <span class=\"comment\"># Output: canine</span></span><br></pre></td></tr></table></figure></p>\n<p>函数<code>tell_kind</code>在引用<code>kind</code>需要使用<code>Dog.kind</code>而不是直接使用<code>kind</code>，涉及到作用域，这一点在我的另一篇文章中有介绍：<a href=\"http://www.cnblogs.com/crazyrunning/p/6914080.html\" target=\"_blank\" rel=\"noopener\">Python进阶 - 命名空间与作用域</a></p>\n<h4 id=\"实例属性引用\"><a href=\"#实例属性引用\" class=\"headerlink\" title=\"实例属性引用\"></a>实例属性引用</h4><p>使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：</p>\n<ol>\n<li>总是先到实例对象中查找属性，再到类属性中查找属性；</li>\n<li>属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。</li>\n</ol>\n<h5 id=\"数据属性引用\"><a href=\"#数据属性引用\" class=\"headerlink\" title=\"数据属性引用\"></a>数据属性引用</h5><p>示例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country)</span><br><span class=\"line\"><span class=\"comment\"># output: Lily 3 canine Britain</span></span><br></pre></td></tr></table></figure></p>\n<p>类对象<code>Dog</code>与实例对象<code>dog</code>均有属性<code>country</code>，按照规则，<code>dog.country</code>会引用到实例对象的属性；但实例对象<code>dog</code>没有属性<code>kind</code>，按照规则会引用类对象的属性。</p>\n<p>示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 canine Britain</span></span><br><span class=\"line\">print(dog.__dict__) <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dog.kind = <span class=\"string\">'feline'</span></span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 feline Britain</span></span><br><span class=\"line\">print(dog.__dict__)  <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'&#125;</span></span><br><span class=\"line\">print(Dog.kind) <span class=\"comment\"># canine 没有改变类属性的指向</span></span><br></pre></td></tr></table></figure></p>\n<p>示例3，可变类属性引用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tricks = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_trick</span><span class=\"params\">(self, trick)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># self.tricks.append(trick)</span></span><br><span class=\"line\">        Dog.tricks.append(trick)</span><br><span class=\"line\"></span><br><span class=\"line\">d = Dog(<span class=\"string\">'Fido'</span>)</span><br><span class=\"line\">e = Dog(<span class=\"string\">'Buddy'</span>)</span><br><span class=\"line\">d.add_trick(<span class=\"string\">'roll over'</span>)</span><br><span class=\"line\">e.add_trick(<span class=\"string\">'play dead'</span>)</span><br><span class=\"line\">print(d.tricks) <span class=\"comment\"># ['roll over', 'play dead']</span></span><br></pre></td></tr></table></figure>\n<p>语句<code>self.tricks.append(trick)</code>并不是属性绑定语句，因此还是在类属性上修改可变对象。</p>\n<h5 id=\"方法属性引用\"><a href=\"#方法属性引用\" class=\"headerlink\" title=\"方法属性引用\"></a>方法属性引用</h5><p>与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodTest</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner_test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'in class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer_test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'out of class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mt = MethodTest()</span><br><span class=\"line\">mt.outer_test = outer_test</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(MethodTest.inner_test))  <span class=\"comment\"># &lt;class 'function'&gt; 类函数</span></span><br><span class=\"line\">print(type(mt.inner_test))          <span class=\"comment\">#&lt;class 'method'&gt; 类方法</span></span><br><span class=\"line\">print(type(mt.outer_test))          <span class=\"comment\">#&lt;class 'function'&gt; 类函数</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。</p>\n<p>Python tutorial中这样介绍方法对象：</p>\n<blockquote>\n<p>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>\n</blockquote>\n<p>引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。</p>\n<p>那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。<br>所以可以使用如下方式直接调用方法与函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mt.inner_test()</span><br><span class=\"line\">mt.outer_test()</span><br></pre></td></tr></table></figure>\n<p>除了方法与函数的区别，其引用与数据属性都是一样的</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>虽然<code>Python</code>作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。</p>\n<p>参考:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></li>\n<li><a href=\"https://www.cnblogs.com/crazyrunning/p/6945183.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/crazyrunning/p/6945183.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>首先来一张图<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"classvariable.png\"></p>\n<h3 id=\"类变量和实例变量\"><a href=\"#类变量和实例变量\" class=\"headerlink\" title=\"类变量和实例变量\"></a>类变量和实例变量</h3><p>在Python Tutorial中对于类变量和实例变量是这样描述的：</p>\n<blockquote>\n<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span>         <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name    <span class=\"comment\"># instance variable unique to each instance</span></span><br></pre></td></tr></table></figure>\n<p>类<code>Dog</code>中，类属性<code>kind</code>为所有实例所共享；实例属性<code>name</code>为每个<code>Dog</code>的实例独有。<br>","more":"</p>\n<h4 id=\"类变量：\"><a href=\"#类变量：\" class=\"headerlink\" title=\"类变量：\"></a>类变量：</h4><blockquote>\n<p>​    是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p>\n</blockquote>\n<h4 id=\"实例变量：\"><a href=\"#实例变量：\" class=\"headerlink\" title=\"实例变量：\"></a>实例变量：</h4><blockquote>\n<p>实例化之后，每个实例单独拥有的变量。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    num_of_instance = <span class=\"number\">0</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name  </span><br><span class=\"line\">        Test.num_of_instance += <span class=\"number\">1</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    t1 = Test(<span class=\"string\">'jack'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    t2 = Test(<span class=\"string\">'lucy'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> t1.name , t1.num_of_instance  <span class=\"comment\"># jack 2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> t2.name , t2.num_of_instance  <span class=\"comment\"># lucy 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充的例子</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=<span class=\"string\">\"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name=<span class=\"string\">\"bbb\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># bbb</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># aaa</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># aaa</span></span><br></pre></td></tr></table></figure>\n<p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,属于函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p>\n<p>可以看看下面的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=[]</span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类对象和实例对象\"><a href=\"#类对象和实例对象\" class=\"headerlink\" title=\"类对象和实例对象\"></a>类对象和实例对象</h3><h4 id=\"类对象\"><a href=\"#类对象\" class=\"headerlink\" title=\"类对象\"></a>类对象</h4><p><code>Python</code>中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>会在当前作用域定义名字<code>Dog</code>，指向类对象<code>Dog</code>。</p>\n<p><strong>类对象支持的操作</strong>：<br>总的来说，类对象仅支持两个操作：</p>\n<ol>\n<li>实例化；使用<code>instance_name = class_name()</code>的方式实例化，实例化操作创建该类的实例。</li>\n<li>属性引用；使用<code>class_name.attr_name</code>的方式引用类属性。</li>\n</ol>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p><strong>实例对象是类对象实例化的产物，实例对象仅支持一个操作</strong>:</p>\n<ol>\n<li>属性引用；与类对象属性引用的方式相同，使用<code>instance_name.attr_name</code>的方式。</li>\n</ol>\n<p>按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在<code>Python</code>中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。</p>\n<p>在<a href=\"https://docs.python.org/3/tutorial/classes.html#class-definition-syntax\" target=\"_blank\" rel=\"noopener\">Python tutorial</a>关于类定义也这么说：</p>\n<blockquote>\n<p>In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.</p>\n</blockquote>\n<p>实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。</p>\n<p>这里说的其他语句，就是指类属性的绑定语句。</p>\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><p>在定义类时，通常我们说的定义属性，其实是分为两个方面的：</p>\n<ol>\n<li>类属性绑定</li>\n<li>实例属性绑定</li>\n</ol>\n<p>用<strong>绑定</strong>这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。</p>\n<p>我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用</p>\n<pre><code>objname.attr = attr_value\n</code></pre><p>的方式，为对象<code>objname</code>绑定属性<code>attr</code>。</p>\n<p>这分两种情况：</p>\n<ol>\n<li>若属性<code>attr</code>已经存在，绑定操作会将属性名指向新的对象；</li>\n<li>若不存在，则为该对象添加新的属性，后面就可以引用新增属性。</li>\n</ol>\n<h4 id=\"类属性绑定\"><a href=\"#类属性绑定\" class=\"headerlink\" title=\"类属性绑定\"></a>类属性绑定</h4><p><code>Python</code>作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>下面这个例子说明了类属性绑定发生的时期：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> Dog.kind</span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country)</span><br><span class=\"line\"><span class=\"comment\"># AttributeError: type object 'Dog' has no attribute 'kind'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类定义中，类属性的绑定并没有使用<code>objname.attr = attr_value</code>的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。<br>因为是动态语言，所以可以在运行时增加属性，删除属性。</p>\n<h4 id=\"实例属性绑定\"><a href=\"#实例属性绑定\" class=\"headerlink\" title=\"实例属性绑定\"></a>实例属性绑定</h4><p>与类属性绑定相同，实例属性绑定也发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s is %s years old, it has %s fur'</span> % (dog.name, dog.age, dog.fur_color))</span><br><span class=\"line\"><span class=\"comment\"># Output: Lily is 3 years old, it has red fur</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Python</code>类实例有两个特殊之处：</p>\n<ol>\n<li><code>__init__</code>在实例化时执行</li>\n<li><code>Python</code>实例调用方法时，会将实例对象作为第一个参数传递</li>\n</ol>\n<p>因此，<code>__init__</code>方法中的<code>self</code>就是实例对象本身，这里是<code>dog</code>，语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = name</span><br><span class=\"line\">self.age = age</span><br></pre></td></tr></table></figure></p>\n<p>以及后面的语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br></pre></td></tr></table></figure></p>\n<p>为实例<code>dog</code>增加三个属性<code>name</code>, <code>age</code>, <code>fur_color</code>。</p>\n<h3 id=\"属性引用\"><a href=\"#属性引用\" class=\"headerlink\" title=\"属性引用\"></a>属性引用</h3><h4 id=\"类属属性引用\"><a href=\"#类属属性引用\" class=\"headerlink\" title=\"类属属性引用\"></a>类属属性引用</h4><p>类属性的引用，肯定是需要类对象的，属性分为两种：</p>\n<ol>\n<li>数据属性</li>\n<li>函数属性</li>\n</ol>\n<p>数据属性引用很简单，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br></pre></td></tr></table></figure></p>\n<p>通常很少有引用类函数属性的需求，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell_kind</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(Dog.kind)</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.tell_kind() <span class=\"comment\"># Output: canine</span></span><br></pre></td></tr></table></figure></p>\n<p>函数<code>tell_kind</code>在引用<code>kind</code>需要使用<code>Dog.kind</code>而不是直接使用<code>kind</code>，涉及到作用域，这一点在我的另一篇文章中有介绍：<a href=\"http://www.cnblogs.com/crazyrunning/p/6914080.html\" target=\"_blank\" rel=\"noopener\">Python进阶 - 命名空间与作用域</a></p>\n<h4 id=\"实例属性引用\"><a href=\"#实例属性引用\" class=\"headerlink\" title=\"实例属性引用\"></a>实例属性引用</h4><p>使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：</p>\n<ol>\n<li>总是先到实例对象中查找属性，再到类属性中查找属性；</li>\n<li>属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。</li>\n</ol>\n<h5 id=\"数据属性引用\"><a href=\"#数据属性引用\" class=\"headerlink\" title=\"数据属性引用\"></a>数据属性引用</h5><p>示例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country)</span><br><span class=\"line\"><span class=\"comment\"># output: Lily 3 canine Britain</span></span><br></pre></td></tr></table></figure></p>\n<p>类对象<code>Dog</code>与实例对象<code>dog</code>均有属性<code>country</code>，按照规则，<code>dog.country</code>会引用到实例对象的属性；但实例对象<code>dog</code>没有属性<code>kind</code>，按照规则会引用类对象的属性。</p>\n<p>示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 canine Britain</span></span><br><span class=\"line\">print(dog.__dict__) <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dog.kind = <span class=\"string\">'feline'</span></span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 feline Britain</span></span><br><span class=\"line\">print(dog.__dict__)  <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'&#125;</span></span><br><span class=\"line\">print(Dog.kind) <span class=\"comment\"># canine 没有改变类属性的指向</span></span><br></pre></td></tr></table></figure></p>\n<p>示例3，可变类属性引用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tricks = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_trick</span><span class=\"params\">(self, trick)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># self.tricks.append(trick)</span></span><br><span class=\"line\">        Dog.tricks.append(trick)</span><br><span class=\"line\"></span><br><span class=\"line\">d = Dog(<span class=\"string\">'Fido'</span>)</span><br><span class=\"line\">e = Dog(<span class=\"string\">'Buddy'</span>)</span><br><span class=\"line\">d.add_trick(<span class=\"string\">'roll over'</span>)</span><br><span class=\"line\">e.add_trick(<span class=\"string\">'play dead'</span>)</span><br><span class=\"line\">print(d.tricks) <span class=\"comment\"># ['roll over', 'play dead']</span></span><br></pre></td></tr></table></figure>\n<p>语句<code>self.tricks.append(trick)</code>并不是属性绑定语句，因此还是在类属性上修改可变对象。</p>\n<h5 id=\"方法属性引用\"><a href=\"#方法属性引用\" class=\"headerlink\" title=\"方法属性引用\"></a>方法属性引用</h5><p>与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodTest</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner_test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'in class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer_test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'out of class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mt = MethodTest()</span><br><span class=\"line\">mt.outer_test = outer_test</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(MethodTest.inner_test))  <span class=\"comment\"># &lt;class 'function'&gt; 类函数</span></span><br><span class=\"line\">print(type(mt.inner_test))          <span class=\"comment\">#&lt;class 'method'&gt; 类方法</span></span><br><span class=\"line\">print(type(mt.outer_test))          <span class=\"comment\">#&lt;class 'function'&gt; 类函数</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。</p>\n<p>Python tutorial中这样介绍方法对象：</p>\n<blockquote>\n<p>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>\n</blockquote>\n<p>引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。</p>\n<p>那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。<br>所以可以使用如下方式直接调用方法与函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mt.inner_test()</span><br><span class=\"line\">mt.outer_test()</span><br></pre></td></tr></table></figure>\n<p>除了方法与函数的区别，其引用与数据属性都是一样的</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>虽然<code>Python</code>作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。</p>\n<p>参考:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></li>\n<li><a href=\"https://www.cnblogs.com/crazyrunning/p/6945183.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/crazyrunning/p/6945183.html</a></li>\n</ol>"},{"title":"Python3 自省","date":"2018-03-01T08:19:37.000Z","_content":"\n自省是python彪悍的特性之一.\n\n自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.\n\n<!-- more -->\n\n自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().\n\n```python\na = [1,2,3]\nb = {'a':1,'b':2,'c':3}\nc = True\nprint type(a),type(b),type(c) # <type 'list'> <type 'dict'> <type 'bool'>\nprint isinstance(a,list)  # True\n```\n\n\n未完待续\n\n参考：\n1. http://python.jobbole.com/82110/\n2. http://blog.csdn.net/IAlexanderI/article/details/78768378\n","source":"_posts/Python3-自省.md","raw":"---\ntitle: Python3 自省\ndate: 2018-03-01 16:19:37\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 自省\n---\n\n自省是python彪悍的特性之一.\n\n自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.\n\n<!-- more -->\n\n自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().\n\n```python\na = [1,2,3]\nb = {'a':1,'b':2,'c':3}\nc = True\nprint type(a),type(b),type(c) # <type 'list'> <type 'dict'> <type 'bool'>\nprint isinstance(a,list)  # True\n```\n\n\n未完待续\n\n参考：\n1. http://python.jobbole.com/82110/\n2. http://blog.csdn.net/IAlexanderI/article/details/78768378\n","slug":"Python3-自省","published":1,"updated":"2018-03-02T17:23:56.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimrw001nqkot0e3fhn8d","content":"<p>自省是python彪悍的特性之一.</p>\n<p>自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.</p>\n<a id=\"more\"></a>\n<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(a),type(b),type(c) <span class=\"comment\"># &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> isinstance(a,list)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://python.jobbole.com/82110/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82110/</a></li>\n<li><a href=\"http://blog.csdn.net/IAlexanderI/article/details/78768378\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/IAlexanderI/article/details/78768378</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>自省是python彪悍的特性之一.</p>\n<p>自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.</p>","more":"<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(a),type(b),type(c) <span class=\"comment\"># &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> isinstance(a,list)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://python.jobbole.com/82110/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82110/</a></li>\n<li><a href=\"http://blog.csdn.net/IAlexanderI/article/details/78768378\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/IAlexanderI/article/details/78768378</a></li>\n</ol>"},{"title":"Python3 鸭子类型","date":"2018-03-02T17:52:21.000Z","_content":"\n## 来源和解释\nDuck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：\n\n>\" When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.\"\n\n中文：\n\n>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”\n\n“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。\n<!-- more -->\n\n鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持\"鸭子类型\"的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。\n\n`在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。` 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。\n\n`鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。`从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。\n\n\n## 不足\n\"鸭子类型\"没有任何静态检查，如类型检查、属性检查、方法签名检查等。\n\n“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。\n\n再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 \"鸭子测试\"，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。\n\n## 静态类型语言和动态类型语言的区别\n\n静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  \n\n`静态类型语言的优点`首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  \n\n`静态类型语言的缺点`首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  \n\n`动态类型语言的优点`是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。  \n`动态类型语言的缺点`是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。\n\n**动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。**\n\n## 面向接口编程\n\n动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助`超类型`的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。\n例如,\n1. 一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。\n2. 一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。\n3. 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。\n4. 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.\n\n鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。\n\n\n在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行`向上转型`。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在`类型检查系统`的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。\n\n## Python中的多态\n\n**Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。**  \n由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样---定义一个基类类型变量而隐藏了具体子类的细节。\n\n请看下面的例子和说明：\n```python\nclass AudioFile:\n    def __init__(self, filename):\n        if not filename.endswith(self.ext):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\nclass MP3File(AudioFile):\n    ext = \"mp3\"\n    def play(self):\n        print(\"Playing {} as mp3\".format(self.filename))\n\nclass WavFile(AudioFile):\n    ext = \"wav\"\n    def play(self):\n        print(\"Playing {} as wav\".format(self.filename))\n\nclass OggFile(AudioFile):\n    ext = \"ogg\"\n    def play(self):\n        print(\"Playing {} as ogg\".format(self.filename))\n\nclass FlacFile:\n    \"\"\"\n    Though FlacFile class doesn't inherit AudioFile class,\n    it also has the same interface as three subclass of AudioFile.\n\n    It is called duck typing.\n    \"\"\"\n    def __init__(self, filename):\n        if not filename.endswith(\".flac\"):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\n    def play(self):\n        print(\"Playing {} as flac\".format(self.filename))\n\n\n```\n>Though FlacFile class doesn't inherit AudioFile class,\n>it also has the same interface as three subclass of AudioFile.\n>It is called duck typing.\n\n上面的代码中，`MP3File`、`WavFile`、`OggFile`三个类型继承了`AudioFile`这一积累，而`FlacFile`没有扩展`AudioFile`，但是可以在python中使用完全相同的接口与之交互。  \n\n因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般`超类`的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。\n\n>作者：JasonDing\n>链接：https://www.jianshu.com/p/650485b78d11\n>來源：简书\n>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n## 参考\n1. https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\n2. https://www.jianshu.com/p/650485b78d11\n","source":"_posts/Python3-鸭子类型.md","raw":"---\ntitle: Python3 鸭子类型\ndate: 2018-03-03 01:52:21\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 鸭子类型\n---\n\n## 来源和解释\nDuck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：\n\n>\" When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.\"\n\n中文：\n\n>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”\n\n“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。\n<!-- more -->\n\n鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持\"鸭子类型\"的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。\n\n`在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。` 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。\n\n`鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。`从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。\n\n\n## 不足\n\"鸭子类型\"没有任何静态检查，如类型检查、属性检查、方法签名检查等。\n\n“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。\n\n再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 \"鸭子测试\"，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。\n\n## 静态类型语言和动态类型语言的区别\n\n静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  \n\n`静态类型语言的优点`首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  \n\n`静态类型语言的缺点`首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  \n\n`动态类型语言的优点`是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。  \n`动态类型语言的缺点`是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。\n\n**动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。**\n\n## 面向接口编程\n\n动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助`超类型`的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。\n例如,\n1. 一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。\n2. 一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。\n3. 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。\n4. 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.\n\n鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。\n\n\n在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行`向上转型`。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在`类型检查系统`的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。\n\n## Python中的多态\n\n**Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。**  \n由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样---定义一个基类类型变量而隐藏了具体子类的细节。\n\n请看下面的例子和说明：\n```python\nclass AudioFile:\n    def __init__(self, filename):\n        if not filename.endswith(self.ext):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\nclass MP3File(AudioFile):\n    ext = \"mp3\"\n    def play(self):\n        print(\"Playing {} as mp3\".format(self.filename))\n\nclass WavFile(AudioFile):\n    ext = \"wav\"\n    def play(self):\n        print(\"Playing {} as wav\".format(self.filename))\n\nclass OggFile(AudioFile):\n    ext = \"ogg\"\n    def play(self):\n        print(\"Playing {} as ogg\".format(self.filename))\n\nclass FlacFile:\n    \"\"\"\n    Though FlacFile class doesn't inherit AudioFile class,\n    it also has the same interface as three subclass of AudioFile.\n\n    It is called duck typing.\n    \"\"\"\n    def __init__(self, filename):\n        if not filename.endswith(\".flac\"):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\n    def play(self):\n        print(\"Playing {} as flac\".format(self.filename))\n\n\n```\n>Though FlacFile class doesn't inherit AudioFile class,\n>it also has the same interface as three subclass of AudioFile.\n>It is called duck typing.\n\n上面的代码中，`MP3File`、`WavFile`、`OggFile`三个类型继承了`AudioFile`这一积累，而`FlacFile`没有扩展`AudioFile`，但是可以在python中使用完全相同的接口与之交互。  \n\n因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般`超类`的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。\n\n>作者：JasonDing\n>链接：https://www.jianshu.com/p/650485b78d11\n>來源：简书\n>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n## 参考\n1. https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\n2. https://www.jianshu.com/p/650485b78d11\n","slug":"Python3-鸭子类型","published":1,"updated":"2018-03-03T05:40:54.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimry001pqkots53rn80w","content":"<h2 id=\"来源和解释\"><a href=\"#来源和解释\" class=\"headerlink\" title=\"来源和解释\"></a>来源和解释</h2><p>Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：</p>\n<blockquote>\n<p>“ When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”</p>\n</blockquote>\n<p>中文：</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<p>“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。<br><a id=\"more\"></a></p>\n<p>鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持”鸭子类型”的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。</p>\n<p><code>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。</code> 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。</p>\n<p><code>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。</code>从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>“鸭子类型”没有任何静态检查，如类型检查、属性检查、方法签名检查等。</p>\n<p>“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。</p>\n<p>再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 “鸭子测试”，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。</p>\n<h2 id=\"静态类型语言和动态类型语言的区别\"><a href=\"#静态类型语言和动态类型语言的区别\" class=\"headerlink\" title=\"静态类型语言和动态类型语言的区别\"></a>静态类型语言和动态类型语言的区别</h2><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  </p>\n<p><code>静态类型语言的优点</code>首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  </p>\n<p><code>静态类型语言的缺点</code>首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  </p>\n<p><code>动态类型语言的优点</code>是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。<br><code>动态类型语言的缺点</code>是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。</p>\n<p><strong>动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</strong></p>\n<h2 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h2><p>动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助<code>超类型</code>的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。<br>例如,</p>\n<ol>\n<li>一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。</li>\n<li>一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。</li>\n<li>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</li>\n<li>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</li>\n</ol>\n<p>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。</p>\n<p>在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行<code>向上转型</code>。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在<code>类型检查系统</code>的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。</p>\n<h2 id=\"Python中的多态\"><a href=\"#Python中的多态\" class=\"headerlink\" title=\"Python中的多态\"></a>Python中的多态</h2><p><strong>Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。</strong><br>由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样—定义一个基类类型变量而隐藏了具体子类的细节。</p>\n<p>请看下面的例子和说明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudioFile</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(self.ext):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MP3File</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"mp3\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as mp3\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WavFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"wav\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as wav\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OggFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"ogg\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as ogg\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlacFile</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Though FlacFile class doesn't inherit AudioFile class,</span></span><br><span class=\"line\"><span class=\"string\">    it also has the same interface as three subclass of AudioFile.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    It is called duck typing.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(<span class=\"string\">\".flac\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as flac\"</span>.format(self.filename))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Though FlacFile class doesn’t inherit AudioFile class,<br>it also has the same interface as three subclass of AudioFile.<br>It is called duck typing.</p>\n</blockquote>\n<p>上面的代码中，<code>MP3File</code>、<code>WavFile</code>、<code>OggFile</code>三个类型继承了<code>AudioFile</code>这一积累，而<code>FlacFile</code>没有扩展<code>AudioFile</code>，但是可以在python中使用完全相同的接口与之交互。  </p>\n<p>因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般<code>超类</code>的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。</p>\n<blockquote>\n<p>作者：JasonDing<br>链接：<a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin</a></li>\n<li><a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"来源和解释\"><a href=\"#来源和解释\" class=\"headerlink\" title=\"来源和解释\"></a>来源和解释</h2><p>Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：</p>\n<blockquote>\n<p>“ When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”</p>\n</blockquote>\n<p>中文：</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<p>“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。<br>","more":"</p>\n<p>鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持”鸭子类型”的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。</p>\n<p><code>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。</code> 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。</p>\n<p><code>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。</code>从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>“鸭子类型”没有任何静态检查，如类型检查、属性检查、方法签名检查等。</p>\n<p>“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。</p>\n<p>再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 “鸭子测试”，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。</p>\n<h2 id=\"静态类型语言和动态类型语言的区别\"><a href=\"#静态类型语言和动态类型语言的区别\" class=\"headerlink\" title=\"静态类型语言和动态类型语言的区别\"></a>静态类型语言和动态类型语言的区别</h2><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  </p>\n<p><code>静态类型语言的优点</code>首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  </p>\n<p><code>静态类型语言的缺点</code>首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  </p>\n<p><code>动态类型语言的优点</code>是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。<br><code>动态类型语言的缺点</code>是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。</p>\n<p><strong>动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</strong></p>\n<h2 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h2><p>动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助<code>超类型</code>的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。<br>例如,</p>\n<ol>\n<li>一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。</li>\n<li>一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。</li>\n<li>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</li>\n<li>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</li>\n</ol>\n<p>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。</p>\n<p>在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行<code>向上转型</code>。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在<code>类型检查系统</code>的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。</p>\n<h2 id=\"Python中的多态\"><a href=\"#Python中的多态\" class=\"headerlink\" title=\"Python中的多态\"></a>Python中的多态</h2><p><strong>Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。</strong><br>由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样—定义一个基类类型变量而隐藏了具体子类的细节。</p>\n<p>请看下面的例子和说明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudioFile</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(self.ext):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MP3File</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"mp3\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as mp3\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WavFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"wav\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as wav\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OggFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"ogg\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as ogg\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlacFile</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Though FlacFile class doesn't inherit AudioFile class,</span></span><br><span class=\"line\"><span class=\"string\">    it also has the same interface as three subclass of AudioFile.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    It is called duck typing.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(<span class=\"string\">\".flac\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as flac\"</span>.format(self.filename))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Though FlacFile class doesn’t inherit AudioFile class,<br>it also has the same interface as three subclass of AudioFile.<br>It is called duck typing.</p>\n</blockquote>\n<p>上面的代码中，<code>MP3File</code>、<code>WavFile</code>、<code>OggFile</code>三个类型继承了<code>AudioFile</code>这一积累，而<code>FlacFile</code>没有扩展<code>AudioFile</code>，但是可以在python中使用完全相同的接口与之交互。  </p>\n<p>因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般<code>超类</code>的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。</p>\n<blockquote>\n<p>作者：JasonDing<br>链接：<a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin</a></li>\n<li><a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a></li>\n</ol>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n非常好的一篇markdown参考手册\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n非常好的一篇markdown参考手册\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-25T18:47:57.250Z","updated":"2018-02-27T06:43:43.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims0001uqkotldilwcvl","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>非常好的一篇markdown参考手册</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>非常好的一篇markdown参考手册</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"if __name__ == '__main__': ?","date":"2018-03-01T11:50:06.000Z","_content":">Every Python module has it's `__name__` defined and if this is `'__main__'`, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.\n\n当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把`__name__`变量设置成`\"__main__\"`.如果只是引入其他的模块,`__name__`变量将会设置成模块的名字.\n<!-- more -->\n\n这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.\n\n直接上一个栗子：\n```python\n# Filename: using_name.py\n\nprint(__name__)\nif __name__ == '__main__':\n\tprint('This program is being run by itself')\nelse:\n\tprint('I am being imported from another module')\n\n```\n\n```Python\n\n$ python using_name.py\n__main__\nThis program is being run by itself\n\n$ python\n>>> import using_name\nusing_name\nI am being imported from another module\n>>>\n\n```\n","source":"_posts/if-name-main.md","raw":"---\ntitle: 'if __name__ == ''__main__'': ?'\ndate: 2018-03-01 19:50:06\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n>Every Python module has it's `__name__` defined and if this is `'__main__'`, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.\n\n当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把`__name__`变量设置成`\"__main__\"`.如果只是引入其他的模块,`__name__`变量将会设置成模块的名字.\n<!-- more -->\n\n这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.\n\n直接上一个栗子：\n```python\n# Filename: using_name.py\n\nprint(__name__)\nif __name__ == '__main__':\n\tprint('This program is being run by itself')\nelse:\n\tprint('I am being imported from another module')\n\n```\n\n```Python\n\n$ python using_name.py\n__main__\nThis program is being run by itself\n\n$ python\n>>> import using_name\nusing_name\nI am being imported from another module\n>>>\n\n```\n","slug":"if-name-main","published":1,"updated":"2018-03-01T12:13:18.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims2001wqkotg5xj9rdo","content":"<blockquote>\n<p>Every Python module has it’s <code>__name__</code> defined and if this is <code>&#39;__main__&#39;</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</p>\n</blockquote>\n<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<code>__name__</code>变量设置成<code>&quot;__main__&quot;</code>.如果只是引入其他的模块,<code>__name__</code>变量将会设置成模块的名字.<br><a id=\"more\"></a></p>\n<p>这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.</p>\n<p>直接上一个栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filename: using_name.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(__name__)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'This program is being run by itself'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ python using_name.py</span><br><span class=\"line\">__main__</span><br><span class=\"line\">This program <span class=\"keyword\">is</span> being run by itself</span><br><span class=\"line\"></span><br><span class=\"line\">$ python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> using_name</span><br><span class=\"line\">using_name</span><br><span class=\"line\">I am being imported <span class=\"keyword\">from</span> another module</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Every Python module has it’s <code>__name__</code> defined and if this is <code>&#39;__main__&#39;</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</p>\n</blockquote>\n<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<code>__name__</code>变量设置成<code>&quot;__main__&quot;</code>.如果只是引入其他的模块,<code>__name__</code>变量将会设置成模块的名字.<br>","more":"</p>\n<p>这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.</p>\n<p>直接上一个栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filename: using_name.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(__name__)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'This program is being run by itself'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ python using_name.py</span><br><span class=\"line\">__main__</span><br><span class=\"line\">This program <span class=\"keyword\">is</span> being run by itself</span><br><span class=\"line\"></span><br><span class=\"line\">$ python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> using_name</span><br><span class=\"line\">using_name</span><br><span class=\"line\">I am being imported <span class=\"keyword\">from</span> another module</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>"},{"title":"python3 可迭代对象、迭代器和生成器","date":"2018-03-01T12:17:53.000Z","_content":"\n## 前言\n迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的`生成器`都是`迭代器`，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把`迭代器`和`生成器`视作同一概念。\n\n所有python程序员都知道，序列可迭代，下面说明具体原因。\n<!-- more -->\n## 序列可迭代的原因：iter函数\n解释器需要迭代对象x时，会自动调用`iter(x)`。\n内置的iter函数有以下作用。\n\n1. 检查对象是否实现了`__iter__`方法，如果实现了就调用它，获得一个迭代器。\n2. 如果没有实现`__iter__`方法，但是实现了`__getitem__`方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。\n3. 如果尝试失败，python会抛出`TypeError`异常，通常会提示\"C object is not iterable\",其中C是目标对象所属的类。\n\n任何Python序列都可迭代的原因是它们实现了`__getitem__`方法。其实标准的序列也都实现了`__iter__`方法。之所以对`__getitem__`方法做特殊处理是为了向后兼容。\n\n从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的`__getitem__`方法，而abc.Iterable类则不考虑。\n\n## 可迭代的对象与迭代器的对比\n\n### 可迭代对象\n\n**使用iter内置函数可以获取迭代器的对象。** 如果实现了能返回迭代器的`__iter__`方法，那么对象就是可迭代的。序列都可以迭代；实现了`__getitem__`方法，而且七参数是从零开始的索引，这种对象也是可迭代的。\n\n我们要明确可迭代对象和迭代器之间的关系：**Python从可迭代的对象中获取迭代器**\n\n标准的迭代器接口有两个方法，即：\n1. `__next__`:返回下一个可用元素，如果没有元素，抛出`StopIteration`异常\n2. `__iter__`:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。\n\n因为`迭代器`只需`__next__`和`__iter__`两个方法，所以除了调用next()方法，以及捕获`StopIteration`异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(...)，传入之前构建迭代器的可迭代对象。\n\n### 迭代器\n\n迭代器是这样的对象：实现了无参数的`__next__`方法，返回序列中的下一个元素；如果没有元素了，那么抛出`StopIteration`异常。Python迭代器还实现了`__iter__`方法，因此迭代器也可以迭代。\n\n构建`可迭代对象`和`迭代器`时经常会出现错误，原因是混淆了两者。要知道，`可迭代的对象`有个`__iter__`方法，每次都实例化一个新的迭代器；而`迭代器`要实现`__next__`方法，返回单个元素，此外还要实现`__iter__`方法，返回迭代器本身。因此，`迭代器`可以迭代，但是`可迭代的对象`不是迭代器。\n\n可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现`__iter__`方法，但不能实现`__next__`方法。另一方面，迭代器应该一直可以迭代，迭代器的`__iter__`方法应该返回自身。\n\n```python\na = [1,2,3]\n'__iter__' in dir(a)            # True\n'__iter__' in dir(iter(a))      # True\n\n```\n\n## 生成器函数\n\n只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有`yield`关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。\n### 生成器函数工作原理\n\n```python\ndef gen_123():  # 只要Python代码中包含yield，该函数就是生成器函数\n    yield 1    #生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n    yield 2\n    yield 3\n\nif __name__ == '__main__':\n    print(gen_123)    # 可以看出gen_123是函数对象\n    # <function gen_123 at 0x10be199d8>\n    print(gen_123())  # 函数调用时返回的是一个生成器对象\n    # <generator object gen_123 at 0x10be31ca8>\n\n    for i in gen_123(): # 生成器是迭代器，会生成传给yield关键字的表达式的值\n        print(i)    \n        # 1\n        # 2\n        # 3\n\n    g = gen_123() # 为了仔细检查，把生成器对象赋值给g\n    print(next(g))  # 1\n    print(next(g))  # 2\n    print(next(g))  # 3\n    print(next(g))   # 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n# Traceback (most recent call last):\n#   File \"test.py\", line 17, in <module>\n#     print(next(g))\n# StopIteration\n\n```\n\n如上述代码所示：\n1. 只要Python代码中包含yield，该函数就是生成器函数\n2. 生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n3. 可以看出gen_123是函数对象\n4. 函数调用时返回的是一个生成器对象\n5. 生成器是迭代器，会`生成`传给yield关键字的表达式的值\n6. 为了仔细检查，把生成器对象赋值给g\n7. 因为g是迭代器，所以调用nest(g)会获取yield`生成`的下一个元素\n8. 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n\n\n使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是`产出`或`生成`值。如果说生成器`返回`值，就会让人难以理解。\n>函数返回值; 调用生成器函数返回生成器; 生成器`产出`或`生成`值。生成器不会以常规方式`返回`值;\n\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            # 2\n    ...:     print('continue')\n    ...:     yield 'B'            # 3\n    ...:     print('end.')        # 4\n    ...:\n\nIn [67]: for c in gen_AB():       # 5\n    ...:     print('-->', c)      # 6\n    ...:\nstart       # 7\n--> A       # 8\ncontinue    # 9\n--> B       # 10\nend.        # 11\n\n```\n1. 定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字\n2. 在for循环中第一次隐式调用next()函数时（序号5），会打印'start'，然后停在第一个yield语句，生成值 'A'\n3. 在for循环第二次隐式调用next()函数时，会打印'continue'，然后停在第二个yield语句，生成值'B'\n4. 第三次调用 next()函数时，会打印'end.'，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常\n5. 迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)\n6. 循环打印 --> 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出\n7. 'start'是生成器函数定义体中print('start')输出的记过\n8. 生成器函数定义体中的yield 'A' 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出--> A\n9. 第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield 'A'前进到 yield 'B'。文本continue是由生成器函数定义体中的第二个print函数输出的\n10. 生成器函数定义体中的yield 'B' 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出--> B\n11. 第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。\n12. 到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。\n\n## 生成器表达式\n\n简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            \n    ...:     print('continue')\n    ...:     yield 'B'            \n    ...:     print('end.')        \n    ...:\n\nIn [67]: res1 = [x*3 for x in gen_AB()]  # 2\nstart\ncontinue\nend.\n\nIn [68]: for i in res1():       # 3\n    ...:     print('-->', i)      \n    ...:\nAAA\nBBB\n\nIn [69]: res2 = (x*3 for x in gen_AB())  # 4\n\nIn [70]: res2  # 5\n<generator object <genexpr> at 0x106a07620>\n\nIn [71]: for i in res2():       # 6\n    ...:     print('-->', i)\n    ...:\nstart   \n--> A   \ncontinue\n--> B       \nend.\n\n```\n1. 创建gen_AB函数\n2. 列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：'A'和'B'。注意。下面输出的是start、continue、end.。\n3. for循环迭代列表推导生成的res1列表\n4. 把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。\n5. 可以看出res2是一个生成器对象。\n6. 只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。\n\n生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。\n\n\n## 何时使用生成器表达式\n\n生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为`协程`使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。\n","source":"_posts/python3-可迭代对象、迭代器和生成器.md","raw":"---\ntitle: python3 可迭代对象、迭代器和生成器\ndate: 2018-03-01 20:17:53\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 迭代器和生成器\n---\n\n## 前言\n迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的`生成器`都是`迭代器`，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把`迭代器`和`生成器`视作同一概念。\n\n所有python程序员都知道，序列可迭代，下面说明具体原因。\n<!-- more -->\n## 序列可迭代的原因：iter函数\n解释器需要迭代对象x时，会自动调用`iter(x)`。\n内置的iter函数有以下作用。\n\n1. 检查对象是否实现了`__iter__`方法，如果实现了就调用它，获得一个迭代器。\n2. 如果没有实现`__iter__`方法，但是实现了`__getitem__`方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。\n3. 如果尝试失败，python会抛出`TypeError`异常，通常会提示\"C object is not iterable\",其中C是目标对象所属的类。\n\n任何Python序列都可迭代的原因是它们实现了`__getitem__`方法。其实标准的序列也都实现了`__iter__`方法。之所以对`__getitem__`方法做特殊处理是为了向后兼容。\n\n从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的`__getitem__`方法，而abc.Iterable类则不考虑。\n\n## 可迭代的对象与迭代器的对比\n\n### 可迭代对象\n\n**使用iter内置函数可以获取迭代器的对象。** 如果实现了能返回迭代器的`__iter__`方法，那么对象就是可迭代的。序列都可以迭代；实现了`__getitem__`方法，而且七参数是从零开始的索引，这种对象也是可迭代的。\n\n我们要明确可迭代对象和迭代器之间的关系：**Python从可迭代的对象中获取迭代器**\n\n标准的迭代器接口有两个方法，即：\n1. `__next__`:返回下一个可用元素，如果没有元素，抛出`StopIteration`异常\n2. `__iter__`:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。\n\n因为`迭代器`只需`__next__`和`__iter__`两个方法，所以除了调用next()方法，以及捕获`StopIteration`异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(...)，传入之前构建迭代器的可迭代对象。\n\n### 迭代器\n\n迭代器是这样的对象：实现了无参数的`__next__`方法，返回序列中的下一个元素；如果没有元素了，那么抛出`StopIteration`异常。Python迭代器还实现了`__iter__`方法，因此迭代器也可以迭代。\n\n构建`可迭代对象`和`迭代器`时经常会出现错误，原因是混淆了两者。要知道，`可迭代的对象`有个`__iter__`方法，每次都实例化一个新的迭代器；而`迭代器`要实现`__next__`方法，返回单个元素，此外还要实现`__iter__`方法，返回迭代器本身。因此，`迭代器`可以迭代，但是`可迭代的对象`不是迭代器。\n\n可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现`__iter__`方法，但不能实现`__next__`方法。另一方面，迭代器应该一直可以迭代，迭代器的`__iter__`方法应该返回自身。\n\n```python\na = [1,2,3]\n'__iter__' in dir(a)            # True\n'__iter__' in dir(iter(a))      # True\n\n```\n\n## 生成器函数\n\n只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有`yield`关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。\n### 生成器函数工作原理\n\n```python\ndef gen_123():  # 只要Python代码中包含yield，该函数就是生成器函数\n    yield 1    #生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n    yield 2\n    yield 3\n\nif __name__ == '__main__':\n    print(gen_123)    # 可以看出gen_123是函数对象\n    # <function gen_123 at 0x10be199d8>\n    print(gen_123())  # 函数调用时返回的是一个生成器对象\n    # <generator object gen_123 at 0x10be31ca8>\n\n    for i in gen_123(): # 生成器是迭代器，会生成传给yield关键字的表达式的值\n        print(i)    \n        # 1\n        # 2\n        # 3\n\n    g = gen_123() # 为了仔细检查，把生成器对象赋值给g\n    print(next(g))  # 1\n    print(next(g))  # 2\n    print(next(g))  # 3\n    print(next(g))   # 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n# Traceback (most recent call last):\n#   File \"test.py\", line 17, in <module>\n#     print(next(g))\n# StopIteration\n\n```\n\n如上述代码所示：\n1. 只要Python代码中包含yield，该函数就是生成器函数\n2. 生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n3. 可以看出gen_123是函数对象\n4. 函数调用时返回的是一个生成器对象\n5. 生成器是迭代器，会`生成`传给yield关键字的表达式的值\n6. 为了仔细检查，把生成器对象赋值给g\n7. 因为g是迭代器，所以调用nest(g)会获取yield`生成`的下一个元素\n8. 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n\n\n使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是`产出`或`生成`值。如果说生成器`返回`值，就会让人难以理解。\n>函数返回值; 调用生成器函数返回生成器; 生成器`产出`或`生成`值。生成器不会以常规方式`返回`值;\n\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            # 2\n    ...:     print('continue')\n    ...:     yield 'B'            # 3\n    ...:     print('end.')        # 4\n    ...:\n\nIn [67]: for c in gen_AB():       # 5\n    ...:     print('-->', c)      # 6\n    ...:\nstart       # 7\n--> A       # 8\ncontinue    # 9\n--> B       # 10\nend.        # 11\n\n```\n1. 定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字\n2. 在for循环中第一次隐式调用next()函数时（序号5），会打印'start'，然后停在第一个yield语句，生成值 'A'\n3. 在for循环第二次隐式调用next()函数时，会打印'continue'，然后停在第二个yield语句，生成值'B'\n4. 第三次调用 next()函数时，会打印'end.'，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常\n5. 迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)\n6. 循环打印 --> 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出\n7. 'start'是生成器函数定义体中print('start')输出的记过\n8. 生成器函数定义体中的yield 'A' 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出--> A\n9. 第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield 'A'前进到 yield 'B'。文本continue是由生成器函数定义体中的第二个print函数输出的\n10. 生成器函数定义体中的yield 'B' 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出--> B\n11. 第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。\n12. 到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。\n\n## 生成器表达式\n\n简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            \n    ...:     print('continue')\n    ...:     yield 'B'            \n    ...:     print('end.')        \n    ...:\n\nIn [67]: res1 = [x*3 for x in gen_AB()]  # 2\nstart\ncontinue\nend.\n\nIn [68]: for i in res1():       # 3\n    ...:     print('-->', i)      \n    ...:\nAAA\nBBB\n\nIn [69]: res2 = (x*3 for x in gen_AB())  # 4\n\nIn [70]: res2  # 5\n<generator object <genexpr> at 0x106a07620>\n\nIn [71]: for i in res2():       # 6\n    ...:     print('-->', i)\n    ...:\nstart   \n--> A   \ncontinue\n--> B       \nend.\n\n```\n1. 创建gen_AB函数\n2. 列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：'A'和'B'。注意。下面输出的是start、continue、end.。\n3. for循环迭代列表推导生成的res1列表\n4. 把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。\n5. 可以看出res2是一个生成器对象。\n6. 只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。\n\n生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。\n\n\n## 何时使用生成器表达式\n\n生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为`协程`使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。\n","slug":"python3-可迭代对象、迭代器和生成器","published":1,"updated":"2018-03-02T04:55:21.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims40021qkot4qjvwjdg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的<code>生成器</code>都是<code>迭代器</code>，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把<code>迭代器</code>和<code>生成器</code>视作同一概念。</p>\n<p>所有python程序员都知道，序列可迭代，下面说明具体原因。<br><a id=\"more\"></a></p>\n<h2 id=\"序列可迭代的原因：iter函数\"><a href=\"#序列可迭代的原因：iter函数\" class=\"headerlink\" title=\"序列可迭代的原因：iter函数\"></a>序列可迭代的原因：iter函数</h2><p>解释器需要迭代对象x时，会自动调用<code>iter(x)</code>。<br>内置的iter函数有以下作用。</p>\n<ol>\n<li>检查对象是否实现了<code>__iter__</code>方法，如果实现了就调用它，获得一个迭代器。</li>\n<li>如果没有实现<code>__iter__</code>方法，但是实现了<code>__getitem__</code>方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。</li>\n<li>如果尝试失败，python会抛出<code>TypeError</code>异常，通常会提示”C object is not iterable”,其中C是目标对象所属的类。</li>\n</ol>\n<p>任何Python序列都可迭代的原因是它们实现了<code>__getitem__</code>方法。其实标准的序列也都实现了<code>__iter__</code>方法。之所以对<code>__getitem__</code>方法做特殊处理是为了向后兼容。</p>\n<p>从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的<code>__getitem__</code>方法，而abc.Iterable类则不考虑。</p>\n<h2 id=\"可迭代的对象与迭代器的对比\"><a href=\"#可迭代的对象与迭代器的对比\" class=\"headerlink\" title=\"可迭代的对象与迭代器的对比\"></a>可迭代的对象与迭代器的对比</h2><h3 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h3><p><strong>使用iter内置函数可以获取迭代器的对象。</strong> 如果实现了能返回迭代器的<code>__iter__</code>方法，那么对象就是可迭代的。序列都可以迭代；实现了<code>__getitem__</code>方法，而且七参数是从零开始的索引，这种对象也是可迭代的。</p>\n<p>我们要明确可迭代对象和迭代器之间的关系：<strong>Python从可迭代的对象中获取迭代器</strong></p>\n<p>标准的迭代器接口有两个方法，即：</p>\n<ol>\n<li><code>__next__</code>:返回下一个可用元素，如果没有元素，抛出<code>StopIteration</code>异常</li>\n<li><code>__iter__</code>:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。</li>\n</ol>\n<p>因为<code>迭代器</code>只需<code>__next__</code>和<code>__iter__</code>两个方法，所以除了调用next()方法，以及捕获<code>StopIteration</code>异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(…)，传入之前构建迭代器的可迭代对象。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是这样的对象：实现了无参数的<code>__next__</code>方法，返回序列中的下一个元素；如果没有元素了，那么抛出<code>StopIteration</code>异常。Python迭代器还实现了<code>__iter__</code>方法，因此迭代器也可以迭代。</p>\n<p>构建<code>可迭代对象</code>和<code>迭代器</code>时经常会出现错误，原因是混淆了两者。要知道，<code>可迭代的对象</code>有个<code>__iter__</code>方法，每次都实例化一个新的迭代器；而<code>迭代器</code>要实现<code>__next__</code>方法，返回单个元素，此外还要实现<code>__iter__</code>方法，返回迭代器本身。因此，<code>迭代器</code>可以迭代，但是<code>可迭代的对象</code>不是迭代器。</p>\n<p>可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现<code>__iter__</code>方法，但不能实现<code>__next__</code>方法。另一方面，迭代器应该一直可以迭代，迭代器的<code>__iter__</code>方法应该返回自身。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(a)            <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(iter(a))      <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n<p>普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有<code>yield</code>关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。</p>\n<h3 id=\"生成器函数工作原理\"><a href=\"#生成器函数工作原理\" class=\"headerlink\" title=\"生成器函数工作原理\"></a>生成器函数工作原理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_123</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 只要Python代码中包含yield，该函数就是生成器函数</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>    <span class=\"comment\">#生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(gen_123)    <span class=\"comment\"># 可以看出gen_123是函数对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;function gen_123 at 0x10be199d8&gt;</span></span><br><span class=\"line\">    print(gen_123())  <span class=\"comment\"># 函数调用时返回的是一个生成器对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;generator object gen_123 at 0x10be31ca8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_123(): <span class=\"comment\"># 生成器是迭代器，会生成传给yield关键字的表达式的值</span></span><br><span class=\"line\">        print(i)    </span><br><span class=\"line\">        <span class=\"comment\"># 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 2</span></span><br><span class=\"line\">        <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = gen_123() <span class=\"comment\"># 为了仔细检查，把生成器对象赋值给g</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 1</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 2</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">    print(next(g))   <span class=\"comment\"># 生成器函数的定义体执行完毕后，生成器对象会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"># Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"comment\">#   File \"test.py\", line 17, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#     print(next(g))</span></span><br><span class=\"line\"><span class=\"comment\"># StopIteration</span></span><br></pre></td></tr></table></figure>\n<p>如上述代码所示：</p>\n<ol>\n<li>只要Python代码中包含yield，该函数就是生成器函数</li>\n<li>生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</li>\n<li>可以看出gen_123是函数对象</li>\n<li>函数调用时返回的是一个生成器对象</li>\n<li>生成器是迭代器，会<code>生成</code>传给yield关键字的表达式的值</li>\n<li>为了仔细检查，把生成器对象赋值给g</li>\n<li>因为g是迭代器，所以调用nest(g)会获取yield<code>生成</code>的下一个元素</li>\n<li>生成器函数的定义体执行完毕后，生成器对象会抛出异常。</li>\n</ol>\n<p>使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是<code>产出</code>或<code>生成</code>值。如果说生成器<code>返回</code>值，就会让人难以理解。</p>\n<blockquote>\n<p>函数返回值; 调用生成器函数返回生成器; 生成器<code>产出</code>或<code>生成</code>值。生成器不会以常规方式<code>返回</code>值;</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            <span class=\"comment\"># 2</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        <span class=\"comment\"># 4</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> gen_AB():       <span class=\"comment\"># 5</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, c)      <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start       <span class=\"comment\"># 7</span></span><br><span class=\"line\">--&gt; A       # 8</span><br><span class=\"line\"><span class=\"keyword\">continue</span>    <span class=\"comment\"># 9</span></span><br><span class=\"line\">--&gt; B       # 10</span><br><span class=\"line\">end.        <span class=\"comment\"># 11</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字</li>\n<li>在for循环中第一次隐式调用next()函数时（序号5），会打印’start’，然后停在第一个yield语句，生成值 ‘A’</li>\n<li>在for循环第二次隐式调用next()函数时，会打印’continue’，然后停在第二个yield语句，生成值’B’</li>\n<li>第三次调用 next()函数时，会打印’end.’，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常</li>\n<li>迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)</li>\n<li>循环打印 –&gt; 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出</li>\n<li>‘start’是生成器函数定义体中print(‘start’)输出的记过</li>\n<li>生成器函数定义体中的yield ‘A’ 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出–&gt; A</li>\n<li>第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield ‘A’前进到 yield ‘B’。文本continue是由生成器函数定义体中的第二个print函数输出的</li>\n<li>生成器函数定义体中的yield ‘B’ 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出–&gt; B</li>\n<li>第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。</li>\n<li>到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><p>简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        </span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: res1 = [x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB()]  <span class=\"comment\"># 2</span></span><br><span class=\"line\">start</span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res1():       <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)      </span><br><span class=\"line\">    ...:</span><br><span class=\"line\">AAA</span><br><span class=\"line\">BBB</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: res2 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB())  <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: res2  <span class=\"comment\"># 5</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x106a07620</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res2():       <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start   </span><br><span class=\"line\">--&gt; A   </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">--&gt; B       </span><br><span class=\"line\">end.</span><br></pre></td></tr></table></figure>\n<ol>\n<li>创建gen_AB函数</li>\n<li>列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：’A’和’B’。注意。下面输出的是start、continue、end.。</li>\n<li>for循环迭代列表推导生成的res1列表</li>\n<li>把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。</li>\n<li>可以看出res2是一个生成器对象。</li>\n<li>只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。</li>\n</ol>\n<p>生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。</p>\n<h2 id=\"何时使用生成器表达式\"><a href=\"#何时使用生成器表达式\" class=\"headerlink\" title=\"何时使用生成器表达式\"></a>何时使用生成器表达式</h2><p>生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为<code>协程</code>使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的<code>生成器</code>都是<code>迭代器</code>，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把<code>迭代器</code>和<code>生成器</code>视作同一概念。</p>\n<p>所有python程序员都知道，序列可迭代，下面说明具体原因。<br>","more":"</p>\n<h2 id=\"序列可迭代的原因：iter函数\"><a href=\"#序列可迭代的原因：iter函数\" class=\"headerlink\" title=\"序列可迭代的原因：iter函数\"></a>序列可迭代的原因：iter函数</h2><p>解释器需要迭代对象x时，会自动调用<code>iter(x)</code>。<br>内置的iter函数有以下作用。</p>\n<ol>\n<li>检查对象是否实现了<code>__iter__</code>方法，如果实现了就调用它，获得一个迭代器。</li>\n<li>如果没有实现<code>__iter__</code>方法，但是实现了<code>__getitem__</code>方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。</li>\n<li>如果尝试失败，python会抛出<code>TypeError</code>异常，通常会提示”C object is not iterable”,其中C是目标对象所属的类。</li>\n</ol>\n<p>任何Python序列都可迭代的原因是它们实现了<code>__getitem__</code>方法。其实标准的序列也都实现了<code>__iter__</code>方法。之所以对<code>__getitem__</code>方法做特殊处理是为了向后兼容。</p>\n<p>从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的<code>__getitem__</code>方法，而abc.Iterable类则不考虑。</p>\n<h2 id=\"可迭代的对象与迭代器的对比\"><a href=\"#可迭代的对象与迭代器的对比\" class=\"headerlink\" title=\"可迭代的对象与迭代器的对比\"></a>可迭代的对象与迭代器的对比</h2><h3 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h3><p><strong>使用iter内置函数可以获取迭代器的对象。</strong> 如果实现了能返回迭代器的<code>__iter__</code>方法，那么对象就是可迭代的。序列都可以迭代；实现了<code>__getitem__</code>方法，而且七参数是从零开始的索引，这种对象也是可迭代的。</p>\n<p>我们要明确可迭代对象和迭代器之间的关系：<strong>Python从可迭代的对象中获取迭代器</strong></p>\n<p>标准的迭代器接口有两个方法，即：</p>\n<ol>\n<li><code>__next__</code>:返回下一个可用元素，如果没有元素，抛出<code>StopIteration</code>异常</li>\n<li><code>__iter__</code>:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。</li>\n</ol>\n<p>因为<code>迭代器</code>只需<code>__next__</code>和<code>__iter__</code>两个方法，所以除了调用next()方法，以及捕获<code>StopIteration</code>异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(…)，传入之前构建迭代器的可迭代对象。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是这样的对象：实现了无参数的<code>__next__</code>方法，返回序列中的下一个元素；如果没有元素了，那么抛出<code>StopIteration</code>异常。Python迭代器还实现了<code>__iter__</code>方法，因此迭代器也可以迭代。</p>\n<p>构建<code>可迭代对象</code>和<code>迭代器</code>时经常会出现错误，原因是混淆了两者。要知道，<code>可迭代的对象</code>有个<code>__iter__</code>方法，每次都实例化一个新的迭代器；而<code>迭代器</code>要实现<code>__next__</code>方法，返回单个元素，此外还要实现<code>__iter__</code>方法，返回迭代器本身。因此，<code>迭代器</code>可以迭代，但是<code>可迭代的对象</code>不是迭代器。</p>\n<p>可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现<code>__iter__</code>方法，但不能实现<code>__next__</code>方法。另一方面，迭代器应该一直可以迭代，迭代器的<code>__iter__</code>方法应该返回自身。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(a)            <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(iter(a))      <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n<p>普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有<code>yield</code>关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。</p>\n<h3 id=\"生成器函数工作原理\"><a href=\"#生成器函数工作原理\" class=\"headerlink\" title=\"生成器函数工作原理\"></a>生成器函数工作原理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_123</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 只要Python代码中包含yield，该函数就是生成器函数</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>    <span class=\"comment\">#生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(gen_123)    <span class=\"comment\"># 可以看出gen_123是函数对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;function gen_123 at 0x10be199d8&gt;</span></span><br><span class=\"line\">    print(gen_123())  <span class=\"comment\"># 函数调用时返回的是一个生成器对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;generator object gen_123 at 0x10be31ca8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_123(): <span class=\"comment\"># 生成器是迭代器，会生成传给yield关键字的表达式的值</span></span><br><span class=\"line\">        print(i)    </span><br><span class=\"line\">        <span class=\"comment\"># 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 2</span></span><br><span class=\"line\">        <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = gen_123() <span class=\"comment\"># 为了仔细检查，把生成器对象赋值给g</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 1</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 2</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">    print(next(g))   <span class=\"comment\"># 生成器函数的定义体执行完毕后，生成器对象会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"># Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"comment\">#   File \"test.py\", line 17, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#     print(next(g))</span></span><br><span class=\"line\"><span class=\"comment\"># StopIteration</span></span><br></pre></td></tr></table></figure>\n<p>如上述代码所示：</p>\n<ol>\n<li>只要Python代码中包含yield，该函数就是生成器函数</li>\n<li>生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</li>\n<li>可以看出gen_123是函数对象</li>\n<li>函数调用时返回的是一个生成器对象</li>\n<li>生成器是迭代器，会<code>生成</code>传给yield关键字的表达式的值</li>\n<li>为了仔细检查，把生成器对象赋值给g</li>\n<li>因为g是迭代器，所以调用nest(g)会获取yield<code>生成</code>的下一个元素</li>\n<li>生成器函数的定义体执行完毕后，生成器对象会抛出异常。</li>\n</ol>\n<p>使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是<code>产出</code>或<code>生成</code>值。如果说生成器<code>返回</code>值，就会让人难以理解。</p>\n<blockquote>\n<p>函数返回值; 调用生成器函数返回生成器; 生成器<code>产出</code>或<code>生成</code>值。生成器不会以常规方式<code>返回</code>值;</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            <span class=\"comment\"># 2</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        <span class=\"comment\"># 4</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> gen_AB():       <span class=\"comment\"># 5</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, c)      <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start       <span class=\"comment\"># 7</span></span><br><span class=\"line\">--&gt; A       # 8</span><br><span class=\"line\"><span class=\"keyword\">continue</span>    <span class=\"comment\"># 9</span></span><br><span class=\"line\">--&gt; B       # 10</span><br><span class=\"line\">end.        <span class=\"comment\"># 11</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字</li>\n<li>在for循环中第一次隐式调用next()函数时（序号5），会打印’start’，然后停在第一个yield语句，生成值 ‘A’</li>\n<li>在for循环第二次隐式调用next()函数时，会打印’continue’，然后停在第二个yield语句，生成值’B’</li>\n<li>第三次调用 next()函数时，会打印’end.’，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常</li>\n<li>迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)</li>\n<li>循环打印 –&gt; 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出</li>\n<li>‘start’是生成器函数定义体中print(‘start’)输出的记过</li>\n<li>生成器函数定义体中的yield ‘A’ 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出–&gt; A</li>\n<li>第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield ‘A’前进到 yield ‘B’。文本continue是由生成器函数定义体中的第二个print函数输出的</li>\n<li>生成器函数定义体中的yield ‘B’ 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出–&gt; B</li>\n<li>第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。</li>\n<li>到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><p>简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        </span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: res1 = [x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB()]  <span class=\"comment\"># 2</span></span><br><span class=\"line\">start</span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res1():       <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)      </span><br><span class=\"line\">    ...:</span><br><span class=\"line\">AAA</span><br><span class=\"line\">BBB</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: res2 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB())  <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: res2  <span class=\"comment\"># 5</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x106a07620</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res2():       <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start   </span><br><span class=\"line\">--&gt; A   </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">--&gt; B       </span><br><span class=\"line\">end.</span><br></pre></td></tr></table></figure>\n<ol>\n<li>创建gen_AB函数</li>\n<li>列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：’A’和’B’。注意。下面输出的是start、continue、end.。</li>\n<li>for循环迭代列表推导生成的res1列表</li>\n<li>把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。</li>\n<li>可以看出res2是一个生成器对象。</li>\n<li>只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。</li>\n</ol>\n<p>生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。</p>\n<h2 id=\"何时使用生成器表达式\"><a href=\"#何时使用生成器表达式\" class=\"headerlink\" title=\"何时使用生成器表达式\"></a>何时使用生成器表达式</h2><p>生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为<code>协程</code>使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。</p>"},{"title":"python3 如何用一个表达式合并两个字典","date":"2018-03-02T17:00:28.000Z","_content":"\n有两个Python字典,写一个表达式来返回两个字典的合并。`update()`方法返回的是空值而不是返回合并后的对象.\n```python    \n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = x.update(y)\n>>> print z\nNone\n>>> x\n{'a': 1, 'b': 10, 'c': 11}\n```\n如何才能让值保存在z而不是x?\n<!-- more -->\n\n对于python2可以用下面的方法:\n```python    \nz = dict(x.items() + y.items())\n```\n最后就是你想要的最终结果保存在字典z中,而键`b`的值会被第二个字典的值覆盖.\n```python\n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = dict(x.items() + y.items())\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n对于Python3：\n```python\n>>> z = dict(list(x.items()) + list(y.items()))\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n还可以这样:\n```python\nz = x.copy()\nz.update(y)\n```\n","source":"_posts/python3-如何用一个表达式合并两个字典.md","raw":"---\ntitle: python3 如何用一个表达式合并两个字典\ndate: 2018-03-03 01:00:28\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 数据结构\n---\n\n有两个Python字典,写一个表达式来返回两个字典的合并。`update()`方法返回的是空值而不是返回合并后的对象.\n```python    \n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = x.update(y)\n>>> print z\nNone\n>>> x\n{'a': 1, 'b': 10, 'c': 11}\n```\n如何才能让值保存在z而不是x?\n<!-- more -->\n\n对于python2可以用下面的方法:\n```python    \nz = dict(x.items() + y.items())\n```\n最后就是你想要的最终结果保存在字典z中,而键`b`的值会被第二个字典的值覆盖.\n```python\n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = dict(x.items() + y.items())\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n对于Python3：\n```python\n>>> z = dict(list(x.items()) + list(y.items()))\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n还可以这样:\n```python\nz = x.copy()\nz.update(y)\n```\n","slug":"python3-如何用一个表达式合并两个字典","published":1,"updated":"2018-03-02T17:11:37.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims50023qkotrzv65eww","content":"<p>有两个Python字典,写一个表达式来返回两个字典的合并。<code>update()</code>方法返回的是空值而不是返回合并后的对象.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = x.update(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> z</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如何才能让值保存在z而不是x?<br><a id=\"more\"></a></p>\n<p>对于python2可以用下面的方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = dict(x.items() + y.items())</span><br></pre></td></tr></table></figure></p>\n<p>最后就是你想要的最终结果保存在字典z中,而键<code>b</code>的值会被第二个字典的值覆盖.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于Python3：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(list(x.items()) + list(y.items()))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以这样:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = x.copy()</span><br><span class=\"line\">z.update(y)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>有两个Python字典,写一个表达式来返回两个字典的合并。<code>update()</code>方法返回的是空值而不是返回合并后的对象.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = x.update(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> z</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如何才能让值保存在z而不是x?<br>","more":"</p>\n<p>对于python2可以用下面的方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = dict(x.items() + y.items())</span><br></pre></td></tr></table></figure></p>\n<p>最后就是你想要的最终结果保存在字典z中,而键<code>b</code>的值会被第二个字典的值覆盖.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于Python3：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(list(x.items()) + list(y.items()))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以这样:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = x.copy()</span><br><span class=\"line\">z.update(y)</span><br></pre></td></tr></table></figure></p>"},{"title":"一种Git保留两个repo的commit信息进行合并的方法","date":"2018-02-27T06:46:37.000Z","_content":"\n以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：\n\n<!--more-->\n\n比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：\n```Bash\n$ git remote add other git@github.com:ByiProX/****.git\n$ git fetch other\n$ git checkout -b repo1 other/mster\n$ git checkout master\n$ git merge repo1 --allow-unrelated-histories\n```\n\n![](http://img.blog.csdn.net/20180213030000117)\n\n接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接\n\n\n```Bash\n$ git mergetool # 解决merge冲突  \n```\n```bash\n\n$ git remote rm other # 删除远程连接  \n$ git branch -d repo1 # 删除分支操作  \n```\n","source":"_posts/一种Git保留两个repo的commit信息进行合并的方法.md","raw":"---\ntitle: 一种Git保留两个repo的commit信息进行合并的方法\ndate: 2018-02-27 14:46:37\ntags:\n  - Git\ncategories:\n  - Git\n\n---\n\n以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：\n\n<!--more-->\n\n比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：\n```Bash\n$ git remote add other git@github.com:ByiProX/****.git\n$ git fetch other\n$ git checkout -b repo1 other/mster\n$ git checkout master\n$ git merge repo1 --allow-unrelated-histories\n```\n\n![](http://img.blog.csdn.net/20180213030000117)\n\n接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接\n\n\n```Bash\n$ git mergetool # 解决merge冲突  \n```\n```bash\n\n$ git remote rm other # 删除远程连接  \n$ git branch -d repo1 # 删除分支操作  \n```\n","slug":"一种Git保留两个repo的commit信息进行合并的方法","published":1,"updated":"2018-02-27T07:19:42.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims60026qkotjdrone8e","content":"<p>以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：</p>\n<a id=\"more\"></a>\n<p>比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add other git@github.com:ByiProX/****.git</span><br><span class=\"line\">$ git fetch other</span><br><span class=\"line\">$ git checkout -b repo1 other/mster</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge repo1 --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180213030000117\" alt=\"\"></p>\n<p>接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mergetool <span class=\"comment\"># 解决merge冲突</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git remote rm other <span class=\"comment\"># 删除远程连接  </span></span><br><span class=\"line\">$ git branch -d repo1 <span class=\"comment\"># 删除分支操作</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：</p>","more":"<p>比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add other git@github.com:ByiProX/****.git</span><br><span class=\"line\">$ git fetch other</span><br><span class=\"line\">$ git checkout -b repo1 other/mster</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge repo1 --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180213030000117\" alt=\"\"></p>\n<p>接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mergetool <span class=\"comment\"># 解决merge冲突</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git remote rm other <span class=\"comment\"># 删除远程连接  </span></span><br><span class=\"line\">$ git branch -d repo1 <span class=\"comment\"># 删除分支操作</span></span><br></pre></td></tr></table></figure>"},{"title":"从零开始学爬虫-01","date":"2018-02-27T16:37:37.000Z","_content":"\n### 本节关键字\n*urllib | chardet*\n\n### urllib 简介\n在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：\n<!-- more -->\n\n>1.urllib.request模块是用来打开和读取URLs的；\n\n>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；\n\n>3.urllib.parse模块包含了一些解析URLs的方法；\n\n>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。\n\n\n使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。\nurlopen有一些可选参数，具体信息可以查阅Python自带的documentation。\n\n### urllib 测试\n了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    print(html)\n```\n\nurllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。\n\n浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。\n\n我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com/\")\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：\n\n\n当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。\n\n这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。\n\n我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nimport chardet\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    charset = chardet.detect(html)\n    print(charset)\n```\n","source":"_posts/从零开始学爬虫-01.md","raw":"---\ntitle: 从零开始学爬虫-01\ndate: 2018-02-28 00:37:37\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n### 本节关键字\n*urllib | chardet*\n\n### urllib 简介\n在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：\n<!-- more -->\n\n>1.urllib.request模块是用来打开和读取URLs的；\n\n>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；\n\n>3.urllib.parse模块包含了一些解析URLs的方法；\n\n>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。\n\n\n使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。\nurlopen有一些可选参数，具体信息可以查阅Python自带的documentation。\n\n### urllib 测试\n了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    print(html)\n```\n\nurllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。\n\n浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。\n\n我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com/\")\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：\n\n\n当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。\n\n这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。\n\n我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nimport chardet\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    charset = chardet.detect(html)\n    print(charset)\n```\n","slug":"从零开始学爬虫-01","published":1,"updated":"2018-02-27T17:04:40.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims8002aqkotvdkc920f","content":"<h3 id=\"本节关键字\"><a href=\"#本节关键字\" class=\"headerlink\" title=\"本节关键字\"></a>本节关键字</h3><p><em>urllib | chardet</em></p>\n<h3 id=\"urllib-简介\"><a href=\"#urllib-简介\" class=\"headerlink\" title=\"urllib 简介\"></a>urllib 简介</h3><p>在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>1.urllib.request模块是用来打开和读取URLs的；</p>\n</blockquote>\n<blockquote>\n<p>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；</p>\n</blockquote>\n<blockquote>\n<p>3.urllib.parse模块包含了一些解析URLs的方法；</p>\n</blockquote>\n<blockquote>\n<p>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。</p>\n</blockquote>\n<p>使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。<br>urlopen有一些可选参数，具体信息可以查阅Python自带的documentation。</p>\n<h3 id=\"urllib-测试\"><a href=\"#urllib-测试\" class=\"headerlink\" title=\"urllib 测试\"></a>urllib 测试</h3><p>了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>urllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。</p>\n<p>浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。</p>\n<p>我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：</p>\n<p>当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。</p>\n<p>这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。</p>\n<p>我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    charset = chardet.detect(html)</span><br><span class=\"line\">    print(charset)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"本节关键字\"><a href=\"#本节关键字\" class=\"headerlink\" title=\"本节关键字\"></a>本节关键字</h3><p><em>urllib | chardet</em></p>\n<h3 id=\"urllib-简介\"><a href=\"#urllib-简介\" class=\"headerlink\" title=\"urllib 简介\"></a>urllib 简介</h3><p>在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：<br>","more":"</p>\n<blockquote>\n<p>1.urllib.request模块是用来打开和读取URLs的；</p>\n</blockquote>\n<blockquote>\n<p>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；</p>\n</blockquote>\n<blockquote>\n<p>3.urllib.parse模块包含了一些解析URLs的方法；</p>\n</blockquote>\n<blockquote>\n<p>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。</p>\n</blockquote>\n<p>使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。<br>urlopen有一些可选参数，具体信息可以查阅Python自带的documentation。</p>\n<h3 id=\"urllib-测试\"><a href=\"#urllib-测试\" class=\"headerlink\" title=\"urllib 测试\"></a>urllib 测试</h3><p>了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>urllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。</p>\n<p>浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。</p>\n<p>我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：</p>\n<p>当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。</p>\n<p>这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。</p>\n<p>我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    charset = chardet.detect(html)</span><br><span class=\"line\">    print(charset)</span><br></pre></td></tr></table></figure></p>"},{"title":"从零开始学爬虫-02","date":"2018-02-27T16:48:24.000Z","_content":"\n### 一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\n为什么把url里的 \"_o\" 删掉后就可以正常爬取呢？\n<!-- more -->\n### urlopen的url参数 Agent\n\n\nurl不仅可以是一个字符串，例如:http://www.baidu.com。\n\nurl也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。\n\nurlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。\n\n\n\n- geturl()返回的是一个url的字符串；\n\n- info()返回的是一些meta标记的元信息，包括一些服务器的信息；\n\n- getcode()返回的是HTTP的状态码，如果返回200表示请求成功。\n\n关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。\n\n\n了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    print(\"geturl打印信息：%s\"%(response.geturl()))\n    print('**********************************************')\n    print(\"info打印信息：%s\"%(response.info()))\n    print('**********************************************')\n    print(\"getcode打印信息：%s\"%(response.getcode()))\n\n```\n\n\n### urlopen的data参数\n\n我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：\n\n从客户端向服务器提交数据使用POST；\n\n从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。\n\n如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。\n\ndata参数有自己的格式，它是一个基于application/x-www.form-urlencoded的格式，具体格式我们不用了解， 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。\n\n### 发送data实例\n\n向有道翻译发送data，得到翻译结果。\n####  (1).打开有道翻译界面，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (2).鼠标右键检查，也就是审查元素，如下图所示：\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (3).选择右侧出现的Network，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (4).在左侧输入翻译内容，输入Jack，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\n![image](http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n####  (6).点击上图红框中的内容，查看它的信息，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (7).记住这些信息，这是我们一会儿写程序需要用到的。\n\n  新建文件translate_test.py，编写如下代码：\n ```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import parse\nimport json\n\nif __name__ == \"__main__\":\n    #对应上图的Request URL\n    Request_URL = 'http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule&sessionFrom=null'\n    #创建Form_Data字典，存储上图的Form Data\n    Form_Data = {}\n    Form_Data['type'] = 'AUTO'\n    Form_Data['i'] = 'Jack'\n    Form_Data['doctype'] = 'json'\n    Form_Data['xmlVersion'] = '1.8'\n    Form_Data['keyfrom'] = 'fanyi.web'\n    Form_Data['ue'] = 'ue:UTF-8'\n    Form_Data['action'] = 'FY_BY_CLICKBUTTON'\n    #使用urlencode方法转换标准格式\n    data = parse.urlencode(Form_Data).encode('utf-8')\n    #传递Request对象和转换完格式的数据\n    response = request.urlopen(Request_URL,data)\n    #读取信息并解码\n    html = response.read().decode('utf-8')\n    #使用JSON\n    translate_results = json.loads(html)\n    #找到翻译结果\n    translate_results = translate_results['translateResult'][0][0]['tgt']\n    #打印翻译信息\n    print(\"翻译的结果是：%s\" % translate_results)\n```\n\n运行查看翻译结果\n","source":"_posts/从零开始学爬虫-02.md","raw":"---\ntitle: 从零开始学爬虫-02\ndate: 2018-02-28 00:48:24\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n### 一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\n为什么把url里的 \"_o\" 删掉后就可以正常爬取呢？\n<!-- more -->\n### urlopen的url参数 Agent\n\n\nurl不仅可以是一个字符串，例如:http://www.baidu.com。\n\nurl也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。\n\nurlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。\n\n\n\n- geturl()返回的是一个url的字符串；\n\n- info()返回的是一些meta标记的元信息，包括一些服务器的信息；\n\n- getcode()返回的是HTTP的状态码，如果返回200表示请求成功。\n\n关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。\n\n\n了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    print(\"geturl打印信息：%s\"%(response.geturl()))\n    print('**********************************************')\n    print(\"info打印信息：%s\"%(response.info()))\n    print('**********************************************')\n    print(\"getcode打印信息：%s\"%(response.getcode()))\n\n```\n\n\n### urlopen的data参数\n\n我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：\n\n从客户端向服务器提交数据使用POST；\n\n从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。\n\n如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。\n\ndata参数有自己的格式，它是一个基于application/x-www.form-urlencoded的格式，具体格式我们不用了解， 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。\n\n### 发送data实例\n\n向有道翻译发送data，得到翻译结果。\n####  (1).打开有道翻译界面，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (2).鼠标右键检查，也就是审查元素，如下图所示：\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (3).选择右侧出现的Network，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (4).在左侧输入翻译内容，输入Jack，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\n![image](http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n####  (6).点击上图红框中的内容，查看它的信息，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (7).记住这些信息，这是我们一会儿写程序需要用到的。\n\n  新建文件translate_test.py，编写如下代码：\n ```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import parse\nimport json\n\nif __name__ == \"__main__\":\n    #对应上图的Request URL\n    Request_URL = 'http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule&sessionFrom=null'\n    #创建Form_Data字典，存储上图的Form Data\n    Form_Data = {}\n    Form_Data['type'] = 'AUTO'\n    Form_Data['i'] = 'Jack'\n    Form_Data['doctype'] = 'json'\n    Form_Data['xmlVersion'] = '1.8'\n    Form_Data['keyfrom'] = 'fanyi.web'\n    Form_Data['ue'] = 'ue:UTF-8'\n    Form_Data['action'] = 'FY_BY_CLICKBUTTON'\n    #使用urlencode方法转换标准格式\n    data = parse.urlencode(Form_Data).encode('utf-8')\n    #传递Request对象和转换完格式的数据\n    response = request.urlopen(Request_URL,data)\n    #读取信息并解码\n    html = response.read().decode('utf-8')\n    #使用JSON\n    translate_results = json.loads(html)\n    #找到翻译结果\n    translate_results = translate_results['translateResult'][0][0]['tgt']\n    #打印翻译信息\n    print(\"翻译的结果是：%s\" % translate_results)\n```\n\n运行查看翻译结果\n","slug":"从零开始学爬虫-02","published":1,"updated":"2018-02-27T17:04:42.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehims9002dqkotnlvyiy7g","content":"<h3 id=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"><a href=\"#一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\" class=\"headerlink\" title=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"></a>一个疑问尚未解决疑问，小弟在此跪求大牛解答一下</h3><p>为什么把url里的 “_o” 删掉后就可以正常爬取呢？<br><a id=\"more\"></a></p>\n<h3 id=\"urlopen的url参数-Agent\"><a href=\"#urlopen的url参数-Agent\" class=\"headerlink\" title=\"urlopen的url参数 Agent\"></a>urlopen的url参数 Agent</h3><p>url不仅可以是一个字符串，例如:<a href=\"http://www.baidu.com。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com。</a></p>\n<p>url也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。</p>\n<p>urlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。</p>\n<ul>\n<li><p>geturl()返回的是一个url的字符串；</p>\n</li>\n<li><p>info()返回的是一些meta标记的元信息，包括一些服务器的信息；</p>\n</li>\n<li><p>getcode()返回的是HTTP的状态码，如果返回200表示请求成功。</p>\n</li>\n</ul>\n<p>关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。</p>\n<p>了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    print(<span class=\"string\">\"geturl打印信息：%s\"</span>%(response.geturl()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"info打印信息：%s\"</span>%(response.info()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"getcode打印信息：%s\"</span>%(response.getcode()))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"urlopen的data参数\"><a href=\"#urlopen的data参数\" class=\"headerlink\" title=\"urlopen的data参数\"></a>urlopen的data参数</h3><p>我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：</p>\n<p>从客户端向服务器提交数据使用POST；</p>\n<p>从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。</p>\n<p>如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。</p>\n<p>data参数有自己的格式，它是一个基于application/x-<a href=\"http://www.form-urlencoded的格式，具体格式我们不用了解，\" target=\"_blank\" rel=\"noopener\">www.form-urlencoded的格式，具体格式我们不用了解，</a> 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。</p>\n<h3 id=\"发送data实例\"><a href=\"#发送data实例\" class=\"headerlink\" title=\"发送data实例\"></a>发送data实例</h3><p>向有道翻译发送data，得到翻译结果。</p>\n<h4 id=\"1-打开有道翻译界面，如下图所示：\"><a href=\"#1-打开有道翻译界面，如下图所示：\" class=\"headerlink\" title=\"(1).打开有道翻译界面，如下图所示：\"></a>(1).打开有道翻译界面，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"2-鼠标右键检查，也就是审查元素，如下图所示：\"><a href=\"#2-鼠标右键检查，也就是审查元素，如下图所示：\" class=\"headerlink\" title=\"(2).鼠标右键检查，也就是审查元素，如下图所示：\"></a>(2).鼠标右键检查，也就是审查元素，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"3-选择右侧出现的Network，如下图所示：\"><a href=\"#3-选择右侧出现的Network，如下图所示：\" class=\"headerlink\" title=\"(3).选择右侧出现的Network，如下图所示：\"></a>(3).选择右侧出现的Network，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"4-在左侧输入翻译内容，输入Jack，如下图所示：\"><a href=\"#4-在左侧输入翻译内容，输入Jack，如下图所示：\" class=\"headerlink\" title=\"(4).在左侧输入翻译内容，输入Jack，如下图所示：\"></a>(4).在左侧输入翻译内容，输入Jack，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"><a href=\"#5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\" class=\"headerlink\" title=\"(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"></a>(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"6-点击上图红框中的内容，查看它的信息，如下图所示：\"><a href=\"#6-点击上图红框中的内容，查看它的信息，如下图所示：\" class=\"headerlink\" title=\"(6).点击上图红框中的内容，查看它的信息，如下图所示：\"></a>(6).点击上图红框中的内容，查看它的信息，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"7-记住这些信息，这是我们一会儿写程序需要用到的。\"><a href=\"#7-记住这些信息，这是我们一会儿写程序需要用到的。\" class=\"headerlink\" title=\"(7).记住这些信息，这是我们一会儿写程序需要用到的。\"></a>(7).记住这些信息，这是我们一会儿写程序需要用到的。</h4><p>  新建文件translate_test.py，编写如下代码：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#对应上图的Request URL</span></span><br><span class=\"line\">    Request_URL = <span class=\"string\">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;sessionFrom=null'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Form_Data字典，存储上图的Form Data</span></span><br><span class=\"line\">    Form_Data = &#123;&#125;</span><br><span class=\"line\">    Form_Data[<span class=\"string\">'type'</span>] = <span class=\"string\">'AUTO'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'i'</span>] = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'doctype'</span>] = <span class=\"string\">'json'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'xmlVersion'</span>] = <span class=\"string\">'1.8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'keyfrom'</span>] = <span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'ue'</span>] = <span class=\"string\">'ue:UTF-8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    data = parse.urlencode(Form_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传递Request对象和转换完格式的数据</span></span><br><span class=\"line\">    response = request.urlopen(Request_URL,data)</span><br><span class=\"line\">    <span class=\"comment\">#读取信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#使用JSON</span></span><br><span class=\"line\">    translate_results = json.loads(html)</span><br><span class=\"line\">    <span class=\"comment\">#找到翻译结果</span></span><br><span class=\"line\">    translate_results = translate_results[<span class=\"string\">'translateResult'</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"string\">'tgt'</span>]</span><br><span class=\"line\">    <span class=\"comment\">#打印翻译信息</span></span><br><span class=\"line\">    print(<span class=\"string\">\"翻译的结果是：%s\"</span> % translate_results)</span><br></pre></td></tr></table></figure></p>\n<p>运行查看翻译结果</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"><a href=\"#一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\" class=\"headerlink\" title=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"></a>一个疑问尚未解决疑问，小弟在此跪求大牛解答一下</h3><p>为什么把url里的 “_o” 删掉后就可以正常爬取呢？<br>","more":"</p>\n<h3 id=\"urlopen的url参数-Agent\"><a href=\"#urlopen的url参数-Agent\" class=\"headerlink\" title=\"urlopen的url参数 Agent\"></a>urlopen的url参数 Agent</h3><p>url不仅可以是一个字符串，例如:<a href=\"http://www.baidu.com。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com。</a></p>\n<p>url也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。</p>\n<p>urlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。</p>\n<ul>\n<li><p>geturl()返回的是一个url的字符串；</p>\n</li>\n<li><p>info()返回的是一些meta标记的元信息，包括一些服务器的信息；</p>\n</li>\n<li><p>getcode()返回的是HTTP的状态码，如果返回200表示请求成功。</p>\n</li>\n</ul>\n<p>关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。</p>\n<p>了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    print(<span class=\"string\">\"geturl打印信息：%s\"</span>%(response.geturl()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"info打印信息：%s\"</span>%(response.info()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"getcode打印信息：%s\"</span>%(response.getcode()))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"urlopen的data参数\"><a href=\"#urlopen的data参数\" class=\"headerlink\" title=\"urlopen的data参数\"></a>urlopen的data参数</h3><p>我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：</p>\n<p>从客户端向服务器提交数据使用POST；</p>\n<p>从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。</p>\n<p>如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。</p>\n<p>data参数有自己的格式，它是一个基于application/x-<a href=\"http://www.form-urlencoded的格式，具体格式我们不用了解，\" target=\"_blank\" rel=\"noopener\">www.form-urlencoded的格式，具体格式我们不用了解，</a> 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。</p>\n<h3 id=\"发送data实例\"><a href=\"#发送data实例\" class=\"headerlink\" title=\"发送data实例\"></a>发送data实例</h3><p>向有道翻译发送data，得到翻译结果。</p>\n<h4 id=\"1-打开有道翻译界面，如下图所示：\"><a href=\"#1-打开有道翻译界面，如下图所示：\" class=\"headerlink\" title=\"(1).打开有道翻译界面，如下图所示：\"></a>(1).打开有道翻译界面，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"2-鼠标右键检查，也就是审查元素，如下图所示：\"><a href=\"#2-鼠标右键检查，也就是审查元素，如下图所示：\" class=\"headerlink\" title=\"(2).鼠标右键检查，也就是审查元素，如下图所示：\"></a>(2).鼠标右键检查，也就是审查元素，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"3-选择右侧出现的Network，如下图所示：\"><a href=\"#3-选择右侧出现的Network，如下图所示：\" class=\"headerlink\" title=\"(3).选择右侧出现的Network，如下图所示：\"></a>(3).选择右侧出现的Network，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"4-在左侧输入翻译内容，输入Jack，如下图所示：\"><a href=\"#4-在左侧输入翻译内容，输入Jack，如下图所示：\" class=\"headerlink\" title=\"(4).在左侧输入翻译内容，输入Jack，如下图所示：\"></a>(4).在左侧输入翻译内容，输入Jack，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"><a href=\"#5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\" class=\"headerlink\" title=\"(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"></a>(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"6-点击上图红框中的内容，查看它的信息，如下图所示：\"><a href=\"#6-点击上图红框中的内容，查看它的信息，如下图所示：\" class=\"headerlink\" title=\"(6).点击上图红框中的内容，查看它的信息，如下图所示：\"></a>(6).点击上图红框中的内容，查看它的信息，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"7-记住这些信息，这是我们一会儿写程序需要用到的。\"><a href=\"#7-记住这些信息，这是我们一会儿写程序需要用到的。\" class=\"headerlink\" title=\"(7).记住这些信息，这是我们一会儿写程序需要用到的。\"></a>(7).记住这些信息，这是我们一会儿写程序需要用到的。</h4><p>  新建文件translate_test.py，编写如下代码：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#对应上图的Request URL</span></span><br><span class=\"line\">    Request_URL = <span class=\"string\">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;sessionFrom=null'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Form_Data字典，存储上图的Form Data</span></span><br><span class=\"line\">    Form_Data = &#123;&#125;</span><br><span class=\"line\">    Form_Data[<span class=\"string\">'type'</span>] = <span class=\"string\">'AUTO'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'i'</span>] = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'doctype'</span>] = <span class=\"string\">'json'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'xmlVersion'</span>] = <span class=\"string\">'1.8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'keyfrom'</span>] = <span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'ue'</span>] = <span class=\"string\">'ue:UTF-8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    data = parse.urlencode(Form_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传递Request对象和转换完格式的数据</span></span><br><span class=\"line\">    response = request.urlopen(Request_URL,data)</span><br><span class=\"line\">    <span class=\"comment\">#读取信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#使用JSON</span></span><br><span class=\"line\">    translate_results = json.loads(html)</span><br><span class=\"line\">    <span class=\"comment\">#找到翻译结果</span></span><br><span class=\"line\">    translate_results = translate_results[<span class=\"string\">'translateResult'</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"string\">'tgt'</span>]</span><br><span class=\"line\">    <span class=\"comment\">#打印翻译信息</span></span><br><span class=\"line\">    print(<span class=\"string\">\"翻译的结果是：%s\"</span> % translate_results)</span><br></pre></td></tr></table></figure></p>\n<p>运行查看翻译结果</p>"},{"title":"从零开始学爬虫-03","date":"2018-02-27T16:57:01.000Z","_content":"\n## urllib.error\n\nurllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：\n![Screen Shot 2018-02-12 at 14.39.09.png](http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nURLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。\n<!-- more -->\n\n### (1).URLError\n\n让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.dskfclyfiydl.com/\"\n    req = request.Request(url)\n    try:\n        response = request.urlopen(req)\n        html = response.read().decode('utf-8')\n        print(html)\n    except error.URLError as e:\n        print(e.reason)\n```\n\n可以看到如下运行结果：\n\n![Screen Shot 2018-02-12 at 14.35.56.png](http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (2).HTTPError\n\n再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n        # html = responese.read()\n    except error.HTTPError as e:\n        print(e.code, '\\n' ,e.reason, '\\n', e.headers)\n```\n\n运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，www.douyu.com 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。\n\n![Screen Shot 2018-02-12 at 14.36.07.png](http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (3).URLError和HTTPError混合使用\n\n最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError\")\n            print(e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError\")\n            print(e.reason)\n```\n\n运行结果如下：\n\n![Screen Shot 2018-02-12 at 14.37.39.png](http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/从零开始学爬虫-03.md","raw":"---\ntitle: 从零开始学爬虫-03\ndate: 2018-02-28 00:57:01\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## urllib.error\n\nurllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：\n![Screen Shot 2018-02-12 at 14.39.09.png](http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nURLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。\n<!-- more -->\n\n### (1).URLError\n\n让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.dskfclyfiydl.com/\"\n    req = request.Request(url)\n    try:\n        response = request.urlopen(req)\n        html = response.read().decode('utf-8')\n        print(html)\n    except error.URLError as e:\n        print(e.reason)\n```\n\n可以看到如下运行结果：\n\n![Screen Shot 2018-02-12 at 14.35.56.png](http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (2).HTTPError\n\n再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n        # html = responese.read()\n    except error.HTTPError as e:\n        print(e.code, '\\n' ,e.reason, '\\n', e.headers)\n```\n\n运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，www.douyu.com 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。\n\n![Screen Shot 2018-02-12 at 14.36.07.png](http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (3).URLError和HTTPError混合使用\n\n最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError\")\n            print(e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError\")\n            print(e.reason)\n```\n\n运行结果如下：\n\n![Screen Shot 2018-02-12 at 14.37.39.png](http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"从零开始学爬虫-03","published":1,"updated":"2018-02-27T17:04:43.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimsb002gqkotukic3api","content":"<h2 id=\"urllib-error\"><a href=\"#urllib-error\" class=\"headerlink\" title=\"urllib.error\"></a>urllib.error</h2><p>urllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.39.09.png\"></p>\n<p>URLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。<br><a id=\"more\"></a></p>\n<h3 id=\"1-URLError\"><a href=\"#1-URLError\" class=\"headerlink\" title=\"(1).URLError\"></a>(1).URLError</h3><p>让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.dskfclyfiydl.com/\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = request.urlopen(req)</span><br><span class=\"line\">        html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        print(html)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如下运行结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.35.56.png\"></p>\n<h3 id=\"2-HTTPError\"><a href=\"#2-HTTPError\" class=\"headerlink\" title=\"(2).HTTPError\"></a>(2).HTTPError</h3><p>再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">        <span class=\"comment\"># html = responese.read()</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.HTTPError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.code, <span class=\"string\">'\\n'</span> ,e.reason, <span class=\"string\">'\\n'</span>, e.headers)</span><br></pre></td></tr></table></figure></p>\n<p>运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，<a href=\"http://www.douyu.com\" target=\"_blank\" rel=\"noopener\">www.douyu.com</a> 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.36.07.png\"></p>\n<h3 id=\"3-URLError和HTTPError混合使用\"><a href=\"#3-URLError和HTTPError混合使用\" class=\"headerlink\" title=\"(3).URLError和HTTPError混合使用\"></a>(3).URLError和HTTPError混合使用</h3><p>最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError\"</span>)</span><br><span class=\"line\">            print(e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError\"</span>)</span><br><span class=\"line\">            print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.37.39.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"urllib-error\"><a href=\"#urllib-error\" class=\"headerlink\" title=\"urllib.error\"></a>urllib.error</h2><p>urllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.39.09.png\"></p>\n<p>URLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。<br>","more":"</p>\n<h3 id=\"1-URLError\"><a href=\"#1-URLError\" class=\"headerlink\" title=\"(1).URLError\"></a>(1).URLError</h3><p>让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.dskfclyfiydl.com/\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = request.urlopen(req)</span><br><span class=\"line\">        html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        print(html)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如下运行结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.35.56.png\"></p>\n<h3 id=\"2-HTTPError\"><a href=\"#2-HTTPError\" class=\"headerlink\" title=\"(2).HTTPError\"></a>(2).HTTPError</h3><p>再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">        <span class=\"comment\"># html = responese.read()</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.HTTPError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.code, <span class=\"string\">'\\n'</span> ,e.reason, <span class=\"string\">'\\n'</span>, e.headers)</span><br></pre></td></tr></table></figure></p>\n<p>运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，<a href=\"http://www.douyu.com\" target=\"_blank\" rel=\"noopener\">www.douyu.com</a> 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.36.07.png\"></p>\n<h3 id=\"3-URLError和HTTPError混合使用\"><a href=\"#3-URLError和HTTPError混合使用\" class=\"headerlink\" title=\"(3).URLError和HTTPError混合使用\"></a>(3).URLError和HTTPError混合使用</h3><p>最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError\"</span>)</span><br><span class=\"line\">            print(e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError\"</span>)</span><br><span class=\"line\">            print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.37.39.png\"></p>"},{"title":"从零开始学爬虫-04","date":"2018-02-27T17:06:56.000Z","_content":"\n## 说在前面\n\nurllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制\n\n## (一)、为何要设置User Agent\n\n有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。\n\nUser Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。\n\nPython允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。\n<!-- more -->\n\n## (二)、常见的User Agent\n\n### (1).Android\n\n  - Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19\n  - Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n  - Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\n\n### (2).Firefox\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\n  - Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0\n\n### (3).Google Chrome\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36\n  - Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19\n\n### (4).iOS\n\n  - Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\n  - Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3\n\n上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。\n\n## (三)、设置User Agent的方法\n\n先看下urllib.request.Request()\n\n ![1](http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：\n\n- 1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；\n\n- 2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。\n\n### 方法一\n\n创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    url = 'http://www.csdn.net/'\n    head = {}\n    #写入User Agent信息\n    head['User-Agent'] = 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'\n    #创建Request对象\n    req = request.Request(url, headers=head)\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n\n ![2](http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 方法二\n\n创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #以CSDN为例，CSDN不更改User Agent是无法访问的\n    url = 'http://www.csdn.net/'\n    #创建Request对象\n    req = request.Request(url)\n    #传入headers\n    req.add_header('User-Agent', 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19')\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果和上一个方法是一样的。\n\n## (四)、IP代理的使用\n\n### (1).为何使用IP代理\n\nUser Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。\n\n### (2).一般步骤说明\n\n一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：\n\n**(1)** 调用urlib.request.ProxyHandler()，proxies参数为一个字典。\n\n ![4](http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(2)** 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)\n\n![5](http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(3)** 安装Opener\n\n![引用容](http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。\n\n### (3).代理IP选取\n\n在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。\n\nURL：[http://www.xicidaili.com/](http://www.xicidaili.com/)\n\n注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。\n\n从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)\n\n ![6](http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n编写代码访问[http://www.whatismyip.com.tw/](http://www.whatismyip.com.tw/)，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。\n\n### (4).代码实例\n\n创建文件urllib_test10.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #访问网址\n    url = 'http://www.whatismyip.com.tw/'\n    #这是代理IP\n    proxy = {'http':'106.46.136.112:808'}\n    #创建ProxyHandler\n    proxy_support = request.ProxyHandler(proxy)\n    #创建Opener\n    opener = request.build_opener(proxy_support)\n    #添加User Angent\n    opener.addheaders = [('User-Agent','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')]\n    #安装OPener\n    request.install_opener(opener)\n    #使用自己安装好的Opener\n    response = request.urlopen(url)\n    #读取相应信息并解码\n    html = response.read().decode(\"utf-8\")\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n![7](http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，访问的IP已经伪装成了106.46.136.112。\n","source":"_posts/从零开始学爬虫-04.md","raw":"---\ntitle: 从零开始学爬虫-04\ndate: 2018-02-28 01:06:56\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## 说在前面\n\nurllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制\n\n## (一)、为何要设置User Agent\n\n有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。\n\nUser Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。\n\nPython允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。\n<!-- more -->\n\n## (二)、常见的User Agent\n\n### (1).Android\n\n  - Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19\n  - Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n  - Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\n\n### (2).Firefox\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\n  - Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0\n\n### (3).Google Chrome\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36\n  - Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19\n\n### (4).iOS\n\n  - Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\n  - Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3\n\n上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。\n\n## (三)、设置User Agent的方法\n\n先看下urllib.request.Request()\n\n ![1](http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：\n\n- 1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；\n\n- 2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。\n\n### 方法一\n\n创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    url = 'http://www.csdn.net/'\n    head = {}\n    #写入User Agent信息\n    head['User-Agent'] = 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'\n    #创建Request对象\n    req = request.Request(url, headers=head)\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n\n ![2](http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 方法二\n\n创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #以CSDN为例，CSDN不更改User Agent是无法访问的\n    url = 'http://www.csdn.net/'\n    #创建Request对象\n    req = request.Request(url)\n    #传入headers\n    req.add_header('User-Agent', 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19')\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果和上一个方法是一样的。\n\n## (四)、IP代理的使用\n\n### (1).为何使用IP代理\n\nUser Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。\n\n### (2).一般步骤说明\n\n一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：\n\n**(1)** 调用urlib.request.ProxyHandler()，proxies参数为一个字典。\n\n ![4](http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(2)** 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)\n\n![5](http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(3)** 安装Opener\n\n![引用容](http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。\n\n### (3).代理IP选取\n\n在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。\n\nURL：[http://www.xicidaili.com/](http://www.xicidaili.com/)\n\n注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。\n\n从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)\n\n ![6](http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n编写代码访问[http://www.whatismyip.com.tw/](http://www.whatismyip.com.tw/)，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。\n\n### (4).代码实例\n\n创建文件urllib_test10.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #访问网址\n    url = 'http://www.whatismyip.com.tw/'\n    #这是代理IP\n    proxy = {'http':'106.46.136.112:808'}\n    #创建ProxyHandler\n    proxy_support = request.ProxyHandler(proxy)\n    #创建Opener\n    opener = request.build_opener(proxy_support)\n    #添加User Angent\n    opener.addheaders = [('User-Agent','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')]\n    #安装OPener\n    request.install_opener(opener)\n    #使用自己安装好的Opener\n    response = request.urlopen(url)\n    #读取相应信息并解码\n    html = response.read().decode(\"utf-8\")\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n![7](http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，访问的IP已经伪装成了106.46.136.112。\n","slug":"从零开始学爬虫-04","published":1,"updated":"2018-02-27T17:18:25.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimsc002jqkot78wsgha1","content":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>urllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制</p>\n<h2 id=\"一-、为何要设置User-Agent\"><a href=\"#一-、为何要设置User-Agent\" class=\"headerlink\" title=\"(一)、为何要设置User Agent\"></a>(一)、为何要设置User Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p>\n<p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p>\n<p>Python允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。<br><a id=\"more\"></a></p>\n<h2 id=\"二-、常见的User-Agent\"><a href=\"#二-、常见的User-Agent\" class=\"headerlink\" title=\"(二)、常见的User Agent\"></a>(二)、常见的User Agent</h2><h3 id=\"1-Android\"><a href=\"#1-Android\" class=\"headerlink\" title=\"(1).Android\"></a>(1).Android</h3><ul>\n<li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>\n<li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>\n<li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>\n</ul>\n<h3 id=\"2-Firefox\"><a href=\"#2-Firefox\" class=\"headerlink\" title=\"(2).Firefox\"></a>(2).Firefox</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>\n<li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>\n</ul>\n<h3 id=\"3-Google-Chrome\"><a href=\"#3-Google-Chrome\" class=\"headerlink\" title=\"(3).Google Chrome\"></a>(3).Google Chrome</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>\n<li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>\n</ul>\n<h3 id=\"4-iOS\"><a href=\"#4-iOS\" class=\"headerlink\" title=\"(4).iOS\"></a>(4).iOS</h3><ul>\n<li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>\n<li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>\n</ul>\n<p>上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。</p>\n<h2 id=\"三-、设置User-Agent的方法\"><a href=\"#三-、设置User-Agent的方法\" class=\"headerlink\" title=\"(三)、设置User Agent的方法\"></a>(三)、设置User Agent的方法</h2><p>先看下urllib.request.Request()</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"1\"></p>\n<p>从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：</p>\n<ul>\n<li><p>1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；</p>\n</li>\n<li><p>2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。</p>\n</li>\n</ul>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    head = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#写入User Agent信息</span></span><br><span class=\"line\">    head[<span class=\"string\">'User-Agent'</span>] = <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url, headers=head)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"2\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#以CSDN为例，CSDN不更改User Agent是无法访问的</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"comment\">#传入headers</span></span><br><span class=\"line\">    req.add_header(<span class=\"string\">'User-Agent'</span>, <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果和上一个方法是一样的。</p>\n<h2 id=\"四-、IP代理的使用\"><a href=\"#四-、IP代理的使用\" class=\"headerlink\" title=\"(四)、IP代理的使用\"></a>(四)、IP代理的使用</h2><h3 id=\"1-为何使用IP代理\"><a href=\"#1-为何使用IP代理\" class=\"headerlink\" title=\"(1).为何使用IP代理\"></a>(1).为何使用IP代理</h3><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p>\n<h3 id=\"2-一般步骤说明\"><a href=\"#2-一般步骤说明\" class=\"headerlink\" title=\"(2).一般步骤说明\"></a>(2).一般步骤说明</h3><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p>\n<p><strong>(1)</strong> 调用urlib.request.ProxyHandler()，proxies参数为一个字典。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"4\"></p>\n<p><strong>(2)</strong> 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"5\"></p>\n<p><strong>(3)</strong> 安装Opener</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用容\"></p>\n<p>使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。</p>\n<h3 id=\"3-代理IP选取\"><a href=\"#3-代理IP选取\" class=\"headerlink\" title=\"(3).代理IP选取\"></a>(3).代理IP选取</h3><p>在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。</p>\n<p>URL：<a href=\"http://www.xicidaili.com/\" target=\"_blank\" rel=\"noopener\">http://www.xicidaili.com/</a></p>\n<p>注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。</p>\n<p>从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"6\"></p>\n<p>编写代码访问<a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">http://www.whatismyip.com.tw/</a>，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。</p>\n<h3 id=\"4-代码实例\"><a href=\"#4-代码实例\" class=\"headerlink\" title=\"(4).代码实例\"></a>(4).代码实例</h3><p>创建文件urllib_test10.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#访问网址</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.whatismyip.com.tw/'</span></span><br><span class=\"line\">    <span class=\"comment\">#这是代理IP</span></span><br><span class=\"line\">    proxy = &#123;<span class=\"string\">'http'</span>:<span class=\"string\">'106.46.136.112:808'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#创建ProxyHandler</span></span><br><span class=\"line\">    proxy_support = request.ProxyHandler(proxy)</span><br><span class=\"line\">    <span class=\"comment\">#创建Opener</span></span><br><span class=\"line\">    opener = request.build_opener(proxy_support)</span><br><span class=\"line\">    <span class=\"comment\">#添加User Angent</span></span><br><span class=\"line\">    opener.addheaders = [(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#安装OPener</span></span><br><span class=\"line\">    request.install_opener(opener)</span><br><span class=\"line\">    <span class=\"comment\">#使用自己安装好的Opener</span></span><br><span class=\"line\">    response = request.urlopen(url)</span><br><span class=\"line\">    <span class=\"comment\">#读取相应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"7\"></p>\n<p>从上图可以看出，访问的IP已经伪装成了106.46.136.112。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>urllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制</p>\n<h2 id=\"一-、为何要设置User-Agent\"><a href=\"#一-、为何要设置User-Agent\" class=\"headerlink\" title=\"(一)、为何要设置User Agent\"></a>(一)、为何要设置User Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p>\n<p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p>\n<p>Python允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。<br>","more":"</p>\n<h2 id=\"二-、常见的User-Agent\"><a href=\"#二-、常见的User-Agent\" class=\"headerlink\" title=\"(二)、常见的User Agent\"></a>(二)、常见的User Agent</h2><h3 id=\"1-Android\"><a href=\"#1-Android\" class=\"headerlink\" title=\"(1).Android\"></a>(1).Android</h3><ul>\n<li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>\n<li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>\n<li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>\n</ul>\n<h3 id=\"2-Firefox\"><a href=\"#2-Firefox\" class=\"headerlink\" title=\"(2).Firefox\"></a>(2).Firefox</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>\n<li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>\n</ul>\n<h3 id=\"3-Google-Chrome\"><a href=\"#3-Google-Chrome\" class=\"headerlink\" title=\"(3).Google Chrome\"></a>(3).Google Chrome</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>\n<li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>\n</ul>\n<h3 id=\"4-iOS\"><a href=\"#4-iOS\" class=\"headerlink\" title=\"(4).iOS\"></a>(4).iOS</h3><ul>\n<li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>\n<li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>\n</ul>\n<p>上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。</p>\n<h2 id=\"三-、设置User-Agent的方法\"><a href=\"#三-、设置User-Agent的方法\" class=\"headerlink\" title=\"(三)、设置User Agent的方法\"></a>(三)、设置User Agent的方法</h2><p>先看下urllib.request.Request()</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"1\"></p>\n<p>从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：</p>\n<ul>\n<li><p>1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；</p>\n</li>\n<li><p>2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。</p>\n</li>\n</ul>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    head = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#写入User Agent信息</span></span><br><span class=\"line\">    head[<span class=\"string\">'User-Agent'</span>] = <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url, headers=head)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"2\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#以CSDN为例，CSDN不更改User Agent是无法访问的</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"comment\">#传入headers</span></span><br><span class=\"line\">    req.add_header(<span class=\"string\">'User-Agent'</span>, <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果和上一个方法是一样的。</p>\n<h2 id=\"四-、IP代理的使用\"><a href=\"#四-、IP代理的使用\" class=\"headerlink\" title=\"(四)、IP代理的使用\"></a>(四)、IP代理的使用</h2><h3 id=\"1-为何使用IP代理\"><a href=\"#1-为何使用IP代理\" class=\"headerlink\" title=\"(1).为何使用IP代理\"></a>(1).为何使用IP代理</h3><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p>\n<h3 id=\"2-一般步骤说明\"><a href=\"#2-一般步骤说明\" class=\"headerlink\" title=\"(2).一般步骤说明\"></a>(2).一般步骤说明</h3><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p>\n<p><strong>(1)</strong> 调用urlib.request.ProxyHandler()，proxies参数为一个字典。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"4\"></p>\n<p><strong>(2)</strong> 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"5\"></p>\n<p><strong>(3)</strong> 安装Opener</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用容\"></p>\n<p>使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。</p>\n<h3 id=\"3-代理IP选取\"><a href=\"#3-代理IP选取\" class=\"headerlink\" title=\"(3).代理IP选取\"></a>(3).代理IP选取</h3><p>在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。</p>\n<p>URL：<a href=\"http://www.xicidaili.com/\" target=\"_blank\" rel=\"noopener\">http://www.xicidaili.com/</a></p>\n<p>注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。</p>\n<p>从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"6\"></p>\n<p>编写代码访问<a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">http://www.whatismyip.com.tw/</a>，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。</p>\n<h3 id=\"4-代码实例\"><a href=\"#4-代码实例\" class=\"headerlink\" title=\"(4).代码实例\"></a>(4).代码实例</h3><p>创建文件urllib_test10.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#访问网址</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.whatismyip.com.tw/'</span></span><br><span class=\"line\">    <span class=\"comment\">#这是代理IP</span></span><br><span class=\"line\">    proxy = &#123;<span class=\"string\">'http'</span>:<span class=\"string\">'106.46.136.112:808'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#创建ProxyHandler</span></span><br><span class=\"line\">    proxy_support = request.ProxyHandler(proxy)</span><br><span class=\"line\">    <span class=\"comment\">#创建Opener</span></span><br><span class=\"line\">    opener = request.build_opener(proxy_support)</span><br><span class=\"line\">    <span class=\"comment\">#添加User Angent</span></span><br><span class=\"line\">    opener.addheaders = [(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#安装OPener</span></span><br><span class=\"line\">    request.install_opener(opener)</span><br><span class=\"line\">    <span class=\"comment\">#使用自己安装好的Opener</span></span><br><span class=\"line\">    response = request.urlopen(url)</span><br><span class=\"line\">    <span class=\"comment\">#读取相应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"7\"></p>\n<p>从上图可以看出，访问的IP已经伪装成了106.46.136.112。</p>"},{"title":"从零开始学爬虫-05","date":"2018-02-27T17:17:37.000Z","_content":"\n## 为什么要使用Cookie\n\nCookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。   \n比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。   \n使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。\n\n![](http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!-- more -->\n\nhttp.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。\n\n**它们的关系：** CookieJar–派生–>FileCookieJar–派生–>MozillaCookieJar和LWPCookieJar\n\n**工作原理：** 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。\n\n同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。\n\n## 实战\n\n### (1).背景介绍\n\n在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。\n\n**URL:** [http://date.jobbole.com/](http://date.jobbole.com/)\n\n它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果登陆了账号，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。\n\n在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。\n\n### (2).过程分析\n\n在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，真正请求的url是\n\n [http://www.jobbole.com/wp-admin/admin-ajax.php](http://www.jobbole.com/wp-admin/admin-ajax.php)\n\nForm Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。\n\n在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，此刻真正请求的url是\n\n [http://date.jobbole.com/wp-admin/admin-ajax.php](http://date.jobbole.com/wp-admin/admin-ajax.php)\n\n同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是[http://date.jobbole.com/4128/](http://date.jobbole.com/4128/)，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析[http://date.jobbole.com/](http://date.jobbole.com/)返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。\n\n### (3).测试\n\n**1)将Cookie保存到变量中**\n\n首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印cookie信息\n    for item in cookie:\n        print('Name = %s' % item.name)\n        print('Value = %s' % item.value)\n```\n\n我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:\n\n![](http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2)保存Cookie到文件**\n\n在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n\n    #设置保存cookie的文件，同级目录下的cookie.txt\n    filename = 'cookie.txt'\n    #声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件\n    cookie = cookiejar.MozillaCookieJar(filename)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #保存cookie到文件\n    cookie.save(ignore_discard=True, ignore_expires=True)\n```\n\ncookie.save的参数说明：\n\n  * ignore_discard的意思是即使cookies将被丢弃也将它保存下来；\n\n  * ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。\n\n在这里，我们将这两个全部设置为True。\n\n运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。\n\n**3)从文件中获取Cookie并访问**\n\n我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #设置保存cookie的文件的文件名,相对路径,也就是同级目录下\n    filename = 'cookie.txt'\n    #创建MozillaCookieJar实例对象\n    cookie = cookiejar.MozillaCookieJar()\n    #从文件中读取cookie内容到变量\n    cookie.load(filename, ignore_discard=True, ignore_expires=True)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此用opener的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印信息\n    print(response.read().decode('utf-8'))\n```\n\n了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。\n\n### (4).编写代码\n\n我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。\n\n创建cookie_test.py文件，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\nfrom urllib import parse\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #登陆地址\n    login_url = 'http://www.jobbole.com/wp-admin/admin-ajax.php'    \n    #User-Agent信息                   \n    user_agent = r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'\n    #Headers信息\n    head = {'User-Agnet': user_agent, 'Connection': 'keep-alive'}\n    #登陆Form_Data信息\n    Login_Data = {}\n    Login_Data['action'] = 'user_login'\n    Login_Data['redirect_url'] = 'http://www.jobbole.com/'\n    Login_Data['remember_me'] = '0'         #是否一个月内自动登陆\n    Login_Data['user_login'] = '********'       #改成你自己的用户名\n    Login_Data['user_pass'] = '********'        #改成你自己的密码\n    #使用urlencode方法转换标准格式\n    logingpostdata = parse.urlencode(Login_Data).encode('utf-8')\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    cookie_support = request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(cookie_support)\n    #创建Request对象\n    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)\n\n    #面向对象地址\n    date_url = 'http://date.jobbole.com/wp-admin/admin-ajax.php'\n    #面向对象\n    Date_Data = {}\n    Date_Data['action'] = 'get_date_contact'\n    Date_Data['postId'] = '4128'\n    #使用urlencode方法转换标准格式\n    datepostdata = parse.urlencode(Date_Data).encode('utf-8')\n    req2 = request.Request(url=date_url, data=datepostdata, headers=head)\n    try:\n        #使用自己创建的opener的open方法\n        response1 = opener.open(req1)\n        response2 = opener.open(req2)\n        html = response2.read().decode('utf-8')\n        index = html.find('jb_contact_email')\n        #打印查询结果\n        print('联系邮箱:%s' % html[index+19:-2])\n\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError:%d\" % e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError:%s\" % e.reason)\n```\n\n\n### (5).运行结果如下\n\n![](http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n。\n","source":"_posts/从零开始学爬虫-05.md","raw":"---\ntitle: 从零开始学爬虫-05\ndate: 2018-02-28 01:17:37\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## 为什么要使用Cookie\n\nCookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。   \n比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。   \n使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。\n\n![](http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!-- more -->\n\nhttp.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。\n\n**它们的关系：** CookieJar–派生–>FileCookieJar–派生–>MozillaCookieJar和LWPCookieJar\n\n**工作原理：** 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。\n\n同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。\n\n## 实战\n\n### (1).背景介绍\n\n在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。\n\n**URL:** [http://date.jobbole.com/](http://date.jobbole.com/)\n\n它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果登陆了账号，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。\n\n在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。\n\n### (2).过程分析\n\n在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，真正请求的url是\n\n [http://www.jobbole.com/wp-admin/admin-ajax.php](http://www.jobbole.com/wp-admin/admin-ajax.php)\n\nForm Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。\n\n在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，此刻真正请求的url是\n\n [http://date.jobbole.com/wp-admin/admin-ajax.php](http://date.jobbole.com/wp-admin/admin-ajax.php)\n\n同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是[http://date.jobbole.com/4128/](http://date.jobbole.com/4128/)，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析[http://date.jobbole.com/](http://date.jobbole.com/)返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。\n\n### (3).测试\n\n**1)将Cookie保存到变量中**\n\n首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印cookie信息\n    for item in cookie:\n        print('Name = %s' % item.name)\n        print('Value = %s' % item.value)\n```\n\n我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:\n\n![](http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2)保存Cookie到文件**\n\n在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n\n    #设置保存cookie的文件，同级目录下的cookie.txt\n    filename = 'cookie.txt'\n    #声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件\n    cookie = cookiejar.MozillaCookieJar(filename)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #保存cookie到文件\n    cookie.save(ignore_discard=True, ignore_expires=True)\n```\n\ncookie.save的参数说明：\n\n  * ignore_discard的意思是即使cookies将被丢弃也将它保存下来；\n\n  * ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。\n\n在这里，我们将这两个全部设置为True。\n\n运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。\n\n**3)从文件中获取Cookie并访问**\n\n我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #设置保存cookie的文件的文件名,相对路径,也就是同级目录下\n    filename = 'cookie.txt'\n    #创建MozillaCookieJar实例对象\n    cookie = cookiejar.MozillaCookieJar()\n    #从文件中读取cookie内容到变量\n    cookie.load(filename, ignore_discard=True, ignore_expires=True)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此用opener的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印信息\n    print(response.read().decode('utf-8'))\n```\n\n了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。\n\n### (4).编写代码\n\n我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。\n\n创建cookie_test.py文件，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\nfrom urllib import parse\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #登陆地址\n    login_url = 'http://www.jobbole.com/wp-admin/admin-ajax.php'    \n    #User-Agent信息                   \n    user_agent = r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'\n    #Headers信息\n    head = {'User-Agnet': user_agent, 'Connection': 'keep-alive'}\n    #登陆Form_Data信息\n    Login_Data = {}\n    Login_Data['action'] = 'user_login'\n    Login_Data['redirect_url'] = 'http://www.jobbole.com/'\n    Login_Data['remember_me'] = '0'         #是否一个月内自动登陆\n    Login_Data['user_login'] = '********'       #改成你自己的用户名\n    Login_Data['user_pass'] = '********'        #改成你自己的密码\n    #使用urlencode方法转换标准格式\n    logingpostdata = parse.urlencode(Login_Data).encode('utf-8')\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    cookie_support = request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(cookie_support)\n    #创建Request对象\n    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)\n\n    #面向对象地址\n    date_url = 'http://date.jobbole.com/wp-admin/admin-ajax.php'\n    #面向对象\n    Date_Data = {}\n    Date_Data['action'] = 'get_date_contact'\n    Date_Data['postId'] = '4128'\n    #使用urlencode方法转换标准格式\n    datepostdata = parse.urlencode(Date_Data).encode('utf-8')\n    req2 = request.Request(url=date_url, data=datepostdata, headers=head)\n    try:\n        #使用自己创建的opener的open方法\n        response1 = opener.open(req1)\n        response2 = opener.open(req2)\n        html = response2.read().decode('utf-8')\n        index = html.find('jb_contact_email')\n        #打印查询结果\n        print('联系邮箱:%s' % html[index+19:-2])\n\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError:%d\" % e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError:%s\" % e.reason)\n```\n\n\n### (5).运行结果如下\n\n![](http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n。\n","slug":"从零开始学爬虫-05","published":1,"updated":"2018-02-27T17:22:51.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimse002lqkotle3zzmtp","content":"<h2 id=\"为什么要使用Cookie\"><a href=\"#为什么要使用Cookie\" class=\"headerlink\" title=\"为什么要使用Cookie\"></a>为什么要使用Cookie</h2><p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。<br>比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。<br>使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>http.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>\n<p><strong>它们的关系：</strong> CookieJar–派生–&gt;FileCookieJar–派生–&gt;MozillaCookieJar和LWPCookieJar</p>\n<p><strong>工作原理：</strong> 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。</p>\n<p>同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"(1).背景介绍\"></a>(1).背景介绍</h3><p>在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。</p>\n<p><strong>URL:</strong> <a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a></p>\n<p>它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>如果登陆了账号，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。</p>\n<p>在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。</p>\n<h3 id=\"2-过程分析\"><a href=\"#2-过程分析\" class=\"headerlink\" title=\"(2).过程分析\"></a>(2).过程分析</h3><p>在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，真正请求的url是</p>\n<p> <a href=\"http://www.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://www.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>Form Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。</p>\n<p>在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，此刻真正请求的url是</p>\n<p> <a href=\"http://date.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是<a href=\"http://date.jobbole.com/4128/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/4128/</a>，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析<a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a>返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"(3).测试\"></a>(3).测试</h3><p><strong>1)将Cookie保存到变量中</strong></p>\n<p>首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印cookie信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> cookie:</span><br><span class=\"line\">        print(<span class=\"string\">'Name = %s'</span> % item.name)</span><br><span class=\"line\">        print(<span class=\"string\">'Value = %s'</span> % item.value)</span><br></pre></td></tr></table></figure>\n<p>我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><strong>2)保存Cookie到文件</strong></p>\n<p>在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件，同级目录下的cookie.txt</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar(filename)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#保存cookie到文件</span></span><br><span class=\"line\">    cookie.save(ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>cookie.save的参数说明：</p>\n<ul>\n<li><p>ignore_discard的意思是即使cookies将被丢弃也将它保存下来；</p>\n</li>\n<li><p>ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。</p>\n</li>\n</ul>\n<p>在这里，我们将这两个全部设置为True。</p>\n<p>运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。</p>\n<p><strong>3)从文件中获取Cookie并访问</strong></p>\n<p>我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件的文件名,相对路径,也就是同级目录下</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建MozillaCookieJar实例对象</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#从文件中读取cookie内容到变量</span></span><br><span class=\"line\">    cookie.load(filename, ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此用opener的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。</p>\n<h3 id=\"4-编写代码\"><a href=\"#4-编写代码\" class=\"headerlink\" title=\"(4).编写代码\"></a>(4).编写代码</h3><p>我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。</p>\n<p>创建cookie_test.py文件，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#登陆地址</span></span><br><span class=\"line\">    login_url = <span class=\"string\">'http://www.jobbole.com/wp-admin/admin-ajax.php'</span>    </span><br><span class=\"line\">    <span class=\"comment\">#User-Agent信息                   </span></span><br><span class=\"line\">    user_agent = <span class=\"string\">r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'</span></span><br><span class=\"line\">    <span class=\"comment\">#Headers信息</span></span><br><span class=\"line\">    head = &#123;<span class=\"string\">'User-Agnet'</span>: user_agent, <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#登陆Form_Data信息</span></span><br><span class=\"line\">    Login_Data = &#123;&#125;</span><br><span class=\"line\">    Login_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'user_login'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'redirect_url'</span>] = <span class=\"string\">'http://www.jobbole.com/'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'remember_me'</span>] = <span class=\"string\">'0'</span>         <span class=\"comment\">#是否一个月内自动登陆</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_login'</span>] = <span class=\"string\">'********'</span>       <span class=\"comment\">#改成你自己的用户名</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_pass'</span>] = <span class=\"string\">'********'</span>        <span class=\"comment\">#改成你自己的密码</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    logingpostdata = parse.urlencode(Login_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    cookie_support = request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(cookie_support)</span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#面向对象地址</span></span><br><span class=\"line\">    date_url = <span class=\"string\">'http://date.jobbole.com/wp-admin/admin-ajax.php'</span></span><br><span class=\"line\">    <span class=\"comment\">#面向对象</span></span><br><span class=\"line\">    Date_Data = &#123;&#125;</span><br><span class=\"line\">    Date_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'get_date_contact'</span></span><br><span class=\"line\">    Date_Data[<span class=\"string\">'postId'</span>] = <span class=\"string\">'4128'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    datepostdata = parse.urlencode(Date_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    req2 = request.Request(url=date_url, data=datepostdata, headers=head)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#使用自己创建的opener的open方法</span></span><br><span class=\"line\">        response1 = opener.open(req1)</span><br><span class=\"line\">        response2 = opener.open(req2)</span><br><span class=\"line\">        html = response2.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        index = html.find(<span class=\"string\">'jb_contact_email'</span>)</span><br><span class=\"line\">        <span class=\"comment\">#打印查询结果</span></span><br><span class=\"line\">        print(<span class=\"string\">'联系邮箱:%s'</span> % html[index+<span class=\"number\">19</span>:<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError:%d\"</span> % e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError:%s\"</span> % e.reason)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-运行结果如下\"><a href=\"#5-运行结果如下\" class=\"headerlink\" title=\"(5).运行结果如下\"></a>(5).运行结果如下</h3><p><img src=\"http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要使用Cookie\"><a href=\"#为什么要使用Cookie\" class=\"headerlink\" title=\"为什么要使用Cookie\"></a>为什么要使用Cookie</h2><p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。<br>比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。<br>使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>","more":"</p>\n<p>http.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>\n<p><strong>它们的关系：</strong> CookieJar–派生–&gt;FileCookieJar–派生–&gt;MozillaCookieJar和LWPCookieJar</p>\n<p><strong>工作原理：</strong> 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。</p>\n<p>同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"(1).背景介绍\"></a>(1).背景介绍</h3><p>在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。</p>\n<p><strong>URL:</strong> <a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a></p>\n<p>它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>如果登陆了账号，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。</p>\n<p>在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。</p>\n<h3 id=\"2-过程分析\"><a href=\"#2-过程分析\" class=\"headerlink\" title=\"(2).过程分析\"></a>(2).过程分析</h3><p>在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，真正请求的url是</p>\n<p> <a href=\"http://www.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://www.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>Form Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。</p>\n<p>在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，此刻真正请求的url是</p>\n<p> <a href=\"http://date.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是<a href=\"http://date.jobbole.com/4128/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/4128/</a>，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析<a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a>返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"(3).测试\"></a>(3).测试</h3><p><strong>1)将Cookie保存到变量中</strong></p>\n<p>首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印cookie信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> cookie:</span><br><span class=\"line\">        print(<span class=\"string\">'Name = %s'</span> % item.name)</span><br><span class=\"line\">        print(<span class=\"string\">'Value = %s'</span> % item.value)</span><br></pre></td></tr></table></figure>\n<p>我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><strong>2)保存Cookie到文件</strong></p>\n<p>在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件，同级目录下的cookie.txt</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar(filename)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#保存cookie到文件</span></span><br><span class=\"line\">    cookie.save(ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>cookie.save的参数说明：</p>\n<ul>\n<li><p>ignore_discard的意思是即使cookies将被丢弃也将它保存下来；</p>\n</li>\n<li><p>ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。</p>\n</li>\n</ul>\n<p>在这里，我们将这两个全部设置为True。</p>\n<p>运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。</p>\n<p><strong>3)从文件中获取Cookie并访问</strong></p>\n<p>我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件的文件名,相对路径,也就是同级目录下</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建MozillaCookieJar实例对象</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#从文件中读取cookie内容到变量</span></span><br><span class=\"line\">    cookie.load(filename, ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此用opener的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。</p>\n<h3 id=\"4-编写代码\"><a href=\"#4-编写代码\" class=\"headerlink\" title=\"(4).编写代码\"></a>(4).编写代码</h3><p>我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。</p>\n<p>创建cookie_test.py文件，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#登陆地址</span></span><br><span class=\"line\">    login_url = <span class=\"string\">'http://www.jobbole.com/wp-admin/admin-ajax.php'</span>    </span><br><span class=\"line\">    <span class=\"comment\">#User-Agent信息                   </span></span><br><span class=\"line\">    user_agent = <span class=\"string\">r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'</span></span><br><span class=\"line\">    <span class=\"comment\">#Headers信息</span></span><br><span class=\"line\">    head = &#123;<span class=\"string\">'User-Agnet'</span>: user_agent, <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#登陆Form_Data信息</span></span><br><span class=\"line\">    Login_Data = &#123;&#125;</span><br><span class=\"line\">    Login_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'user_login'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'redirect_url'</span>] = <span class=\"string\">'http://www.jobbole.com/'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'remember_me'</span>] = <span class=\"string\">'0'</span>         <span class=\"comment\">#是否一个月内自动登陆</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_login'</span>] = <span class=\"string\">'********'</span>       <span class=\"comment\">#改成你自己的用户名</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_pass'</span>] = <span class=\"string\">'********'</span>        <span class=\"comment\">#改成你自己的密码</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    logingpostdata = parse.urlencode(Login_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    cookie_support = request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(cookie_support)</span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#面向对象地址</span></span><br><span class=\"line\">    date_url = <span class=\"string\">'http://date.jobbole.com/wp-admin/admin-ajax.php'</span></span><br><span class=\"line\">    <span class=\"comment\">#面向对象</span></span><br><span class=\"line\">    Date_Data = &#123;&#125;</span><br><span class=\"line\">    Date_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'get_date_contact'</span></span><br><span class=\"line\">    Date_Data[<span class=\"string\">'postId'</span>] = <span class=\"string\">'4128'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    datepostdata = parse.urlencode(Date_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    req2 = request.Request(url=date_url, data=datepostdata, headers=head)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#使用自己创建的opener的open方法</span></span><br><span class=\"line\">        response1 = opener.open(req1)</span><br><span class=\"line\">        response2 = opener.open(req2)</span><br><span class=\"line\">        html = response2.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        index = html.find(<span class=\"string\">'jb_contact_email'</span>)</span><br><span class=\"line\">        <span class=\"comment\">#打印查询结果</span></span><br><span class=\"line\">        print(<span class=\"string\">'联系邮箱:%s'</span> % html[index+<span class=\"number\">19</span>:<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError:%d\"</span> % e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError:%s\"</span> % e.reason)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-运行结果如下\"><a href=\"#5-运行结果如下\" class=\"headerlink\" title=\"(5).运行结果如下\"></a>(5).运行结果如下</h3><p><img src=\"http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>。</p>"},{"title":"简谈爬虫攻与防","date":"2018-02-27T04:44:38.000Z","_content":"\n\n## 封锁间隔时间破解\n\nScrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。\n\n<!--more-->\n\n## 封锁Cookies\n众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置\n```python\n# Disable cookies (enabled by default)\nCOOKIES_ENABLED = False\n```\n\n## 封锁user-agent和proxy破解\nuser-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个**UA池**，每次请求时随机挑选一个进行请求。\n\n在middlewares.py同级目录下创建UAResource.py,文件内容如下：\n\n```python\n#-*- coding: utf-8 -*-\n\nUserAgents = [\n  \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\",\n  \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\",\n  \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\",\n  \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\",\n  \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n  \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n  \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\",\n  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n  \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\",\n]\n\nProxies = [\n'http://122.114.31.177:808',\n'http://1.2.3.4:80',\n]\n```\n\n修改middlewares.py，添加内容为\n```python\nfrom .UAResource import UserAgents\nfrom .UAResource import Proxies\nimport random\n\nclass RandomProxy(object):\n    def process_request(self, request, spider):\n        proxy = random.choice(Proxies)\n        request.meta['proxy'] = proxy\n\nclass RandomUserAgent(object):\n    \"\"\"docstring for RandomUerAgent.\"\"\"\n    def process_request(self, request, spider):\n        ua = random.choice(UserAgents)\n        request.headers.setdefault('User-Agent', ua)\n```\n\n最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小\n```python\nDOWNLOADER_MIDDLEWARES = {\n   # 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,\n   'meijutt.middlewares.RandomProxy': 10,\n   'meijutt.middlewares.RandomUserAgent': 30,\n\n   # 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件\n   'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None,\n}\n\n```\n\n免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用\n```python\n'meijutt.middlewares.RandomProxy': None,\n```\n## 补充\n### Referer\n当浏览器发送请求时，一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。\n\n### authorization:\n有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。\n","source":"_posts/简谈爬虫攻与防.md","raw":"---\ntitle: 简谈爬虫攻与防\ndate: 2018-02-27 12:44:38\ntags:\n  - Scrapy\n  - Spider\ncategories:\n  - Spider\n  - Scrapy\n---\n\n\n## 封锁间隔时间破解\n\nScrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。\n\n<!--more-->\n\n## 封锁Cookies\n众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置\n```python\n# Disable cookies (enabled by default)\nCOOKIES_ENABLED = False\n```\n\n## 封锁user-agent和proxy破解\nuser-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个**UA池**，每次请求时随机挑选一个进行请求。\n\n在middlewares.py同级目录下创建UAResource.py,文件内容如下：\n\n```python\n#-*- coding: utf-8 -*-\n\nUserAgents = [\n  \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\",\n  \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\",\n  \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\",\n  \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\",\n  \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n  \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n  \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\",\n  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n  \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\",\n]\n\nProxies = [\n'http://122.114.31.177:808',\n'http://1.2.3.4:80',\n]\n```\n\n修改middlewares.py，添加内容为\n```python\nfrom .UAResource import UserAgents\nfrom .UAResource import Proxies\nimport random\n\nclass RandomProxy(object):\n    def process_request(self, request, spider):\n        proxy = random.choice(Proxies)\n        request.meta['proxy'] = proxy\n\nclass RandomUserAgent(object):\n    \"\"\"docstring for RandomUerAgent.\"\"\"\n    def process_request(self, request, spider):\n        ua = random.choice(UserAgents)\n        request.headers.setdefault('User-Agent', ua)\n```\n\n最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小\n```python\nDOWNLOADER_MIDDLEWARES = {\n   # 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,\n   'meijutt.middlewares.RandomProxy': 10,\n   'meijutt.middlewares.RandomUserAgent': 30,\n\n   # 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件\n   'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None,\n}\n\n```\n\n免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用\n```python\n'meijutt.middlewares.RandomProxy': None,\n```\n## 补充\n### Referer\n当浏览器发送请求时，一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。\n\n### authorization:\n有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。\n","slug":"简谈爬虫攻与防","published":1,"updated":"2018-03-03T17:44:01.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimsh002pqkothbaifhil","content":"<h2 id=\"封锁间隔时间破解\"><a href=\"#封锁间隔时间破解\" class=\"headerlink\" title=\"封锁间隔时间破解\"></a>封锁间隔时间破解</h2><p>Scrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。</p>\n<a id=\"more\"></a>\n<h2 id=\"封锁Cookies\"><a href=\"#封锁Cookies\" class=\"headerlink\" title=\"封锁Cookies\"></a>封锁Cookies</h2><p>众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\">COOKIES_ENABLED = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封锁user-agent和proxy破解\"><a href=\"#封锁user-agent和proxy破解\" class=\"headerlink\" title=\"封锁user-agent和proxy破解\"></a>封锁user-agent和proxy破解</h2><p>user-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个<strong>UA池</strong>，每次请求时随机挑选一个进行请求。</p>\n<p>在middlewares.py同级目录下创建UAResource.py,文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">UserAgents = [</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">Proxies = [</span><br><span class=\"line\"><span class=\"string\">'http://122.114.31.177:808'</span>,</span><br><span class=\"line\"><span class=\"string\">'http://1.2.3.4:80'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改middlewares.py，添加内容为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> UserAgents</span><br><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> Proxies</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomProxy</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        proxy = random.choice(Proxies)</span><br><span class=\"line\">        request.meta[<span class=\"string\">'proxy'</span>] = proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomUserAgent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for RandomUerAgent.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        ua = random.choice(UserAgents)</span><br><span class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</span><br></pre></td></tr></table></figure></p>\n<p>最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">   <span class=\"comment\"># 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,</span></span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomUserAgent'</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件</span></span><br><span class=\"line\">   <span class=\"string\">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"keyword\">None</span>,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>当浏览器发送请求时，一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。</p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization:\"></a>authorization:</h3><p>有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"封锁间隔时间破解\"><a href=\"#封锁间隔时间破解\" class=\"headerlink\" title=\"封锁间隔时间破解\"></a>封锁间隔时间破解</h2><p>Scrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。</p>","more":"<h2 id=\"封锁Cookies\"><a href=\"#封锁Cookies\" class=\"headerlink\" title=\"封锁Cookies\"></a>封锁Cookies</h2><p>众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\">COOKIES_ENABLED = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封锁user-agent和proxy破解\"><a href=\"#封锁user-agent和proxy破解\" class=\"headerlink\" title=\"封锁user-agent和proxy破解\"></a>封锁user-agent和proxy破解</h2><p>user-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个<strong>UA池</strong>，每次请求时随机挑选一个进行请求。</p>\n<p>在middlewares.py同级目录下创建UAResource.py,文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">UserAgents = [</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">Proxies = [</span><br><span class=\"line\"><span class=\"string\">'http://122.114.31.177:808'</span>,</span><br><span class=\"line\"><span class=\"string\">'http://1.2.3.4:80'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改middlewares.py，添加内容为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> UserAgents</span><br><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> Proxies</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomProxy</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        proxy = random.choice(Proxies)</span><br><span class=\"line\">        request.meta[<span class=\"string\">'proxy'</span>] = proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomUserAgent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for RandomUerAgent.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        ua = random.choice(UserAgents)</span><br><span class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</span><br></pre></td></tr></table></figure></p>\n<p>最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">   <span class=\"comment\"># 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,</span></span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomUserAgent'</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件</span></span><br><span class=\"line\">   <span class=\"string\">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"keyword\">None</span>,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>当浏览器发送请求时，一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。</p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization:\"></a>authorization:</h3><p>有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。</p>"},{"title":"进程、线程、协程","date":"2018-03-03T17:20:18.000Z","_content":"\n## 进程\n\n电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。\n\n进程就是`一个程序在一个数据集上的一次动态执行过程`。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由`程序`，`数据集`，`进程控制块`三部分组成。`程序`用来描述进程哪些功能以及如何完成；`数据集`是程序执行过程中所使用的资源；`进程控制块`用来保存程序运行的状态.\n\n`进程是系统进行资源分配和调度的一个独立单位`。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n\n<!-- more -->\n## 线程\n\n在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中`线程`的概念便被引进了。线程，是进程的一部分，`一个没有线程的进程可以被看作是单线程的`。线程有时又被称为`轻权进程`或`轻量级进程`，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n\n**进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。**\n\n**进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态**\n\n线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的`独立线程运行的限制`,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。\n\n## 进程、线程的关系\n\n1. 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n2. 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n3. CPU分配给线程，即真正在CPU上运行的是线程\n4. 线程是最小的执行单元，进程是最小的资源管理单元\n\n## 协程Coroutine\n\n协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n\n`进程`拥有自己独立的堆和栈，既不共享堆，亦不共享栈，`进程由操作系统调度`。\n`线程`拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。\n协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。\n进程和其他两个的区别还是很明显的。\n`协程和线程的区别是`：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，`协程也失去了标准线程使用多CPU的能力。`\n\n举个例子：\n假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。\n\n人们通常将协程和子程序（函数）比较着理解。\n子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。\n协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：\n\n1. 第一步，协程A开始执行。\n2. 第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。\n3. 第三步，（一段时间后）协程B交还执行权。\n4. 第四步，协程A恢复执行。\n\n协程的特点在于是一个线程执行，与多线程相比，其优势体现在：\n\n协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。\nTips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n## 总结\n\n### 进程与线程比较\n\n线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:\n1. 地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间\n2. 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源\n3. 线程是处理器调度的基本单位,但进程不是\n4. 二者均可并发执行\n\n5. 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制\n\n### 协程与线程进行比较\n\n1. 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。\n2. 线程进程都是同步机制，而协程则是异步\n3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\n","source":"_posts/进程、线程、协程.md","raw":"---\ntitle: 进程、线程、协程\ndate: 2018-03-04 01:20:18\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n\n## 进程\n\n电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。\n\n进程就是`一个程序在一个数据集上的一次动态执行过程`。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由`程序`，`数据集`，`进程控制块`三部分组成。`程序`用来描述进程哪些功能以及如何完成；`数据集`是程序执行过程中所使用的资源；`进程控制块`用来保存程序运行的状态.\n\n`进程是系统进行资源分配和调度的一个独立单位`。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n\n<!-- more -->\n## 线程\n\n在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中`线程`的概念便被引进了。线程，是进程的一部分，`一个没有线程的进程可以被看作是单线程的`。线程有时又被称为`轻权进程`或`轻量级进程`，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n\n**进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。**\n\n**进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态**\n\n线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的`独立线程运行的限制`,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。\n\n## 进程、线程的关系\n\n1. 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n2. 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n3. CPU分配给线程，即真正在CPU上运行的是线程\n4. 线程是最小的执行单元，进程是最小的资源管理单元\n\n## 协程Coroutine\n\n协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n\n`进程`拥有自己独立的堆和栈，既不共享堆，亦不共享栈，`进程由操作系统调度`。\n`线程`拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。\n协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。\n进程和其他两个的区别还是很明显的。\n`协程和线程的区别是`：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，`协程也失去了标准线程使用多CPU的能力。`\n\n举个例子：\n假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。\n\n人们通常将协程和子程序（函数）比较着理解。\n子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。\n协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：\n\n1. 第一步，协程A开始执行。\n2. 第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。\n3. 第三步，（一段时间后）协程B交还执行权。\n4. 第四步，协程A恢复执行。\n\n协程的特点在于是一个线程执行，与多线程相比，其优势体现在：\n\n协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。\nTips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n## 总结\n\n### 进程与线程比较\n\n线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:\n1. 地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间\n2. 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源\n3. 线程是处理器调度的基本单位,但进程不是\n4. 二者均可并发执行\n\n5. 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制\n\n### 协程与线程进行比较\n\n1. 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。\n2. 线程进程都是同步机制，而协程则是异步\n3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\n","slug":"进程、线程、协程","published":1,"updated":"2018-03-03T19:00:47.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeehimsi002rqkot073kic5t","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。</p>\n<p>进程就是<code>一个程序在一个数据集上的一次动态执行过程</code>。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由<code>程序</code>，<code>数据集</code>，<code>进程控制块</code>三部分组成。<code>程序</code>用来描述进程哪些功能以及如何完成；<code>数据集</code>是程序执行过程中所使用的资源；<code>进程控制块</code>用来保存程序运行的状态.</p>\n<p><code>进程是系统进行资源分配和调度的一个独立单位</code>。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p>\n<a id=\"more\"></a>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中<code>线程</code>的概念便被引进了。线程，是进程的一部分，<code>一个没有线程的进程可以被看作是单线程的</code>。线程有时又被称为<code>轻权进程</code>或<code>轻量级进程</code>，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p>\n<p><strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</strong></p>\n<p><strong>进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态</strong></p>\n<p>线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的<code>独立线程运行的限制</code>,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</p>\n<h2 id=\"进程、线程的关系\"><a href=\"#进程、线程的关系\" class=\"headerlink\" title=\"进程、线程的关系\"></a>进程、线程的关系</h2><ol>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</li>\n<li>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</li>\n<li>CPU分配给线程，即真正在CPU上运行的是线程</li>\n<li>线程是最小的执行单元，进程是最小的资源管理单元</li>\n</ol>\n<h2 id=\"协程Coroutine\"><a href=\"#协程Coroutine\" class=\"headerlink\" title=\"协程Coroutine\"></a>协程Coroutine</h2><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>\n<p><code>进程</code>拥有自己独立的堆和栈，既不共享堆，亦不共享栈，<code>进程由操作系统调度</code>。<br><code>线程</code>拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。<br>协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。<br>进程和其他两个的区别还是很明显的。<br><code>协程和线程的区别是</code>：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，<code>协程也失去了标准线程使用多CPU的能力。</code></p>\n<p>举个例子：<br>假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 <em> 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 </em> 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。</p>\n<p>人们通常将协程和子程序（函数）比较着理解。<br>子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。<br>协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：</p>\n<ol>\n<li>第一步，协程A开始执行。</li>\n<li>第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。</li>\n<li>第三步，（一段时间后）协程B交还执行权。</li>\n<li>第四步，协程A恢复执行。</li>\n</ol>\n<p>协程的特点在于是一个线程执行，与多线程相比，其优势体现在：</p>\n<p>协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。<br>协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。<br>Tips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"进程与线程比较\"><a href=\"#进程与线程比较\" class=\"headerlink\" title=\"进程与线程比较\"></a>进程与线程比较</h3><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:</p>\n<ol>\n<li>地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li>\n<li>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li>\n<li>线程是处理器调度的基本单位,但进程不是</li>\n<li><p>二者均可并发执行</p>\n</li>\n<li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</p>\n</li>\n</ol>\n<h3 id=\"协程与线程进行比较\"><a href=\"#协程与线程进行比较\" class=\"headerlink\" title=\"协程与线程进行比较\"></a>协程与线程进行比较</h3><ol>\n<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>\n<li>线程进程都是同步机制，而协程则是异步</li>\n<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。</p>\n<p>进程就是<code>一个程序在一个数据集上的一次动态执行过程</code>。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由<code>程序</code>，<code>数据集</code>，<code>进程控制块</code>三部分组成。<code>程序</code>用来描述进程哪些功能以及如何完成；<code>数据集</code>是程序执行过程中所使用的资源；<code>进程控制块</code>用来保存程序运行的状态.</p>\n<p><code>进程是系统进行资源分配和调度的一个独立单位</code>。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p>","more":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中<code>线程</code>的概念便被引进了。线程，是进程的一部分，<code>一个没有线程的进程可以被看作是单线程的</code>。线程有时又被称为<code>轻权进程</code>或<code>轻量级进程</code>，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p>\n<p><strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</strong></p>\n<p><strong>进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态</strong></p>\n<p>线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的<code>独立线程运行的限制</code>,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</p>\n<h2 id=\"进程、线程的关系\"><a href=\"#进程、线程的关系\" class=\"headerlink\" title=\"进程、线程的关系\"></a>进程、线程的关系</h2><ol>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</li>\n<li>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</li>\n<li>CPU分配给线程，即真正在CPU上运行的是线程</li>\n<li>线程是最小的执行单元，进程是最小的资源管理单元</li>\n</ol>\n<h2 id=\"协程Coroutine\"><a href=\"#协程Coroutine\" class=\"headerlink\" title=\"协程Coroutine\"></a>协程Coroutine</h2><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>\n<p><code>进程</code>拥有自己独立的堆和栈，既不共享堆，亦不共享栈，<code>进程由操作系统调度</code>。<br><code>线程</code>拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。<br>协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。<br>进程和其他两个的区别还是很明显的。<br><code>协程和线程的区别是</code>：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，<code>协程也失去了标准线程使用多CPU的能力。</code></p>\n<p>举个例子：<br>假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 <em> 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 </em> 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。</p>\n<p>人们通常将协程和子程序（函数）比较着理解。<br>子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。<br>协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：</p>\n<ol>\n<li>第一步，协程A开始执行。</li>\n<li>第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。</li>\n<li>第三步，（一段时间后）协程B交还执行权。</li>\n<li>第四步，协程A恢复执行。</li>\n</ol>\n<p>协程的特点在于是一个线程执行，与多线程相比，其优势体现在：</p>\n<p>协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。<br>协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。<br>Tips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"进程与线程比较\"><a href=\"#进程与线程比较\" class=\"headerlink\" title=\"进程与线程比较\"></a>进程与线程比较</h3><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:</p>\n<ol>\n<li>地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li>\n<li>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li>\n<li>线程是处理器调度的基本单位,但进程不是</li>\n<li><p>二者均可并发执行</p>\n</li>\n<li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</p>\n</li>\n</ol>\n<h3 id=\"协程与线程进行比较\"><a href=\"#协程与线程进行比较\" class=\"headerlink\" title=\"协程与线程进行比较\"></a>协程与线程进行比较</h3><ol>\n<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>\n<li>线程进程都是同步机制，而协程则是异步</li>\n<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjeehimqb0000qkot6riik8zf","category_id":"cjeehimqn0004qkotqkpnt0fw","_id":"cjeehimr6000dqkot6y3n8dod"},{"post_id":"cjeehimqh0002qkotjbhaebwx","category_id":"cjeehimr00009qkotf8ym323u","_id":"cjeehimrd000lqkotl4buy905"},{"post_id":"cjeehimqu0006qkotk4j295y6","category_id":"cjeehimr00009qkotf8ym323u","_id":"cjeehimrg000sqkotxrs53pxz"},{"post_id":"cjeehimqx0007qkote0e88iku","category_id":"cjeehimr00009qkotf8ym323u","_id":"cjeehimrj000yqkotr5k5qeff"},{"post_id":"cjeehimqz0008qkotm3uzdpyl","category_id":"cjeehimrg000rqkothpjwvgl0","_id":"cjeehimro0015qkot9a1evwn3"},{"post_id":"cjeehimr4000cqkotod1aflb0","category_id":"cjeehimro0016qkot0mlfe4an","_id":"cjeehimrv001jqkotqp8cbjq5"},{"post_id":"cjeehimr9000gqkoto6jcg269","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehims0001sqkotg9scj9sx"},{"post_id":"cjeehimrb000iqkot56tmev4x","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehims3001zqkotmobo0l13"},{"post_id":"cjeehims2001wqkotg5xj9rdo","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehims70027qkotjmolmle4"},{"post_id":"cjeehimr2000bqkot1c4bfl6d","category_id":"cjeehimrk000zqkottsdbjh8n","_id":"cjeehimsm0032qkotnhjh7d0m"},{"post_id":"cjeehimr2000bqkot1c4bfl6d","category_id":"cjeehimsk002uqkot1u4utz0u","_id":"cjeehimsn0034qkotiyx9bt7e"},{"post_id":"cjeehimrp0018qkota6e1w8qk","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsn0037qkot3i82j3tz"},{"post_id":"cjeehimrr001aqkotqvk32t02","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsp003bqkotccsq1690"},{"post_id":"cjeehimrt001gqkotontpn03b","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsp003hqkottqd8gjn2"},{"post_id":"cjeehimrt001gqkotontpn03b","category_id":"cjeehimso003aqkotsaogh9lo","_id":"cjeehimsq003kqkotwp2c1ita"},{"post_id":"cjeehimru001iqkotpqcg0o26","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsq003nqkot2dyr3e6z"},{"post_id":"cjeehimru001iqkotpqcg0o26","category_id":"cjeehimsp003eqkot9rbpbjtr","_id":"cjeehimsq003qqkottds3mzbm"},{"post_id":"cjeehimrw001nqkot0e3fhn8d","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsr003sqkotrkw786e2"},{"post_id":"cjeehimrw001nqkot0e3fhn8d","category_id":"cjeehimsq003jqkottqslj7ii","_id":"cjeehimsr003vqkotae7atqpb"},{"post_id":"cjeehimry001pqkots53rn80w","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsr003xqkotzdt2l8sy"},{"post_id":"cjeehimry001pqkots53rn80w","category_id":"cjeehimsq003oqkotht9o13zf","_id":"cjeehimss0040qkotzpryiu0g"},{"post_id":"cjeehimre000nqkotv5493uf3","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimss0042qkotl3b9u4it"},{"post_id":"cjeehimre000nqkotv5493uf3","category_id":"cjeehimsr003tqkotb8tkhoox","_id":"cjeehimss0045qkotju9nfbj1"},{"post_id":"cjeehims40021qkot4qjvwjdg","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimss0046qkotv62pygrg"},{"post_id":"cjeehims40021qkot4qjvwjdg","category_id":"cjeehimsr003yqkot7gl4ic3c","_id":"cjeehimst0048qkot0y5rascw"},{"post_id":"cjeehimrf000pqkoth2tsyyqq","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimst0049qkotggofa1n3"},{"post_id":"cjeehimrf000pqkoth2tsyyqq","category_id":"cjeehimss0044qkotk6jdtsd3","_id":"cjeehimst004bqkotsaoxvko9"},{"post_id":"cjeehims50023qkotrzv65eww","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimst004cqkotxudf8z56"},{"post_id":"cjeehims50023qkotrzv65eww","category_id":"cjeehimst0047qkotcy95qgt8","_id":"cjeehimsu004eqkotxcl2fxnu"},{"post_id":"cjeehims60026qkotjdrone8e","category_id":"cjeehimst004aqkotx2bxy746","_id":"cjeehimsu004fqkotx0pv2vd4"},{"post_id":"cjeehimrh000uqkotf92rya20","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimsv004hqkotouv50rbc"},{"post_id":"cjeehimrh000uqkotf92rya20","category_id":"cjeehimst004dqkotb3lvbr19","_id":"cjeehimsw004jqkotvwal5691"},{"post_id":"cjeehims8002aqkotvdkc920f","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimsw004lqkot75xsqolc"},{"post_id":"cjeehims8002aqkotvdkc920f","category_id":"cjeehimsu004gqkotgtbqtd1p","_id":"cjeehimsx004mqkotsbkmyuge"},{"post_id":"cjeehims9002dqkotnlvyiy7g","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimsx004nqkot3niongd6"},{"post_id":"cjeehims9002dqkotnlvyiy7g","category_id":"cjeehimsu004gqkotgtbqtd1p","_id":"cjeehimsx004pqkot83ntsa8z"},{"post_id":"cjeehimri000wqkotzucfjtsc","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimsy004rqkotqh52fzlo"},{"post_id":"cjeehimri000wqkotzucfjtsc","category_id":"cjeehimsw004kqkot9z4tnmr9","_id":"cjeehimsy004sqkotybkmgdrj"},{"post_id":"cjeehimsb002gqkotukic3api","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimsz004uqkotjpd9iajc"},{"post_id":"cjeehimsb002gqkotukic3api","category_id":"cjeehimsu004gqkotgtbqtd1p","_id":"cjeehimsz004vqkotmyfxlyx7"},{"post_id":"cjeehimsc002jqkot78wsgha1","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimsz004wqkotneaqocqv"},{"post_id":"cjeehimsc002jqkot78wsgha1","category_id":"cjeehimsu004gqkotgtbqtd1p","_id":"cjeehimt0004yqkotpymnbwjk"},{"post_id":"cjeehimrl0011qkotltwghgzr","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimt00050qkotehomeh42"},{"post_id":"cjeehimrl0011qkotltwghgzr","category_id":"cjeehimsy004tqkotraipvh1j","_id":"cjeehimt00051qkottrb9mby9"},{"post_id":"cjeehimse002lqkotle3zzmtp","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimt00052qkot30vtu37u"},{"post_id":"cjeehimse002lqkotle3zzmtp","category_id":"cjeehimsu004gqkotgtbqtd1p","_id":"cjeehimt10054qkot316xeo4x"},{"post_id":"cjeehimsh002pqkothbaifhil","category_id":"cjeehims60025qkothyt5sdik","_id":"cjeehimt10055qkotdv5pexnu"},{"post_id":"cjeehimsh002pqkothbaifhil","category_id":"cjeehimt0004zqkothwbsf55v","_id":"cjeehimt30057qkotkrwxu94q"},{"post_id":"cjeehimrm0013qkotsy55j7xe","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimt30059qkotedp9ezzj"},{"post_id":"cjeehimrm0013qkotsy55j7xe","category_id":"cjeehimt10053qkotyon6wp2v","_id":"cjeehimt4005aqkotz60wbmsg"},{"post_id":"cjeehimsi002rqkot073kic5t","category_id":"cjeehimrk000zqkottsdbjh8n","_id":"cjeehimt4005bqkottexlojae"},{"post_id":"cjeehimsi002rqkot073kic5t","category_id":"cjeehimsk002uqkot1u4utz0u","_id":"cjeehimt4005cqkot3lw034v2"},{"post_id":"cjeehimrs001cqkotfyoqb6bg","category_id":"cjeehimrt001dqkot5gvhpyho","_id":"cjeehimt5005dqkot9kruz6sv"},{"post_id":"cjeehimrs001cqkotfyoqb6bg","category_id":"cjeehimt30058qkotdjdortcs","_id":"cjeehimt5005eqkotiohtpbe9"}],"PostTag":[{"post_id":"cjeehimqb0000qkot6riik8zf","tag_id":"cjeehimqt0005qkotgkjzzkp5","_id":"cjeehimrb000hqkotggh4jiof"},{"post_id":"cjeehimqb0000qkot6riik8zf","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrc000jqkotm5xvu1o1"},{"post_id":"cjeehimr9000gqkoto6jcg269","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrf000oqkot9jw0u6lh"},{"post_id":"cjeehimqh0002qkotjbhaebwx","tag_id":"cjeehimr7000fqkot6jsf65te","_id":"cjeehimrg000qqkot71prpneq"},{"post_id":"cjeehimrb000iqkot56tmev4x","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimri000vqkotpjyxhukm"},{"post_id":"cjeehimre000nqkotv5493uf3","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrj000xqkotgkj0ea0h"},{"post_id":"cjeehimqu0006qkotk4j295y6","tag_id":"cjeehimr7000fqkot6jsf65te","_id":"cjeehimrm0012qkotah7boab5"},{"post_id":"cjeehimrf000pqkoth2tsyyqq","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimro0014qkotu9cuvjkp"},{"post_id":"cjeehimri000wqkotzucfjtsc","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrq0019qkota0j2jdwd"},{"post_id":"cjeehimrl0011qkotltwghgzr","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrs001bqkotnn52jgi0"},{"post_id":"cjeehimqx0007qkote0e88iku","tag_id":"cjeehimr7000fqkot6jsf65te","_id":"cjeehimrt001fqkotma5e1c0j"},{"post_id":"cjeehimqx0007qkote0e88iku","tag_id":"cjeehimrk0010qkotfc22zm5b","_id":"cjeehimru001hqkotkar2xj6m"},{"post_id":"cjeehimrm0013qkotsy55j7xe","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrv001kqkot07pwocas"},{"post_id":"cjeehimrp0018qkota6e1w8qk","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrx001oqkotqcokojkr"},{"post_id":"cjeehimrr001aqkotqvk32t02","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimrz001qqkot3yvci033"},{"post_id":"cjeehimqz0008qkotm3uzdpyl","tag_id":"cjeehimrp0017qkotafiqtaeu","_id":"cjeehims2001vqkotb7ilrz4d"},{"post_id":"cjeehimrs001cqkotfyoqb6bg","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehims3001xqkotu70065tm"},{"post_id":"cjeehimrt001gqkotontpn03b","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehims40022qkotgg0mlukc"},{"post_id":"cjeehimr2000bqkot1c4bfl6d","tag_id":"cjeehimrt001eqkot2mq49xmn","_id":"cjeehims60024qkot06sjcl7n"},{"post_id":"cjeehimru001iqkotpqcg0o26","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehims70029qkotra06x7qb"},{"post_id":"cjeehimrw001nqkot0e3fhn8d","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehims8002bqkotfm6ociqx"},{"post_id":"cjeehimr4000cqkotod1aflb0","tag_id":"cjeehimrw001mqkot6dhje6qr","_id":"cjeehimsa002eqkot4bkw87kn"},{"post_id":"cjeehimry001pqkots53rn80w","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsc002hqkotyk3eg23w"},{"post_id":"cjeehims2001wqkotg5xj9rdo","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsd002kqkots6hyqvug"},{"post_id":"cjeehims40021qkot4qjvwjdg","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsg002nqkotwr53mbgt"},{"post_id":"cjeehims50023qkotrzv65eww","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsi002qqkot6a2wbz83"},{"post_id":"cjeehims60026qkotjdrone8e","tag_id":"cjeehimrk0010qkotfc22zm5b","_id":"cjeehimsk002tqkotcw5k21bk"},{"post_id":"cjeehimrh000uqkotf92rya20","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimsl002vqkotkdymy9e2"},{"post_id":"cjeehimrh000uqkotf92rya20","tag_id":"cjeehims30020qkotuj9ckv66","_id":"cjeehimsl002xqkot6asynwif"},{"post_id":"cjeehimrh000uqkotf92rya20","tag_id":"cjeehims70028qkotv4iam70a","_id":"cjeehimsm002zqkot2zuhjft1"},{"post_id":"cjeehimrh000uqkotf92rya20","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsm0030qkotrtjyzl2v"},{"post_id":"cjeehimsc002jqkot78wsgha1","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimsn0033qkot0b2yngbk"},{"post_id":"cjeehimsc002jqkot78wsgha1","tag_id":"cjeehimsb002fqkotzxnzox86","_id":"cjeehimsn0035qkotqjqi232j"},{"post_id":"cjeehimsc002jqkot78wsgha1","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimso0038qkotwnypbbin"},{"post_id":"cjeehims8002aqkotvdkc920f","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimso0039qkotbc3pcc7f"},{"post_id":"cjeehims8002aqkotvdkc920f","tag_id":"cjeehimsb002fqkotzxnzox86","_id":"cjeehimsp003cqkot9kdtyk62"},{"post_id":"cjeehims8002aqkotvdkc920f","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsp003dqkotffzoqfxr"},{"post_id":"cjeehimse002lqkotle3zzmtp","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimsp003fqkot26z8avyu"},{"post_id":"cjeehimse002lqkotle3zzmtp","tag_id":"cjeehimsb002fqkotzxnzox86","_id":"cjeehimsp003gqkots602einq"},{"post_id":"cjeehimse002lqkotle3zzmtp","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsp003iqkotbttqt6bu"},{"post_id":"cjeehims9002dqkotnlvyiy7g","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimsq003lqkotinfkurfz"},{"post_id":"cjeehims9002dqkotnlvyiy7g","tag_id":"cjeehimsb002fqkotzxnzox86","_id":"cjeehimsq003mqkot1anbdq3v"},{"post_id":"cjeehims9002dqkotnlvyiy7g","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimsq003pqkot04xtbf77"},{"post_id":"cjeehimsi002rqkot073kic5t","tag_id":"cjeehimrt001eqkot2mq49xmn","_id":"cjeehimsr003rqkotzfo4dc9v"},{"post_id":"cjeehimsb002gqkotukic3api","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimsr003uqkotzqwqx37w"},{"post_id":"cjeehimsb002gqkotukic3api","tag_id":"cjeehimsb002fqkotzxnzox86","_id":"cjeehimsr003wqkote5uaj608"},{"post_id":"cjeehimsb002gqkotukic3api","tag_id":"cjeehimr1000aqkotbndun9cx","_id":"cjeehimss003zqkotk1i641te"},{"post_id":"cjeehimsh002pqkothbaifhil","tag_id":"cjeehimsl002wqkot5wowx4ym","_id":"cjeehimss0041qkot9jjrierw"},{"post_id":"cjeehimsh002pqkothbaifhil","tag_id":"cjeehims0001tqkotxinvb6dz","_id":"cjeehimss0043qkot5n6fczuv"}],"Tag":[{"name":"Django","_id":"cjeehimqt0005qkotgkjzzkp5"},{"name":"Python3","_id":"cjeehimr1000aqkotbndun9cx"},{"name":"Hexo","_id":"cjeehimr7000fqkot6jsf65te"},{"name":"Git","_id":"cjeehimrk0010qkotfc22zm5b"},{"name":"Mac OS 命令行","_id":"cjeehimrp0017qkotafiqtaeu"},{"name":"操作系统","_id":"cjeehimrt001eqkot2mq49xmn"},{"name":"Markdown","_id":"cjeehimrw001mqkot6dhje6qr"},{"name":"Spider","_id":"cjeehims0001tqkotxinvb6dz"},{"name":"Selenium","_id":"cjeehims30020qkotuj9ckv66"},{"name":"PhantomJS","_id":"cjeehims70028qkotv4iam70a"},{"name":"Urllib","_id":"cjeehimsb002fqkotzxnzox86"},{"name":"Scrapy","_id":"cjeehimsl002wqkot5wowx4ym"}]}}