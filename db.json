{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/IMG_1847.JPG","path":"uploads/IMG_1847.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/IMG_1341.JPG","path":"uploads/IMG_1341.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/IMG_1356.JPG","path":"uploads/IMG_1356.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/selfieblackwhite.jpg","path":"uploads/selfieblackwhite.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/selfiecolor.jpg","path":"uploads/selfiecolor.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/package.json","path":"lib/bookmark/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/index.js","path":"lib/bookmark/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"29ee9addacd83cf155a59e05be540b2ffc50874b","modified":1530242139450},{"_id":"source/CNAME","hash":"5db3e3c11d5692cb4315e39fb27af311a14cb878","modified":1537855152570},{"_id":"source/README.md","hash":"3535b5914786d3308f3b3d0b16d5de9d19fa9424","modified":1520359701887},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537581777754},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537581777754},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1537581777754},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537581777754},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1537581777756},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537581777756},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1537581777757},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1537581777757},{"_id":"themes/next/README.md","hash":"140f4ece6670327a7d33b293947d958de80b44da","modified":1537581777757},{"_id":"themes/next/bower.json","hash":"5391684ba84fe633bc7877ab711a7d8a0072ceda","modified":1537581777758},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1537581777758},{"_id":"themes/next/_config.yml","hash":"245aeab6015ccdfd6ae1fd99d18cf02c88fcc5e0","modified":1573451255261},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1537581777766},{"_id":"themes/next/package-lock.json","hash":"99ce2d029b0864339e8c8d74b650359596631d58","modified":1537585159757},{"_id":"themes/next/package.json","hash":"50eb3825e2dbaac1478030cb0fa561e270565ec1","modified":1537585159702},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1556529254662},{"_id":"source/_posts/C语言中的-if-n-1-和-if-1-n-的区别.md","hash":"1a40b409ab5d0ed7ff9ed172ace0a656de8807b3","modified":1538198397158},{"_id":"source/_posts/DHCP续租过程.md","hash":"05264849bfc4cd83320ed1d7d96322ba19bdb747","modified":1537846159022},{"_id":"source/_posts/Apache和Nginx的对比.md","hash":"1202d780fc2f252c2a5452472b3091b8f3fa4bab","modified":1520447510268},{"_id":"source/_posts/Differences-between-and-is-in-Python3---(Reprint).md","hash":"71c7965f60f91cc9db7a0111a649b800a2f9a18c","modified":1522265146867},{"_id":"source/_posts/Django2-0-1搭建电影网站.md","hash":"9ccb572e15d1f52614d6ca6dfb07f4dc390ffb0e","modified":1519713719694},{"_id":"source/_posts/Django运行方式以及处理流程简介-转载.md","hash":"62d6b017aff72482c703f52a74adee2f6f04ad99","modified":1520424584924},{"_id":"source/_posts/DROP、DELETE和TRUNCATE区别.md","hash":"83f19457b4db2d142ff63750b138c462e3ecd0af","modified":1537950770844},{"_id":"source/_posts/Git分支管理策略及简单操作.md","hash":"22b619218339fba90d4b17835e4c36304dbd8d08","modified":1570701227695},{"_id":"source/_posts/Github多分支管理Hexo-Blog项目.md","hash":"005d4f3688fd9edb4a3712f675f81d44c1c24dcc","modified":1519713656801},{"_id":"source/_posts/HTML里引入CSS的四种方式.md","hash":"13410cb2d7ad21ff8662c37d684015cff757e805","modified":1524281683171},{"_id":"source/_posts/Hexo博客Next主题添加Fork-me-on-GitHub标签.md","hash":"165fac5df8b750ddd0b4ec9a7fe1c94dcb2f1677","modified":1519814115748},{"_id":"source/_posts/Hexo部署的网站项目-deploy-git-中添加README-md.md","hash":"2b664378eee7ddaace2b2a47b57c6a3794f7b56e","modified":1519799364312},{"_id":"source/_posts/IO密集型任务、计算密集型任务，以及多线程、多进程.md","hash":"0535c19510cd22b19892dfa4e6ce7971635a42d2","modified":1520265257211},{"_id":"source/_posts/IP地址的分类.md","hash":"289ea062823f0a57499cb6e80a6481399e0f14a0","modified":1541592620810},{"_id":"source/_posts/JSP相关概念.md","hash":"a9beba74fd4fc21ef5d1bb21df4e45c264094548","modified":1538109517566},{"_id":"source/_posts/Java-方法设置默认参数.md","hash":"58769529891190a53d7fa6f26899de0c9df2ee0d","modified":1536490882550},{"_id":"source/_posts/Java-关键字this和super.md","hash":"70165ce6ef1211b2cca2ad8c6beedbc6c552f763","modified":1536288051608},{"_id":"source/_posts/Java中的-赋值运算.md","hash":"eb7215240f3c5961e68a77abe6d8851d1a72a90e","modified":1540366727392},{"_id":"source/_posts/Java中的代码块.md","hash":"eb7653c3975f89a58706692c0dce3d1439330395","modified":1540867402581},{"_id":"source/_posts/Java中的单例模式.md","hash":"3708a93288396d4f70b7cc197a7b4853f3e173c4","modified":1540872265179},{"_id":"source/_posts/Java内部类.md","hash":"2192bb0f5f784371cd96809e27c8657efbef86aa","modified":1541395393566},{"_id":"source/_posts/Java之Object根类.md","hash":"35d41eb57fa76b50b7336b58d1f1a0eb485a4638","modified":1540789893301},{"_id":"source/_posts/Java之super和this.md","hash":"9135982bb7491c039120206139fab0888d9d2dca","modified":1540782418118},{"_id":"source/_posts/Java中的接口和抽象类.md","hash":"d1cce55d9386acc4364c21a88a28c5deb0930ef4","modified":1541392732272},{"_id":"source/_posts/Java包装类中的缓存设计.md","hash":"3a6c90df21cede4a0ba7915ca0ea7d73f98c3a06","modified":1540885802617},{"_id":"source/_posts/Java多线程读写HashMap遇到的坑.md","hash":"4e15aa72aa43b7508fe3655850ad9291cfd2720d","modified":1553842509897},{"_id":"source/_posts/Java方法的值传递机制.md","hash":"c3a52ae50fafd2513c4cd5e66564099a99fece98","modified":1540537693589},{"_id":"source/_posts/Java实时读取log日志文件示例代码.md","hash":"783d5152b4e867f6fe871a15a90ab42e7cc82dd1","modified":1558627506395},{"_id":"source/_posts/Java类属性和方法的可见性.md","hash":"a2db4d302ed8a2ceb81be356c05809d093617996","modified":1537359117334},{"_id":"source/_posts/Java编译类型和运行类型.md","hash":"384d0d725b3d75369a4e8831cbbf67be93bc426d","modified":1540822696575},{"_id":"source/_posts/Jet-Brains-IDE-常用快捷键.md","hash":"747c629f34021c826fb819f0c37845e5d3858811","modified":1541144861798},{"_id":"source/_posts/Linux-Bash-默认的组合键汇总.md","hash":"9cd868e7e81e34e14ff15fb52fdf99019957bc15","modified":1536126686843},{"_id":"source/_posts/Linux-使用su和su-切换用户的区别.md","hash":"f91cade29abcf450c533c23562ac63e3d1ed0476","modified":1536245293502},{"_id":"source/_posts/Linux-使用useradd命令时发生了什么.md","hash":"0c034c0077d135e7d53adf2eef55b816dce338a2","modified":1535082368219},{"_id":"source/_posts/Linux-命令回传码与-或.md","hash":"59cf57a7968c00839afb3a820430cf82e85da397","modified":1536131561791},{"_id":"source/_posts/Linux-文件特殊权限之SUID、GUID、SBIT.md","hash":"62ed1fee1c58f9afb1a23d08099ba1de88ab6df2","modified":1535004954976},{"_id":"source/_posts/Linux切割命令split.md","hash":"d9f97a0da0ed9e77281dab84690007c890ff11c9","modified":1536143472495},{"_id":"source/_posts/Linux数据流重定向.md","hash":"13ea5d103a4870683926c9c7a8e05e00ec3cda2a","modified":1538011703636},{"_id":"source/_posts/Linux文件名查找.md","hash":"7c6301954e7ea3d0a891e23d7791166883bc9724","modified":1536152225845},{"_id":"source/_posts/Linux之crontab命令.md","hash":"bce2cc4145b27c64eb986af6f479f157f0eed5a5","modified":1525774450479},{"_id":"source/_posts/Linux根目录下目录介绍及各项缩写全称.md","hash":"99119f7b3e4e64c4ddc7fca82ae1a6c3b32213dc","modified":1550670207303},{"_id":"source/_posts/Linux命令英文缩写.md","hash":"5176757e0b7db5a0f98e98986ed54e113ca11e42","modified":1541320899876},{"_id":"source/_posts/Mac-Dock栏分组.md","hash":"755f67501cd1d6c2d5484fc6694209216d85b832","modified":1537346800235},{"_id":"source/_posts/Linux查看端口占用情况.md","hash":"1036e6f0476f848dc1d6a1c330584cb77a8b0fd9","modified":1559022821246},{"_id":"source/_posts/Mac-OS-命令之文件-夹-删除.md","hash":"3185e748f81945750c3c7a1c99a2c197988f9506","modified":1525534260225},{"_id":"source/_posts/Markdown小技巧之空格输入.md","hash":"1ff677079c2129c379663b06bc8950dfcc486d84","modified":1520053674804},{"_id":"source/_posts/Mac下打开swf文件.md","hash":"393abe1ca4fdf85e001d16cdd9cdf2633a87c615","modified":1526016619985},{"_id":"source/_posts/Mac下profile文件.md","hash":"5392ed1cd275a1c85afb94f6143f01e4f1ad4bf3","modified":1526019107289},{"_id":"source/_posts/PostgreSQL函数、索引和视图操作Demo.md","hash":"52dd6b38d4649bd857da46fa8a98bc6c1a07e874","modified":1537952071185},{"_id":"source/_posts/PostgreSQL数据库、数据表、数类型和运算符Demo案例.md","hash":"63388ffb80af753887e045051e6b45e08d311b50","modified":1537929498850},{"_id":"source/_posts/PostgreSQL数据操作和数据表约束Demo.md","hash":"085acbca0224556e3078c9830dcbb4d767798c5f","modified":1537951502087},{"_id":"source/_posts/PostgreSQL数据查询Demo.md","hash":"bc040944be9afaf0eb22035c0b439d9bb4382a6e","modified":1537941177550},{"_id":"source/_posts/Python2-7-x与Python3-x差异.md","hash":"49a55d4cbf469913510f0fc99a99aa15770e107b","modified":1520356806242},{"_id":"source/_posts/Python3-for-else-陷阱.md","hash":"0adf0211d83da433568d75c95b077b5d38a75ff7","modified":1522317617633},{"_id":"source/_posts/Python3-nonlocal声明.md","hash":"e5045c6c39dd03e00e5b2ef77de33c533b7eba7b","modified":1520321018494},{"_id":"source/_posts/Python3-is和-的区别.md","hash":"92661516643e096d7632768f6e23f037cb1c3be6","modified":1524281694494},{"_id":"source/_posts/Python3-os和sys模块的作用，以及常用的模块方法.md","hash":"21d7072558a89cb0d9d54e39283562da675d2399","modified":1520844543868},{"_id":"source/_posts/Python3-staticmethod和-classmethod.md","hash":"f360bdbf1b118b696a7a30a4726c8d20fd7c1426","modified":1519886180315},{"_id":"source/_posts/Python3-作用域.md","hash":"8daa35ac6f77dadb18dd65d5ad134118bec8ac00","modified":1520049390508},{"_id":"source/_posts/Python3-使用virtualenv搭建虚拟环境.md","hash":"a58749c6683d391b6d5bf7ed2136ff10ac9dc764","modified":1520055163613},{"_id":"source/_posts/Python3-使用Selenium-PhantomJS爬火影忍者漫画.md","hash":"75b5bad4d74ee4c557fff100159c6061e0f19efd","modified":1520015145955},{"_id":"source/_posts/Python3-函数重载.md","hash":"b703ad58e952ce0c740093f29cf8b00eb88fea5d","modified":1520048772845},{"_id":"source/_posts/Python3-单下划线和双下划线.md","hash":"9b5a3bf36a7164397847293f1d52023047a2e4e7","modified":1520015101034},{"_id":"source/_posts/Python3-单例模式.md","hash":"6ef996f904fea8bb668ad9b618173f1186ec1219","modified":1521485797784},{"_id":"source/_posts/Python3-向上取整ceil-向下取整floor-四舍五入round.md","hash":"40c8415634c798c59b6b08e7abcefd353138870a","modified":1520576834992},{"_id":"source/_posts/Python3-回文字符串的判断.md","hash":"546d9728505dd05b21dfe4550c8c3fd9d7e22304","modified":1521455602228},{"_id":"source/_posts/Python3-垃圾回收机制.md","hash":"9608340625e70d7dacd84d7148badd2e3f2ba4dc","modified":1520268680605},{"_id":"source/_posts/Python3-子类的查看与类的对象判断.md","hash":"c7629edc3f117b5f8fa3a8513e6c0749efd1ed72","modified":1520044766058},{"_id":"source/_posts/Python3-实现二分查找.md","hash":"5e181e0433187dd828225cab242a26ca55f9b3e3","modified":1520580397282},{"_id":"source/_posts/Python3-基于顺序表技术实现栈类.md","hash":"9d7b04d950422cb58faf2b12d681698e8cd0ab24","modified":1521270729223},{"_id":"source/_posts/Python3-基于链表技术实现栈.md","hash":"4e5ef1c1ec0a089c58ef7aa2d8d3b00f3f532653","modified":1521403991735},{"_id":"source/_posts/Python3-实现二叉树前、中、后序遍历及按层遍历.md","hash":"d978fdb81b12af6c37dd7860b8fd582c84344267","modified":1521403951302},{"_id":"source/_posts/Python3-实现遍历目录与子目录，并抓取-py文件.md","hash":"aa62fa04f9b4743f5aea72984596e18df805b4eb","modified":1520845455759},{"_id":"source/_posts/Python3-对象操作的时间复杂度总结.md","hash":"1dc889b9ac04a0b4c0d1db410ff917f9ff176a17","modified":1537590683426},{"_id":"source/_posts/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy.md","hash":"a74d664264a764b3099a2d3289b0d036ac198d18","modified":1520050449659},{"_id":"source/_posts/Python3-真假值对照表.md","hash":"14dd84be5b7590e2fbdc8507efd446aa024bad17","modified":1520054516663},{"_id":"source/_posts/Python3-将两个排好序的列表合并成一个有序列表.md","hash":"37a853bbaaf9e65e742c0c8399f718a6efd3031f","modified":1520791167116},{"_id":"source/_posts/Python3-类变量和实例变量.md","hash":"dcb3717191c637f8aa3535f343806ff8bd54695c","modified":1519891539909},{"_id":"source/_posts/Python3-自省.md","hash":"254d0ccbc934629c705becbd840cf235e899ff48","modified":1520011436828},{"_id":"source/_posts/Python3-实现常见的各种排序方法.md","hash":"d5aa1cc97eab07f9dde04d3b9fc8f954cd09b9e0","modified":1539314608134},{"_id":"source/_posts/Python3-让字典保持有序.md","hash":"f181c8d22beba91ac8edd6b5f3d18d8343f3fb70","modified":1520312157785},{"_id":"source/_posts/Python3-解包和压包.md","hash":"c21390cac90f910aadeec4c88afa74055d65d79b","modified":1523034854402},{"_id":"source/_posts/Python3-闭包.md","hash":"7a41404f8b826005912f0d953ba96e33d8ab0109","modified":1520319404733},{"_id":"source/_posts/Python3-鸭子类型.md","hash":"6015069f6196fac57c839f54ab2eb5df13e24acd","modified":1520055654624},{"_id":"source/_posts/Python中如何优雅的使用assert断言.md","hash":"7ac8a8fc79480e6d684865b8b05092e8139695b4","modified":1573780255336},{"_id":"source/_posts/Python中append和extend效率.md","hash":"1fb6cfa7ed6f2972a608949de10b7daf90e65c38","modified":1543305482098},{"_id":"source/_posts/Redis之数据类型的内部编码.md","hash":"2a7232a297b315792d2c62cec9d4be25a5ad976b","modified":1541062853873},{"_id":"source/_posts/Python中如何生成一定格式的日期字符串.md","hash":"94385b563ccf626f2e5e19cd5cfcf944e18a1fa5","modified":1543825720358},{"_id":"source/_posts/SQL语法练习-一.md","hash":"1f7d967bbca8c24856233e2dbd5492e0595f13fd","modified":1535446357974},{"_id":"source/_posts/Python中如何表示正负无穷大.md","hash":"d7606bd3a7ac285f12bd0c341aa1ef039cb7ac22","modified":1552637879432},{"_id":"source/_posts/TCP-套接字编程.md","hash":"31fdf136ff3f313d15ec42a26b77dbc3dca237cb","modified":1532760461361},{"_id":"source/_posts/Tesseract的使用.md","hash":"0300ce17a3047234c50b45766a6d280b58a04379","modified":1520836474885},{"_id":"source/_posts/UDP-套接字编程.md","hash":"a73f05ab1a1bcd6836182090acbd744dd0d3f243","modified":1532760560474},{"_id":"source/_posts/URL、URI和URN三者之间的区别.md","hash":"fcbcd2762b78604dec2983aa60f635ea3a7f6018","modified":1537877654430},{"_id":"source/_posts/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint.md","hash":"67340ac1b05caf1f549aeb61cb26d1ca4eb60718","modified":1522264998970},{"_id":"source/_posts/hello-world.md","hash":"b8cefcae6e00fb9fc954a93587aa026a34878325","modified":1519713823774},{"_id":"source/_posts/if-name-main.md","hash":"13ecb200736f1cd552d82c258019a85c27bdb81c","modified":1519906398245},{"_id":"source/_posts/java平台结构.md","hash":"6adb4a7045b4d2862679102096c037e7be6fd1da","modified":1536028192474},{"_id":"source/_posts/java入门小知识.md","hash":"71b351851d1e15c92a0fe537c99608c8fbf1e27d","modified":1540870227288},{"_id":"source/_posts/maven约定目录配置.md","hash":"aefdfe3764937f0c0b60634eec09f309f636c02e","modified":1537604116195},{"_id":"source/_posts/python3-产生随机字符串.md","hash":"78ad20149a0604088f98e24ca2a9c2092a9455ac","modified":1524126496623},{"_id":"source/_posts/python3-可迭代对象、迭代器和生成器.md","hash":"d97214db029e0a17a4302443642046e6eabb8eda","modified":1519966521925},{"_id":"source/_posts/python3-如何用一个表达式合并两个字典.md","hash":"b9f61028aec496143c62b71283853aeb486058b2","modified":1520010697046},{"_id":"source/_posts/一次完整的HTTP请求流程.md","hash":"ae02efba2601b686b274f76894fea09378df4c4b","modified":1521482453753},{"_id":"source/_posts/一种Git保留两个repo的commit信息进行合并的方法.md","hash":"483550b7fff39bb7aca857887ba23a3637839aee","modified":1519715982036},{"_id":"source/_posts/三次握手 | 四次挥手.md","hash":"0e22f9991ec3a44ad444944b166bb09a87879ee0","modified":1521475313251},{"_id":"source/_posts/三种多路复用IO实现方式：select，poll，epoll.md","hash":"3406f55b37cb789e368bbd42d4e3f96147e2409b","modified":1520419220981},{"_id":"source/_posts/什么是Socket-转.md","hash":"8cc25bf5f72cc55cde688e999f90d76104fda417","modified":1520874227890},{"_id":"source/_posts/从零开始学爬虫-01.md","hash":"d30857c41ef0b23aa34919b95a6896069d3670f0","modified":1519751080535},{"_id":"source/_posts/从零开始学爬虫-02.md","hash":"82c11b9d4650984af091d6e580e5ef3dfd0f4dd8","modified":1519751082158},{"_id":"source/_posts/从零开始学爬虫-03.md","hash":"6714ad7f64bdfaa8d5a899adb3adc285b0d589c1","modified":1519751083829},{"_id":"source/_posts/从零开始学爬虫-04.md","hash":"df009a65165b62f9cfb15c801f91270f8055493a","modified":1519751905138},{"_id":"source/_posts/从零开始学爬虫-05.md","hash":"616044ff7f3ef6558b80c583598de43bc0ad8d20","modified":1519752171289},{"_id":"source/_posts/如何优雅滴在手机上跑Python代码.md","hash":"c276f97c1da7c874dc2dc050cc9ac5a60ce23cdd","modified":1573790144232},{"_id":"source/_posts/四种方法实现交换两个变量的值.md","hash":"ec1ae3bd15dbe2fd15a12e0782637daf7120b3c8","modified":1540523270307},{"_id":"source/_posts/原码、反码、补码.md","hash":"e357d8b93444800ea1ff540798226674e789a840","modified":1522155948413},{"_id":"source/_posts/如何理解http是无连接，无状态的？.md","hash":"cd04194230343b90063ba38d3aef5eaec2b180e9","modified":1538142326772},{"_id":"source/_posts/如何理解操作系统中的同步和异步、阻塞和非阻塞.md","hash":"115637c5cc25ccf4267053b2db697f9ba67c4381","modified":1520576927749},{"_id":"source/_posts/子网掩码的作用-详细介绍.md","hash":"0da61a158d1c12a8a9eecb91bb6ccdab60c75d77","modified":1537517512911},{"_id":"source/_posts/数据库事务的四个特性及四个隔离级别.md","hash":"3177a2cdee711daad16482c059c5d875584b8b41","modified":1537970380414},{"_id":"source/_posts/搭建Git服务器的一种方法.md","hash":"8dcc9145fbe474557164bd9891e668a2ab2e2cf1","modified":1549865483884},{"_id":"source/_posts/异常的分类.md","hash":"a00dd3018c400618c7b2c836b32955ffc7c20d54","modified":1550649816280},{"_id":"source/_posts/布尔环.md","hash":"c62871410ecacee4f01d72a55fe74a51d0c602f9","modified":1550197172592},{"_id":"source/_posts/数据库范式.md","hash":"b0b3e1ce6eafcc449f205b4202de4dd305b91563","modified":1537973667101},{"_id":"source/_posts/正向代理和反向代理.md","hash":"626b73e1f6422bcf4f8792fdb2ae9dd8bcce2cbb","modified":1522052816270},{"_id":"source/_posts/浅谈Session和Cookie的区别与联系.md","hash":"a3d470160a3ae49b2ae86def8638f2b996c2657d","modified":1520362864896},{"_id":"source/_posts/浅析Python中列表操作之-和.md","hash":"75c97b35c2daa090538a9292f07a85e6882fae22","modified":1570426394349},{"_id":"source/_posts/服务器中的物理CPU、逻辑CPU和CPU核数.md","hash":"9a561791066a60893a2e031440ed222116337734","modified":1561299788731},{"_id":"source/_posts/神经网络中为什么不能将权重初始值设置为一样的值.md","hash":"63c10ca27a4520d1f4db90ad4756f3e7a1e75bf0","modified":1573450084426},{"_id":"source/_posts/浅析Python中的列表和元组.md","hash":"1414a426994f111b3883eb7a82ea5353f31a7581","modified":1570425969102},{"_id":"source/_posts/浅谈TCP和UDP的区别以及应用.md","hash":"f799ec28de0b8646906dcb57d912f8babefb6d2e","modified":1520395812333},{"_id":"source/_posts/用户密码保存的方式有哪些.md","hash":"0f169c3a164757952608291104ef9bc594d34577","modified":1520445908274},{"_id":"source/_posts/神经网络的激活函数为什么要使用非线性函数.md","hash":"18bdda6afa6693dc2acf54b339473b6c7e949f4a","modified":1569726155783},{"_id":"source/_posts/神经网络的学习为何要设定损失函数？.md","hash":"7ac34a96e8faed6110e46dae58064cadcc2b2f03","modified":1569862048497},{"_id":"source/_posts/简谈爬虫攻与防.md","hash":"c88ea54169cbd49bd82141ce828247a6ddd03fa4","modified":1523451519795},{"_id":"source/_posts/终端格式化打印json数据的方法.md","hash":"a7ff42dbef2ed34fa284e7a9fcf86c137793c200","modified":1525534258502},{"_id":"source/_posts/计算机网络之子网-掩码.md","hash":"295be0b70e040f51c0e1be35aadb584c5d5afa46","modified":1535733448307},{"_id":"source/_posts/计算机网络各层协议.md","hash":"db2c89e06bedb7905bd1450ea1c57e0ad15dec89","modified":1541577807618},{"_id":"source/_posts/计算机网络常用协议端口归纳.md","hash":"8277f87d39acc204078c93e26317e37d7bd0a0a5","modified":1537857663655},{"_id":"source/_posts/进程、线程、协程.md","hash":"294a4377f5c2c42a9cb97c477458710947e9b7d8","modified":1520404361417},{"_id":"source/_posts/进程间的通信方式-IPC.md","hash":"340067e8cae82eb1458bad066270e2e81e7163b4","modified":1520437757891},{"_id":"source/_posts/面试总结之Java-Web篇-持续更新.md","hash":"adc09d75a011b4c8c2bfa1c8442f44b34ef2111f","modified":1538103097101},{"_id":"source/_posts/进程地址空间.md","hash":"65778a67a3ad3fe2132f8951aec945d82b75265c","modified":1550755994795},{"_id":"source/_posts/面试总结之数据库篇-持续更新.md","hash":"0dd2894c21af19a0f728d4340065078111161376","modified":1537973459423},{"_id":"source/about/index.md","hash":"721cc61d2e53e5b2cd24195fa99115409b519611","modified":1536678443591},{"_id":"source/categories/index.md","hash":"e675535fc5444a91757d1878ea74869cfba250dc","modified":1519728606227},{"_id":"source/tags/index.md","hash":"c246461b696977ca1c1d9f018c95fe08579b9fbc","modified":1519728623228},{"_id":"themes/next/.git/config","hash":"e78135eac1ede2f3ca79747839db482790e54b3c","modified":1537581777748},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537581777746},{"_id":"themes/next/.git/index","hash":"f4d2eaef0057c9a11c084750b20f878c769034cb","modified":1538142232339},{"_id":"themes/next/.git/packed-refs","hash":"cfff1327f48418de87782f5c317e0f5e898e217e","modified":1537581777742},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537581768350},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1537581777755},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1537581777755},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1537581777756},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1537581777755},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1537581777756},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537581777756},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1537581777759},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1537581777759},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1537581777759},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1537581777760},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1537581777760},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1537581777760},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1537581777760},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1537581777760},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537581777767},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1537581777767},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537581777767},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1537581777768},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1537581777769},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1537581777768},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1537581777769},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1537581777768},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1537581777769},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1537581777770},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1537581777770},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1537581777771},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1537581777771},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1537581777771},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1537581777772},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1537581777772},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1537581777772},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1537581777774},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1537581777808},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1537581777808},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1537581777808},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1537581777809},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1537581777809},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1537581777809},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1537581777810},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1537581777809},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1537581777810},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537581777811},{"_id":"themes/next/source/.DS_Store","hash":"6266fdba27b0249947350a7214c960c4bc33b9b0","modified":1537582709992},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537581777917},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537581777915},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537581777916},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1537581777759},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777863},{"_id":"themes/next/node_modules/mime/.npmignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511569060000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537581768351},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537581768353},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537581768352},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537581768353},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537581768354},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537581768351},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537581768352},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537581768350},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537581768352},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537581768353},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537581768351},{"_id":"themes/next/.git/logs/HEAD","hash":"8b320de509e9a598810b87e8e1aa91e33782a3ad","modified":1537581777747},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537581768354},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1537581777761},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1537581777762},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1537581777761},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1537581777761},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1537581777762},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1537581777762},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1537581777763},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1537581777763},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1537581777763},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1537581777764},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1537581777765},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1537581777765},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537581777774},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1537581777766},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537581777773},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537581777775},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537581777773},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1537581777775},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1537581777776},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1537581777777},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1537581777776},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1537581777778},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1537581777777},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1537581777778},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1537581777779},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1537581777782},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1537581777786},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1537581777782},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1537581777785},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1537581777789},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1537581777777},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1537581777791},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1537581777797},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1537581777800},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1537581777801},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1537581777801},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1537581777803},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1537581777803},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537581777804},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1537581777805},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537581777804},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1537581777812},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1537581777812},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1537581777812},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1537581777813},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1537581777813},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1537581777813},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1537581777813},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1537581777814},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1537581777814},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1537581777863},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537581777864},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537581777864},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537581777865},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537581777863},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537581777867},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537581777867},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537581777868},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537581777870},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537581777868},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537581777869},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537581777870},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537581777871},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537581777872},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537581777873},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537581777872},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537581777873},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537581777874},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537581777874},{"_id":"themes/next/source/uploads/IMG_1847.JPG","hash":"8bea4d8a11f71501edde7fe68618be061d04fadd","modified":1534835620000},{"_id":"themes/next/source/uploads/IMG_1341.JPG","hash":"05c54cee8370727d66263420febab59db112c694","modified":1532709747000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"486f26a392d7783a3e9ac1a81ddecbde060f47e5","modified":1519703513674},{"_id":"themes/next/node_modules/async-limiter/.travis.yml","hash":"4119aeca7589bde9656cbec8fff0fc06c3ef3400","modified":1505148098000},{"_id":"themes/next/node_modules/async-limiter/LICENSE","hash":"1673c3c0b15c89245a6330bd44d0673371334d15","modified":1505145562000},{"_id":"themes/next/node_modules/async-limiter/index.js","hash":"807aa8e19c376fef94638cd849713c7baefd70dd","modified":1505141104000},{"_id":"themes/next/node_modules/async-limiter/readme.md","hash":"e331c5f64148cbf776af71b7644856103c8a2908","modified":1505148098000},{"_id":"themes/next/node_modules/async-limiter/package.json","hash":"00f07c9a008e02b01ec63ade3c535dbdb86eacc6","modified":1537585159146},{"_id":"themes/next/node_modules/ascli/LICENSE","hash":"47b573e3824cd5e02a1a3ae99e2735b49e0256e4","modified":1361894444000},{"_id":"themes/next/node_modules/ascli/README.md","hash":"dea908c76aab604682314a2eea1b06c7a1237180","modified":1414770155000},{"_id":"themes/next/node_modules/ascli/.npmignore","hash":"60cc84c4120839856ca7e797c075cf4676cb7cb5","modified":1478308379000},{"_id":"themes/next/node_modules/ascli/package.json","hash":"a63a4deb34670ba82626ff1cd08abaed3fbc2e64","modified":1537585159311},{"_id":"themes/next/node_modules/ascli/ascli.js","hash":"92e52857aa35cd676b168dd498d2311dd89547f1","modified":1414869480000},{"_id":"themes/next/node_modules/asynckit/README.md","hash":"030a12b4b2a9151538e9491d3a4f23dfe9848f32","modified":1465928899000},{"_id":"themes/next/node_modules/asynckit/bench.js","hash":"8dacd95640ad3d0ae47aebf5bd1ba4d83f6a1f1d","modified":1463686174000},{"_id":"themes/next/node_modules/asynckit/package.json","hash":"0995f3eb38054c16a2b8112fa7a8e08bb1bf735c","modified":1537585159146},{"_id":"themes/next/node_modules/asynckit/serial.js","hash":"9af5e746a0a9f8ba24926bc2fbb9786cf13f081b","modified":1465665583000},{"_id":"themes/next/node_modules/asynckit/index.js","hash":"9201eacd2650642ff12a8af5fd1dbf7dc7848bee","modified":1463795005000},{"_id":"themes/next/node_modules/asynckit/parallel.js","hash":"ecead062825e6790ce70c1879c745808c8ce7528","modified":1465665593000},{"_id":"themes/next/node_modules/asynckit/LICENSE","hash":"9171131798797e013e6c922921540694b1e3542d","modified":1463552412000},{"_id":"themes/next/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1465490702000},{"_id":"themes/next/node_modules/asynckit/serialOrdered.js","hash":"26f4cadf2685ee07af06e82803171847f74b9fb3","modified":1465665610000},{"_id":"themes/next/node_modules/ansi-regex/index.js","hash":"8e2fe7fc814a39d590cf170ccc989a166d505c1e","modified":1484362985000},{"_id":"themes/next/node_modules/ansi-regex/readme.md","hash":"79b8bd5d8af7fd6d79dcb7c24b3f2e03e1d2a029","modified":1484362985000},{"_id":"themes/next/node_modules/ansi-regex/package.json","hash":"03c8fcddfd8c7aaeba5e28dabd0ed18553c7c9eb","modified":1537585159146},{"_id":"themes/next/node_modules/asynckit/stream.js","hash":"c8bde32c80d2f3ecb33462a0aed86851c4c7e9e6","modified":1465859636000},{"_id":"themes/next/node_modules/axios/CHANGELOG.md","hash":"f9084582456f5e969a4ad038ec17a58315adc4cb","modified":1519082539000},{"_id":"themes/next/node_modules/axios/UPGRADE_GUIDE.md","hash":"428f5956e083589839b6d8bc7d2f5152d7942e02","modified":1518296169000},{"_id":"themes/next/node_modules/axios/README.md","hash":"4582c5ca25c5f44099608824d0df9e6cb393b159","modified":1519081203000},{"_id":"themes/next/node_modules/axios/LICENSE","hash":"0d6395f8c93ddfd98efcac7f511d42a286b22168","modified":1519077740000},{"_id":"themes/next/node_modules/axios/index.js","hash":"c8d173ea3c2cd2e5d6d84c83a7188f42107295c9","modified":1518376128000},{"_id":"themes/next/node_modules/axios/index.d.ts","hash":"6bd756c708026e42abf286c53f2a025aec6b6f46","modified":1519077740000},{"_id":"themes/next/node_modules/.bin/mime","hash":"4d5f01b12fe3fc18e06d871ce00d0264643200fa","modified":1537585159429},{"_id":"themes/next/node_modules/.bin/uuid","hash":"c5b3ec4d8a8f620420aa52a8f3a7cfdff1197667","modified":1537585159446},{"_id":"themes/next/node_modules/.bin/pbjs","hash":"b7422c1ffd167d1111bb5e350003228e39d532f0","modified":1537585159463},{"_id":"themes/next/node_modules/.bin/window-size","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1537585159452},{"_id":"themes/next/node_modules/balanced-match/.npmignore","hash":"bf3481c896126bd5395e5095c994fb82c9e4fa8a","modified":1497251889000},{"_id":"themes/next/node_modules/balanced-match/README.md","hash":"1386baac658274264e12701b085143357d817bb1","modified":1497251889000},{"_id":"themes/next/node_modules/axios/package.json","hash":"91c42820ec76cd52e566dffa7524d4708595bfc1","modified":1537585159148},{"_id":"themes/next/node_modules/balanced-match/LICENSE.md","hash":"09013c002fbdd686da2ec13c5a6d014f0a294ba9","modified":1497251889000},{"_id":"themes/next/node_modules/balanced-match/package.json","hash":"4985bda68b263ce4203855ca986d72b3e3f45061","modified":1537585159146},{"_id":"themes/next/node_modules/base64-arraybuffer/.travis.yml","hash":"b885a00a6aedb794a59f6f43438ba6c2dda4d007","modified":1447962787000},{"_id":"themes/next/node_modules/balanced-match/index.js","hash":"2715b99298649413a681212f3220b1fd0bee0309","modified":1497251889000},{"_id":"themes/next/node_modules/base64-arraybuffer/README.md","hash":"440c548985b2f38e06657211d630afbfa4e567bf","modified":1447962787000},{"_id":"themes/next/node_modules/base64-arraybuffer/LICENSE-MIT","hash":"340c75c043b1010ee4cdedbbba0178bd2c5b8437","modified":1447962787000},{"_id":"themes/next/node_modules/base64-arraybuffer/package.json","hash":"e3e0c427d70d616e7ca7bb6157a228e94477efbc","modified":1537585159146},{"_id":"themes/next/node_modules/base64-arraybuffer/.npmignore","hash":"de4a0dded8947ec9808a6d23aceddcb205f9f957","modified":1447962787000},{"_id":"themes/next/node_modules/bytebuffer/.npmignore","hash":"5dc4b6c57825400b3810ba88d4cf415137f8882f","modified":1389717077000},{"_id":"themes/next/node_modules/bytebuffer/bower.json","hash":"4525a4120fe20e1d5771da4aeea031f552ffff78","modified":1455285565000},{"_id":"themes/next/node_modules/bytebuffer/README.md","hash":"542a0b0e85cd11b1a13a11361dcb7e9ed2cec7d8","modified":1445808173000},{"_id":"themes/next/node_modules/bytebuffer/LICENSE","hash":"47b573e3824cd5e02a1a3ae99e2735b49e0256e4","modified":1361894444000},{"_id":"themes/next/node_modules/bytebuffer/.travis.yml","hash":"bc9b389d08e7cfc8c7a6aa466e552ba423db7da7","modified":1445789003000},{"_id":"themes/next/node_modules/bytebuffer/donate.png","hash":"c2e8a0247c544b09ad2560406e23be4168304fe3","modified":1445789116000},{"_id":"themes/next/node_modules/bytebuffer/bytebuffer.png","hash":"df85ab1a0f54dcabf4b88c758192fc253b7f62ac","modified":1445633401000},{"_id":"themes/next/node_modules/bytebuffer/index.js","hash":"54c7c9a8e7ce3bcb0d4844a20cfc17f9bd99933f","modified":1445622975000},{"_id":"themes/next/node_modules/bytebuffer/jsdoc.json","hash":"2e64a279ded5e19dc632143e49d2f4c8682e9e60","modified":1390319475000},{"_id":"themes/next/node_modules/bytebuffer/package.json","hash":"11bc585ae034c8280ea92dac924fbdbcd060bfd8","modified":1537585159148},{"_id":"themes/next/node_modules/babel-runtime/README.md","hash":"fe4cec868f47b62c838636298be67d8a5af6ad1a","modified":1488047195000},{"_id":"themes/next/node_modules/babel-runtime/core-js.js","hash":"acfb8577ade68ae6b76646fe6ee3872443839795","modified":1476744262000},{"_id":"themes/next/node_modules/babel-runtime/.npmignore","hash":"44dca318140c5d505a6797ea94911edc7ab1bd25","modified":1476744262000},{"_id":"themes/next/node_modules/babel-runtime/package.json","hash":"453adcff72c76b7f646bddd5cf1894f1f8f2c009","modified":1537585159311},{"_id":"themes/next/node_modules/brace-expansion/LICENSE","hash":"433c2b9c71bad0957f4831068c2f5d973cef98a9","modified":1518210795000},{"_id":"themes/next/node_modules/babel-runtime/package-lock.json","hash":"43f9b57413430d61a429f1a69626ea927cfc1bb7","modified":1502893156000},{"_id":"themes/next/node_modules/brace-expansion/README.md","hash":"61dcf7b367d852a36fbb50de9824ec92edfa2a5a","modified":1518248525000},{"_id":"themes/next/node_modules/brace-expansion/package.json","hash":"abdcedd2183dffd5c115647af7b5bc46f6fc44da","modified":1537585159146},{"_id":"themes/next/node_modules/brace-expansion/index.js","hash":"a2f937621d39c20ce582f697c3e4273d1e14b2e0","modified":1518169988000},{"_id":"themes/next/node_modules/camelcase/index.js","hash":"2b8c116fea89376fba3557ffb11fa0e3328846d5","modified":1457803830000},{"_id":"themes/next/node_modules/camelcase/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/camelcase/package.json","hash":"d43a1d7497665a53866a5779022ec95a29740f2d","modified":1537585159146},{"_id":"themes/next/node_modules/cliui/CHANGELOG.md","hash":"26cb805006986096e67141729c6fa6e6de4b3fc6","modified":1460342812000},{"_id":"themes/next/node_modules/camelcase/readme.md","hash":"c90528b5f1cea2de255651c9daab5b0aea013737","modified":1447354467000},{"_id":"themes/next/node_modules/cliui/README.md","hash":"1e22b71fd4a73fa941054e5f565c3f4e21827804","modified":1460340216000},{"_id":"themes/next/node_modules/cliui/LICENSE.txt","hash":"039fa81eb89fc5c892f5ce2d22ee6ac0a8503880","modified":1458191766000},{"_id":"themes/next/node_modules/cliui/package.json","hash":"107c9375004ccf09c3e8a922e1751dc14575c3e0","modified":1537585159310},{"_id":"themes/next/node_modules/colour/LICENSE","hash":"31c782429c769f1787c263c3835cfaf1303964d2","modified":1367599034000},{"_id":"themes/next/node_modules/colour/README.md","hash":"eb0051992e0818caaf552168c6dfd201cbc8c52f","modified":1367599034000},{"_id":"themes/next/node_modules/colour/colour.min.js","hash":"5093ed484c2b4b09f29280b51fb2873ef4e2f9a4","modified":1367599034000},{"_id":"themes/next/node_modules/colour/colour.js","hash":"89a71710a7b96036a597e2b9e9fc6af354b23dfa","modified":1367599034000},{"_id":"themes/next/node_modules/colour/colour.png","hash":"5364dd38fefbde3f62338108e077a1115f86b6e5","modified":1367599034000},{"_id":"themes/next/node_modules/colour/.npmignore","hash":"5dc4b6c57825400b3810ba88d4cf415137f8882f","modified":1367599034000},{"_id":"themes/next/node_modules/cliui/index.js","hash":"ffb7fefbb726b99e2dff9e1342ff86caba27e863","modified":1458191766000},{"_id":"themes/next/node_modules/code-point-at/index.js","hash":"280ea6787e2472d6001554ab9513814ef27695bd","modified":1478169479000},{"_id":"themes/next/node_modules/code-point-at/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477419843000},{"_id":"themes/next/node_modules/colour/package.json","hash":"c79c28128b018e3a7675f6248ac522841d8efb58","modified":1537585159146},{"_id":"themes/next/node_modules/code-point-at/package.json","hash":"f0b5f5142a8dbb80f1093e81f05a7742b0347882","modified":1537585159146},{"_id":"themes/next/node_modules/charenc/LICENSE.mkd","hash":"f21d24d706749564bd38f5b3f76597764323c5ec","modified":1322071344000},{"_id":"themes/next/node_modules/code-point-at/readme.md","hash":"821d0f3d8140f560309f58e197b9ddc5b158355f","modified":1478167595000},{"_id":"themes/next/node_modules/charenc/package.json","hash":"f8f834f76192aff6f034f0dfa90eeda09bc832dd","modified":1537585159146},{"_id":"themes/next/node_modules/charenc/charenc.js","hash":"0bbec6e4b53f6232351b17f0356ab5a1f5869180","modified":1322071344000},{"_id":"themes/next/node_modules/component-emitter/History.md","hash":"6e91ffacdc162c2963acfb13559a68883713f87c","modified":1461005544000},{"_id":"themes/next/node_modules/combined-stream/Readme.md","hash":"0e4384a6edea7b3a580ffa5b32236b7f8b251834","modified":1518224813000},{"_id":"themes/next/node_modules/combined-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1518224813000},{"_id":"themes/next/node_modules/charenc/README.js","hash":"423e6117bf215c69bf0053da0b2f21a47f47c27b","modified":1322071345000},{"_id":"themes/next/node_modules/combined-stream/package.json","hash":"0c0d79e6ec542a432f6b8b648672a61c396fe0e0","modified":1537585159147},{"_id":"themes/next/node_modules/component-emitter/LICENSE","hash":"7571414e38a753319ae9941323dc4a27f1c8b7dd","modified":1461005391000},{"_id":"themes/next/node_modules/component-emitter/Readme.md","hash":"643249025a2a7ebe2e4384dc2dd38623ba7600cf","modified":1461005391000},{"_id":"themes/next/node_modules/component-emitter/package.json","hash":"cb5b59331d7c29be6bf9e4b80e6778dece3a9c88","modified":1537585159146},{"_id":"themes/next/node_modules/concat-map/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1391050985000},{"_id":"themes/next/node_modules/concat-map/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1339129737000},{"_id":"themes/next/node_modules/component-emitter/index.js","hash":"3a327f6687239defcc65a6bebedde117e5eb65c2","modified":1461005391000},{"_id":"themes/next/node_modules/concat-map/README.markdown","hash":"132e6e8fd1d19ec2422fdcde00840d8237e44094","modified":1354099276000},{"_id":"themes/next/node_modules/concat-map/package.json","hash":"9f7b79362b9cd32813ee6b7e54da1fbb8948e924","modified":1537585159146},{"_id":"themes/next/node_modules/concat-map/index.js","hash":"a3063f014cc693b320dbd64de3243a79247c1e05","modified":1354939769000},{"_id":"themes/next/node_modules/core-js/bower.json","hash":"7ff0095c3c788fb58be06def47c6b3f7283d325c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/CHANGELOG.md","hash":"44d0fee9f2cd2b7fe74bd7d5ec22c30d46faf65e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/Gruntfile.js","hash":"b07c90e9f237bb8e7ebd2e6d6f027acf52b5a142","modified":499162500000},{"_id":"themes/next/node_modules/core-js/LICENSE","hash":"dd70b0f07e4655de0afe5bb6cfd99d6a05c98b74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/package.json","hash":"b80eb818be2d46bc7728ff0e6555d2f22fe0891b","modified":1537585159147},{"_id":"themes/next/node_modules/core-js/shim.js","hash":"6990e6978517f8071b993bc6daeb2c5d6364bca0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/index.js","hash":"bae279f89588ce59dac613ab37695a3fdb63afa3","modified":499162500000},{"_id":"themes/next/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/next/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/next/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/next/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/next/node_modules/debug/CHANGELOG.md","hash":"9e7ab0e94f1d90c8073a4f75c79e01e2d86bef4c","modified":499162500000},{"_id":"themes/next/node_modules/debug/LICENSE","hash":"d16a2786962571280a11cae01d5e59aeb1351c9a","modified":499162500000},{"_id":"themes/next/node_modules/core-util-is/package.json","hash":"8c0df3a29b73cd79502ba559f7682429c3c91eee","modified":1537585159147},{"_id":"themes/next/node_modules/debug/node.js","hash":"aa7655ee80c9a485313675f9379c2f18d33ea061","modified":499162500000},{"_id":"themes/next/node_modules/debug/README.md","hash":"f7549a04dfed8f335756a582c561cf94f0da1175","modified":499162500000},{"_id":"themes/next/node_modules/debug/package.json","hash":"f404b38ca9b2e22e66ff54c112f3e9b8125a601e","modified":1537585159149},{"_id":"themes/next/node_modules/delayed-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1430160212000},{"_id":"themes/next/node_modules/delayed-stream/package.json","hash":"14c066d6eef4068685997a76c092292e751cfa31","modified":1537585159147},{"_id":"themes/next/node_modules/delayed-stream/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1430430799000},{"_id":"themes/next/node_modules/delayed-stream/Makefile","hash":"1d88cf18c0fef56e91425a086590e31271a7c4d5","modified":1430160212000},{"_id":"themes/next/node_modules/delayed-stream/Readme.md","hash":"21db9b7ec97b7028a031a18867aab00575b09850","modified":1430160212000},{"_id":"themes/next/node_modules/decamelize/index.js","hash":"b2b327355fce3e54d2a2c542beb41ae803c33285","modified":1457167643000},{"_id":"themes/next/node_modules/decamelize/readme.md","hash":"ab75be4d249b40443b662f2cd920be0cf657c6e0","modified":1457167687000},{"_id":"themes/next/node_modules/crypt/README.mkd","hash":"e018989735db79d7b20bc3de07b5ecc7ccb889a8","modified":1322071351000},{"_id":"themes/next/node_modules/decamelize/package.json","hash":"2fcb1bc1b71a5cf6eabc8a420344d1dd120734b2","modified":1537585159147},{"_id":"themes/next/node_modules/crypt/package.json","hash":"7bc908b682e20a6ffa0b7c8c5deb43a2b7884ae0","modified":1537585159147},{"_id":"themes/next/node_modules/crypt/LICENSE.mkd","hash":"f21d24d706749564bd38f5b3f76597764323c5ec","modified":1322071351000},{"_id":"themes/next/node_modules/cookiejar/LICENSE","hash":"b3185ff9e98e4956ba3a47d1e79ec70d52ddeee0","modified":499162500000},{"_id":"themes/next/node_modules/decamelize/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/crypt/crypt.js","hash":"3b5d289ed0ef65edc286409d9112e54bf8b187fe","modified":1322071351000},{"_id":"themes/next/node_modules/cookiejar/readme.md","hash":"76d76d5991e97e6897d158143172f58c9a8e0beb","modified":499162500000},{"_id":"themes/next/node_modules/cookiejar/package.json","hash":"af233c33c6af0b93bc29f8ac88564efe361d1360","modified":1537585159146},{"_id":"themes/next/node_modules/cookiejar/cookiejar.js","hash":"3630bac946174e1e91ea659d34abfcd1030aeb37","modified":499162500000},{"_id":"themes/next/node_modules/es6-promise/CHANGELOG.md","hash":"6e2548574db26db1e356ff74cb6c297783f49c56","modified":1516734809000},{"_id":"themes/next/node_modules/es6-promise/LICENSE","hash":"018939bf52537ea641014ab9a140718634c9420f","modified":1485529179000},{"_id":"themes/next/node_modules/es6-promise/auto.js","hash":"daa2fba644449148bb02f168567a94a0e5ee6b68","modified":1513709731000},{"_id":"themes/next/node_modules/es6-promise/README.md","hash":"ba4b716524573e906689aac3ae81631f85754b36","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/es6-promise.d.ts","hash":"d038116d558e581ba7fb7d2ab277b2b8bb47dd7b","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/package.json","hash":"cb93cdec2e3b96154e17fe08e18f7ed3d5cc2b36","modified":1537585159147},{"_id":"themes/next/node_modules/eventemitter3/LICENSE","hash":"10457f3cb574cbc7bf1d82e2b1262219dd144223","modified":1425138707000},{"_id":"themes/next/node_modules/eventemitter3/index.d.ts","hash":"f836d526fef15aa971e97a6cd305a77d6e03500a","modified":1475215504000},{"_id":"themes/next/node_modules/eventemitter3/README.md","hash":"25296202258f5bbe922edebe7f8982b2c13c54a5","modified":1490943367000},{"_id":"themes/next/node_modules/eventemitter3/package.json","hash":"db151bbe00e23304f98746017bb8fcef1ccc8e88","modified":1537585159147},{"_id":"themes/next/node_modules/eventemitter3/index.js","hash":"a41bd8be1bb7eaf12d9fb8ebe6278a9fa33b46e9","modified":1490518260000},{"_id":"themes/next/node_modules/extend/.editorconfig","hash":"b613101963356bfaf6118fc55cf67bd5f5567303","modified":499162500000},{"_id":"themes/next/node_modules/extend/.eslintrc","hash":"495142299502da25082a07dc75ae9d0dfd8d19f6","modified":499162500000},{"_id":"themes/next/node_modules/extend/.jscs.json","hash":"88712fb751dde48f7326c45a25b87c593b144830","modified":499162500000},{"_id":"themes/next/node_modules/extend/README.md","hash":"25aa925ed3ef4f533976a45cece2cc8159993783","modified":499162500000},{"_id":"themes/next/node_modules/extend/CHANGELOG.md","hash":"c82d9ea712d2098a397643f13b5580f8de49b503","modified":499162500000},{"_id":"themes/next/node_modules/extend/.travis.yml","hash":"c3d28348f599bc838f7bbbff116ab3ea13d78bbe","modified":499162500000},{"_id":"themes/next/node_modules/extend/component.json","hash":"07af5d609ee23647ce3238a0e1322c35b385fc45","modified":499162500000},{"_id":"themes/next/node_modules/extend/index.js","hash":"21ecd848815af34edd426bcdafa52bf13c02be59","modified":499162500000},{"_id":"themes/next/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":499162500000},{"_id":"themes/next/node_modules/extend/package.json","hash":"8c79f0097fe48ba9e9e2670b5868e6eafcae3683","modified":1537585159147},{"_id":"themes/next/node_modules/follow-redirects/https.js","hash":"041f66c64e56c3f69535054924b55bef833723d2","modified":499162500000},{"_id":"themes/next/node_modules/follow-redirects/index.js","hash":"8a8237ca980f444d254cce289046d170f39c58e9","modified":499162500000},{"_id":"themes/next/node_modules/follow-redirects/LICENSE","hash":"fd56b60e9d494cee2eb41780b083ccae3b757709","modified":499162500000},{"_id":"themes/next/node_modules/follow-redirects/README.md","hash":"eb95c41602c54d2ac3dc0723258ec63effb73454","modified":499162500000},{"_id":"themes/next/node_modules/follow-redirects/http.js","hash":"421f81884053079054cce769dde18ae3215de81d","modified":499162500000},{"_id":"themes/next/node_modules/form-data/License","hash":"1d11381521bdc7e7df9bb1d7bf85341ffca266d9","modified":1354688992000},{"_id":"themes/next/node_modules/formidable/.travis.yml","hash":"fd5ded8b883071a5279cc78ee2c6bdb9da6d2a1d","modified":1484320141000},{"_id":"themes/next/node_modules/form-data/README.md.bak","hash":"91dbdbd25f0e985599bc346b478eacc1a4f05c51","modified":1518546191000},{"_id":"themes/next/node_modules/form-data/README.md","hash":"b4949ff4469d4325a83d16ba687fdc8c11cfd305","modified":1518568341000},{"_id":"themes/next/node_modules/follow-redirects/package.json","hash":"232ee7772b18276e6c2933fe59403f9205d3c895","modified":1537585159147},{"_id":"themes/next/node_modules/form-data/package.json","hash":"2a5535d5814b483981b249a34faa7ed15ac66e59","modified":1537585159149},{"_id":"themes/next/node_modules/formidable/index.js","hash":"fbc929bb3b85e76c25fc52743d325d9f36fb3643","modified":1479495729000},{"_id":"themes/next/node_modules/fs.realpath/README.md","hash":"325af4f63ad42821a34e8df60f6e3b502f1a3f64","modified":1466015245000},{"_id":"themes/next/node_modules/formidable/package.json","hash":"18042a6e5dbf1bdd3f372ba1d3c2b65fe23ce055","modified":1537585159147},{"_id":"themes/next/node_modules/fs.realpath/index.js","hash":"9b5cdf4ef79264959ed0a23e4c35efbe6d64b0df","modified":1466015723000},{"_id":"themes/next/node_modules/fs.realpath/LICENSE","hash":"cdf711a72ab90a1b193aea27e96cccf491e157e2","modified":1466015087000},{"_id":"themes/next/node_modules/fs.realpath/old.js","hash":"d2d656e98e4d0735902068408824f8d08aaea84c","modified":1466011904000},{"_id":"themes/next/node_modules/fs.realpath/package.json","hash":"343e13dd36104849bef6ad1ebcbfa3cdac097d10","modified":1537585159148},{"_id":"themes/next/node_modules/glob/README.md","hash":"449f1592c9cf2d32a0d74bead66d7267218f2c4f","modified":499162500000},{"_id":"themes/next/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":499162500000},{"_id":"themes/next/node_modules/formidable/Readme.md","hash":"92413d2e6cb1ccad1f1b36c4ecc14837bd5446a5","modified":1521559793000},{"_id":"themes/next/node_modules/glob/common.js","hash":"2f948b495467f2a7ac0afbb1008af557ab040143","modified":499162500000},{"_id":"themes/next/node_modules/formidable/LICENSE","hash":"8aa5e037c930f7b3dea5b4e903aa8f91b35c81e2","modified":1479495729000},{"_id":"themes/next/node_modules/glob/glob.js","hash":"c2e95cdccba36eaca7b12e2bcf9b383438cee52d","modified":499162500000},{"_id":"themes/next/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":499162500000},{"_id":"themes/next/node_modules/glob/sync.js","hash":"7482bc56682b97175655976b07044afcb65b0cc9","modified":499162500000},{"_id":"themes/next/node_modules/glob/package.json","hash":"6823c2d240fc978a8ae4ffd7fafc2c0f16fc7121","modified":1537585159309},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/.travis.yml","hash":"9e85ba46e882c33b5837cf8ed7298e54cc3d3763","modified":1521199219000},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/package.json","hash":"5d63e486efb9fed2f3452ef5a41c54b901bd90ac","modified":1537585159302},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/.babelrc","hash":"1593b8a6e7ee41bcf5fee30a4adcad4c5c5c7293","modified":1521199219000},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/index.js","hash":"f9e793d2c2f9e004e9103541a84872d57cae9e0e","modified":1521199219000},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/README.md","hash":"e47b4bfe6bf94c97ceecf2a5e29e5f4e02988b14","modified":1521199219000},{"_id":"themes/next/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1376950172000},{"_id":"themes/next/node_modules/invert-kv/index.js","hash":"de8db0a1bda39e00bb4831788a8a52fb7c968e94","modified":1403813196000},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/LICENSE","hash":"f45ee1c765646813b442ca58de72e20a64a7ddba","modified":1521199219000},{"_id":"themes/next/node_modules/inherits/inherits_browser.js","hash":"7c13eacf36e79e5e7dd257d80ec25846e4df7eb3","modified":1368715198000},{"_id":"themes/next/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":1368714278000},{"_id":"themes/next/node_modules/invert-kv/package.json","hash":"225423a0f9b84eb296ed2d488f8c42e72dc5aed3","modified":1537585159148},{"_id":"themes/next/node_modules/inherits/inherits.js","hash":"491caba7b70590f6dcbe37d7edccd9f89ac1b9fd","modified":1473280161000},{"_id":"themes/next/node_modules/invert-kv/readme.md","hash":"b50599e017388e5820ce7991ef8815c1cc334aa8","modified":1403813226000},{"_id":"themes/next/node_modules/is-buffer/index.js","hash":"eb49b73bd06bdeadbb422f63d6efe1fdc01099c0","modified":1508966858000},{"_id":"themes/next/node_modules/is-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":1442461838000},{"_id":"themes/next/node_modules/inherits/package.json","hash":"6d9627f91f82893c4dd002667877de64503f6059","modified":1537585159148},{"_id":"themes/next/node_modules/is-buffer/package.json","hash":"4fa271884bd802514ec0682170b61dfdadd52be8","modified":1537585159148},{"_id":"themes/next/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/next/node_modules/is-buffer/README.md","hash":"6e507ede8260bce223b496c2457dbd8d2b285e40","modified":1490065732000},{"_id":"themes/next/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/next/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/next/node_modules/javascript-state-machine/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/RELEASE_NOTES.md","hash":"6fcf8e2642aa1a067cfc3606aadebe00a136ad35","modified":1479672551000},{"_id":"themes/next/node_modules/javascript-state-machine/README.md","hash":"52bfc4d0988ce35dac639cc1ff75b4cea789a239","modified":1479680292000},{"_id":"themes/next/node_modules/javascript-state-machine/LICENSE","hash":"6944dc7e978171009b1d5c315bb54190f39ac8c5","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/package.json","hash":"6d8aa13a9b393652fff4520a621545d6546f418c","modified":1537585159148},{"_id":"themes/next/node_modules/javascript-state-machine/index.html","hash":"45f066dcff18bbcd0f685ea84e02a6cd2566d76d","modified":1479672098000},{"_id":"themes/next/node_modules/javascript-state-machine/bower.json","hash":"00e627c6b596ebf70d52774f39106ea0a21c6946","modified":1479673259000},{"_id":"themes/next/node_modules/isarray/package.json","hash":"33a1d807ff170bcaf770b19360cbbca540f2ebcc","modified":1537585159148},{"_id":"themes/next/node_modules/javascript-state-machine/state-machine.min.js","hash":"619d112657d3f98dd9defb3aef0d3e90f19676ff","modified":1479673273000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/package.json","hash":"96079bcf08ec788645cd3aab4ffa660617302b0c","modified":1537585159130},{"_id":"themes/next/node_modules/javascript-state-machine/state-machine.js","hash":"e9dc6792079846d29447f7af18a80aa2b953d698","modified":1479672427000},{"_id":"themes/next/node_modules/leancloud-storage/.jsdocrc.json","hash":"93b7b3cc5e5d0234034cd3906dafa335fd30de46","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/.editorconfig","hash":"54b0f9cdae8d9ee2ff365ee6f462f6b20bf4d150","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/.eslintrc.js","hash":"65ea962ac48948bb0015fe980218dad02ecfdc29","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/README.md","hash":"915a8805638c17d3257efea3ecb035f313501586","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/LICENSE","hash":"51d99371b57092555d3fc06264c965894d3c613d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/live-query.d.ts","hash":"73b58c1cf5d75b22512a5671cfc4abaafe5c7367","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/live-query.js","hash":"83bc36de95650d077061cdf19ccee77d3ece6ece","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/changelog.md","hash":"c09cda3a718ab2964e72869f7305889141c0d1fe","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/package.json","hash":"8cd45c08d92b8fd4733314711ef2b614d9c6c6db","modified":1537585159308},{"_id":"themes/next/node_modules/leancloud-storage/storage.d.ts","hash":"22c43f917066395b50ff8bde38bae956a030a9f8","modified":499162500000},{"_id":"themes/next/node_modules/localstorage-memory/.jshintrc","hash":"9ca9d1f899e45f133221fe19a5bfe3ef83648916","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/.travis.yml","hash":"6682d6287ff009c47a297cc753d7c68cfe5ba570","modified":1450031045000},{"_id":"themes/next/node_modules/leancloud-storage/tsconfig.json","hash":"fa45e1bd1c78cf5c6fc5751ec125546431a98c85","modified":499162500000},{"_id":"themes/next/node_modules/localstorage-memory/.npmignore","hash":"8c196ea633c934065ddf9f05370e83fdf52ed7c4","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/README.md","hash":"c5c64e8201ba063ef7bba96f5844f6420321e588","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/bower.json","hash":"4c9d555bfd7549bb0e645f5918936c1009bd3ad7","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/package.json","hash":"08654c6cf96eba324983b3102223af2c89268a76","modified":1537585159148},{"_id":"themes/next/node_modules/long/.npmignore","hash":"a57ca7983ff8926d8554b68d6f4b735ed72cacb5","modified":1402102110000},{"_id":"themes/next/node_modules/long/LICENSE","hash":"47b573e3824cd5e02a1a3ae99e2735b49e0256e4","modified":1361894444000},{"_id":"themes/next/node_modules/long/README.md","hash":"1434084ba139a8249c66b92e77f4aff601aca9d0","modified":1445900745000},{"_id":"themes/next/node_modules/long/bower.json","hash":"1b5f9ce7f0a0f840c8d5b15638639b5eba9a8f64","modified":1469205451000},{"_id":"themes/next/node_modules/long/index.js","hash":"1e00657159c6fef04c0ba2f293493e780088b06e","modified":1445623562000},{"_id":"themes/next/node_modules/long/jsdoc.json","hash":"c3b60b6bdcf096dca492500d9d28e95b06dfcfa1","modified":1445902088000},{"_id":"themes/next/node_modules/long/long.png","hash":"0a8cb435523b43d5f0fda0340c9a0c7a0ee613ac","modified":1445633425000},{"_id":"themes/next/node_modules/long/package.json","hash":"84e78bfa378067e978f4cef2b6fce49cc04ef5cc","modified":1537585159148},{"_id":"themes/next/node_modules/long/.travis.yml","hash":"bc9b389d08e7cfc8c7a6aa466e552ba423db7da7","modified":1445789201000},{"_id":"themes/next/node_modules/long/donate.png","hash":"6bf31df6f45cdaf4d8ed128869bcb32c37372e46","modified":1445789108000},{"_id":"themes/next/node_modules/lcid/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/lcid/index.js","hash":"44bee35e89acd1a5d4f69588d68d0aab44ea3d2e","modified":1426489151000},{"_id":"themes/next/node_modules/lcid/lcid.json","hash":"8fa5db38e0809fdbcdd19e59bb3377504612863e","modified":1426485054000},{"_id":"themes/next/node_modules/lcid/readme.md","hash":"f8875f8dd5001202245c475d8e10a0ccb4d4552d","modified":1426488990000},{"_id":"themes/next/node_modules/lcid/package.json","hash":"3e0c1690300b7a28a5155a534ec570b3138c88bb","modified":1537585159148},{"_id":"themes/next/node_modules/leancloud-realtime/.editorconfig","hash":"54b0f9cdae8d9ee2ff365ee6f462f6b20bf4d150","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/.eslintrc.json","hash":"0813c8a74f6bf7801556b3c6a2591bed36d27378","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/.jsdocrc.json","hash":"3ff89ea381f4e2cb06b276980fb9d8b00d2db6a2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/README.md","hash":"17efdfe1eab5d3748a4fc1c8b1d0b6a36e340878","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/.travis.yml","hash":"ee18c0e35dedcdf60eaf0299ad7143009e5e5540","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/changelog.md","hash":"043f8524cac1a2e163a95a05437760c7102ce6da","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/core.js","hash":"a396fd98adb88aefe96591e06a45453f8c1ae1ac","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/karma-sauce.conf.js","hash":"d083c16c1c3d316fb68767bf882740aaf35bce82","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/karma.conf.js","hash":"35488973a5199a2fb3545349fcb7625efd7dbe73","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/package.json","hash":"891366c15c8323ce92596d40927c7f4deb3192aa","modified":1537585159308},{"_id":"themes/next/node_modules/md5/.npmignore","hash":"95101f3b2fe509b9a8fa99a25ae17c08f19c9e5e","modified":1347350896000},{"_id":"themes/next/node_modules/md5/.travis.yml","hash":"65049ddb04a3fefe038ba78a2c694d8d3b001a53","modified":1347350270000},{"_id":"themes/next/node_modules/leancloud-realtime/realtime.d.ts","hash":"66f3602b13430508cc681095b3ec56245eab9799","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/LICENSE","hash":"51d99371b57092555d3fc06264c965894d3c613d","modified":499162500000},{"_id":"themes/next/node_modules/md5/LICENSE","hash":"0a8306cf170823047d75f6ca2570efdc250959d2","modified":1340011888000},{"_id":"themes/next/node_modules/md5/package.json","hash":"ce70aa5d972a4a2fe34c73c09f093d0a1845fd91","modified":1537585159149},{"_id":"themes/next/node_modules/md5/README.md","hash":"4ea6d469c280e387381388410ef52da87c0df64a","modified":1436996417000},{"_id":"themes/next/node_modules/md5/md5.js","hash":"18bcd004c43c64fe5c765a451f0bdbd3afb4e04f","modified":1472679460000},{"_id":"themes/next/node_modules/mime-db/HISTORY.md","hash":"05e3ada962692ee1be06490dde1bfbc1b4906617","modified":1534775787000},{"_id":"themes/next/node_modules/md5/test.js","hash":"13196e23e973d3b7d31bbcd5fe219592a65f8c9b","modified":1472679499000},{"_id":"themes/next/node_modules/mime-db/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":1502153377000},{"_id":"themes/next/node_modules/mime-db/README.md","hash":"ff1616a30da5a8c39a6552600c19432a2e94610e","modified":1525548570000},{"_id":"themes/next/node_modules/mime-db/index.js","hash":"31180f8d0ae079b1bee7ee03e77ea5323583eb06","modified":1502153377000},{"_id":"themes/next/node_modules/mime-db/package.json","hash":"3d947ba597fc59e3338a10bbd2065a20e7602adb","modified":1537585159149},{"_id":"themes/next/node_modules/mime-types/HISTORY.md","hash":"352d469253d446b1831bf5b02f47bc94c904e1e4","modified":1535319685000},{"_id":"themes/next/node_modules/mime-types/LICENSE","hash":"f027af3e61af3880fd7f7b8ba9452a85dd215738","modified":1502805458000},{"_id":"themes/next/node_modules/mime-types/index.js","hash":"8d1f07ae6192c4dd6bc08a9247a91af4a0a51eca","modified":1518797976000},{"_id":"themes/next/node_modules/mime-types/README.md","hash":"3f25621607960c6e73fc4f9b8bf97327e210a9f2","modified":1518797976000},{"_id":"themes/next/node_modules/methods/HISTORY.md","hash":"a6d25d5b55c605c66ca1652c61bec0494505fa2f","modified":1453084845000},{"_id":"themes/next/node_modules/mime-types/package.json","hash":"f0ea9f7075aa52c32eebe1365de336bf0414aa7c","modified":1537585159149},{"_id":"themes/next/node_modules/methods/index.js","hash":"82eb55245f510e6cbc580f5ced1dc9d64d664d2a","modified":1453078936000},{"_id":"themes/next/node_modules/methods/README.md","hash":"4148c08077812690aeb399d0b063df47bb2ea674","modified":1453079850000},{"_id":"themes/next/node_modules/methods/package.json","hash":"134f57fbe6c8f48a18ef01d48e16f43e3057709b","modified":1537585159149},{"_id":"themes/next/node_modules/is-fullwidth-code-point/index.js","hash":"7647b9a016393c95e9694ff1dafb3e4ee66fd795","modified":1437083853000},{"_id":"themes/next/node_modules/inflight/LICENSE","hash":"515ec4469197395143dd4bfe9b1bc4e0d9b6b12a","modified":1399258628000},{"_id":"themes/next/node_modules/is-fullwidth-code-point/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/is-fullwidth-code-point/package.json","hash":"17da9b3cedcaf86fdefd371a3a8937ce92e0c4de","modified":1537585159312},{"_id":"themes/next/node_modules/methods/LICENSE","hash":"c5761d628a53f59ebfbadca4eff7150083d3ebd6","modified":1453078947000},{"_id":"themes/next/node_modules/inflight/package.json","hash":"be6074a63f12f6bc92a6de669a599ff2a3677af1","modified":1537585159310},{"_id":"themes/next/node_modules/is-fullwidth-code-point/readme.md","hash":"51b58cdc5cdf9b9e20396c9daaa411a7337280c3","modified":1437083960000},{"_id":"themes/next/node_modules/inflight/README.md","hash":"cabcd4da1794331188da1f8f864ea1aa0ca68657","modified":1399260771000},{"_id":"themes/next/node_modules/ms/package.json","hash":"93b676254702c5913167cddc1c8b6d3410e76171","modified":1537585159149},{"_id":"themes/next/node_modules/ms/index.js","hash":"1568a20e73e23c23ef05c281ef991c73eb5f7b84","modified":1512065841000},{"_id":"themes/next/node_modules/ms/readme.md","hash":"ed85766b5daba3e218fd1714880a778f0e38e193","modified":1512065841000},{"_id":"themes/next/node_modules/mime/cli.js","hash":"4d5f01b12fe3fc18e06d871ce00d0264643200fa","modified":1537585159429},{"_id":"themes/next/node_modules/inflight/inflight.js","hash":"84aed0b47c15de35a85a5aa6c641342ba4dd5a88","modified":1476330767000},{"_id":"themes/next/node_modules/ms/license.md","hash":"884e84ebfddafd93b5bb814df076d2ebd1757ba8","modified":1512060657000},{"_id":"themes/next/node_modules/mime/LICENSE","hash":"2e84853fb5f2711901b6ecb4a0b8fe4d419348fd","modified":1511456684000},{"_id":"themes/next/node_modules/mime/README.md","hash":"ed339e905c074b2391760ebb46d624bfbc1860fb","modified":1511569060000},{"_id":"themes/next/node_modules/mime/CHANGELOG.md","hash":"fb1894068ff1a400dd64fd5e5b5006d7561d7534","modified":1511571168000},{"_id":"themes/next/node_modules/mime/mime.js","hash":"f3ccff5ba27af0b9d39cc5c2f228f5ae3e276d13","modified":1511569060000},{"_id":"themes/next/node_modules/mime/package.json","hash":"9989c8afcc33dfec52437251607471f9d170f365","modified":1537585159150},{"_id":"themes/next/node_modules/mime/types.json","hash":"caccd2726f4694fa5a276f34a28c29e8fb073ef5","modified":1511571197000},{"_id":"themes/next/node_modules/once/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430780985000},{"_id":"themes/next/node_modules/once/README.md","hash":"69b0a9165715c6cd0e8de37ddb4abad94de2b102","modified":1473196024000},{"_id":"themes/next/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/next/node_modules/once/package.json","hash":"f9a40f5d190dd92208889d74666892bf56d9100e","modified":1537585159309},{"_id":"themes/next/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/next/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470774896000},{"_id":"themes/next/node_modules/number-is-nan/index.js","hash":"f46fa63ddeeaf817837ade36c96a37045c36b5bf","modified":1432154213000},{"_id":"themes/next/node_modules/minimatch/package.json","hash":"d4eadacbb0c0dd94a4b19de204824dcf3fe120e7","modified":1537585159149},{"_id":"themes/next/node_modules/number-is-nan/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/number-is-nan/readme.md","hash":"d579efeab4be85082383108869ebd212ba56ab5a","modified":1475212234000},{"_id":"themes/next/node_modules/qs/.eslintrc","hash":"af86f256e00e4a0ebe26c0ef8a926e191d81033f","modified":1525237041000},{"_id":"themes/next/node_modules/number-is-nan/package.json","hash":"ccc174e0542b69bea29918d0311cc1e2050a890d","modified":1537585159149},{"_id":"themes/next/node_modules/qs/CHANGELOG.md","hash":"5374e64b21af4db41ef1b529b7d0d0d8ab8f3bcb","modified":1525377002000},{"_id":"themes/next/node_modules/qs/LICENSE","hash":"ddf13f1b7345d730677237125bc2e46fbbfbbf32","modified":1450856430000},{"_id":"themes/next/node_modules/qs/.editorconfig","hash":"482f35688b4e4f8b77ee64b804fca396e2a23022","modified":1501090018000},{"_id":"themes/next/node_modules/once/once.js","hash":"f78c8cb8d754261b59d03e867f329c2ffdefae45","modified":1473195971000},{"_id":"themes/next/node_modules/qs/.eslintignore","hash":"7b8fdc232fc9b1a8050da3c419dea3d23b5da9c5","modified":1450856430000},{"_id":"themes/next/node_modules/qs/package.json","hash":"ec281af9e2d8b63f171271c641d290a24f006faf","modified":1537585159311},{"_id":"themes/next/node_modules/optjs/.npmignore","hash":"5123f173eafe83893f168ed4826385132e0b340b","modified":1368540334000},{"_id":"themes/next/node_modules/optjs/README.md","hash":"cfed0303552e65bf4e3979a0040c9db0d097ef32","modified":1452525277000},{"_id":"themes/next/node_modules/optjs/opt.js","hash":"c317ee7160d36aaa823736206d02137ab0675352","modified":1367541460000},{"_id":"themes/next/node_modules/qs/README.md","hash":"ac4ad81116c9e9e06c46433b58220bc94660ac9e","modified":1497472480000},{"_id":"themes/next/node_modules/optjs/test.js","hash":"eef64463add0fe040b934300a99dccfda868b7a9","modified":1367541117000},{"_id":"themes/next/node_modules/protobufjs/.travis.yml","hash":"2c2689834536440facd07217a061ee54664e082c","modified":1485532820000},{"_id":"themes/next/node_modules/optjs/package.json","hash":"a4068d6ff4bac3d04464990e8fee1990cfb2d12f","modified":1537585159312},{"_id":"themes/next/node_modules/protobufjs/README.md","hash":"b7b1784c37433cbc6ce5015258a285300ef047c3","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/LICENSE","hash":"47b573e3824cd5e02a1a3ae99e2735b49e0256e4","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/bower.json","hash":"9729ec1f4ae39abf42c48e9d379178667c0de478","modified":1526462376000},{"_id":"themes/next/node_modules/protobufjs/donate.png","hash":"c2e8a0247c544b09ad2560406e23be4168304fe3","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/jsdoc.json","hash":"5b20759e3bd8e9d23a4c0ab783d4483906600031","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/index.js","hash":"6c64666073506e2fd75bc9964046d2c028b7021f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/package.json","hash":"c4a09c089960103e7fb3a50584ba231f083dcfc7","modified":1537585159312},{"_id":"themes/next/node_modules/protobufjs/protobuf.png","hash":"7b2b22c601e1127ef063856e001ad6d5e0963177","modified":1485532820000},{"_id":"themes/next/node_modules/readline-sync/README-Deprecated.md","hash":"35195de9e13d3cf2af6ef5dad1c6b6f938db574a","modified":1431672268000},{"_id":"themes/next/node_modules/readline-sync/LICENSE-MIT","hash":"cd1904a569074b4577d2440e23cb3edec3361b60","modified":1517972773000},{"_id":"themes/next/node_modules/readline-sync/package.json","hash":"edc518c8f153bf767846abbb7a48d329af0741e5","modified":1537585159308},{"_id":"themes/next/node_modules/regenerator-runtime/package.json","hash":"0a36c818663e84317667477df1d1ac001181a0e6","modified":1537585159311},{"_id":"themes/next/node_modules/regenerator-runtime/README.md","hash":"ce56378a79116028f3deb5d40a2406264167fd20","modified":1462203069000},{"_id":"themes/next/node_modules/regenerator-runtime/path.js","hash":"2efb460758200f77b944c9ae48b59d435909bb29","modified":1512675310000},{"_id":"themes/next/node_modules/regenerator-runtime/runtime-module.js","hash":"e4c2867b78a818a308a86d10882a67861af55188","modified":1512675310000},{"_id":"themes/next/node_modules/regenerator-runtime/runtime.js","hash":"6fdf407b51eb979189c2aa0d2a8c3556a6c26a45","modified":1512675310000},{"_id":"themes/next/node_modules/os-locale/index.js","hash":"b0aa01d61dede1b2f87d5ed56318f83787551a07","modified":1441692137000},{"_id":"themes/next/node_modules/os-locale/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/os-locale/package.json","hash":"59f86c8a5cfa525f2d4d12aafd9a202dac75cf5d","modified":1537585159311},{"_id":"themes/next/node_modules/os-locale/readme.md","hash":"625c3415731f47406831239e3c2abf791df39d99","modified":1441692137000},{"_id":"themes/next/node_modules/string_decoder/.travis.yml","hash":"7b7251ecc270c4ee9ed7ae4255a15ca3cb75db08","modified":499162500000},{"_id":"themes/next/node_modules/string_decoder/LICENSE","hash":"36791ee8e28518f9fb92b51ad9e4247708be9c55","modified":499162500000},{"_id":"themes/next/node_modules/string_decoder/README.md","hash":"324e83b5b018b9e290e3650ee9dc907332df7ddd","modified":499162500000},{"_id":"themes/next/node_modules/string_decoder/package.json","hash":"f7606bcc161ea1d41406b28feafb7b76c7253724","modified":1537585159310},{"_id":"themes/next/node_modules/safe-buffer/index.d.ts","hash":"0b5844a33b757b9db574541363116917fcbc6d90","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/README.md","hash":"75916065970faa645bca603327ecbaea09afe12e","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/index.js","hash":"f67b8decb99eed068f28c9ae56df08c21bf4c33d","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/package.json","hash":"88d418c8cba7ea689662e39a24d38582cb45542a","modified":1537585159310},{"_id":"themes/next/node_modules/path-is-absolute/package.json","hash":"459d8ac39d514984d244ad2d81a2ddca01eac811","modified":1537585159311},{"_id":"themes/next/node_modules/readable-stream/.travis.yml","hash":"3e9186d540b909db7529af866d75ac160856ffc7","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/CONTRIBUTING.md","hash":"1b97e91ac67fcbbd711dedd3b5c388c08489eeaa","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/GOVERNANCE.md","hash":"f30fd9ba0fa4f12c900d1b7bb248aa568a72cc3c","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/README.md","hash":"f48fb91f1cf767e1665a3cf209774cb5b975e08f","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/LICENSE","hash":"d3622fac093fe1cbcb4d8e8d35801600b681fc45","modified":499162500000},{"_id":"themes/next/node_modules/path-is-absolute/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/readable-stream/duplex.js","hash":"65d2569a9805988eb48fc26ed9fb7123bb062c12","modified":499162500000},{"_id":"themes/next/node_modules/path-is-absolute/index.js","hash":"6de38a82f68960de2bd07fd9114541f02bee2f62","modified":1475210370000},{"_id":"themes/next/node_modules/path-is-absolute/readme.md","hash":"b09eee74fdfb9195b8b81401654da2a403886d2d","modified":1475210477000},{"_id":"themes/next/node_modules/readable-stream/duplex-browser.js","hash":"9fa4bc0f1f8950e8525e33c376e0722b5be92660","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/readable.js","hash":"8fcd80b248d1dca48a678abc8cac9d9a0664c7d1","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/passthrough.js","hash":"1498c28497ca568d3dd207eac8b236c221a17988","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/writable.js","hash":"d1906d0190fe89683d34219a9407ae905cd91233","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/package.json","hash":"a671ddb7c42b80ee9eef47ad3493066ff4f8cd38","modified":1537585159310},{"_id":"themes/next/node_modules/readable-stream/readable-browser.js","hash":"c72b2b1c4f810d22237ffe40a6a2fd6e3f7c8c16","modified":499162500000},{"_id":"themes/next/node_modules/superagent/.zuul.yml","hash":"ba8a7f5b46f4234cefacbcd3e96a3c0cc8e2a406","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/Contributing.md","hash":"46b9836d032efcad366d454777e880e59d8462d7","modified":1440021232000},{"_id":"themes/next/node_modules/readable-stream/transform.js","hash":"50856785dfc8c7cd64838ceb52124fd30378a812","modified":499162500000},{"_id":"themes/next/node_modules/superagent/History.md","hash":"9257c6dda41790fc421223bf2f74c6514e3673a0","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/Makefile","hash":"b8c0ade13ec2dd432082301cbc6616186f85cf14","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/LICENSE","hash":"41c4946ae5d2839dce19e4430cec101934ae5cac","modified":1478530871000},{"_id":"themes/next/node_modules/superagent/Readme.md","hash":"fe070efe09b9d53b6eee962f41644443de4d1abb","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/changelog.sh","hash":"c19cf220471e15884ae85091f4083fe19bb41c0b","modified":1508251498000},{"_id":"themes/next/node_modules/readable-stream/writable-browser.js","hash":"56a4597f339df94654933e8e8264b2edcdbcf2fb","modified":499162500000},{"_id":"themes/next/node_modules/superagent/.travis.yml","hash":"5f63df82de7d21b90174e808ecca4f0097f4ff55","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/superagent.js","hash":"2f01924ec188719eb31e007276460bd09f7c5955","modified":1525019170000},{"_id":"themes/next/node_modules/superagent/package.json","hash":"74176066521f458853bd0e79d96dd8082305f819","modified":1537585159310},{"_id":"themes/next/node_modules/underscore/LICENSE","hash":"c81f8452d9e121c7a833de4735b953030420bc97","modified":1527795734000},{"_id":"themes/next/node_modules/underscore/README.md","hash":"57cafff6a10b5960bbc750011c34c782961c9b6a","modified":1524076962000},{"_id":"themes/next/node_modules/underscore/underscore-min.js.map","hash":"9cd9a8076c1305458860faa753b025574c62ed87","modified":1527801050000},{"_id":"themes/next/node_modules/superagent/test.js","hash":"67b08258e42081edafb3e50496384c5c69b9556d","modified":1525013015000},{"_id":"themes/next/node_modules/underscore/package.json","hash":"757148b3e71241c65257697f9d70470b51485729","modified":1537585159310},{"_id":"themes/next/node_modules/underscore/underscore.js","hash":"db56d63a568119eab2f103416ef7de43d6429fd6","modified":1527800511000},{"_id":"themes/next/node_modules/lodash/_DataView.js","hash":"f5780de8f4171ced0e5f4c52aba30e58660070e4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/LICENSE","hash":"4aa67fb8f8b16d40701f21a8089a410a7d178ede","modified":499162500000},{"_id":"themes/next/node_modules/lodash/README.md","hash":"e396bf21b063a9af127f9de9ac46f2cc504c7bb1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Hash.js","hash":"572ffd33bbac9360f2d2591f7b44f72077d52297","modified":499162500000},{"_id":"themes/next/node_modules/underscore/underscore-min.js","hash":"69b8b33acbd62281920d4b73c310c66c4cfc8992","modified":1527801050000},{"_id":"themes/next/node_modules/lodash/_MapCache.js","hash":"afed02775f092be6e7328f19b6991a419baac9c7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_ListCache.js","hash":"6df951af4fe1c2e428720e3fea6f7be3e6c64edc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_LazyWrapper.js","hash":"9fc0cec80e680d4fe00cf4e33672e7f06d4b9b79","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_LodashWrapper.js","hash":"d1b595bd38e7764539f2cf99d2374f5c5aa72d70","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Promise.js","hash":"7c7b81e303018a3045ca269b1be551224b607790","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Map.js","hash":"d58862090ce31a3295cb1dae73e44dcdba9b70bc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Set.js","hash":"d55df157d59851d181aae5086ac2b703f41e422d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_SetCache.js","hash":"20a1a687b681a839dec78ee9b1c07e0fcee4cdda","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Symbol.js","hash":"1d38c59f19e1b038981b4f0093d5b504d647c694","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Stack.js","hash":"581507149d88de85ca4bed49ea0c22467d4e65e6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_apply.js","hash":"cf8c13531bb2ebaaa912ed42cd51d35749780b49","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_Uint8Array.js","hash":"9aca80cbc7c3b25813dbeb9561324d3d6ff7700a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayEach.js","hash":"904f07de69303a57591f6f012ae390d37af3f595","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayAggregator.js","hash":"4c46ec909fd72aca86fbba95f8042b39875a2fc2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayEvery.js","hash":"1c52b5548127fec0d8e876e6612bc7579b64c88b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayFilter.js","hash":"de05ba1636ccd6f97f5527aaaa7bcd355ef96a3b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_WeakMap.js","hash":"f384e74a27955f5ab92345281a5fcb7d95111b58","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayIncludesWith.js","hash":"ae055079baa36a646be539921afb899598b99ade","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayMap.js","hash":"50a635afd8bfba130f5ec9cc693c06eb0ed57690","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayLikeKeys.js","hash":"3e0338e1cbbfb9c9f1b00adf873e176478b985c2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayReduce.js","hash":"87b47db2e2ffbf2d671e1a974eec644d16424412","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayPush.js","hash":"8b9d6d4bcd8f6661ee23634aecda75d5395db2cc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayEachRight.js","hash":"d9c9880639a791b9b7a50fa4b9d95987a9adb530","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arraySampleSize.js","hash":"cfe8e3d04b52e678f1475ed3df969bc5eedea859","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayShuffle.js","hash":"7023c88e8b1fd408755327bf70fe8d58c9496607","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arraySample.js","hash":"8b9ade97c8c183d58e1bcfbdcdf4b77b44c38245","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayReduceRight.js","hash":"59ee39e14d1be368c9de8d06b8a62ba7a57f9c18","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arraySome.js","hash":"b3e385ef53a7d44b49f705315ae30efc4b81d5b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_asciiWords.js","hash":"164db22da4ac8a77d75ff57a1d63d0c4b9e48388","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_asciiToArray.js","hash":"4331bba9d396c601f9ac9e676283bc3ac25ccf8d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_asciiSize.js","hash":"befe650097f784878651dd1881da7efb3c0d0e73","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_arrayIncludes.js","hash":"c1211511564c2074c24cd0a45e2fc63b94017d42","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_assignValue.js","hash":"8889cd8e010ef1ab8259b9401f1ace23164a676a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseAggregator.js","hash":"a0f27fd540785f2f3d54913950fcd555ca789b4f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseAssign.js","hash":"b12b76d29619f0fadf5c75c2b1f4d9c5a140af4d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_assocIndexOf.js","hash":"b557d0550d466f2e0a20697d953061c8198bc3f2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_assignMergeValue.js","hash":"7fd48396b2393692858a13cd1d9fee4f9f56c034","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseAssignValue.js","hash":"c09bc3ff6aa7082144eef5b7583f795f7d16ac19","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseClamp.js","hash":"ce109abcb1e12c30e97c79917e51520aa544db9a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseAssignIn.js","hash":"1e9e2424746865f1ea7c278592329917a2d2ddd8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseAt.js","hash":"93dcc3d90a67de6c407d3f6ccda164d3fac140b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseConformsTo.js","hash":"f2f1431ffc02fb8ab64d86abecdcfe2685d2eb4b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseConforms.js","hash":"f518eceb5bf9e6dc4c9cf811e07c3ff8469c902b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseClone.js","hash":"f294126ff721d47b196d14eed6c662f605144809","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseDelay.js","hash":"2a9133e727e4b0a6a9ec776addec9c791c812a4f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseDifference.js","hash":"b3dc957d88a325a9c4e11645134bc92eb807dec8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseEach.js","hash":"8df288083999c6711cdddc83d3f62ee092e0bd35","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseCreate.js","hash":"202aced68f2ce65d35a3d9e7ee56e373de463233","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseEachRight.js","hash":"f8f31ce8197c50e01ffe073be5e329bb95c5dd7f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseEvery.js","hash":"6e445241a2ceb58e400c619247c7f1d5a9ad76da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseExtremum.js","hash":"931adb7b69f0e4683324797c8522f4f6c9ad6321","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFill.js","hash":"474427d0d470b473ac37456e9ba151a966b2ade7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFindIndex.js","hash":"a6811f11035fd20ebedd10b014566614f1fee155","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFindKey.js","hash":"dc99c1f56a9a4559ae3fc9f3dbd7f8cfac677949","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFlatten.js","hash":"045ce95760998450c806995fd49db7ce8fd96982","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFilter.js","hash":"aa90047b0a1231f770807422c67a36a4c3524365","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFor.js","hash":"6d4e2744c99f75df073ca2e005317feea00533f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseForOwnRight.js","hash":"29a6ce1c8ff0893a7a5021a5b54d3303dc7e9ef5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseGetAllKeys.js","hash":"f7c042fc3a0e1f89ee6f0ab2765615983796b303","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseForOwn.js","hash":"8977ba022a8d144093f35c729822e6161d5fd291","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseGetTag.js","hash":"b66f083cb3c9fac408a18fa8e104a20e64355d45","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseForRight.js","hash":"2d3155596f8e8420da54564a69dadfadbd84cd67","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseGt.js","hash":"7368ca132e9b25b5f2ae74cfc01d619f284e84d3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseHas.js","hash":"0643a432e7d64d10615b4cd7092f2483c317cda7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseHasIn.js","hash":"e11103f369bb4fef0cbd193622c7126c70e0fc8c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIndexOf.js","hash":"554c47e0383ef62d126d9d66aeb416e8e75ebf3b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIndexOfWith.js","hash":"bf10b85520bfc5add8a38c341e95a985e1ab3626","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseFunctions.js","hash":"17d2e75a62a380223a943a07c0726c2d101c59ff","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseInverter.js","hash":"84de1267be8b3b1973a696826a66247ff88e7c25","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseInvoke.js","hash":"b287bbe200beaf0e4825bc7bccb7ff702e0eff74","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsArguments.js","hash":"6c428b2e543a752140ee6b1223a659f45025a71c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIntersection.js","hash":"deed35c6297d406b8f5e0672a4cc99cbc95fd0b1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsArrayBuffer.js","hash":"f154818234664296ec6c8496be8cbe77c6909c8e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsDate.js","hash":"c21fd699a4d3d38d28770746f33992778c3e2e94","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseGet.js","hash":"2c7bfaa44754b5302e3bd2137d95b4e045bc4c85","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsNaN.js","hash":"01512b16931316dc87e670d11c3b3d7c354366a9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsMatch.js","hash":"68d520389a8b2d00f0b649787df02734bc00ad9f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseInRange.js","hash":"5186220a6519de4a9b0882ccbe565b74caea68cf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsMap.js","hash":"b28a7248f4a44300ecc8080ad259944d4bb9a356","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsRegExp.js","hash":"663e2101fd6aa3086bddedb08f0d2e7bbc30c0f9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsSet.js","hash":"52795ae38cc0426dca2468342cf28dc2f78775f2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsNative.js","hash":"1f36b939f5e5b0dc5f28ba7c47206d717b966c7e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsTypedArray.js","hash":"291f63ba52ab97764a33305efd699a2e394b2517","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseKeys.js","hash":"29d99b03db5dad4affa41a388470c89595e44991","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsEqual.js","hash":"7f9ae050c867190bf8379e97f1fd9d01cc2c96f3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIteratee.js","hash":"032e8e56ae36205075f11cef6a7e91890a8425bd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseIsEqualDeep.js","hash":"becc7c47d3ad5aaf2a6e5df7038595f21ff92bb3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseLodash.js","hash":"dfebf25a399f77aa4b416e1a92ba11ca59c2a8e9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseKeysIn.js","hash":"eb88d9e4d4f429c250f3ee2f22312b885ce7a75d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMatches.js","hash":"bb2332567191ebdf1e2414efb7279d989fa223ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMean.js","hash":"0e536b0da31875ca4a97989a76d851b5589cc867","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMatchesProperty.js","hash":"0a4a914477d3d5a170f0c5bc7c5b2abd106bbfbf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseLt.js","hash":"92e621a7798bec567f79b006e1608a434b18d22c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMerge.js","hash":"66a8b1af03443b624349e9251cc9570e44b5820a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMap.js","hash":"e4d4a4031106e999c0f44a81dd62afc0f84f3fe0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseMergeDeep.js","hash":"b20f414c41bf4446a4723ad001247e14568a91b7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePick.js","hash":"1eb8ddfe3a55363b22404e9cfe3723a56c9715cf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseOrderBy.js","hash":"c76b0438a27df64a71220d2e819d9baa79d9641f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseProperty.js","hash":"31d8d961f7383f581a360947b0b752e95d35cd14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseNth.js","hash":"7afabca34c7963943eab1dc70a433231283cc8c5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePullAll.js","hash":"a140d4775d1ee69b9d6d434d5729f82b7e55bc8e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePickBy.js","hash":"2749eb539f38c35b694e6b8f74d20f5cdc37ca15","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePropertyDeep.js","hash":"b9329f5af409f1578f2fb9fd34ccbdf8cbe54070","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePropertyOf.js","hash":"33b60f71f3cbf5f26607a2b7356070f8f6953223","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseRandom.js","hash":"86fe0bbec2bf3b242a8d861abd894f9281c2408a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseRest.js","hash":"e31a38bffa598aef97317e7b1970a212a4d44d00","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_basePullAt.js","hash":"7b291db76db38fc2850529f7e519f5a273dd1f5b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSample.js","hash":"bf50189b8b304ff4bafec174b108a7fe25a6a003","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseRange.js","hash":"8816c954f5f5c9c100a51ae5be416a4661e418ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSampleSize.js","hash":"b05eb913d80f60e274e00632d5499319bd0204f2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSetToString.js","hash":"4fa840e62be63264b265b19fff3dbad4540a376b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSetData.js","hash":"fa3ddde4d03be0d225fb7e96d1b5f86f0e321453","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSet.js","hash":"0d99172a2005d7c0dfa71114b0cb0aca9cafd47a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSlice.js","hash":"959756556fea236343ff752adb6b869bcac82e4b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseShuffle.js","hash":"62b58e90df1ca7ee5d44cd923fd531f1964f37a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseRepeat.js","hash":"e5acd9c33e9026b8848de16db87d9ee1dfe293db","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSome.js","hash":"4be43bfa949a8292f8f780eeeb83bb5da00f58b7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSortBy.js","hash":"77483347d5381f336bed3174c5b301f40dfc7a24","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseReduce.js","hash":"96e87d251b7bbf30707b39b529243e5d3a7f5c2f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSortedIndexBy.js","hash":"23b9368bcfe7afb35249a3a2bf880a170cc72ccb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSortedIndex.js","hash":"6a353c6feb19a86665f9ea37ae0ff7f5ff5a1d9b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSortedUniq.js","hash":"c2ad97df99636c7977b6374e44cb61dedd64aece","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseSum.js","hash":"e96a801668916a3027558a8795a4957e11c791f1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseToPairs.js","hash":"d6ad1c204c16fee82d17a5b4febca922a78cda47","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseTimes.js","hash":"7f3edc2bfd65d843b592ff123759c9d616ce3a64","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseToString.js","hash":"f2a75bd83872d649b56a1c0fe7b785ee13ac3cf5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseUnset.js","hash":"d9a16888d3995c743789eb2003d8d5c438f00ca5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseValues.js","hash":"a8cfeda4f95c958cb46ac71f77a631e57617c1f7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseWhile.js","hash":"4fb4c4f09282c0e560a1bb289caaac7d58d64a10","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseWrapperValue.js","hash":"1b1d0a42b03e95693fc88d6a24e4a3473d15392c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseUnary.js","hash":"5dbba7edab4fb0d361906358fa2d49dc35c1e603","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseZipObject.js","hash":"7995093c8f43666bf1f2dc15cc1d752dacc55e35","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseXor.js","hash":"0077b838e654fac3f5ebcc99ab1dafbd158e4e71","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cacheHas.js","hash":"d676b44402e7e4ff04011e54a086f7efe819ef81","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_castFunction.js","hash":"af88042305fb1cc58dde3bca997c206dd0359bf7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_castRest.js","hash":"82020a1342ba8656765ac9141410d1af2b7730f0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_castPath.js","hash":"a7a03888171be1aa22a92d12b9a02b8c8798375c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseToNumber.js","hash":"1d6f1a52fdbddf557ef5d870c3ad6fecb7089af9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_castArrayLikeObject.js","hash":"0a049ad2b5e466bb2173738787645d6aa97b9e03","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_charsEndIndex.js","hash":"4164a27a922efe0dfb1dc15496d199152fd96599","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseUpdate.js","hash":"12682de8a3a7f8d6e89f4872bbc2bf1c2b66f8b0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneArrayBuffer.js","hash":"ffbada38bb191bc5290fc3ae51f6c01c3f8f6d7f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_baseUniq.js","hash":"ae7942f5facf5430171081eb0d2ee341f69c9fd2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneDataView.js","hash":"c8e9d1cd47aab00655a7ad7d3103cdddf2fd92a6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneRegExp.js","hash":"d0318f8d44ff0e8720cf498982e3183e23579919","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneSymbol.js","hash":"8b27dca2415595e97e38d9fa7fb3f854c4051048","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneTypedArray.js","hash":"b50a151594d841fdb56e8cf04619529fed4891f7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_compareMultiple.js","hash":"798b323506b11fa866904e39771daf98df260bca","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_compareAscending.js","hash":"456fc00f7549c8ea36a3d2f3b818b50bfcf016e6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_cloneBuffer.js","hash":"f0b54438e44d83118f342434cabe99dc438d19c3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_composeArgs.js","hash":"18e0c7dbd15ff30fb10ccaa4ef651751eea88ff7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_composeArgsRight.js","hash":"b826dac099cb5bdc350361b3fb6df6a3c743b49d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_castSlice.js","hash":"9b963fc73a75bdb6cde5c38b2ab1fac07835a800","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_charsStartIndex.js","hash":"c4db2a95b12b0a442f73d3ad3d27c0048193b216","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_copySymbols.js","hash":"871986e31fddf247cd65b93aa92b69392b9bde8d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_copyArray.js","hash":"cec6a29544aa38261f7cfc1bf123f3289d22c377","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_coreJsData.js","hash":"15e60e7a6363ae6df943c85e4b9e1078457b06e6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_countHolders.js","hash":"9ff8f78133806ffbcc60d281c0152897aa7640bf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_copySymbolsIn.js","hash":"92a72efc51ad106ed6bc2e4dc03d0f23751523fd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createAssigner.js","hash":"0125f6e53a2b16619993e408f3511862079717e5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createAggregator.js","hash":"261d83069fe95d76ef0dcf16aecf4d21af132baf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createBaseFor.js","hash":"77c64903d26461aaff6bb22d3e2739a5ac9a5e0e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createBind.js","hash":"56e3d29a4d8774c9709ba42dd15e204a693a8a42","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_copyObject.js","hash":"3bfeeec32b43433683d931621a2bf53dbc3db3d0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createCaseFirst.js","hash":"4eda4cc9710593950268262489e79a507679356f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createBaseEach.js","hash":"ade31f23b8e144e8588af940219fc4c8bda2ce53","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createCompounder.js","hash":"195c16455366a158b8b855547fafdc602f0be9e9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createCtor.js","hash":"12be272e2dcd00624119d859d78459c9dae1baa0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createCurry.js","hash":"30c237eecdcbbf00b48be6b716264799e0f32c1e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createFind.js","hash":"3eb3975cd88173810656e3ab17de9c210773a1f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createFlow.js","hash":"c9408be96649f6431781578ada26509a567005a8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createHybrid.js","hash":"15282c26201bfcfdc26829ced58fa9785f1db1fe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createInverter.js","hash":"3b149fffb0fb7fe82cf00dbd794973ddc33f33e4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createOver.js","hash":"ba8f63fcb4755dc9023793118e5f8180e86c4c64","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createMathOperation.js","hash":"d02710cbdbf76e2b2001750b355238b9a0e951c9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createPadding.js","hash":"0597ae4997016438b3d7629560c03d260f2b51a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createRecurry.js","hash":"fa869537d2d2bb656d1a7876435dc4c79f57575e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createPartial.js","hash":"2dc87c9d5a3fa04f144a85d4d90cfd55a4e4b208","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createRange.js","hash":"1c65b8adbfe1a38fb5827f584a454bc8218050ac","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createRelationalOperation.js","hash":"428d4535498e0c63f8a998bca3403d36ddbf8004","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createRound.js","hash":"f6d9e30f03e0b5af47f9be48bea3399d9c684191","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createSet.js","hash":"c213de450f86338c23b81de1c99f8136a7538ba3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createToPairs.js","hash":"b16382972bd68fefa26ec9672c3935cfc1af1b7c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_createWrap.js","hash":"3cf0222feec115f3d4b71c1adbfe4aca7555ebe6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_customDefaultsMerge.js","hash":"9378ba434e10108ffac43ded9d6d28e32fac527e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_customDefaultsAssignIn.js","hash":"3cfaa6d8045c1f0217366218ad4340b50de5ceef","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_customOmitClone.js","hash":"2bf571311b6785fd53ae57ec710ed05ebad80ab7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_deburrLetter.js","hash":"65de6e749f5e37659ce5798a558a9aa1b50bec5c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_equalByTag.js","hash":"bd57ba1568c522e436bd1af7ec860bcb1e274b85","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_equalArrays.js","hash":"dd3a74350ab4d89beb889ba94510b3e5723b6209","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_defineProperty.js","hash":"308f9b9c0f8822351b71d5801be25a8326bc5584","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_equalObjects.js","hash":"6e408bc1b739bd195adea727a0f9dfdfb778a214","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_freeGlobal.js","hash":"df0709e144040efc52114c69b7977ab04f3a799d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_escapeStringChar.js","hash":"d011ca793a93e44d7e6928cced2055ea47f6c39e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_escapeHtmlChar.js","hash":"d1da9dd2828cdd0071b82ffea56eab694bafbe37","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getData.js","hash":"2fea3c244fa4625b978cea63124835c16aefe660","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_flatRest.js","hash":"1a96086a9a21bff7890036498a1e161fe7955194","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getAllKeys.js","hash":"9fcb354c326cd308df841e6846d506165842f9a3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getFuncName.js","hash":"dd42afbc814c94e5bdd2fbef652efb7801403f6e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getAllKeysIn.js","hash":"4c08d556179109df462c2ffdecef2d6486315062","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getNative.js","hash":"a3c1a7f525a79c6216c2bd72810ccb1d8afefd9a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getMapData.js","hash":"f8986a4db2b55203a3237e5472a4620816306331","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getHolder.js","hash":"86951aac23219e1a51267bf5fd7a38da110c877b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getRawTag.js","hash":"08573f8b464cf110d0873d475890f499a9620d80","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getSymbols.js","hash":"1c87ed98ef573b41c8a015c15857a0991603eaa6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getSymbolsIn.js","hash":"0bae489598ad76c4f2faaf33bcc1b3bf34e4772b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getTag.js","hash":"e74c13874eca982f0fd30b1e35dd05e0664c6af3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getMatchData.js","hash":"221908980050132b19c79c53c1b7d78ef5b93d59","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getView.js","hash":"3a642a1adfccdac302261e31fadd3918e623d6f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getWrapDetails.js","hash":"ab6c90ec5be32187a6cfe2c9e798e7d298263dd4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getPrototype.js","hash":"150397078aa95ac1ace14e9547b7c28eba508353","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_getValue.js","hash":"aaeaa4d7600367187650a1ef2d6949e2f788cf76","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hashClear.js","hash":"7a6f43944d3ff13552dcbe9ceb972ae5a83e8b1b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hasPath.js","hash":"f300ab1b5c17494a458e38d10eb815f5c1c95b76","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hashDelete.js","hash":"5b552f18bab9b54a3192e193d44188e1656556d8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hasUnicode.js","hash":"2ead86c95243b0dac220736e198e0a14e68c2982","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hashGet.js","hash":"5645b9091466891d4c892c6b3bd220ebbd3a3d00","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hasUnicodeWord.js","hash":"96f0a2876411b1fba3916ad58533f2dbc6970256","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_initCloneArray.js","hash":"7385f50c6d9fd89db402b725dfcd5b0d6b314c55","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hashHas.js","hash":"aec7a8cd442a620d0073260ab7dc03960f6c85c5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_hashSet.js","hash":"13d89d46c86111ca9941d0c35c29a84b2fb97a87","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_initCloneByTag.js","hash":"a38217b57e875466ed7d07578884c51a4e318560","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_initCloneObject.js","hash":"f2ee8035eaa7751ff081de5681c6603da177f8f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isFlattenable.js","hash":"f2cfab82055d2ca693f33a874c57d8250467fc04","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_insertWrapDetails.js","hash":"07c0c750900d12cf01ff9d99e429c6be76790f4b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isIndex.js","hash":"f08242d01da4236214f75e0221fe25c270f46dbf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isKey.js","hash":"e68a3f3cc1d7942c51ce0e8d927c0eb1896bc46e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isKeyable.js","hash":"89389f3a2f157c03608bcce01baf751018f25fa8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isPrototype.js","hash":"6ebbd7e2661dbf8b6e35f36d680b7117fcc6b2c0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isMaskable.js","hash":"54963a24b696b2c57b2e8d2a873ed7db9abe6b11","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isLaziable.js","hash":"857a630edb35c21d76e6e2fd6daed3f3b51ea6a9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isIterateeCall.js","hash":"8116de0f8e735fb8c0a9d263a369be4b74f5f09c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isStrictComparable.js","hash":"1db231f38b860e0a94e052c232829f8e8d31eb74","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_isMasked.js","hash":"c001b1b4f9d3f7ece2e7263350f081da707804a5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_lazyReverse.js","hash":"a16d79ce7d467ebd00332162dafae250f726fe17","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_lazyValue.js","hash":"8e87e755c6f452304a814a29998fe145065aac74","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_listCacheDelete.js","hash":"1421610bad35fbee226a1a6bf8e7edb8958a4d6e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_lazyClone.js","hash":"528f2c4e0ddaadd246d07757608fafc02842508b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_listCacheClear.js","hash":"cab24e3a5aa064726b71f761bac42e765a21517b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_listCacheGet.js","hash":"266ac036effbb03c4a20397401900068f25ee510","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_listCacheSet.js","hash":"cf902d42ba5e57849d08b0c03d2003c56bbc0dde","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_listCacheHas.js","hash":"2070fe4515274fd0445b01ccbdad8acbc6b7c9a3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapCacheClear.js","hash":"0eff5c92ebddbff48603ec60a32720c48fcdfd2a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapCacheGet.js","hash":"2f580dedb6aa86e87c9931a6bb2275df8fe8608a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapCacheDelete.js","hash":"830ab65244dcd7c5a00fec9be355e9f713e6ea3f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapToArray.js","hash":"ba760ad87c596f8a038240cdb8eb21c8f441a288","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapCacheHas.js","hash":"a0104808ea49ff57061f2b4a6ec4ef5f28e20601","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mapCacheSet.js","hash":"745d2c8aab1a63cd28192eea4ac7bd86d5050b02","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_matchesStrictComparable.js","hash":"886455dc09cdf350cadc57a4bb14cf8d700db358","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_mergeData.js","hash":"88ffb153b2cf2792dd67b70ef0f7ba1715c991fa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_memoizeCapped.js","hash":"6e577b3ba7b897f8a8e6277cee2a9c0d296608d9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_nativeKeys.js","hash":"9cddc8c7f8efeffa319763be371897c861027d65","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_metaMap.js","hash":"6fe08e4a7c81c515eb34e464db1fe31d20bc8ff6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_nativeCreate.js","hash":"d77d487728a34b77fe91c07ed4a2ca41a7265b43","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_nativeKeysIn.js","hash":"d11eee972281d8eb8c93724d6a9088faf33e9679","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_objectToString.js","hash":"c489ccc8b47254177546b747476ca6b4a339437c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_nodeUtil.js","hash":"23c321c5b794557e944b47a10ccac8eb6a132f0c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_overArg.js","hash":"1fd1876980219dfd22c7ad86a49994f6ad1ffb0d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_reEscape.js","hash":"1956c226d87ffb9bfb9d0b443e5e7c6665e222a9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_parent.js","hash":"a509f65490a88db6e1469ba7d8eacf86f11e7578","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_overRest.js","hash":"7020d98e117801d3a38b53367295588fe9574282","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_reInterpolate.js","hash":"1f30c7932ca224ade79f3b50991da604fdc93c0f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_reorder.js","hash":"f9ebaaf8bddda0f54270363ed88d8eeb4b0acf95","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_realNames.js","hash":"1d70870e01638a3ba3e742bf871a5618ba866480","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_reEvaluate.js","hash":"01062fe9dad608255c7e341c6d3e145c9ae6912b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_replaceHolders.js","hash":"c24095b10ee93a2b1c4eabe187a37eb54a74b47c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setCacheAdd.js","hash":"3e8d192f136058af7953acb255f3452e25f9dbd5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_iteratorToArray.js","hash":"0512af6634544643fd2dacfb328aa8fca1770d72","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_safeGet.js","hash":"4c2e61c4be58adff8b49fe6f6c6df3f8aa156113","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setToPairs.js","hash":"8f144b728d7afc8059364769d27708f6f30f1bc9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setToString.js","hash":"525d4e7a92d2f5de834b7199c926bf05e5863e02","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setWrapToString.js","hash":"e1129dc30bd9fe222dc11cf9d319f2d16cf02f82","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_root.js","hash":"da38a7e1c62b9dec425d3354b1ae5b2f1473ed41","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_shuffleSelf.js","hash":"d384018a208bad370c0fa749fe1a7abdcf7d1550","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setData.js","hash":"27ba08bcf3045df1eb5bc20514f6532d51049445","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setToArray.js","hash":"8aa29aac79d989a3642638ba90120860d6e7cfd0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stackClear.js","hash":"f10a4d85636bf0a0495cb7222575c139c2963466","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_setCacheHas.js","hash":"6b635d8cd68ddaf51b359bd7e89532dbbd5d259d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stackDelete.js","hash":"0035fcf868dd14e85188c010466ead0b44caddc4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stackGet.js","hash":"edd10aa8b1688c112def671585164abd168f7dc7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stackHas.js","hash":"2c66efa2be2222610dae4edfe711b8b0d9a55a60","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stackSet.js","hash":"54d1b0f6e92c9327efb7142d082bea43f49521a4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stringSize.js","hash":"2c19f863e40752a52b8d3347e8b05c8afb61a4d6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_strictLastIndexOf.js","hash":"541978faa200571da921f5cee0c141cca0436237","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_strictIndexOf.js","hash":"4d373aae516f6097b486413f2e0815c73aa37bdb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stringToArray.js","hash":"051613c1b18c5156a676b197586fb0e2c1acd0ec","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_stringToPath.js","hash":"90f48337b274bc8475116e992fa8cad995a4029e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_toKey.js","hash":"e24143e8602a9acd35301e6462b03c6ef0d94bc9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_unescapeHtmlChar.js","hash":"345300e6aa36d8b10133adfc3672efc630f77822","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_unicodeSize.js","hash":"4ef1b8b07c56ba22c273f20ce1f43c99d9e646af","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_unicodeToArray.js","hash":"a9378af7302c381a5f82467c32de3111ca597877","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_updateWrapDetails.js","hash":"2ef2e983cdda0be8c850d7e59d570862ce6b64d7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_unicodeWords.js","hash":"70d7dad3b79c471cce28fb00f4d9491c6d14de30","modified":499162500000},{"_id":"themes/next/node_modules/lodash/add.js","hash":"69ccfa17792261411f27bd7166a6760e3e6e653d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/after.js","hash":"4d65d6ae8537ba01400d74e3540b52b463dc86eb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/array.js","hash":"ac9338e3493fec2bb6d7a1dcef45ef9819b20649","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_wrapperClone.js","hash":"c54b050119a2a1ad75146508a03ed4a78ab9b5fb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_toSource.js","hash":"12282cc7f18c3c7446129f547741c3998b6caf18","modified":499162500000},{"_id":"themes/next/node_modules/lodash/assign.js","hash":"c80789cd7fd35c7190290526e466eed28caafa80","modified":499162500000},{"_id":"themes/next/node_modules/lodash/ary.js","hash":"6db228f04677c2724e6b8438681c4c0fff0c998c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/at.js","hash":"cf037c2d8d960fa96854f59381675ee196cf4069","modified":499162500000},{"_id":"themes/next/node_modules/lodash/assignIn.js","hash":"166da8ae436b3ede129a5842457d68d6fdc9616a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/assignInWith.js","hash":"7e951bb44bd108e1024ea5c691d9bf9449c112fc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/assignWith.js","hash":"98f683f41fd043bead258cfc6e61bd6765eea779","modified":499162500000},{"_id":"themes/next/node_modules/lodash/attempt.js","hash":"6b981c1f3ff53c572ebd08babf8799c8f118f6f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/before.js","hash":"bc0b86f3e03b7056b39193a03c5d39ee4fef4023","modified":499162500000},{"_id":"themes/next/node_modules/lodash/bind.js","hash":"6b960133235c585a9b461e19df07cdd6edff118c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/camelCase.js","hash":"1db1aa1a3c7a3a703a33c660526ef141c0bd3b94","modified":499162500000},{"_id":"themes/next/node_modules/lodash/bindKey.js","hash":"b54c9311a7c9550ffceda021af5c995eee09f693","modified":499162500000},{"_id":"themes/next/node_modules/lodash/castArray.js","hash":"8dd901032216d00cf43986adaf961ad7422a64bd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/bindAll.js","hash":"cfd017286d7a7497547755272e1a55d39dc4beef","modified":499162500000},{"_id":"themes/next/node_modules/lodash/chain.js","hash":"e51b12d085b20c8676bf3297d9d0a8acb3871e4f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/chunk.js","hash":"8e0f7e51303031640b539758ed6fa3e48e761783","modified":499162500000},{"_id":"themes/next/node_modules/lodash/clone.js","hash":"1268809f4924a5640d425e56eb4cb71df51ccb72","modified":499162500000},{"_id":"themes/next/node_modules/lodash/ceil.js","hash":"13eff7a830076aeea2ffabd36b8d0d3254849953","modified":499162500000},{"_id":"themes/next/node_modules/lodash/cloneDeep.js","hash":"fcbe65493c8f2c4fb574dbdafaab5ec22ad3ac42","modified":499162500000},{"_id":"themes/next/node_modules/lodash/_shortOut.js","hash":"2b821fd23499f0583817e801c9ec1aa7fabac0b5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/clamp.js","hash":"0c356936d91c87fe7938faa3e1bb61b8334e7f0b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/cloneWith.js","hash":"e9108f222791a26a83106488509053910d8460b5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/capitalize.js","hash":"cf956ec612dfed45fdab26ab30cac6f46d738119","modified":499162500000},{"_id":"themes/next/node_modules/lodash/collection.js","hash":"235db0c51d2fbba77c1c0ab2f25617e3c02d9e5d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/cloneDeepWith.js","hash":"2be99cb83b8e6ac3f488963b433a8dd1829d3599","modified":499162500000},{"_id":"themes/next/node_modules/lodash/commit.js","hash":"f2962f416c4427b7d5fd2fe8f752c41a8e6ee53f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/compact.js","hash":"f747cf703e5627de69652da7ef01299274cf48e7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/concat.js","hash":"16777de6eeb0cb2828722e48c32e900256c21bd0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/conforms.js","hash":"e226b49b5c96a85b5a1796b7a708c3e3fdd9fd9c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/cond.js","hash":"3df6aa9c3966438f382511f0b5ab7647ef5da87c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/create.js","hash":"41e8f34b4e9429b4b7ab26264bc570214164a5b4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/conformsTo.js","hash":"db8ff09750867c73d76ad1275a5cd8c2bc93b873","modified":499162500000},{"_id":"themes/next/node_modules/lodash/curryRight.js","hash":"61586b4ac19da0224a3262027f2d280f25bd70e2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/curry.js","hash":"cd66258e0cf4fc625293d358d15a7bda051bfa67","modified":499162500000},{"_id":"themes/next/node_modules/lodash/core.min.js","hash":"267c0415b5504ed7c38cb6b48836ea3841b14fa7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/countBy.js","hash":"048867f03021430a606b699403133e2e234777a4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/constant.js","hash":"0227ab051a5a8ca5e0fc7934bcea54ec25f90292","modified":499162500000},{"_id":"themes/next/node_modules/lodash/deburr.js","hash":"460705fd44df7613129dc58981966abcc45f9488","modified":499162500000},{"_id":"themes/next/node_modules/lodash/debounce.js","hash":"9c880591c7ba76d446abd004232d5bfec35234a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/date.js","hash":"6466f5749384af915c2b6a449e74e14e320f4e11","modified":499162500000},{"_id":"themes/next/node_modules/lodash/defaultTo.js","hash":"07e0f352f98a791be53a0a6eb43dedd756acbfbf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/defaultsDeep.js","hash":"bf8d24913d8a34b40f1190a2d4fd01cadde49263","modified":499162500000},{"_id":"themes/next/node_modules/lodash/defer.js","hash":"471017a76ca3f3f71a111ccf7b487f89a50327db","modified":499162500000},{"_id":"themes/next/node_modules/lodash/delay.js","hash":"d7b8c52b90e17f9e42413ac7ea16d39a8e96bd4d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/defaults.js","hash":"1f12f29efd3d103440d5c2cf8895119205ec67eb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/difference.js","hash":"7a2a5465430dd730ff198a6ffcd5a3de8660c7b3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/differenceBy.js","hash":"ff88a7541ee0b628ea3bbd923077facde3dbab36","modified":499162500000},{"_id":"themes/next/node_modules/lodash/divide.js","hash":"b21dc4cea11b1da27812a545fa75aa0d6b9a834c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/differenceWith.js","hash":"0f2a92e973c183bdcff6395d840f683f318c3424","modified":499162500000},{"_id":"themes/next/node_modules/lodash/drop.js","hash":"6e25554b3f395b8e55d6b291451e7cac2149c7af","modified":499162500000},{"_id":"themes/next/node_modules/lodash/dropRight.js","hash":"e77c7613539baf9a222fcc57142d5a808263688e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/dropWhile.js","hash":"f710aa52d7e2a9b128e647ec58b24e3c37660790","modified":499162500000},{"_id":"themes/next/node_modules/lodash/dropRightWhile.js","hash":"f9ccd85e2dc3364b0fdfbc824632e9f792b5a11d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":499162500000},{"_id":"themes/next/node_modules/lodash/endsWith.js","hash":"0d8fd73985ee8c845b0c851704c8700f1055863d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/every.js","hash":"6da415b41c0bae9c96fd40df253df2de7d965f4c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/eq.js","hash":"bc3769b5b5cb8262834ac0a28cc4cbe71257ce94","modified":499162500000},{"_id":"themes/next/node_modules/lodash/escape.js","hash":"60bec78e2fd63cbd52dc8f4f5f5b242bfc9449a5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":499162500000},{"_id":"themes/next/node_modules/lodash/findIndex.js","hash":"2fc5db1562e58221e0aafbbd317240704eb29985","modified":499162500000},{"_id":"themes/next/node_modules/lodash/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/escapeRegExp.js","hash":"91892447637ec6b53595e90a9817241b536f5fbe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/filter.js","hash":"5e630c86a2bd2a83a887241037b6d714401502d8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/find.js","hash":"bb6c19af408438f6a0e19998a230880354afd814","modified":499162500000},{"_id":"themes/next/node_modules/lodash/findLastKey.js","hash":"9ba6afda847da380659ae98f0cb575566a0dc85c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/findKey.js","hash":"eecde37bba06739228e5f93eac97aeaab4a91d4f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/findLastIndex.js","hash":"05743b963c7370d830ce76ddc5da4d85ba687935","modified":499162500000},{"_id":"themes/next/node_modules/lodash/findLast.js","hash":"1f3be6d3e3eb97733c9a648872b4b3366d590257","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flatMapDeep.js","hash":"76d3ae49d148850472922956935d294957f6f04f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flatMapDepth.js","hash":"fb4c4fc58c11b646dfdac83443e7495829da8f45","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flatMap.js","hash":"78f9ce2566f143366b0998ef02dd8dc89e004133","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flatten.js","hash":"72364918453483de6a71137a9a8003973c141fad","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fill.js","hash":"bb9b5af63b9b43626fc4db976072b045976ea77a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flattenDeep.js","hash":"422f037a6379f0db6258b9337261c1a9cc719faa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flip.js","hash":"67207c1ba95e6881968ff8fd5542f29e259aa3d7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flattenDepth.js","hash":"537a4e7196561ecae367985622872417cb19eabf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flow.js","hash":"7d9e4b712b68551d5b932bd4ed88d15b4aa1722f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/floor.js","hash":"dcc9365721002de964aa2439793b7a10419d3dad","modified":499162500000},{"_id":"themes/next/node_modules/lodash/flowRight.js","hash":"3e028361a9b090f8e4166d89fba374d65d52711f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forEach.js","hash":"0f3074268fefe6db115334ca5dd1b89eb56a8a3d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forIn.js","hash":"61f83e8b63f97c099842046983acd61ac1b31ff2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forEachRight.js","hash":"654c60d4bb9737aa9fa3a7ac55e889f3dc2b50e3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forOwn.js","hash":"3e351a24c7fdf0593c116f361f59739cfb447950","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forInRight.js","hash":"6a060f1b26a6be2a99c48eb56d104c4684b9bb30","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp.js","hash":"15a13940a645e776e00a229a7bec48f6af716505","modified":499162500000},{"_id":"themes/next/node_modules/lodash/forOwnRight.js","hash":"91e99b73af52bd6155bef7a259aa2e763aa4b885","modified":499162500000},{"_id":"themes/next/node_modules/lodash/functions.js","hash":"0ef50ad30d371a2b7ecf4363fd7862b5417130af","modified":499162500000},{"_id":"themes/next/node_modules/lodash/get.js","hash":"fd2860fd39bfc6e8c44bae101e133effe6373734","modified":499162500000},{"_id":"themes/next/node_modules/lodash/functionsIn.js","hash":"29e78c6d69d36b48c62e4374c6cd1c02da73da40","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fromPairs.js","hash":"9a5f37cb42d2839c2637ca1792fcc1cd4333c56d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/function.js","hash":"23850ac10d90d3b9eee8723beaa3af727330323e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/has.js","hash":"c3c35131b701a60eb1f6bf9e530c78d123268cf9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/groupBy.js","hash":"18d1063f6af8b9cb6901c5ad3257db49027ab77b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/gt.js","hash":"8446ef3704d57dd44214e6513a6889f4d9db658a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/gte.js","hash":"ec5d91c1d30601111dd6a41af35d55c2c27498ce","modified":499162500000},{"_id":"themes/next/node_modules/lodash/hasIn.js","hash":"8a4bf01f81a8d508b322441659f9c74f38998c3b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/identity.js","hash":"af8a8f8af76663a408cf9f29e5723d05f79eb236","modified":499162500000},{"_id":"themes/next/node_modules/lodash/inRange.js","hash":"38cdcc3285d54fcce6a7b362642c8c93305782f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/head.js","hash":"374b879fa821ee60e31efa35f0b847ac5ba770af","modified":499162500000},{"_id":"themes/next/node_modules/lodash/index.js","hash":"14d8b25e9e35c7f1b551d732fb814c982fc5301e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/includes.js","hash":"b5d81439dbbb9b6558c9148e37bf5db918a42d1e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/indexOf.js","hash":"eec5a54dc7285759af46028f7a7c1ec3479993f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/initial.js","hash":"c366df8c3c272bbc5fded392830b438d30d8c4a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/intersectionBy.js","hash":"969e82efd3befe0749085336f9568eb81f55d7b5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/intersectionWith.js","hash":"1e1c0b6cf9c37aa60ea316a1540245bbff6f7a8a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isArguments.js","hash":"b9214a907e11a8e2321e6adf907ecde99b9920d8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/invert.js","hash":"c9547b3840dfef6cb81c6507f35a5109798f1a7c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/intersection.js","hash":"b51e7675e09c00ab99a632cdf1fac769f1a874ff","modified":499162500000},{"_id":"themes/next/node_modules/lodash/invertBy.js","hash":"1d85aa7dd69490d38441a0206246460fd4c0f95d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/invoke.js","hash":"5bdfcbcf073fddbf4f00903e4a8db0f1b868c8e8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isArrayLike.js","hash":"88d7cd3fc8a6075777cef6c16e1cc4931734159a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/invokeMap.js","hash":"bfbac7243fe9a57276626d7090d473d9a3b2d796","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isArray.js","hash":"c6d5635dc764c9acf7395abde2230c43121641a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isBuffer.js","hash":"246d03a17c274bdcf3acb909f2337c695c9aea45","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isArrayBuffer.js","hash":"b682ff167ce2b34539afe73df93f2abe81b8aac5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isArrayLikeObject.js","hash":"300effec49e91a13bfaf9b6a9dda4ea2c4d45d92","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isDate.js","hash":"3a7813e7ff48c9ac6ce3bbbc8584b1ce22c4ea1c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isElement.js","hash":"652c3967fe6b11419aaa8652a8d8d6e35f15a76e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isEqualWith.js","hash":"3e9d8f6214fbb2f859254ea9c4b8f9da58ac15a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isError.js","hash":"b184db78799044db3af29c3f6224d8e2213c9985","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isBoolean.js","hash":"ace779f61262f820f5f4ed39695bddaa7ebd08a3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isFinite.js","hash":"388faf4e73347a1c0d77c98a3ac92be8902c5f36","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isEqual.js","hash":"370af44d612ddc96cdc52779fcc844fdf4ae00ae","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isEmpty.js","hash":"935d1e74c2b8a3deb928af20d4440894368ccacb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isFunction.js","hash":"6cb0b30f9e48fc93016a3f34d124224af7901908","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isMap.js","hash":"d19970b50ffa3f5e8345e84c635dc7b553bca992","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isMatch.js","hash":"29b9682a150068960adbf9ffa6b1da7f2a45477b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isInteger.js","hash":"ac93647df1dbe92f6358a992b1d5e7039cf85514","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isLength.js","hash":"45606d651b8071d8ef73beb03d31d6073ade0df4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isNative.js","hash":"58dd206b6a97ede6c6c786ae029a36739c5efe7d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isNil.js","hash":"5780b6ca6e7dee6c2599a9ac77eb302812a373ca","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isNull.js","hash":"bd68451baaba662307893e3216b99ed20cf8a0d2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isNumber.js","hash":"75152f3218ff6f88b1ad22a258b16c85ebbf9408","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isObjectLike.js","hash":"7213913d764526ff2189c115d354bb940470bfde","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isNaN.js","hash":"711cb119497d074148b07dda40eef0fa7519de8d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isPlainObject.js","hash":"104adb7c6dc9854cb91ac5995b17969c44614262","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isSet.js","hash":"8753a0c0f5a73feb22942035f87351120db0f402","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isMatchWith.js","hash":"60bf9f292afffa501f83381428457dc7567ee4cf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isRegExp.js","hash":"af11b03682761c1292525e290f0312da974c02c9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isObject.js","hash":"38f00e3e4772d23d56550ef75959d10f92448e3f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isSafeInteger.js","hash":"18473b31325225abe68ccaa69aa84635ab02b651","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isSymbol.js","hash":"aaa0f4e5003e5d33ed7d67b8a274a9a14c3cd64f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isTypedArray.js","hash":"d92eaa92fa13419d2df184ff11f270c266590f66","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isString.js","hash":"7eb7706298dea12e813be37db6cdc8ea92177630","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isWeakSet.js","hash":"2582214ba7a25b23bebf2ef4ad8a799248a5e5f8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/iteratee.js","hash":"5e22aa3f442a49c5061a7328b39c7ef197b9a249","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isWeakMap.js","hash":"d88fd7f6dab0bc1a14c8b7b9f5adabf3d5430ef6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/isUndefined.js","hash":"4e087abc1b0997f71bbf33e2065b40d438511e2e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/join.js","hash":"236f8abe4dfa446351d07525089fabee2e2d3f0b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/keys.js","hash":"84fe8dcc57c7b368d5fbd3ccf0c194cde0c78515","modified":499162500000},{"_id":"themes/next/node_modules/lodash/keyBy.js","hash":"96e32f75404ee87c0fe8bf2d8b7a2c69cee308a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/keysIn.js","hash":"e444c4b265f9f39968467a82c09935bfa1be501a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lang.js","hash":"2e1998c6fa6bd4a5c691edd1eb1fffaea2a35b85","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lastIndexOf.js","hash":"64b8f7981a889c14b785738da32da89ea7b06519","modified":499162500000},{"_id":"themes/next/node_modules/lodash/last.js","hash":"dcdc5c04379818603815dfc64e96bd5e2626fd29","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lt.js","hash":"244011c8209227a5d714f5843106b13de0f5fc15","modified":499162500000},{"_id":"themes/next/node_modules/lodash/kebabCase.js","hash":"ed770da5a2e3ada160f9dcd625a94d16ffa8fef0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lowerFirst.js","hash":"6b7a190cd8d1f01254d0556b7725ed8ad3ee9cb3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lte.js","hash":"02b0d1b5d68ff6e8cabda05c1e5a4c9675b10479","modified":499162500000},{"_id":"themes/next/node_modules/lodash/map.js","hash":"484de2e64aa6e9cadbac92703bf79be5dbd53942","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lowerCase.js","hash":"6280f901a37fb21a9acc5df8678661c1dd47d425","modified":499162500000},{"_id":"themes/next/node_modules/lodash/matchesProperty.js","hash":"993988bbf9037d03aa3ec66e3d6ba3db185a58e9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/mapKeys.js","hash":"6c2885c6249ff8dbd5c18910338240ddcd441e48","modified":499162500000},{"_id":"themes/next/node_modules/lodash/mapValues.js","hash":"7d273ea92cb971d298e84137f49b89c5d7249336","modified":499162500000},{"_id":"themes/next/node_modules/lodash/math.js","hash":"09b7cdb94b0829a362572cd9eb490c6b86471f35","modified":499162500000},{"_id":"themes/next/node_modules/lodash/max.js","hash":"2c5910535b9bc06c066c57f71b5b02965b894cfe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/maxBy.js","hash":"85f841238f0c60a3496eecb25a3bf7aec5fc36fc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/matches.js","hash":"b760524ca6b6ba617641aa4353e7598c0cebe50a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/mean.js","hash":"17efb674e29e2456f3b1e595210a9929480e14a3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/mergeWith.js","hash":"18a5592394d4cf1a0772e6ff38bacb9b547105f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/meanBy.js","hash":"5a9d6be568a698c6ef430a07f3431c11bbba3dcb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/merge.js","hash":"20f06dc73414778002395627c8d4316699ff947b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/min.js","hash":"0ca11cbe1894931dd09246e001badc22eb734887","modified":499162500000},{"_id":"themes/next/node_modules/lodash/method.js","hash":"6dedac7c45efb248890558a8d42a2656623ce0a5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/memoize.js","hash":"507cd3e0ae52967b105d0452fd0f93fbbc69bfc9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/methodOf.js","hash":"6af752f45f4152f036fb378075d72f6ab82573ea","modified":499162500000},{"_id":"themes/next/node_modules/lodash/minBy.js","hash":"8fa3de3c1efcc246ee906a281757f905cb13507e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/multiply.js","hash":"47e4d5d6014da46305a0be1082d66d2f41928e82","modified":499162500000},{"_id":"themes/next/node_modules/lodash/mixin.js","hash":"813b628b7fe94024fa308fbc6d06d1883dee9325","modified":499162500000},{"_id":"themes/next/node_modules/lodash/next.js","hash":"8504ac753cf6e3e19d811038503ee000b7829e8a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/noop.js","hash":"35300b7ebb741e7a54fe528a8a718b26c35bf698","modified":499162500000},{"_id":"themes/next/node_modules/lodash/now.js","hash":"ddba13c834824d9467e379769e67f414a6179d15","modified":499162500000},{"_id":"themes/next/node_modules/lodash/nthArg.js","hash":"47191997e9ebf3b2b8dd667ee362e48d381217fb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/negate.js","hash":"a01d8c228ce6992ec79ee4146677e52dcc487254","modified":499162500000},{"_id":"themes/next/node_modules/lodash/number.js","hash":"8c2564ca466fcb7f4f0decd5eb79f803f39983f9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/nth.js","hash":"4c0c437715ed4fb0942b8dee7273b9d0dc5f62e0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/object.js","hash":"4b9c99e1cb054bfcb6777077f59a2a53a4759490","modified":499162500000},{"_id":"themes/next/node_modules/lodash/omit.js","hash":"874d0d4204aa0cd72c79d7b3a4c80a577f46b564","modified":499162500000},{"_id":"themes/next/node_modules/lodash/once.js","hash":"5bb536b8c7f08f94ccc9019a51601cc97d9b24d3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/over.js","hash":"e28a6b283217955bd749ce30edeba3e6b977273f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/omitBy.js","hash":"4216fc454388cdba0292cc5199b2d28d7484ac7b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/orderBy.js","hash":"7665eee9891d204d48cdd799992dbd6a9678125a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/overEvery.js","hash":"03c5153a4c43d913a9162032f5041cc1f982250d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/overSome.js","hash":"153452d7a4349ee32447e45f59e975f929de5c19","modified":499162500000},{"_id":"themes/next/node_modules/lodash/overArgs.js","hash":"e60acc78f35d412319457c41a3bcecc898f9653e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/padEnd.js","hash":"5973017726462db292d41c2f28b53b8a4a24c507","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pad.js","hash":"b6a0479a2ce0289d29214e8f7ff83a0074406d25","modified":499162500000},{"_id":"themes/next/node_modules/lodash/padStart.js","hash":"d6ea6887328ca596d505af7b181edcad862865f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/parseInt.js","hash":"786b6be24ff93b68962925663708aca1236f2cc8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/package.json","hash":"22cfb69a4398513d93f5593a8c1a3837a5959f4d","modified":1537585159148},{"_id":"themes/next/node_modules/lodash/partialRight.js","hash":"7c551ed65cc1b160ab8a7abb78b9e37c3b426e5f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/partial.js","hash":"5c9f9b1c6719f70ceaa7fa314193f7ed4ed5770e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/partition.js","hash":"36957b0323cbd50f5ec8e4be3b5cf571241407da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pickBy.js","hash":"99eb4eed1acb33f67be3b41f359601f0f6d75ae3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pick.js","hash":"9c8c0c82b1db06c624523239aea143410c5258be","modified":499162500000},{"_id":"themes/next/node_modules/lodash/plant.js","hash":"2b370614388e8fc4a0e12d2eaa644c25622de026","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pullAll.js","hash":"1bb4ac35a97475e16cfa8a10abfc5d911c58d743","modified":499162500000},{"_id":"themes/next/node_modules/lodash/propertyOf.js","hash":"d23f88041fae20fcd9b92740fffd39016a6715ff","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pullAllWith.js","hash":"f205f46a35a1b3d40f86c92dd9488e25c59cf5b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pullAllBy.js","hash":"5dc628f7fe0c8e71edf931bebecdaeb0e30d6f2e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/property.js","hash":"276a7afddaacbac4fa184f0096a92f32ee517ced","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pullAt.js","hash":"176790538e4f38124826d06462d089f8acfe1b0e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/random.js","hash":"d64df688329131b297c269ce8e10b44cabe52e66","modified":499162500000},{"_id":"themes/next/node_modules/lodash/range.js","hash":"6bc797b60a5f0b1fe8e93c0c4c41361c7f8f1189","modified":499162500000},{"_id":"themes/next/node_modules/lodash/rearg.js","hash":"ef1d75bb13e2f07e1737b028878775f67ed2b50a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/rangeRight.js","hash":"6640704aba8af652f6f8d13758946125dc324e08","modified":499162500000},{"_id":"themes/next/node_modules/lodash/reject.js","hash":"6b18138c39a26986320b80d9748bf5385c2b0c71","modified":499162500000},{"_id":"themes/next/node_modules/lodash/pull.js","hash":"e40207e049af5517cc5cfd59ffd23b1c3a1406dc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/remove.js","hash":"a91465f281fb69fc2cf3a9fa751acfe89c5d95fb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/reduceRight.js","hash":"8c8897c831800592470dc2fec9f1f575f844b2fe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/replace.js","hash":"a35231e4112316c03e6c65162affe9effee35922","modified":499162500000},{"_id":"themes/next/node_modules/lodash/rest.js","hash":"61b930cc021a8f03bb466ac833596d6d37416714","modified":499162500000},{"_id":"themes/next/node_modules/lodash/repeat.js","hash":"8a5c222ac1514d5732374f165d8df9dc0274bd71","modified":499162500000},{"_id":"themes/next/node_modules/lodash/result.js","hash":"7180962c1b72ea113dd6516d5c28d006080e97f5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/reverse.js","hash":"09f86bfe19d080bb52606967a9df5f017333e963","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sample.js","hash":"b861fdd759aa14bb6747b0e333df66b8995300b2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/round.js","hash":"629b46fafec63f591a3c6b02ee03529ef43a8acf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/seq.js","hash":"e8dae0be3b8ece53ea5d6594d0b45d221f643576","modified":499162500000},{"_id":"themes/next/node_modules/lodash/setWith.js","hash":"012090d3598aeb4e36cadb5fb3ee7ecd9d184211","modified":499162500000},{"_id":"themes/next/node_modules/lodash/set.js","hash":"bd5aefade6c00bbf37fd21dcd79e0ffd085a6084","modified":499162500000},{"_id":"themes/next/node_modules/lodash/shuffle.js","hash":"1d035fe3d9776decf38cab2e19e2b2da99aa5dfe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/size.js","hash":"baeb54345201e06c8c096f9a4f62192c8584f982","modified":499162500000},{"_id":"themes/next/node_modules/lodash/slice.js","hash":"fffe0c44921ec28dd2fc1512493b912411d06628","modified":499162500000},{"_id":"themes/next/node_modules/lodash/snakeCase.js","hash":"b95290beac2d4eb4436d72bde0b191a8db147970","modified":499162500000},{"_id":"themes/next/node_modules/lodash/some.js","hash":"b6d44fdefb9894407b8d48ff379c6288fec935ee","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sampleSize.js","hash":"7a14f0d38676fcf8ed64a12ac379c8203eda1e4a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortBy.js","hash":"5f928288640eec63d9ce82e3c16750b4952f5aa1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedIndex.js","hash":"e31955eb8a9dcf9868e2df8f112a8ef873709970","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedIndexBy.js","hash":"785066b03fae1e7fa508b7380f95727d02284d7f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedIndexOf.js","hash":"21e71189ed17c2769fcd2c91625af1a65b84591b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedLastIndexOf.js","hash":"f4a56782a4a913c330d832d80000e0340093e020","modified":499162500000},{"_id":"themes/next/node_modules/lodash/reduce.js","hash":"a6da684222d6a2179aa409e3728758572961152f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedUniq.js","hash":"612a221cb2088447b6510930f35f7140ecf41d1f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedLastIndexBy.js","hash":"4bf9117b8f1d0161a8369f127220b897819cd6a9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedLastIndex.js","hash":"b886560112d50f2aef5f1acdcc5cd9296ff6f8b7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sortedUniqBy.js","hash":"e9ee6345a66fbef43ac161edd568feb2f197a2ce","modified":499162500000},{"_id":"themes/next/node_modules/lodash/split.js","hash":"f33b9e68923d6bd511a37658a794104452f1bacd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/spread.js","hash":"b5e45484e55917c836dfc464d1c1dfb5e016a53b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/string.js","hash":"9da506e6420a685f56f77ccdcdd4dfe0ffe552b0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/startCase.js","hash":"5cae4afa2846579e8173a62ae27253a75fb57119","modified":499162500000},{"_id":"themes/next/node_modules/lodash/stubArray.js","hash":"bdc0e5ed494f2924ffd64e91620fbcd8161f7223","modified":499162500000},{"_id":"themes/next/node_modules/lodash/stubObject.js","hash":"dc710610031cb2255019c0bd8465df0d6db0111e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/stubFalse.js","hash":"e5b35ac8e1872e9c87f126c972891005c94e7d19","modified":499162500000},{"_id":"themes/next/node_modules/lodash/stubString.js","hash":"053b1bf13c37041494b3afed57eea26d24b46c59","modified":499162500000},{"_id":"themes/next/node_modules/lodash/startsWith.js","hash":"10e9857ce37a805453b6e1c5e0caac454d08ba89","modified":499162500000},{"_id":"themes/next/node_modules/lodash/subtract.js","hash":"6927a0ddb3037e644d7d49f7aadd99f45ac2226d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sum.js","hash":"b468caad43dbd33443e584c510697155ec12a71c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/tail.js","hash":"9f994bae44d6e96a75142cfdbfb362f1f8190d8b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/sumBy.js","hash":"9a28d421380fb4347c651dd4935461c69a465251","modified":499162500000},{"_id":"themes/next/node_modules/lodash/take.js","hash":"07615e176130761c61262b882598a6aab8bbbd48","modified":499162500000},{"_id":"themes/next/node_modules/lodash/takeWhile.js","hash":"7ab5baee95d7a1aa64183a266176725180d74c8d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/takeRight.js","hash":"aecb30e9e3d49c9194b57e4c7988a11b4e911170","modified":499162500000},{"_id":"themes/next/node_modules/lodash/takeRightWhile.js","hash":"b4562aaf5ce999f9c4b68b1bb5296da5799e4e37","modified":499162500000},{"_id":"themes/next/node_modules/lodash/tap.js","hash":"a1f5e1966c3620b69def36154a27a8d9893d87f1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/templateSettings.js","hash":"fa92b30409e71f025035d7a47921a061b46f70df","modified":499162500000},{"_id":"themes/next/node_modules/lodash/thru.js","hash":"d006fad2ab19f7bc90e0ec69eb5037f081d99bee","modified":499162500000},{"_id":"themes/next/node_modules/lodash/template.js","hash":"a0d4d446da57415c4afbb6e3da20d6a6b5efc518","modified":499162500000},{"_id":"themes/next/node_modules/lodash/throttle.js","hash":"dc6c20077c14d5b184f3471924032e242c9ec3b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toFinite.js","hash":"44b15d3279c2f94ac2098503c427e1e0eb34c3f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/times.js","hash":"ee9fd905cf9b189471102ac6b4a75b745085ce48","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toArray.js","hash":"5cde4e05caa391716f89e179755c861677498c0c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/stubTrue.js","hash":"35d765e8ae55e010a1b5eda7aa6596a14a052ef6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toInteger.js","hash":"06e857ac41a5b7056f7b522db601b4679f04f5ee","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toLower.js","hash":"3cf1e67f3e193b9f982b8814fec29cdf99b6b038","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toIterator.js","hash":"f8fc807ff29125bb2dab968633ad964ec94194b0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toLength.js","hash":"9a0a62cbf4f795ff3efba1fd3b1a84cd5ec94ee1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toPairs.js","hash":"48dbccab7f479c713471fa2378d5ffa402745f77","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toJSON.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toPath.js","hash":"973bea7fc9852f05f88b1e11a768b7b7ab786990","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toNumber.js","hash":"2b6f75e579b5ec0e84426be3ce1fd0d3a1abec18","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toPlainObject.js","hash":"4e96ce3252e389b1633a2c73fc9d68031a12df29","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toString.js","hash":"6c4365360e107172a439c756d9be5db5470b1142","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toSafeInteger.js","hash":"c49cb9237787895a00956b20b569bd384c684269","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toPairsIn.js","hash":"ddc2a974ba685da424c9de9e2f7949b662844273","modified":499162500000},{"_id":"themes/next/node_modules/lodash/transform.js","hash":"2cb75bbd3d23239daa2681abefea716e5f7e0bfe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/trim.js","hash":"de870b0426ce1ef6506652312b8298aa7caa16fc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/toUpper.js","hash":"5e6fa81c32735a5c142884a1da0b1d88b780d05d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/trimEnd.js","hash":"c18ce828f8e810a17d423d75705261ff77b34462","modified":499162500000},{"_id":"themes/next/node_modules/lodash/trimStart.js","hash":"fdf32db72208d65d988d3a7672d2d22a2bce89b3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unary.js","hash":"079326455dbdd90b20704f1a3abf73cfab59d088","modified":499162500000},{"_id":"themes/next/node_modules/lodash/union.js","hash":"2cd89b9ad0a574cfddd5daa4c5c95ad71db6b4ee","modified":499162500000},{"_id":"themes/next/node_modules/lodash/truncate.js","hash":"24f4a9506442f2cafc20a024b9d79fb6e5df3326","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unescape.js","hash":"89bc8a104147bab3b23f5e6f1f1c3819c6168293","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unionBy.js","hash":"0d110e48caa5b130f45e00bb7d65dcebe66e275c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unionWith.js","hash":"16881474335022100f41832178f2109f7525061d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/uniq.js","hash":"2b735c46c626dba6b45907c8c70f17475366016f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/uniqueId.js","hash":"0809eace58255a033eb37e73ce581e2cc6fe26d1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/uniqBy.js","hash":"5591128502a52624cfadfc2d4c7b20db4011267b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/uniqWith.js","hash":"0a37f6a99454364d2683df713e678bc9669d6684","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unset.js","hash":"5f2a9664870f21d2b7dcf0255f50ad9b37a6c850","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unzip.js","hash":"9adc3e8903f6134c27951f3a558286a7667656d9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/update.js","hash":"abae1fa2fd4b937bb1cf1f4a0fb4a73eb9d4aaab","modified":499162500000},{"_id":"themes/next/node_modules/lodash/upperFirst.js","hash":"091005e45cf8b9ce4f51e1b2ff2da30558b40714","modified":499162500000},{"_id":"themes/next/node_modules/lodash/unzipWith.js","hash":"13255720f48e23ba96205aa49fe5bb538b3c640c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/util.js","hash":"9e3bd39fa03689fa7d9897be9c2387e19646662f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/upperCase.js","hash":"4ce59b5839e848688ed76fc99d62f35168f9f46c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/updateWith.js","hash":"dd63e7b716f897c2bc9f7d39884e0282ba81bccf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/valueOf.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/valuesIn.js","hash":"5d6cd8fa3358eafef39b236579720c3d6c4450c0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/value.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/without.js","hash":"979bbb5dc3e1e17ea311c4d85a47b5b8b5c9c58a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/values.js","hash":"6304ca5a2c8a30cb1eef8cfb80aed716e29d3495","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrapperAt.js","hash":"4974d8fad13c6913d78fe90db2de8cd83a811f47","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrapperChain.js","hash":"0b6afa60d6fedd5ae935c2127562ba2a590b5b14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/words.js","hash":"74ebd3c81508567ca14f57f717488d4cf337101f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrapperLodash.js","hash":"b20f7aa45935b9d38b954bc7fc07b0a15298df77","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrapperReverse.js","hash":"2318334d83fc88acd2b7fa81c1a709b957719f4a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrap.js","hash":"956d1896e8a55677cef08f879674d4de21d45184","modified":499162500000},{"_id":"themes/next/node_modules/lodash/wrapperValue.js","hash":"dcf31c73fbacb8ab409179125d9ffe51e1ec8696","modified":499162500000},{"_id":"themes/next/node_modules/lodash/xorBy.js","hash":"5e7d74900860098de29d83658deb9eccc1f7b840","modified":499162500000},{"_id":"themes/next/node_modules/lodash/zip.js","hash":"2df2c5d391c0c7fb710357e33d6a9f16425d66fa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/xorWith.js","hash":"ceb3b359ce93812b82f622e0c117585ba83b2996","modified":499162500000},{"_id":"themes/next/node_modules/lodash/zipObject.js","hash":"fa1c2ef419f663fe0b552effed4b64428cb52f15","modified":499162500000},{"_id":"themes/next/node_modules/lodash/xor.js","hash":"77e7c70d299ec7430efd31d411e46bac4dd0450d","modified":499162500000},{"_id":"themes/next/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1424597013000},{"_id":"themes/next/node_modules/lodash/zipObjectDeep.js","hash":"a4cd8a063e87152a2229d1493af4fdd0419d3ff0","modified":499162500000},{"_id":"themes/next/node_modules/strip-ansi/package.json","hash":"86b40f650ed68e3fdfde5ef13919a3015cb358bb","modified":1537585159310},{"_id":"themes/next/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1424597013000},{"_id":"themes/next/node_modules/lodash/zipWith.js","hash":"8cb8637b0b2b1174922ef35138408a777911267a","modified":499162500000},{"_id":"themes/next/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1456056884000},{"_id":"themes/next/node_modules/uuid/.eslintrc.json","hash":"cb4d88ea242b9938ab64c0445baa41f9ef366a02","modified":499162500000},{"_id":"themes/next/node_modules/uuid/AUTHORS","hash":"55ad68da17b6319a39a82d7c7f7a3ea1e951dee8","modified":499162500000},{"_id":"themes/next/node_modules/uuid/README_js.md","hash":"58e2418907131ae07fa5135ecf1985576dfd7fcc","modified":499162500000},{"_id":"themes/next/node_modules/uuid/README.md","hash":"49b1c8547e5d44bd9199c15ad35d4237fb18fec0","modified":499162500000},{"_id":"themes/next/node_modules/uuid/LICENSE.md","hash":"65e6555c3308c1d9538808d6c67e75924b8ad912","modified":499162500000},{"_id":"themes/next/node_modules/uuid/index.js","hash":"8e8abb1384d04d1ec5745c9824eee400f77536c0","modified":499162500000},{"_id":"themes/next/node_modules/uuid/v3.js","hash":"8815de1e54c316b5fc537712462a07a45e229fec","modified":499162500000},{"_id":"themes/next/node_modules/uuid/v1.js","hash":"02e4c5e78eb8183c890753bb6ce6f1aa7479bf38","modified":499162500000},{"_id":"themes/next/node_modules/uuid/v4.js","hash":"af1ab906dd54d3df6319d096b3d5f10686aa7331","modified":499162500000},{"_id":"themes/next/node_modules/process-nextick-args/index.js","hash":"b84634ced03bbef27bc6563b39f0c90872235d50","modified":1513027157000},{"_id":"themes/next/node_modules/uuid/package.json","hash":"a2a4d05667722d598410f47c9d758ef8033982b9","modified":1537585159313},{"_id":"themes/next/node_modules/uuid/v5.js","hash":"5666846c28ee13c09c22763866145dffe92762bf","modified":499162500000},{"_id":"themes/next/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":1441824016000},{"_id":"themes/next/node_modules/window-size/cli.js","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1537585159452},{"_id":"themes/next/node_modules/process-nextick-args/package.json","hash":"236a38cee25cbef547e63869757bb3a65255a06a","modified":1537585159311},{"_id":"themes/next/node_modules/uuid/CHANGELOG.md","hash":"f81c4e89670fe5d8573f553a8d99fa5d4458d00a","modified":499162500000},{"_id":"themes/next/node_modules/window-size/package.json","hash":"f14b670976f518911f5796fd7e7a4c6060f84409","modified":1537585159313},{"_id":"themes/next/node_modules/process-nextick-args/readme.md","hash":"730e339064290d377b6b2505f8d4a1fdd1c7ac85","modified":1513027157000},{"_id":"themes/next/node_modules/window-size/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1447615356000},{"_id":"themes/next/node_modules/window-size/index.js","hash":"a6e4427986c2372b10f86c12b4521dff04b3cb52","modified":1447614663000},{"_id":"themes/next/node_modules/window-size/README.md","hash":"c286863d0378b310abed728a9425b4d00f2027a1","modified":1447615597000},{"_id":"themes/next/node_modules/string-width/readme.md","hash":"31d4db706cd6186a3a8e4c69ec499663f3a97f23","modified":1471120248000},{"_id":"themes/next/node_modules/string-width/package.json","hash":"992f8b7349c14dd48fc5a12eaa6942d1710d588f","modified":1537585159310},{"_id":"themes/next/node_modules/string-width/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/string-width/index.js","hash":"488a7f558004cde30cd57c2eeac1aca4e2947a7a","modified":1471118229000},{"_id":"themes/next/node_modules/ws/index.js","hash":"9498ad1513c805bf0d295a1b7b85cec951a03a35","modified":499162500000},{"_id":"themes/next/node_modules/ws/LICENSE","hash":"5267b8c02607adefda571a85283fcd110ae081ba","modified":499162500000},{"_id":"themes/next/node_modules/ws/README.md","hash":"1b0c8bd7438a1ae66901f60218eae846e80888a1","modified":499162500000},{"_id":"themes/next/node_modules/ws/package.json","hash":"dbd199828b195f3dcd3ec5b87db4f7ecd63e11a7","modified":1537585159310},{"_id":"themes/next/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1416945941000},{"_id":"themes/next/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1444243047000},{"_id":"themes/next/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1416945941000},{"_id":"themes/next/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1444242970000},{"_id":"themes/next/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1416945941000},{"_id":"themes/next/node_modules/util-deprecate/package.json","hash":"d3071c5784810e8baa4d78ccdc55a31162d814f9","modified":1537585159310},{"_id":"themes/next/node_modules/yargs/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1425539189000},{"_id":"themes/next/node_modules/yargs/CHANGELOG.md","hash":"d9196286c174d7a5b43f399e594b8cecc9fd2fca","modified":1452841946000},{"_id":"themes/next/node_modules/yargs/completion.sh.hbs","hash":"527538bb86ffeeeeaaf6bde7782035bbc3532e35","modified":1435036458000},{"_id":"themes/next/node_modules/yargs/package.json","hash":"9200d6265765f5910e99918df1b66c42c2481592","modified":1537585159309},{"_id":"themes/next/node_modules/yargs/index.js","hash":"5e89ce55ed93617db2fe557e36d4d7b7f6d4bad3","modified":1452491890000},{"_id":"themes/next/node_modules/yargs/README.md","hash":"d3b40f4632f942e4a5de69d44553fe93fcb59490","modified":1452491870000},{"_id":"themes/next/node_modules/y18n/README.md","hash":"27de96420d32db9e8a1ff0be8aa965761bce4c0b","modified":1458190892000},{"_id":"themes/next/node_modules/y18n/LICENSE","hash":"d1e0173a0697ade86e242be697a030918b770336","modified":1458190892000},{"_id":"themes/next/node_modules/y18n/package.json","hash":"741b88dcdc49b8a8a6dcc09bb04f83ce0037885c","modified":1537585159309},{"_id":"themes/next/node_modules/y18n/index.js","hash":"abb180b94096f6824676f2d1ca30376f25451a49","modified":1458190892000},{"_id":"themes/next/node_modules/wrap-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477423219000},{"_id":"themes/next/node_modules/wrap-ansi/package.json","hash":"b23f30df408e78c1e63de273f501bcf2ed779407","modified":1537585159310},{"_id":"themes/next/node_modules/wrap-ansi/index.js","hash":"1fb24d1dd78fdcf1e03dcf2f6466150bbe531bc0","modified":1480439662000},{"_id":"themes/next/node_modules/wrap-ansi/readme.md","hash":"9ed85c9c6f28fb7aba2079348700ceef7bddd62b","modified":1480439662000},{"_id":"themes/next/node_modules/wrappy/package.json","hash":"820c97fe62f7e419b08c79f3e6dd04bf681bdf69","modified":1537585159310},{"_id":"themes/next/node_modules/wrappy/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1463526927000},{"_id":"themes/next/node_modules/wrappy/README.md","hash":"582d7139d169b0fc0b1014f2372a0aa26a52cfb8","modified":1463526927000},{"_id":"themes/next/node_modules/wrappy/wrappy.js","hash":"7d5c1c908664b3df4a9b72400a126652ba0dd905","modified":1463526927000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777791},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777790},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777845},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777845},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777846},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777861},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537581777862},{"_id":"themes/next/source/uploads/IMG_1356.JPG","hash":"4b8144e3248a429770c00be174336d01187a3cdc","modified":1532861051000},{"_id":"themes/next/source/uploads/selfieblackwhite.jpg","hash":"a248e19f003a0693d5f2278031d72e09ff7b7365","modified":1536284281398},{"_id":"themes/next/source/uploads/selfiecolor.jpg","hash":"1097014b9b820daff8b530e1e66a4be81516d85d","modified":1536284324472},{"_id":"themes/next/node_modules/core-js/README.md","hash":"d586558c87f2120e1e2d8f138816531c3d9e116d","modified":499162500000},{"_id":"themes/next/node_modules/formidable/yarn.lock","hash":"16152d5f65bc5996c8158fad7c8f7af9c4a054f9","modified":1484602905000},{"_id":"themes/next/node_modules/readline-sync/README.md","hash":"ecd85196cdeb74e0ed68434e917e3d2ed5ee7f63","modified":1504066088000},{"_id":"themes/next/node_modules/superagent/yarn.lock","hash":"fc1922b577e2a6e9a9898ef5ef28729c993d5eef","modified":1525019163000},{"_id":"themes/next/node_modules/lodash/core.js","hash":"c7eb7a3d5d4b63d58e91e590ba231ddb5677f8e5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lodash.min.js","hash":"dce5d3dbc9bbecf2ca748de381b483eb9080e4fa","modified":499162500000},{"_id":"themes/next/.git/refs/heads/master","hash":"7bdd38a064aad0ca1621c8222a31faf91187ed57","modified":1537581777747},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1537581777775},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1537581777775},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537581777779},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1537581777779},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1537581777780},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1537581777780},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1537581777781},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1537581777781},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537581777784},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537581777784},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537581777785},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1537581777783},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537581777783},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1537581777781},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537581777784},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537581777783},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1538141700097},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1538141291381},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537581777791},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537581777792},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537581777793},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537581777792},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537581777794},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1537581777793},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537581777794},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1537581777795},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1537581777795},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537581777796},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537581777796},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537581777797},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537581777797},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1537581777796},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537581777798},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1537581777798},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1537581777799},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1537581777799},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1537581777800},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1537581777800},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1537581777802},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1537581777802},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1537581777802},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537581777806},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1537581777806},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537581777807},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537581777807},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537581777844},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1537581777846},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537581777844},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"d381e012aae9f689b34e0a9595ed66bb9155d754","modified":1537635027416},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1537581777861},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537581777861},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1537581777862},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1537581777862},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1537581777876},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1537581777878},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1537581777878},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537581777879},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1537581777879},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1537581777882},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1537581777884},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537581777889},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1537581777886},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1537581777887},{"_id":"themes/next/source/js/src/utils.js","hash":"e437eff1d3781c4a1aec9ff2060565524a37c983","modified":1537581777887},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537581777889},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537581777890},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537581777891},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537581777890},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1537584731194},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1537584731193},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537584731193},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1537584731193},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1537585176126},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1537585176127},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1537585176127},{"_id":"themes/next/source/lib/bookmark/package.json","hash":"013ff96fc03cd4ed7b17059af207e53f94953202","modified":1537585176127},{"_id":"themes/next/source/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1537585176127},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1537595762415},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1537595762414},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3de20fa310cf852746e619cbbd1f79d42ca6e838","modified":1537595762415},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"4e74d9b54ef66091fd23379e8a3f42ca50bd5a70","modified":1537595762416},{"_id":"themes/next/source/lib/bookmark/.eslintignore","hash":"3d3910611724b7584a29297a3f7132334a3ad091","modified":1537585176125},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537581777909},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537581777911},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537581777911},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1537585176126},{"_id":"themes/next/source/lib/bookmark/.eslintrc.js","hash":"76bec2314ec3477b18e357f9992cf42a9524a3f7","modified":1537585176126},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1537585052520},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1537585052521},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1537585052521},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1537585052519},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1537585052520},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1537585052522},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1537585052522},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov.info","hash":"63a8a1dcf572505ef3227284769d0be5d384b413","modified":1505146634000},{"_id":"themes/next/node_modules/async-limiter/coverage/coverage.json","hash":"b1aa162a9facc96568432ccf22d7a16b5b2ba6a5","modified":1505146634000},{"_id":"themes/next/node_modules/ascli/alphabet/straight.json","hash":"7ae4163cdfb51f16baad8c3fbcb0df4a8cd7c474","modified":1369765643000},{"_id":"themes/next/node_modules/asynckit/lib/abort.js","hash":"440629b13ff27be58720005cb549f38903d80737","modified":1465585654000},{"_id":"themes/next/node_modules/ascli/tests/test.js","hash":"7a4006c9d8afed5886cda19c46050e60ae0de9d3","modified":1414769839000},{"_id":"themes/next/node_modules/asynckit/lib/async.js","hash":"c5d0ae608872e8fcc47a465d51564b6576c49401","modified":1463755306000},{"_id":"themes/next/node_modules/asynckit/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1463755276000},{"_id":"themes/next/node_modules/asynckit/lib/readable_asynckit.js","hash":"6a883852b3639a6c4a7e7e4fdefa2bd08c6ecedf","modified":1465752133000},{"_id":"themes/next/node_modules/asynckit/lib/iterate.js","hash":"219e4942b78515ab728825d33473715c246fd081","modified":1465585679000},{"_id":"themes/next/node_modules/asynckit/lib/readable_parallel.js","hash":"55538262a65702eb61a29e2ea3a20637490f96d9","modified":1465716911000},{"_id":"themes/next/node_modules/asynckit/lib/readable_serial.js","hash":"05bbc69be79b76f58faeb2805697ea9469c60d89","modified":1465715271000},{"_id":"themes/next/node_modules/asynckit/lib/readable_serial_ordered.js","hash":"bf2240383cb36d9a191d5ed87abb5d8674ddd8d4","modified":1465859663000},{"_id":"themes/next/node_modules/asynckit/lib/state.js","hash":"fa825d1971532d33a039d634de8aed494c09c08a","modified":1465664364000},{"_id":"themes/next/node_modules/asynckit/lib/terminator.js","hash":"1f8a78f42a386e65c9fb5cf621a90a2792dbb63c","modified":1465665521000},{"_id":"themes/next/node_modules/asynckit/lib/streamify.js","hash":"cad24d3ac61e7d9ad281c5190c5cc4e4ba8e6f3b","modified":1465693502000},{"_id":"themes/next/node_modules/axios/dist/axios.map","hash":"df05900f61e69ba5fcc6965a562ae33539f30569","modified":1519082636000},{"_id":"themes/next/node_modules/axios/dist/axios.js","hash":"94ece417aa560aa8de906e8f54c0985da90364cc","modified":1519082638000},{"_id":"themes/next/node_modules/axios/dist/axios.min.js","hash":"2cdd24012271ad08af4dc5a85d4059143c324391","modified":1519082638000},{"_id":"themes/next/node_modules/axios/lib/axios.js","hash":"9e7175a27769a6c62bcc0358584281bc8ad62774","modified":1518836391000},{"_id":"themes/next/node_modules/axios/lib/utils.js","hash":"1b1ac6ae62521b8c5dd8ce215ba68f6a578fa942","modified":1519077740000},{"_id":"themes/next/node_modules/axios/lib/defaults.js","hash":"5a42a569a4c0f50eb4a05a1c7b20b5ebacafdf4b","modified":1519081203000},{"_id":"themes/next/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","hash":"94140962d544c694ed5c28c9005bdd082699ef5a","modified":1447962787000},{"_id":"themes/next/node_modules/bytebuffer/dist/README.md","hash":"8a612b517279e939227c4bc388706b7f2641b05d","modified":1445622954000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer-dataview.min.js.gz","hash":"95c29ecd4d0d50c09f30f69b213eff18b0b85c80","modified":1455285571000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer-dataview.min.js","hash":"1fc4c97ab88a184aa0c7dfe7b32632826e5a03ec","modified":1455285571000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer.min.js","hash":"00542143aa650cfa0de6b92271632049619fd6fc","modified":1455285568000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer.min.js.gz","hash":"f73ae0daea968aae3eb717a5b45753676c047158","modified":1455285571000},{"_id":"themes/next/node_modules/bytebuffer/externs/bytebuffer.js","hash":"82c0c7a24be91df062369f13d74c6a2cc5ecbaff","modified":1455285079000},{"_id":"themes/next/node_modules/bytebuffer/externs/minimal-env.js","hash":"e45e2cae729fc6a3139f9ba0fe9e6d826f6398d5","modified":1401756562000},{"_id":"themes/next/node_modules/bytebuffer/src/bower.json","hash":"a24c1263e59eb180a5d1cf13d6a6313bbd100691","modified":1445623181000},{"_id":"themes/next/node_modules/bytebuffer/src/helpers.js","hash":"c2b753308f2e8eac7f4def0b9c3a5bccb9ff6a70","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/bytebuffer.js","hash":"cf189b8a2407d79299e2f13b2cd2b3d772b7ae41","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/macros.js","hash":"7691a0bf36d836e535a6d94c20beb7308d65843d","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/wrap.js","hash":"0502ec3d5789fb789f2a36dd9830a3aa5f953e22","modified":1445714365000},{"_id":"themes/next/node_modules/bytebuffer/src/wrap-node.js","hash":"1161fbff157592ccee5412b772ecb9b886f5fa40","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/scripts/build.js","hash":"f149ad6fad6973e6771da69d1199dbf43bac30ed","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/tests/bench.js","hash":"a0c5b381323eb46b119d06a686462cfe40a0f13c","modified":1435194697000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_async-generator-delegate.js","hash":"eb25ec9a0538713cd7b8f3072bc7dc22ebed58b7","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_async-generator.js","hash":"372d4436bdbe92f2f78105dcd429c179dc14d77b","modified":1502898503000},{"_id":"themes/next/node_modules/bytebuffer/tests/suite.js","hash":"4855aba3f1a148f64f0f5c900c82da54605d353b","modified":1455285154000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_async-iterator.js","hash":"ef9650c891c0d2206701050adc6e43241a7340d6","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_defaults.js","hash":"7a806ec6916616c3c4143037bc9342c2ab839fcf","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_class-call-check.js","hash":"f5a5d0d9ddddb7e96870bceab3e24b12d7088c03","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_async-to-generator.js","hash":"092fce5b88cd8c600638ea29e2ed94f0de7340a0","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_create-class.js","hash":"1d68cf3fd11809cf442db6667d2a3ff26524bd3e","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_define-property.js","hash":"cf306879ab2d347936f34b24318f87f954bb096f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_get.js","hash":"13e61be610163ccae5c214e7e194c0ace58f49ad","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_define-enumerable-properties.js","hash":"461af834a6e8e153ca3ee10f757ae7b5cd13ec16","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_extends.js","hash":"d4d8a9be3c66b147cdac7506fbf66b29f46d5f0d","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_inherits.js","hash":"f66e6a128108353ddafd9c8e8f09513a5b367cd0","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_interop-require-wildcard.js","hash":"d978b14b58c9212ec7aa069f6f61d0529880978c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_object-destructuring-empty.js","hash":"7367485c86eab35a639c036938795a5e5ea70a87","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_interop-require-default.js","hash":"be567334208840ce22b11d5784a30da40263385c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_instanceof.js","hash":"7e6a8d8e44a871bb751166c1a46da81c7195f7c2","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_new-arrow-check.js","hash":"f9ae018c26fd8de95783b546f1b18b62598bbc0b","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_object-without-properties.js","hash":"1d538a1cf8b8ccf6e29401a66bd37fa550a6b25b","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_self-global.js","hash":"95492933eb2a66ea46ce52dedadf391fa08cb041","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_sliced-to-array-loose.js","hash":"743b1df2df837cc582a17d22ae98a3fed813ff07","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_set.js","hash":"12d5eaa20e775347eb553d59e031335080555c83","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_jsx.js","hash":"6fdcfd69f4b3b025d56189b498f71257c2fd2fa2","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_possible-constructor-return.js","hash":"edaea70c54257aa54410eb6baec3dd2fb2cb15d9","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_tagged-template-literal.js","hash":"f5cd92902234ff2a4f9f8d741b861706183b8f3f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_to-array.js","hash":"8b8a3207e946fe576c4e13b49d8077391c54e0d2","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_sliced-to-array.js","hash":"7ccf086dc11e20419cd6b08e9771226c7920e624","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_to-consumable-array.js","hash":"c8357bfafda917c1b09b11334b685ce8c8533744","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_typeof.js","hash":"e13fab71c67b6245e55ee7cafa1e79846c7097ef","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/async-generator.js","hash":"372d4436bdbe92f2f78105dcd429c179dc14d77b","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/async-generator-delegate.js","hash":"eb25ec9a0538713cd7b8f3072bc7dc22ebed58b7","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_temporal-undefined.js","hash":"834d32784dd69f263d8190d52b48d93282db8497","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_temporal-ref.js","hash":"cc4d6539cac258aa44870f60a195895e864e7cda","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/async-iterator.js","hash":"ef9650c891c0d2206701050adc6e43241a7340d6","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/_tagged-template-literal-loose.js","hash":"a9c471cebfffb41086bc9081bd7211890f136891","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/asyncGeneratorDelegate.js","hash":"663c793dfd7c6cc5f19d3c95b7a19c87e97ec181","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/asyncIterator.js","hash":"d24d972eef97ce4b2ab5dc4bdf5ea9ad20946e00","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/asyncGenerator.js","hash":"86480c5693820390d2e09e6134e56d637e74ba66","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/asyncToGenerator.js","hash":"a259f43312d82cc3f49b1217574e8184b17dac6f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/class-call-check.js","hash":"f5a5d0d9ddddb7e96870bceab3e24b12d7088c03","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/create-class.js","hash":"1d68cf3fd11809cf442db6667d2a3ff26524bd3e","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/classCallCheck.js","hash":"02ae4fabf944a78ab9f4029dd8206cb7ac68a1b9","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/createClass.js","hash":"273cbc0891d6485fc2ab85c202bc2bc2026aaea8","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/defaults.js","hash":"f3c14035c5f623e2dd7631a3d5199cf94b44b9e9","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/define-property.js","hash":"cf306879ab2d347936f34b24318f87f954bb096f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/define-enumerable-properties.js","hash":"461af834a6e8e153ca3ee10f757ae7b5cd13ec16","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/defineEnumerableProperties.js","hash":"c7aa87c07e8b4c8e0b1eda86e2d20086ebd903a1","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/defineProperty.js","hash":"b193b996cca2b4e9c740368db9c1a261279b8dd3","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/async-to-generator.js","hash":"092fce5b88cd8c600638ea29e2ed94f0de7340a0","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/extends.js","hash":"75999451a0df8f7c430d1c547ab14dde76312e45","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/get.js","hash":"a49d3671cf8ec47f3e3fc46c3f412757dba6a9ae","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/inherits.js","hash":"9096c718798aa29f2628e2a24ef9d1be95d8ef5e","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/interop-require-default.js","hash":"be567334208840ce22b11d5784a30da40263385c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/interop-require-wildcard.js","hash":"d978b14b58c9212ec7aa069f6f61d0529880978c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/jsx.js","hash":"fe3b109095829760799318f1bcc679b54e601ca0","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/new-arrow-check.js","hash":"f9ae018c26fd8de95783b546f1b18b62598bbc0b","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/newArrowCheck.js","hash":"128c8fa57390d1a5b9549c0c7b7d81181f8c7801","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/objectDestructuringEmpty.js","hash":"5fdb15f531146c844dc557110ba557a68e2b01c3","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/object-without-properties.js","hash":"1d538a1cf8b8ccf6e29401a66bd37fa550a6b25b","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/possible-constructor-return.js","hash":"edaea70c54257aa54410eb6baec3dd2fb2cb15d9","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/object-destructuring-empty.js","hash":"7367485c86eab35a639c036938795a5e5ea70a87","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/objectWithoutProperties.js","hash":"bb93b1589406efbcf2876f9922486e742658831a","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/self-global.js","hash":"95492933eb2a66ea46ce52dedadf391fa08cb041","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","hash":"fdb9071cc11c7841806069496250d312624352e7","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/instanceof.js","hash":"f1d9246310b78fb41bff1d3318856c5605904afd","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/selfGlobal.js","hash":"0f8d049b08eaae4b45c8893810e24accee9e7bd0","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/sliced-to-array-loose.js","hash":"743b1df2df837cc582a17d22ae98a3fed813ff07","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/sliced-to-array.js","hash":"7ccf086dc11e20419cd6b08e9771226c7920e624","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/set.js","hash":"a129a76703731ca09f2e5b6452e075ba1cfc018f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/slicedToArray.js","hash":"3317b19823a467f63c24cb648b4c06608c91a579","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/slicedToArrayLoose.js","hash":"84e433e420c5c92f00f945ab98c803c6fb100262","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/tagged-template-literal.js","hash":"f5cd92902234ff2a4f9f8d741b861706183b8f3f","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/taggedTemplateLiteral.js","hash":"827ebb54ca0ceb21e1de6b6f83ddf4e397c93c55","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/tagged-template-literal-loose.js","hash":"a9c471cebfffb41086bc9081bd7211890f136891","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/taggedTemplateLiteralLoose.js","hash":"28b1af24bfb86be73c585c41f4785b2a14c889e8","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/interopRequireDefault.js","hash":"a0f135e3ee75d251a07ab8a01e49b38c461b8f7c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/interopRequireWildcard.js","hash":"c01b5624d24af9f49b41420206ecc753a4c1a157","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/temporal-ref.js","hash":"cc4d6539cac258aa44870f60a195895e864e7cda","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/temporal-undefined.js","hash":"834d32784dd69f263d8190d52b48d93282db8497","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/temporalRef.js","hash":"adbab4eaaa718f6ed816461df6ee420f2f102c5c","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/temporalUndefined.js","hash":"ce6d04cbbef0735a6feb0351b353fa53fdfe4768","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/to-array.js","hash":"8b8a3207e946fe576c4e13b49d8077391c54e0d2","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/to-consumable-array.js","hash":"c8357bfafda917c1b09b11334b685ce8c8533744","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/toConsumableArray.js","hash":"8fa0dc90276445b4b069d65a2557c1625e5bb1da","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/toArray.js","hash":"73d0161a6a9739b383aee30c43793d584bea718d","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/helpers/typeof.js","hash":"fb0f8a04602c39ab8c92fbc1103fc521bd144cd8","modified":1502898503000},{"_id":"themes/next/node_modules/babel-runtime/regenerator/index.js","hash":"42935672825cdb576c417b11640d7852fd334c18","modified":1488047195000},{"_id":"themes/next/node_modules/babel-runtime/core-js/asap.js","hash":"37ee7e590313ee8d1103dc7ac9d8ceaddb1c7796","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/clear-immediate.js","hash":"6f986211f7373814de5e5b82b12683e75c0a7899","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/is-iterable.js","hash":"19f5a0e81c83f17cd5f6d5fc5a7d800393ecef6d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/get-iterator.js","hash":"9ba9ddb1aae4b202284b39fe791ccdda21c63adf","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/map.js","hash":"b739ead2326d135769f02fa6167eef707d9c25a0","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/observable.js","hash":"a3b972c075090fa6e2b9e2a9b41b2ec1e5bf3bf0","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/promise.js","hash":"db0fc657353f456a1b820e0bbd2a80f7e8b1caa4","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/set-immediate.js","hash":"75614753c2669c7a17a7f94221cda79806da1286","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/set.js","hash":"d66f486a32ecd80dafab32ae270349287e950d1f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol.js","hash":"3783b948c72dec1c124ec08d9f4d97fae794874e","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/weak-set.js","hash":"ad3c7df78c2a57059cad7eb70a582613b91df700","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/weak-map.js","hash":"f9e977231983ffe14f04bee88be03051647c3f65","modified":1502898501000},{"_id":"themes/next/node_modules/colour/examples/example.css","hash":"e06a793a050aaba7b83094a02ff7d43d2c96c41a","modified":1367599034000},{"_id":"themes/next/node_modules/colour/examples/example.js","hash":"b0c743681108c822d7647fb4b06066a64dcfb79a","modified":1367599034000},{"_id":"themes/next/node_modules/colour/examples/example.html","hash":"cc18c1826771aa1371b020b9b7f553e5d60a11f5","modified":1367599034000},{"_id":"themes/next/node_modules/colour/externs/colour.js","hash":"98e98bc00e11fcdfe4f293fb03b8272a23940aa9","modified":1367599034000},{"_id":"themes/next/node_modules/colour/externs/minimal-env.js","hash":"35c17f314b0deae6ba59d5b815565ee0ce96598b","modified":1367599034000},{"_id":"themes/next/node_modules/combined-stream/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1518452620000},{"_id":"themes/next/node_modules/colour/tests/test.js","hash":"f749f0575b7647556459ef01e9a4c009fa1cc94d","modified":1367599034000},{"_id":"themes/next/node_modules/combined-stream/lib/combined_stream.js","hash":"90d3d9ce7524d0d4ab781e30bac86a79613ec29a","modified":1518452880000},{"_id":"themes/next/node_modules/concat-map/example/map.js","hash":"022a614b8d9f5ccb67b6ce1f478b1efd7aff298e","modified":1339124034000},{"_id":"themes/next/node_modules/concat-map/test/map.js","hash":"162cce32c23628192cef64924a1ce768af399a4b","modified":1354099176000},{"_id":"themes/next/node_modules/core-js/es7/asap.js","hash":"886a1a46374a861e623fcccfcb0d366195961a1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/error.js","hash":"82dc4acd33694a83bdd40171a23ade8f18e175bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/array.js","hash":"f2465e0f8fd7857ca38be99f9b3c274b05e0c977","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/global.js","hash":"44f4d9111918bb8870e9bb1ea3d3646036704bee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/map.js","hash":"cae54f44d958a19876302bb371129944e9eb411b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/index.js","hash":"79fc719731cbc384f259ff203c5d5421b48a257e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/math.js","hash":"c9036eb236d04896c617309aad8c2b8590ede010","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/object.js","hash":"56490d465f6ebec6e0766bff91df52cde99b3407","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/observable.js","hash":"52bf2478fdaebcef1c6175b92bc86dcd8bb7ca91","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/promise.js","hash":"a3d969ca87c6d459d17e2662d24bff02572c0322","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/set.js","hash":"77740afe9e2ef084fce83c7a6d2a860526f2140e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/reflect.js","hash":"cf18136ddc911060825a965f077d54cc6c42f413","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/symbol.js","hash":"d554ddd831c283bc1b3481bb2c8a0e9b81008d3b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/weak-map.js","hash":"25c8227c432c828757bb0a1bb97a6207dafc7ebe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/system.js","hash":"e5ca41179a7219355cf9fcfedbc97f644d9db260","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/string.js","hash":"f3391fc39fdaa2f98e8a49aed0dd822707f5a234","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es7/weak-set.js","hash":"2527172ae73c6cb268c2a9ffd1d3f7ef0fcd0c98","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/date.js","hash":"7eb27ab39a45e7abe03daf9d1c803ee769e43062","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/map.js","hash":"eff2e7688d6e600611799986fc95ba07c94d2159","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/array.js","hash":"49705585cb8254747e5d0f5102477446df4b56a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/function.js","hash":"ccc7a221dac94d9d95034b6782246c8b7e9744b3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/math.js","hash":"9acc6eade170f9a518c88aa847d894a34e286928","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/object.js","hash":"66e076b918ecf946167f21aeef86b168ada0aa1c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/parse-float.js","hash":"01735a2d9abd3d186c33628d650032c8bd975118","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/parse-int.js","hash":"76db73513547102678147feb20c7ba6cb08aa080","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/promise.js","hash":"703c7b01a31f261cb7a06731889203aab37ffbf4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/reflect.js","hash":"afef5e6ae91fafe8aecf5adf7f4980179f52d779","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/regexp.js","hash":"6a4cdfade597c3dd2c57a4894b605ab4742b32a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/set.js","hash":"af862d19834a897d6a720fdbb105d5d2f434ddf0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/string.js","hash":"48387e0b38f05aea67f4dd2267da53341a3c4587","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/symbol.js","hash":"641973de0b373dfdb6ad46b2e78022bd3f33c7e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/typed.js","hash":"55d10b0d1d07f45cb3e4e779813e7a95ce85823e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/number.js","hash":"a1135e9043d305f06c5d7d5d5edd46cc040c1dc5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/weak-set.js","hash":"c9b4cee2139b3f6b78aaa6ad46d0d80fa44b1286","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/weak-map.js","hash":"c4c60c685a22ae339e8e7835c972e2cf1109b545","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/_.js","hash":"8fcd44d9d8fe3703a8bf46e80bb8579bffae30dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es6/index.js","hash":"07951afa3d23d128866435244474f1095b9482e0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/asap.js","hash":"886a1a46374a861e623fcccfcb0d366195961a1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/clear-immediate.js","hash":"3b3b5ae376c9d30b08275986571442021b540543","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/delay.js","hash":"228e248f7f9bce1c79f1b01fbc1045cb6b399cc1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/dict.js","hash":"84914f9f137bc04a4752ee4cd07eeafb96caabc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/global.js","hash":"44f4d9111918bb8870e9bb1ea3d3646036704bee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/get-iterator.js","hash":"3152fe88fcfc2032ef14414e379942225b4615df","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/is-iterable.js","hash":"81360c40904a8c551269ce9dec22b9c19a5378e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/map.js","hash":"312a8758a8fa370e5d3ae5ba984bb1cf356e966b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/observable.js","hash":"52bf2478fdaebcef1c6175b92bc86dcd8bb7ca91","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/parse-float.js","hash":"01735a2d9abd3d186c33628d650032c8bd975118","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/get-iterator-method.js","hash":"6db7cb4fed71875b9a32905a6d21d13dc424b9a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/promise.js","hash":"cfa711624f5f866f7e76eed3c2e607079923002c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/parse-int.js","hash":"76db73513547102678147feb20c7ba6cb08aa080","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set-immediate.js","hash":"adf05345afc0bf5a8b304d32f76271b367265cf7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set-timeout.js","hash":"c98fcb7a85fb3b9b5efd4d0d206bc472c5731f41","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set-interval.js","hash":"6008901c6fc183d1e2f5bb988f5caad1a0980626","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set.js","hash":"6df4aff857f3d7dd6b9d6317ab70f56097a71897","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-map.js","hash":"90e6e9b81670554dc92a84f723979492f81ec7e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-set.js","hash":"7e82642f9aa41d7cbad3db55246960182564d9f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/build/build.ls","hash":"527f9ff7f15305106479ca0cc7e68df45a778b3b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/build/Gruntfile.ls","hash":"d87a1931b7135f3370a84e51b4acf53afbaf2d60","modified":499162500000},{"_id":"themes/next/node_modules/core-js/build/index.js","hash":"0c432fe852319abf0f95198e3f5d19c227fb0481","modified":499162500000},{"_id":"themes/next/node_modules/core-js/build/config.js","hash":"202874d349567d21b9054b14dc445ca90892fc53","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/index.js","hash":"bae279f89588ce59dac613ab37695a3fdb63afa3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/2.js","hash":"91df8b3800e78552341f2ff10624a4278c8290e7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/shim.js","hash":"6990e6978517f8071b993bc6daeb2c5d6364bca0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/0.js","hash":"f0ca8b11b2a695d5639295c118f33861cd9ecfa3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/1.js","hash":"a8377a14ab0f6d79b8b28f4fedb730ba86dec1dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/3.js","hash":"a9ec36a646e5638a7bfca18a37c43783cdf2dbde","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/4.js","hash":"7328855fd3a30678a3583492aac740ad67884e46","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/index.js","hash":"f6bba9219400ca212286ec311b0599c55b7c4474","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/dict.js","hash":"84914f9f137bc04a4752ee4cd07eeafb96caabc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/stage/pre.js","hash":"b8f09007b71ee988657e3918d8adcc085f5cf2ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/_.js","hash":"8fcd44d9d8fe3703a8bf46e80bb8579bffae30dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/delay.js","hash":"228e248f7f9bce1c79f1b01fbc1045cb6b399cc1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/function.js","hash":"4b1a524df30af9c5f22e2422f4c65210850a5ac5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/index.js","hash":"0a02ba673064b37349451f5d87cec5cfecf5ec23","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/number.js","hash":"f16d562109e52f1491f70e423e3123a518c413e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/regexp.js","hash":"26865b4b0db26e1ff480466b03cbe78570f36dec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/object.js","hash":"1b0d2bc5d1a28a06c281a2ddf6ae41cc3c5d5750","modified":499162500000},{"_id":"themes/next/node_modules/core-js/web/dom-collections.js","hash":"385d6d31fe179117bc3a9d6e332127cc2ab3940f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/core/string.js","hash":"84c386fdd87097fdbddaea8216da0cd327ab8823","modified":499162500000},{"_id":"themes/next/node_modules/core-js/web/immediate.js","hash":"80ae5e8c23698071670d4a23567c9bd973894493","modified":499162500000},{"_id":"themes/next/node_modules/core-js/web/timers.js","hash":"c59a64cc92aed28020b3b52272608c52c61836fe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/es5/index.js","hash":"6ccd318bedc64315d50fa7a8010026a848f5e36c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_a-function.js","hash":"016951d668b8b3504efa11ea140ff98adc85abc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/web/index.js","hash":"789fe3478614cd8f2b0a3be84396e28c64c53ab4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_a-number-value.js","hash":"89cf29c2a8290bc9cf2379838e1c25d1d3c30780","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_an-object.js","hash":"1f40d81801e2a33c4a6451b7c533f7787639d029","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_add-to-unscopables.js","hash":"09ce7c33ba55fa938d05b2a0ba4e6209de3bd0a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-from-iterable.js","hash":"c5c5771d6deac206033506a96ab8abdbb6b722e8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-copy-within.js","hash":"c500969eb8b37d4ba571403d48249e0bd722ade7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-fill.js","hash":"4b480801ed2aa1df175d7ff2fe91e9a71e494380","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_an-instance.js","hash":"afe37a98c53bd0b221e377f1879d3222f4d09d52","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-methods.js","hash":"61c03727f0361616c1dbd4b373ac10bbfa4745f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-includes.js","hash":"aadc82d74f8ae37a1ecd086949cd0543ac79d3bc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-reduce.js","hash":"4097884ae38bb668ce5867224da5f2c975f8b80e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-species-constructor.js","hash":"75b5ba48389675e9a6e7f14da5f08c9c791e128f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_bind.js","hash":"20108a0cc0b9a0f12a74e59e55be86ca5a9a08aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_array-species-create.js","hash":"ea972f817b1ba5ca5538fe2b40521d3723195597","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_classof.js","hash":"c665a826eae98ea2b7b9f239f7991dc1775aa6c4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_cof.js","hash":"140ea7bea3fa0bdfa83d91b83d587f9080be15c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_collection-to-json.js","hash":"4dd36ac327ef6e964899c2d468eef3eb6eb3a1b5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_collection-weak.js","hash":"07504511356f4f6455917e81e39c1b9f00f35aea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_collection.js","hash":"1c5924de69266d7d55f0870bd511a2e121a0a8e9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_collection-strong.js","hash":"20c3504123ea3217d13101d0a3bbd5d364174bfe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_create-property.js","hash":"2b1f133bbe0e05d3f2086151e3e2e02f6613b402","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_ctx.js","hash":"30170d4b9d02483c76953c9e3457efbf58246d1c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_date-to-primitive.js","hash":"56c77ba2447d32f8095c1d0785808d0815811bec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_core.js","hash":"b54dbb1b1de84a1f5ea33861c562a8b1cf51f79f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_dom-create.js","hash":"708c0a69f1a2da4fa06e2ed4055a5aed06bad667","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_descriptors.js","hash":"beeea40d08ec16a5a027a5e82881a58579da99e2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_defined.js","hash":"21dbef0c3eb36a6bae002222b5c39cd801876b23","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_entry-virtual.js","hash":"47f4d11bdbf515fb997f1eee017a6adf6f838903","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_enum-keys.js","hash":"b1ab88cb8c21614126af8b53d0ea5d2b4e59e2dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_enum-bug-keys.js","hash":"241c67b20a51c0b008fd49457a8d55f42cc735ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_export.js","hash":"222a60aed276c1f886ba6d8263f7eeebfb068be3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_fails-is-regexp.js","hash":"0371de81e0e43a2f60f4b262d96e6c73ef6ebc6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_fails.js","hash":"97827e50dee39c71168af5c46775d932c5e59d21","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_fix-re-wks.js","hash":"de41ecc278bd8553ebdb07814203bcb89e03e7a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_date-to-iso-string.js","hash":"44a9f2ff34048800acd913267916e255a58b146a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_global.js","hash":"62c66a217459e6a6b23ae63b128671f10cac9aa4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_flags.js","hash":"4f3adef075102ca8ba8c958aa7991bb87fcb7a74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_flatten-into-array.js","hash":"fe146091179f307b5266e492cc85606b4e453927","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_ie8-dom-define.js","hash":"11a02c11edc39c2796064487937556c5c42a97ec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_html.js","hash":"33adf5ef3fb2b6693446406cb8ab19893d3bd096","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_has.js","hash":"79121fb33a591d7d158ede5d25453314055bd374","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_for-of.js","hash":"568c3191f355976bd75687e27ad6139868e93793","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_inherit-if-required.js","hash":"f8d1ccf8ad9ab03e472fcf06c92179d4d3489f74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iobject.js","hash":"0ea718e6d7831c907c152324b7110806c08d9d31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_hide.js","hash":"42487ccccc411d8a958981ef61efcbceee1ccf1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_invoke.js","hash":"c8208fedbaf6f0693273b4515eee17d11639dd60","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_is-array-iter.js","hash":"11bbf184cf1fa814ce2f8c0e0d5f28e4cdc43d33","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_is-integer.js","hash":"f641e2c137f51bb175cba8c813f71e64eaa664b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_is-array.js","hash":"c37ecc574d27c8aed45c27b7c7d6688d36efabf6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iter-call.js","hash":"fc3aba2edc53f037c7cd494896e57eafaae0d1b7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_is-object.js","hash":"a95397416e0b54b1c8207f91ec710f09ac8d923a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iter-create.js","hash":"4763ce238cfc9975c74bb182cc08f6bc1878d341","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iter-detect.js","hash":"7eade41047d4fa07c0dde891b44022b1d7583302","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iterators.js","hash":"6d71154c41bc03acd3768f7a365efd35cadf4e46","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iter-step.js","hash":"ab29ae76c6f3fd0de3f4cdfc1ac2aebacd3d6b92","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_keyof.js","hash":"0a36bef196d14f0df2b4d6fdba5d2d97e7d5506f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_is-regexp.js","hash":"66314f7d957a027da9a432236b5c9c9165bc5e3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_iter-define.js","hash":"3f2c7c756d856cec2e3cdf50d7ed7f9792c90225","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_library.js","hash":"7f4d44a65741205439beadfcf71739671900d866","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_math-log1p.js","hash":"7a12ffb95d45508b17fd3a8f74814198d190bca2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_math-expm1.js","hash":"33afe1cf6cba7c02c261abeb03e1e5fd0144147e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_math-fround.js","hash":"880f0ebdc5b6c49ac37ed57f1f866b2f82d316a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_math-scale.js","hash":"79143837e35b35f76a13edb9c3b2ff8198b3a9dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_math-sign.js","hash":"de7de668bb5350ae5cdccc55864b81e6e08049d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_new-promise-capability.js","hash":"691960fa1b5dacd0756bc49317a8ecc01e0c7df9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_metadata.js","hash":"5435c9ab3e7a024dd0ced39fd49a25304229b005","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_meta.js","hash":"9ac19bdf05cbf0c82b2aed80e350c645b17218a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-assign.js","hash":"d21fe43c808f022e6d448a6d02458e1b14d08068","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-define.js","hash":"ff965426dc23f8201391226c2f224847e440f782","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-create.js","hash":"7469b3aa75951e4399164c6248bb414bcef02723","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-dps.js","hash":"c26a092cf18f413680dbc1ed23b51630fbc48ef3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-gopd.js","hash":"b1866473b6035f56507d2a654481466440621d90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-dp.js","hash":"436c3d4e9dfc031a79b38b651e12fb7f0dd1c306","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-gopn.js","hash":"6b4f6536fbb97a88152e1a16bf0ec46cdb406d31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-forced-pam.js","hash":"288c9bacae800257c0589c7759929bff84064b6e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-gops.js","hash":"b9f5c998f75613e6d1228fa23f7feb5d5a1e5770","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-gpo.js","hash":"bbddf24b80f9173bb72c3c12e397f46c39cdc583","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_microtask.js","hash":"63601f87d8b43f7f3c8b97541cc3134c8faa9113","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-gopn-ext.js","hash":"c371b70c57206a77183b139365a8338a928f3746","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-keys-internal.js","hash":"a34519df37a2711e64dabb64d4a06e32ebb3d1d5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-pie.js","hash":"b9adce7a393cc4425bf0e1bbe81f9758dc696427","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-to-array.js","hash":"13de05701247fce0e07efeec862d60fd6c5151be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_parse-float.js","hash":"be604795bd336b946cc2b601cdc05009f516e35e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_parse-int.js","hash":"6ef64b6e77f5473814780ed952c65af39066b323","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_partial.js","hash":"5e9bccae0081e59c25b3d75ce59d60b54bdd46a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-keys.js","hash":"c1a11350ae836ced1746d0d181985c40ebf233ec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_path.js","hash":"e789af9be8e505938158c6f4f98ea429da64bb67","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_promise-resolve.js","hash":"bd2cd36e9b1c44a102bf204d00937c71cb5e2455","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_property-desc.js","hash":"a173208473cd5d3b7d7a3997dea92c55a01f0333","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_perform.js","hash":"ee2f45fae924ed557c69f3e5f9fbde3485144e3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_replacer.js","hash":"9b60eab7b4c41e5fe3b9bb33a4a8bd3ffbd52f6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_redefine.js","hash":"a936833617df1efdec24a75919dfe40805e39344","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_redefine-all.js","hash":"3c36924165f10fdd8ac60a799f2bcd2728b1d431","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_set-proto.js","hash":"ddf359673c9105f4a242a670c6153509ffef1c57","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_object-sap.js","hash":"2b702367dfd4c87d8039ef50e5710ddf663f2289","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_own-keys.js","hash":"b8fdef8d65c2a854499f9b2138adfa49aa8d0b89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_same-value.js","hash":"25cdfc36640038b5bdc6753f1ca1b6560790db6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_shared-key.js","hash":"e7adef1543db08aaa59004afb00196b953b9fee1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_shared.js","hash":"e909bcad1bd7e2655abda5d0141ae778c9c8a81f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_set-collection-from.js","hash":"21f1478c21cbc66185fc2883a7b45eb862b46a2f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_set-to-string-tag.js","hash":"0707cd6b53136a9431b21c9640d0b62e52d60e95","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-at.js","hash":"89cb57be2327fe81e53bea8239ab9c80c3fa5784","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_strict-method.js","hash":"bc7100447b421737603933a59927174d547ad188","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_set-collection-of.js","hash":"efb9c3272bd8a41909711a617ebdff7534bbe17f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-context.js","hash":"6b36c10849e29d85be74ee0f7b3c70d57d44aac4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-html.js","hash":"2ec6ef81485ab85231ea83bcdb60861fd8453249","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_species-constructor.js","hash":"84cc9fe7d62b5c38d9dd630ec5d77ded730b8cd4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-pad.js","hash":"efc7cba5e7b78e8654367b5f246c837cf38bf577","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-ws.js","hash":"810e8ee92e022afa0b627993a426870450d0d4a1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-trim.js","hash":"a0f9cf7a737ce72228b6b01aeffe3edc1d78588e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_string-repeat.js","hash":"0937d2ec080ced18afabb6b9b309a3f078945ef0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-absolute-index.js","hash":"d1572f01ace068e65c370a4d04d1515e4d366931","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_task.js","hash":"30aa426fb1553cacc6543555532ea8e93f092736","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-index.js","hash":"928cf808af421e16801f475e72e9d85db6505f51","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_set-species.js","hash":"f59da7337baafc6249e6c0e5f116dec77118e2e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-length.js","hash":"f9cb326832b5f48b995eb28977645602e21b71e3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-iobject.js","hash":"5e7f034eb89e27cc6f59d12a68617bb755e06d2c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_typed-array.js","hash":"79024bffed2ee3e7473a8fface575f9715b72eb8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-primitive.js","hash":"21ac2dec6272919b687e51b5674fbf6cc470e656","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-object.js","hash":"0263e492ef6fb466ee301974d96e597c074d0215","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_typed.js","hash":"2679afbed9bd60d34ad19909224c30d7aea1fcdf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_typed-buffer.js","hash":"e474cc7f9809a6eeb8c073cbee6ca3563c9dc90b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_user-agent.js","hash":"9667e9299bb8a83ea7e18ca993833d3b8d2ff66a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_uid.js","hash":"fa411f0b8a4606f43dd7439fcc092650998bd183","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_validate-collection.js","hash":"9f0d734cddf1c80ae90379e85686a9e959a28432","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_to-integer.js","hash":"fd2955e9f0f08e509a3350d44cde95eb93de5768","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_wks-define.js","hash":"5c27909cf6f9bbd3ba36c5bec2f12b2b1d0b27be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_wks-ext.js","hash":"52ebec5699b44c07333384df4eea2666d7d89add","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.delay.js","hash":"1bfb45b425ef0107ad77c29de550b5550a704d85","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.function.part.js","hash":"b5c56640236ccefd06dd378d9fb8c4edabbf0e90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/_wks.js","hash":"3b33ecb0f2975f954ff26cd34eab3e7d3f8fbe68","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.dict.js","hash":"54c21beaa6990a943523b333fc9eea98895a50de","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.get-iterator-method.js","hash":"ecd68afd841a0be41e958376ffb6c9f05ecf75f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.is-iterable.js","hash":"b7a50639d842d76858955dad6f7ec7297a9f81ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.object.classof.js","hash":"81fff05e05990f43142b1333c1fbfd5d759078ab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.get-iterator.js","hash":"13733d4cbd08f0782f0fab4a29f6d16339b1dd6e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.number.iterator.js","hash":"c43fa5b3839925321e789892ebac43835f70444e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.object.is-object.js","hash":"abc1301c3bb0f68f62ba95b81f7b79872b1890ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.regexp.escape.js","hash":"5f21e107097a5575ecd2fc6d791e94c2f465f73a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.object.make.js","hash":"cb21642f60fbae31bb66c27950d0b4f1d3d72b3e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.string.escape-html.js","hash":"478e196015aab7984a2e8f87b171fb250f148268","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.object.define.js","hash":"e2f25c2369a3f8e9ed063fa473fc185cb33fc20e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/core.string.unescape-html.js","hash":"e6a6dba86367e902157322b680769c5fb4211a01","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es5.js","hash":"08c63bee2ff4dea036f52cf1d089863cd5255cee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.copy-within.js","hash":"8bea385deaf272d2f1eeebd794206c3a867e1a50","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.fill.js","hash":"bd15e5daf4c161d8a6b1b054b84cb2e37de6e9bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.find.js","hash":"2317f054697833ceca2058c8a43e859149c89f9c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.filter.js","hash":"863948af7f813d423f37d2a789aaa2def621294e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.find-index.js","hash":"307621674c6642769c2b42347a014886a28c6baf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.index-of.js","hash":"69d30167b7c9b9a1ff8ce75ebc67c32de698089a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.for-each.js","hash":"5fb6f5153f62e29e12c69c3679af79b4649af97b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.from.js","hash":"c00ef163afc707087d2a329ca5b178f5f36d8cff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.is-array.js","hash":"e5915ae62be75d6dca23736f2783d268f087dcc5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.iterator.js","hash":"2655d1294e495cc8839023eb4e72f22807275852","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.map.js","hash":"44ca3ff6cc49a6af7a01fb30e014ac2ffa0d899a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.join.js","hash":"6ef7d983b9cea36680a5071c603cbb2a30c66425","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.reduce.js","hash":"09fecb0f8d37784bca383845f71a87f6810e6ac0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.last-index-of.js","hash":"61d6224a7b96acd2c9a619efd16d2c1ca35b8a8e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.of.js","hash":"5950d079ff9a2aa3d0879c35c721afe784757d08","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.slice.js","hash":"813477fe950e8d270b65511d538d04d9f8466847","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.reduce-right.js","hash":"c489385c5cf2c452481aa8f8d604087ada95bace","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.sort.js","hash":"0e9183b733bf646dd5bf9d7ad710f84d81e6d8a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.some.js","hash":"a5cf839f7781b962b0ca41340bad5e158bed29d0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.species.js","hash":"81ad28dc4d2e601ad0fcb4645980302e14c26268","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.date.to-iso-string.js","hash":"3a945afff6423724892f7daacef0c2d79fa73a37","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.date.now.js","hash":"3f36a5d769b5d9dbbf6b63bde7e37af3d83c2244","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.date.to-json.js","hash":"22a754fa331cd53d1342347ef13ab9af909d9bb0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.date.to-primitive.js","hash":"379fc4bc62669a9a85fef0378413b8d056e47381","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.date.to-string.js","hash":"7ed5311f8c1cfbee3096e6ac523e6758b6e9d202","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.function.bind.js","hash":"14f42c81ebbcc547d361e689d0083d5a3db55543","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.function.has-instance.js","hash":"bbb95f25ffe7463ba463355803559b8b68439417","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.map.js","hash":"6d66825f45ed4984abbd425cd1521da242365c11","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.acosh.js","hash":"17da1380c3d5b622c22a2ad0839f2673e3c2e787","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.asinh.js","hash":"68a91e3b0ba51101a30cd0e89f284267ffda3883","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.function.name.js","hash":"0ac6217fc4f8a9b01ecb31530e57c4acc2de43c7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.atanh.js","hash":"6066c91187209944e2ed0cfb5f6a37a3e94a094f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.cosh.js","hash":"4bb3b6f0771c14470840c9c268d6811a2cd7cd3b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.array.every.js","hash":"1d02f1e9b3f4457c4e4a038d6e5baef19969fd22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.fround.js","hash":"1f5a0a7e04f2f833e7b9b03a1be35907560ce450","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.expm1.js","hash":"bf648e02379a38038e2af153731fb40ae6a1d503","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.log10.js","hash":"f07ed986cb306d1bfa741a2ca0dbe1139bcc1294","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.cbrt.js","hash":"60410068183522cb5d2529ff5c3f44bedcae35d4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.log2.js","hash":"0d6dfc0de21db752d757a24bf50a701922400037","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.sign.js","hash":"b21d1d587e5b404c88df73ae0d974516a3d4b401","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.sinh.js","hash":"dfe7e669c306a0417d4c2467131f2b1b0aa07fb5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.log1p.js","hash":"86418d77f024d356cdac5d088d5b9d290c934db9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.hypot.js","hash":"a6e566820780802587b03d00aec375a27b241b37","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.constructor.js","hash":"0fe0560e96c99c49da541960055401b9dd86e16e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.tanh.js","hash":"8336bad0aabac96f6100bf3eca9ec37a387d72c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.is-finite.js","hash":"726186bffc18586f1ed0e1797f541710a126c487","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.is-integer.js","hash":"4d771017f5cdede053855503efb0a92f1bab7d90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.clz32.js","hash":"b53cbda6e039e7fd9dcad17ef9149f0f539f004d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.trunc.js","hash":"42b8fd67ce7acd601b89ef5f6e354e58c06c1b1d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.is-nan.js","hash":"26933a54c17eac2a6caa2da594fe3cb0108a074b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.is-safe-integer.js","hash":"ff5459e02406058fd4b772f5795561060f3a3bbc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.math.imul.js","hash":"9b286cbb3433294640df916f2ea15f9e4871a581","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.min-safe-integer.js","hash":"ed87dd436f9058501f7f732963b21304613a5ede","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.parse-float.js","hash":"83401bc7fc16201dd462c020c64335f1aa3495d2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.parse-int.js","hash":"47458fdefb649e019a3eac2d623cf8ec4cc28918","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.to-fixed.js","hash":"525666a910e1f099d182d6716221777ff96e297d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.max-safe-integer.js","hash":"d33ee9ff9836cb9d1efa5d64423ea7a6bb13f5d4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.to-precision.js","hash":"b925da733b919c78adfa61fd7a0503e424f1a7fe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.define-properties.js","hash":"f8309c4f31975e4a6c2c818358e7e2db0e7f951d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.create.js","hash":"1a5d8fa0ff4268b651cb63ab8b57004c145aa73c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.number.epsilon.js","hash":"3b4d6e0d643df7898ad463e3cecf7a25209182f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.freeze.js","hash":"603fe33698fd6dffac17af4ed4505cf299389776","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","hash":"0812898a4340f3dd607e5b96621a8702a061c434","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.get-own-property-names.js","hash":"c32969a038666f77f1355ff89fdbe86185c1aa8f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.get-prototype-of.js","hash":"843a9df8b46d9498540d0c92c95e5e9243a8d267","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.is-extensible.js","hash":"48d4438003aa76461f1d928adad49cfc4e1aeace","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.is-sealed.js","hash":"9bf58eccddf9e81756bfc0c3fff06fff9fc2fc01","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.assign.js","hash":"52238ff9eecbfb5b926d12c6546f1b92409633b5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.is.js","hash":"f1ee304c27bcf7d3252b6470417375ec8433f263","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.prevent-extensions.js","hash":"44712aa6d1010a706ad4c6302e85b873af94eb8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.define-property.js","hash":"fb192c6675776d379d31b38fe53de3b023cad121","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.keys.js","hash":"0f1f8c37e22d70520814d07e947a861ceb968747","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.seal.js","hash":"2c63edd2c813c5d771bce5376fe709f645437ca5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.to-string.js","hash":"4d2a24cc27675611b68a909f4a26aa408d8220e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.parse-float.js","hash":"f88a2ef1976f43f71a4bea2a47e6ec7baed18695","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.set-prototype-of.js","hash":"7eb0bf22d40880d684edfe69edb5e31557359b48","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.parse-int.js","hash":"8d749402171737a3c730cff5c7b9c349115bd04c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.delete-property.js","hash":"d6345bdfa38d830bc4a60866b325e9b7c067071e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.promise.js","hash":"a63c7389a4fdc08699052ece441b43189692f0b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.object.is-frozen.js","hash":"338b40f0359a679b528be98be3a5f4bcc41f3541","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.enumerate.js","hash":"a68277621b6b207e7e1ed99aeddbc2b88f56bb82","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.define-property.js","hash":"fcf833bcab52bd2efd5ea2808683f70e860ac696","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","hash":"9a2a4f691bfb911c8ea6747649bf97580cc9f707","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.get.js","hash":"a3e1412345d6f6b07a00bbcac09ba121f1ad30e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.apply.js","hash":"14819902d1a6a3323b2a22dd81c9c32a499f3be0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.has.js","hash":"86b29f81a9732e12a973d9a54903cfa7d7bdc95d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.is-extensible.js","hash":"aa128dcb565d0154ac62b07cf77396da8d884725","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.own-keys.js","hash":"93a111807621b46a8d53efa967890d9283328047","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","hash":"2ff2323337699cc8f003991d14e75d6f1e6afbcf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","hash":"97801384a4ef874be160e002eda9a934bc0379f5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.set.js","hash":"1b6f8de5c1df6b890bf645848e0b2fdb9b94fe6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","hash":"ea79c75b8d47f10475bc1b45cacfc93a25ca2792","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.replace.js","hash":"b6b7867634403bca6b5dbc7f8ea6f10be8c72d31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.constructor.js","hash":"c27ec70a9ac19947daf3ce48799f0c202432daac","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.reflect.construct.js","hash":"63d6ffb1dacf6eb3a02924fcb6f7c8d196678e5e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.search.js","hash":"4b9fe4d24f6a342ac68654478d7386a8d7fe26ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.match.js","hash":"f0916cf7849454326b02b1425146b4139573b860","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.split.js","hash":"8b01f15ed32c6fd7d6246592916fd1c0845a261d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.flags.js","hash":"f9e19eb3433d27dd62e72c4d5f04ae4c505c37ab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.set.js","hash":"3cdf5f06297e9cd7f080826579fc208ca9da8466","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.anchor.js","hash":"fe572983fa6c4010914c329c2f2157a3541a7575","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.big.js","hash":"320190495a2d11b74e2d1ea04fe77ce663cabdab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.regexp.to-string.js","hash":"667de9aba656b56d7a6704c0f882509f7bafea41","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.bold.js","hash":"89c35b678679dc628b0af847a0620ecd9175adcf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.ends-with.js","hash":"e7c9d588bf9c7d7b8dec48ab21c68227c5e97ffe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.fixed.js","hash":"a73d3c523e1c0096dc31016d6383e81698139459","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.code-point-at.js","hash":"798f0b26886f992192a8582b28e58bbfdd14217c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.blink.js","hash":"cae4f21a2beb175466ec4e9509f46a39b2cd1332","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.from-code-point.js","hash":"02ad5fc360634ebe410e50a5b4891f48be060a00","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.includes.js","hash":"53031ede9409714ab7b156a77f94d0f30fb6d8a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.italics.js","hash":"3d1352dd4097d615543d228a072237ad9d08fa59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.fontsize.js","hash":"89a6b57c29ceb0aad8d31da2a30db16dd937ca14","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.iterator.js","hash":"380cab9516fa51d03a853a22e49ebc7044825fb0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.link.js","hash":"5028f460660ef1221a1ee706e1abff1563a2feb3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.raw.js","hash":"affe6dbbb0a1a08ba6866655819701d8bb4eb978","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.repeat.js","hash":"36efdb394692add15b546f016bd05700c584ff5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.small.js","hash":"909b386f4a5224d847952d453dfd4d517b70e0ac","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.strike.js","hash":"eb40e6bfffb5466a7e2ab6627040c03494b0eb7e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.sub.js","hash":"bc5e467ed52d746362ce5444006b36912bb822bd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.sup.js","hash":"c563a0d10a98c9deda8b6c003a64844f291223d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.trim.js","hash":"743bb333e6cdd69bd7f443b0829de151660126c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.starts-with.js","hash":"87580e6ec681fc8faf92f40f5548a9622232dbb6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.string.fontcolor.js","hash":"34d5a6e6b44eade721fa31dc2176ecdee5bbc4b1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.array-buffer.js","hash":"a9283d0354bd57dddad60ef64dba766f8b19f63c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.symbol.js","hash":"c681059f1dcda1c45ec7b135fba34a3def6b1f02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.data-view.js","hash":"c15ea398efab13edfa97e527a73d79097d71be55","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.float64-array.js","hash":"0196b9f13f329d99ad66b9fe4a631aad62c67e66","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.int16-array.js","hash":"da8a19a1b80a2eee8abb4059dae924e853ce90c4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.float32-array.js","hash":"2b674626f080893bc4e80b9cea4e5698563eadb5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.int32-array.js","hash":"83d979d22a2c443c8e078865573b04ac201e0399","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.uint32-array.js","hash":"99648112929e26113d74230b883d53514cb806db","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.int8-array.js","hash":"6a2baed32d46ea5cec53cecc0442e89f6e0f6551","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","hash":"69b1971f56f444a0f32c304f272de52e3e9b464a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.weak-map.js","hash":"e68155f4413814779480a11f053f1f6d9995a7a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.weak-set.js","hash":"61bd9e0ebe6c8c30eda972e1e25086735ba618ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.array.flat-map.js","hash":"02a4022c272d14d1ecd91cd632021d852c34d0f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.uint16-array.js","hash":"5fbfa8ad1113f23f72008ade2ea96cd6f103f9ea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es6.typed.uint8-array.js","hash":"6c2c819ca18ad0035b081280a6237f4bc38871aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.array.includes.js","hash":"f7fc98a62305fa172d950307c9730ad980b1c0bb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.array.flatten.js","hash":"34b1f849f242a4b9f5ddbbc51ffb08cb66896254","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.asap.js","hash":"5edef0c4c7cbf59f8ccdb5e6386c2efec841ead8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.global.js","hash":"15a35ae33d4ee8ab1f14ffefb24c1c1e29e2fc60","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.map.from.js","hash":"4cffe0dea30d8e423a0cff0b4e9d65a46a3395fc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.clamp.js","hash":"a22301cdbb20c0ef2a260dc5a23972c672e651ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.deg-per-rad.js","hash":"4b890d363e3c40b66bb7a8e25288ca8633a9e0aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.map.of.js","hash":"e5da6050f39b4c3a204637e20883dd7850317282","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.degrees.js","hash":"1f226106c3addbdd5f267394ddf65e41a1788e89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.fscale.js","hash":"40b4578eb13f3feb14b7654308f38420e0139450","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.isubh.js","hash":"661d2ddc3228dbcb37c10672dd1314ee4e3819a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.map.to-json.js","hash":"bd4b1029e4edc669f8e0f971b582180004a229f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.error.is-error.js","hash":"6d6dfa14fb57762ba3279ba761aadbead1bd57d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.scale.js","hash":"96e94fcf2ec3f3322529eff1af6b26cace9a6fdc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.iaddh.js","hash":"b2e5818ee649c327abddf0d1eadada88db891bb1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.signbit.js","hash":"0cbb73cfe9e0a3848d1c897424a31a09c00fda03","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.umulh.js","hash":"76ccf44bffd15601f901439e4a28a1098af99c34","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.imulh.js","hash":"49434269a547bd9dcfe2e0a0a7c1dd6590ca81a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.define-setter.js","hash":"061ce4b3c33febbf6f29c183f891d9ecaab5a160","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","hash":"efdf3d55eb6b97eaea5db5247ec009517862aa9b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.entries.js","hash":"6fb24bd186c6855e2546de16054aa73b7f49e90e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.lookup-getter.js","hash":"075124b25f737ef93946ffb79dc92240d973203b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.radians.js","hash":"9b77eeb091097b1ddcedf75b173077b4696a5ca9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.define-getter.js","hash":"7ba6bc1b6c70fb5142bf6f2550ce0b538cb7ff74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.lookup-setter.js","hash":"b1552293f893f29e7b7b7c66f9b576039a493e62","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.math.rad-per-deg.js","hash":"d4f03cf3ffa18a5dc2456f0a1e39e65a96886cc3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.promise.try.js","hash":"3687d6f41779ec8f675c59064e29a7a64afb5083","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.object.values.js","hash":"6e4646583e6fed26d50565630519ff35343e9c18","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.promise.finally.js","hash":"3612e83d5fbcee13728838a580bf8779bd012efa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.observable.js","hash":"e7d4d3db8eb3e71225f92f4c9868b2c24ce608ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.define-metadata.js","hash":"b53be80df64217ef6b6536ddead128dba611fc9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.delete-metadata.js","hash":"1d3a0c994cc689ee5257834472c8b8a415817b1d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.get-own-metadata.js","hash":"d004d45415878719d4aa12ead552d9cf398e6ccb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.has-own-metadata.js","hash":"6c1d3bcc2de0941948def54100d187c9ddd51fce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.get-metadata-keys.js","hash":"d31ec9c4b28ba0aff609cd837c866fedfdcaef12","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.get-metadata.js","hash":"caec777aedb6c5f91fe2c309b02c611d5627368b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.set.of.js","hash":"628b259f38ccd5facfb69fbb420ac057ae5ea5ac","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.set.from.js","hash":"429a204d7601be8e9381abb28c95c136b4167490","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.has-metadata.js","hash":"4ffe2bda3bcd6343bb0a3d75af879d7253f316d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.set.to-json.js","hash":"8a5bfc86cab82c8a6dcffc9ce3e8fda2afb5d8c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.metadata.js","hash":"d4511391917c4307466611bb7605663a36675b89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.at.js","hash":"697abd7d44e19f49d71182d4ab786b18ea0acb88","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js","hash":"6e973c1f4d338e24f989df822cf2b7e4e1f0feb0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.match-all.js","hash":"3e3c812a8edd3555c7f5942e54cbf9382c1f81a6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.pad-start.js","hash":"791fc76cf262861a60a26545d39c052520b3e6ef","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.pad-end.js","hash":"2c1e63716d9ef9944c4d13cd36895e66e1262a58","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.trim-left.js","hash":"0eae79a50db7277efa7e436162b28b8e531127fd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.symbol.async-iterator.js","hash":"8346b4ea52bd0b07dbf8e166cebd8d650bc5ed07","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.weak-map.from.js","hash":"ee4cac63f3d0674b9f7b9b798590f30a4ebe4ce5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.weak-map.of.js","hash":"b987ac2f7c8479d9ca0c5c225cc29067c68b2841","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.symbol.observable.js","hash":"d3956dc9cf359b8d71344b01fd10d2a6da7125c1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.weak-set.of.js","hash":"bc60f7f6e1059c9b480bb1bd76ed6bac23ffdf4a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.system.global.js","hash":"c764d7bcc89720667ba4f39265f9f5aeff70ab58","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.weak-set.from.js","hash":"a082f262daf6a1902db6139a48fce28b3e4c0ef2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/web.dom.iterable.js","hash":"fc607d68d590184896d61997a1c690fbf9473e91","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/web.immediate.js","hash":"60e58a4f98a3aad155ea880bac1d96261386684b","modified":499162500000},{"_id":"themes/next/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/next/node_modules/core-js/modules/web.timers.js","hash":"0c4ce86177cfce33b975990cba5fd499dc009000","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/es7.string.trim-right.js","hash":"2fcd9b316ccc4917af7b52abf1558e68366ca635","modified":499162500000},{"_id":"themes/next/node_modules/delayed-stream/lib/delayed_stream.js","hash":"097ab12e3837896d11d3f1d2c7a891d177b493c4","modified":1430160544000},{"_id":"themes/next/node_modules/debug/src/browser.js","hash":"d9b188f58e358831a71973d994beddc9d9f63ac7","modified":499162500000},{"_id":"themes/next/node_modules/debug/src/index.js","hash":"12f31fb022b4bd89154d40d4fc2db181a15cdbfc","modified":499162500000},{"_id":"themes/next/node_modules/debug/dist/debug.js","hash":"41bf91976096d00a7be53371225e32bc32c16252","modified":499162500000},{"_id":"themes/next/node_modules/debug/src/common.js","hash":"b08fe78f09813f6d2ff7b030173bb98795d730a3","modified":499162500000},{"_id":"themes/next/node_modules/debug/src/node.js","hash":"044e2c58337cef0d368693d248c7a3b5b6f34ee1","modified":499162500000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise.auto.js","hash":"fa1f2407df317b598b8808dd24cad33d08706175","modified":1513919775000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.auto.min.js","hash":"957ed1fc28df97e6bf4eb53cbce3af7abefabfa8","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise.js","hash":"915891989de81b03e641fca0dc886a40342d5046","modified":1513709731000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.auto.js","hash":"18810f8137a52a7c9e34473bd1b4d3553a5b35c5","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.auto.map","hash":"7cd3656dba44c502d6a37a91a862c1a609cc9f5e","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.min.js","hash":"7081b47c78d0e1c0beb0391f525d1d42c983c9b7","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.js","hash":"cc02417757383e93f0780bdb57294ea62122519e","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.map","hash":"35dce2b699f4709f0447f73e128d0473693fbeac","modified":1516734833000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.auto.min.map","hash":"be7616a24d2341be9f8eb6b7f88fbc92261358f2","modified":1516734833000},{"_id":"themes/next/node_modules/eventemitter3/umd/eventemitter3.min.js","hash":"794ef6c5a85661fb3bc9ad9706dc38a18d0fd7ad","modified":1490971865000},{"_id":"themes/next/node_modules/es6-promise/dist/es6-promise.min.map","hash":"7a9dc5e9eacc0b0f3087f020320a8e94aa4d3dfa","modified":1516734833000},{"_id":"themes/next/node_modules/form-data/lib/browser.js","hash":"0ae55bb7ee9e39bd3dda8d9b6e6d6bff3855d121","modified":1478555747000},{"_id":"themes/next/node_modules/form-data/lib/form_data.js","hash":"0597bc0beff7f785b19e8be3e7565d183fb642e6","modified":1503584376000},{"_id":"themes/next/node_modules/formidable/lib/index.js","hash":"2256cfb9e40228e9ef38cc453505569d394e0abd","modified":1479495729000},{"_id":"themes/next/node_modules/form-data/lib/populate.js","hash":"1808bbf4f1478a79ea4f00b38bf46983e48c0ff3","modified":1472196493000},{"_id":"themes/next/node_modules/formidable/lib/incoming_form.js","hash":"1d87179772aba3daca9b02690c946785a62a0c22","modified":1521559793000},{"_id":"themes/next/node_modules/formidable/lib/file.js","hash":"24152e2588aa5058a9559ef13badf33953657484","modified":1520427882000},{"_id":"themes/next/node_modules/formidable/lib/json_parser.js","hash":"0a299c8ae806ddbc4eaa43c17d03bd77730b6837","modified":1520428043000},{"_id":"themes/next/node_modules/formidable/lib/octet_parser.js","hash":"1aae54277c301d57ea49cb4e2af393106588fcf1","modified":1479495729000},{"_id":"themes/next/node_modules/formidable/lib/multipart_parser.js","hash":"8db79c0eab06cb9ed7b76365ab78afae0cf0b9d0","modified":1481590261000},{"_id":"themes/next/node_modules/formidable/lib/querystring_parser.js","hash":"ac2bd021c9ccc73e973307e131e85f4bfbeed14a","modified":1481590361000},{"_id":"themes/next/node_modules/hexo-leancloud-counter-security/src/index.js","hash":"53d8def6b117d43fbaf4851360119373eae613c1","modified":1521199219000},{"_id":"themes/next/node_modules/javascript-state-machine/test/runner.js","hash":"3ec61689ba4d3edb2cb9c5a120ff9b14127af75e","modified":1479584424000},{"_id":"themes/next/node_modules/is-buffer/test/basic.js","hash":"9b388dd4724dc9aebaf5fd3ae177a6d7fd629073","modified":1508967181000},{"_id":"themes/next/node_modules/javascript-state-machine/test/index.html","hash":"d67ab4953f48f5d2b6bfef0453572038212fcc48","modified":1479672284000},{"_id":"themes/next/node_modules/javascript-state-machine/test/test_initialize.js","hash":"11cb55302851fd97cf2b8f90d8d50623c3bf89ac","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/demo/demo.css","hash":"118a8b220dc4a9fb61bc2f19f6bf75803c0d76d9","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/test/test_async.js","hash":"ce838392eec8be29c60a45b06bd12a2d17af516e","modified":1479671277000},{"_id":"themes/next/node_modules/javascript-state-machine/demo/demo.js","hash":"cef24f66ad8b486e472b105a6e18b4850f1518fa","modified":1479584424000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/dist/live-query.min.js","hash":"77b880ab89624d982b19b84902ad06c99c29da01","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/dist/live-query.js","hash":"9fb706bdf2aa1c23f1b9c30c3c57fe3099e96fe7","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/src/live-query-client.js","hash":"dd98cfc5782a418f9a3eebd3313fc171e8870827","modified":499162500000},{"_id":"themes/next/node_modules/javascript-state-machine/test/test_classes.js","hash":"ad0684bb516cfa54fa8a0e4fb613150b0b422174","modified":1479584424000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/src/index.js","hash":"9b8f7f02db39e9742d6bf97dd98a23124d8d024f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/src/realtime.js","hash":"77b7d05427094e08c6242d8a09ddf3f36190798c","modified":499162500000},{"_id":"themes/next/node_modules/javascript-state-machine/test/test_advanced.js","hash":"46a6b835d43684090a7d7d6c76c5b2046841d315","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/test/test_basics.js","hash":"d2ccc8155c9016b2e2dc2f67538e258efc402065","modified":1479591296000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.File.html","hash":"2a3eae28d8930c5af8762ba4e414255eab063cef","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.GeoPoint.html","hash":"3eaf70ab1d9cfbfe73e356b14eddc9f05dc5eac1","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Error.html","hash":"5448ae77daa1ba8c192b3f9e14e8f368ac86b224","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Conversation.html","hash":"ea69ad25a3411d6f8daf1330d302e26a79e10c19","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Captcha.html","hash":"4f7fcdcd38468ceea776625706fc092afb75a197","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.InboxQuery.html","hash":"4a4b69f5d8acab46d92592e5861c597a9dd26cda","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Insight.html","hash":"3c0d4674b8bd4cd9ff56746388b4d9da25957f73","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.LiveQuery.html","hash":"24c70acc5532b8e81003a6defe5b624fb68eafd1","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Push.html","hash":"c7a6b14baf45466468db326c0751a92650a0b15c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Insight.JobQuery.html","hash":"eda39dd0465bff6c8428b72ff8a9183c34215fc8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Role.html","hash":"e48b47a76950ac030bb26ade6e05040cb868b40f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Relation.html","hash":"a263324eb22677be087f9f6327105f5a7e02aa02","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.SearchQuery.html","hash":"d9bd852c7ae8b1ff2bf15031c4199f0aed283aa6","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.SearchSortBuilder.html","hash":"e7b102c389a3a66c7086bb130514a57fea206dac","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Statistic.html","hash":"8729e19d67392f91467376909544c2ead9ea698f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.html","hash":"3ac5e85d5092c1515bddc590cd47cabcaed508fd","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/acl.js.html","hash":"ae572b6fdbc9ff7ecb7e72af0b18b23ead179e97","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Status.html","hash":"3fb2ea8f53ce96f350287ed9023976e3439568cd","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/captcha.js.html","hash":"31a4deb1cd91f078f9239a07e960535593098481","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/av.js.html","hash":"ddffe44fdad63e4d4a487ea42f497032e9fe5344","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/cloudfunction.js.html","hash":"c8fc27ba51846cf667abd4ba3b17fc29905a7b42","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/conversation.js.html","hash":"9ff4f6ca37368f053dbe402c277c7ea8a10051de","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/Leaderboard.html","hash":"be330e155fdd541786ff0451d6be74e9a29baad4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/Statistic.html","hash":"e5a92d924874e6e1e6661072983db8d8e3fe1d95","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/event.js.html","hash":"5059899e8f98a345487112e0fde3933705fd4012","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/geopoint.js.html","hash":"cd2a7306b827ae1a560097131152222686fbd4fa","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/error.js.html","hash":"3c90081c71c49d53af044d088e36529856b98607","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/file.js.html","hash":"b6e8d76c237c17a608e5e7bd23cd2ac2becb74e9","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/index.html","hash":"b0fe6f2a03940600b76fb9d8c64c4ca14e63e1ce","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/global.html","hash":"01ea10b5998b0015427d7e4597d70ecddf745d15","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/leaderboard.js.html","hash":"861959a3f87aba335f2357c80146c118c9648d2b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/index.js.html","hash":"d49e94dc95a1af9381c354d5a6092adaf9acd5b8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/insight.js.html","hash":"c796d21512a72cebda0c27bbbf689ed27c882497","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/init.js.html","hash":"4a699eec3263e1327a81fe2ae2b054b95fec339c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV-AV.LiveQuery.html","hash":"42ed4379bf60cf40bf33a331e4cbaf4d3fb188a7","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/live-query.js.html","hash":"d36ce0bc27fc1d155c36ef76dfdb32a3dbe9821f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV-AV.Object.html","hash":"394d436c2da086e3a09562f3d5bef14539994639","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV-AV.Push.html","hash":"643a99816a393f89215f327adec26da89fbc74a5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV-AV.Relation.html","hash":"89757ec69beec51a1e762f3616d20e957295e16a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV.html","hash":"aa6c4fa29fe3ba8d669c66aa4cd7d03565e50e7f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/module-AV-AV.Query.html","hash":"e2c7ae1ff2f01665c02b981826f83b0c04717e4c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/push.js.html","hash":"5f56cf5c751da38f19229045bada8b18c462fc59","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/search.js.html","hash":"e2a4e9eed712bec98c419c192a1f65c6db50d311","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/op.js.html","hash":"20215e3174fb42fc40454bdfc032e921cda26655","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/role.js.html","hash":"79378ce22d591924d4fc6a5150757831d53abf26","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/query.js.html","hash":"8f4a85193c08ed3e096b963c758bea5651ef4dc0","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/test/index.js","hash":"e0d5335862b1b7831cd63d343072a090a9ad5e2c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/status.js.html","hash":"f28ae128ab47ebbf122f4b1fedb63a7cb0d2da7b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/relation.js.html","hash":"847e552327d48df7d39238e94972e2081514b0e5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/webpack/browser.js","hash":"f20056b9cd79b06adb07cb20b5317c05cb525c4e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/webpack/rn.js","hash":"4ab77be446846a452fb07bb63c97475759986b9e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/webpack/common.js","hash":"bf04eb651243ed0f1ea5ea85ee358dd0fbcd1183","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/webpack/weapp.js","hash":"f2d8eecec76be14bc335dce4c77fb6119f7cae1c","modified":499162500000},{"_id":"themes/next/node_modules/localstorage-memory/bin/test-browser.js","hash":"55ab102fb1e32f3f1d7e792d4e6034ce1f84d6c6","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/bin/test-node.sh","hash":"4499be7a6a5ae397a132867a2508f26ca204111d","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/docs/template.jade","hash":"58133e2e926ff5432d02b9f8c099cbad0f589f30","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/docs/index.html","hash":"8a0687c4a765495259b9af46dbba6757b37f35ce","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/tests/node.setup.js","hash":"f91f50495ff701bec10fe628cdc511fd8a393fcb","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/docs/localstorage-memory.js.html","hash":"0b92b77241f80d86d76c4a827cdf6eb7b7363ff1","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/tests/index.html","hash":"19d1c7fb05748fd9aaaca56858a9a966377c3244","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/lib/localstorage-memory.js","hash":"42617313d3ccfd84ef471109a819d028d06b7b4b","modified":1450031045000},{"_id":"themes/next/node_modules/localstorage-memory/tests/test.localstorage-memory.js","hash":"db858b3cd42ae6fad25e77087a0d0cf05066040c","modified":1450031045000},{"_id":"themes/next/node_modules/long/dist/long.js","hash":"f887e1700d8e1880e225161cd6007648695ea6be","modified":1469205451000},{"_id":"themes/next/node_modules/localstorage-memory/tests/webrunner.js","hash":"9b1d04778915045b710cf02eca2d61c23ed945ef","modified":1450031045000},{"_id":"themes/next/node_modules/long/dist/long.min.js","hash":"161de1af4cb851a34b21af1fe22bf53b83ebb914","modified":1469205456000},{"_id":"themes/next/node_modules/long/dist/long.min.map","hash":"9eb5597f656d0491cc840ec1c6d5357bae119bf8","modified":1469205456000},{"_id":"themes/next/node_modules/long/dist/README.md","hash":"f9c9741fba2af950e75718fd642eb0e7604d4699","modified":1445900673000},{"_id":"themes/next/node_modules/long/dist/long.min.js.gz","hash":"d9bee5f2f07c26f5f7f1c459eaf53bfb14f15e58","modified":1469205458000},{"_id":"themes/next/node_modules/long/doco/INDEX.md","hash":"164332a3d5ddd9941b9cddaff409bc6bb0ce9e62","modified":1407534650000},{"_id":"themes/next/node_modules/long/src/bower.json","hash":"94533d956648916125c50a1ec0f9f45f723f7bce","modified":1445623549000},{"_id":"themes/next/node_modules/long/doco/Long.md","hash":"4b2266b89db0ec7a63bb151910f248e2bf2c3a6d","modified":1415636258000},{"_id":"themes/next/node_modules/long/src/wrap.js","hash":"57509812728ac61ad034ba7bd86e405ae659957c","modified":1445895154000},{"_id":"themes/next/node_modules/long/scripts/build.js","hash":"ee951dad94731d07370804772dd228bf1efc0833","modified":1446670481000},{"_id":"themes/next/node_modules/long/tests/suite.js","hash":"f8d1c50981c2405ba710ccae7fdb557c6a371e3b","modified":1469205300000},{"_id":"themes/next/node_modules/long/tests/goog.math.long.js","hash":"27a24781800b0d2bb6a0480e18cb0d882e34ee12","modified":1407513471000},{"_id":"themes/next/node_modules/long/src/long.js","hash":"ef440131974589abef8c989229e3e4deca8efc85","modified":1469205409000},{"_id":"themes/next/node_modules/long/externs/long.js","hash":"8c35423533aae61e729cf557fa115af75c9f26a1","modified":1452188931000},{"_id":"themes/next/node_modules/leancloud-realtime/proto/message.js","hash":"5d332fcadb18355d7b80efb463189180d429ac8c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/proto/message-compiled.js","hash":"dda5a50d25700f5b677a6b1afb3e4217673f077d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/proto/message.proto","hash":"e1ab7393c6dff00394353e9cda2acb07a20d2dc9","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/script/validate-es5.js","hash":"d1ad95862999234cf9996f2b80953d20ca9ea3d5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/script/deploy.sh","hash":"5d78d3c60cd7eb1af4293756895c546db8c6f70f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/script/release.sh","hash":"bdeb010ce9ed4ecc3965185c3cd97af73c5925d3","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversation-member-info.js","hash":"6d7905c0071864ec28a4a0ba79f8d01decd6980e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/connection.js","hash":"fb0cc497281f2aee5ae0a04f34e32e5f6ef6c451","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversation-query.js","hash":"939d077997fb21bc22011b8ac5f2565f95b529ef","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/message-parser.js","hash":"fc86f78297c7025a1e92e6c93c4740929a394378","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/im-client.js","hash":"8aaf93e2badffa8d9a28ea9e348106b9fc62da56","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/index.js","hash":"a7a48d2aa580f8eeac0931bd6397cdddef18a4db","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/core.js","hash":"dcc47ca554d0086be3c812419fecde6fd252839a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/eventemitter.js","hash":"7b64ad1126166c70c9dde2788191f10d6101a64a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/error.js","hash":"927b136180c4ae4df3b3c2a2ea365b1c46de6171","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/session-manager.js","hash":"4acdfa7edef3a893770526a9dfbf9f476ca2be3d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/realtime.js","hash":"0e40587f900bec458d5a1e985bba7ca4fee7638d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/plugin.js","hash":"f99dca27b2e20e78e19d249a4b6ba1407ebac466","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/signature-factory-runner.js","hash":"7cbc087efc02ae46be51609cfc5c11418f1458cc","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/plugin-im.js","hash":"5774ac0eba643ba6acc11dbe4abacd63e3eb6788","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/websocket-plus.js","hash":"d8ebba7fe56f78bc50cad0e64bd0905580739ea4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/rollup/rollup.config.plugins.js","hash":"e92ab0e1a2103d0088ff4f37b919f006f7744920","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/rollup/rollup.config.test.js","hash":"3c18dc639aad6e8d51520d5ae5f4d263104371d1","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/rollup/shared-configs.js","hash":"914662dbcba08bf654a816558a4fad37182bb2ea","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/rollup/rollup.config.realtime.js","hash":"dd84f966fbed3731ffd6d79535b423ef24c2f06f","modified":499162500000},{"_id":"themes/next/node_modules/mime/src/test.js","hash":"86d3d2bcf162f3c198ad8315c803fa7f4b928f07","modified":1511569060000},{"_id":"themes/next/node_modules/mime/src/build.js","hash":"f37722b22ad17b428b8b4b97b5c09720b4e86a9d","modified":1511569247000},{"_id":"themes/next/node_modules/qs/lib/formats.js","hash":"268fd11b0d3295eb9e87943e70ef9f1834d573ac","modified":1496129637000},{"_id":"themes/next/node_modules/qs/lib/index.js","hash":"9039aef43bebb9c999e4711d367211cc97b710d3","modified":1497471592000},{"_id":"themes/next/node_modules/qs/lib/stringify.js","hash":"f3e93e4a7577328ddcdaed6a4c3fb74d066eea4d","modified":1504939656000},{"_id":"themes/next/node_modules/qs/lib/utils.js","hash":"236fcc5250a635993bf6dac33b6024e737a5137d","modified":1525237041000},{"_id":"themes/next/node_modules/qs/lib/parse.js","hash":"bcbbc2323305b1ce595610a585b916c9662821c6","modified":1504939441000},{"_id":"themes/next/node_modules/qs/test/.eslintrc","hash":"19532afcfb2ca609b9687da0d7dd20cdb4ccf7e4","modified":1504939656000},{"_id":"themes/next/node_modules/qs/test/utils.js","hash":"cd07caa5d78b48f035da3d761e19894911561df5","modified":1497471592000},{"_id":"themes/next/node_modules/qs/test/index.js","hash":"597801d7cbacf7a83f59b0615ec53af28dd5ab2c","modified":1496129637000},{"_id":"themes/next/node_modules/mime-db/db.json","hash":"4318dcdeaa3269fdfbe3d0894f22d1ede1cf81f1","modified":1534775770000},{"_id":"themes/next/node_modules/protobufjs/bin/pbjs","hash":"b7422c1ffd167d1111bb5e350003228e39d532f0","modified":1537585159463},{"_id":"themes/next/node_modules/qs/test/stringify.js","hash":"a2f01e48a855accf752c08ea59b5ae5a4d9e522e","modified":1525237041000},{"_id":"themes/next/node_modules/qs/test/parse.js","hash":"c484d2bf4182a9e2271ef85cbb5f9d25b9ca8231","modified":1525237041000},{"_id":"themes/next/node_modules/qs/dist/qs.js","hash":"778cc175ebf3c3c9cfda14994726c9c711b2ad71","modified":1525413963000},{"_id":"themes/next/node_modules/protobufjs/dist/README.md","hash":"53d3b5fd70f0be5caf8ee5a1a75fb7b80b1ddebf","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs.js","hash":"5a87745cfcfb8261906e858378a8c80e4fbeb791","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf-light.min.js.gz","hash":"5387b98d0083d4edefeb5b029919e28bcc32bae0","modified":1526462390000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf-light.min.js","hash":"68a13e5e183de33e99d80247bbfe8d3eec370a7a","modified":1526462386000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Builder.Service.html","hash":"37a5253582558fb47e4f2f281b92ced533f508e1","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf.min.js","hash":"5e9962448e98420f7036e3f7edafe9a077319ec5","modified":1526462382000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf.min.js.gz","hash":"c8e74fd843686f953d6a06d54d976534f5103761","modified":1526462389000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.DotProto.Parser.html","hash":"5b414bc977f75c44b0bf263d789abdcaa8ab4892","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.DotProto.Tokenizer.html","hash":"6f8128b00783f338f61eef9d24e63b0b5f541141","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Builder.html","hash":"f26364c8d25fdbec60302d91a1b0867547506ab7","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.DotProto.html","hash":"5dcdfcf676d48aba6a414de56d8e34477980d1b2","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Element.html","hash":"d46f952534dd435fd67664264a2eda3c6f9e2515","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Enum.html","hash":"586b99ee2b0405bf2b0c76b15f902f11a6410b01","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Enum.Value.html","hash":"7b595bb0c077dbf35afec692ca4d5a8ffc671f7a","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Extension.html","hash":"c64ec453ed0ab8aaf1f64e5e2c6f70ac0c57650a","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Message.Field.html","hash":"8923d6450c50596f202d4f58ac279b5176d7fa08","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Message.ExtensionField.html","hash":"310e820b3f3bde6b07e2e11e99df5fec75c30cfa","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Message.OneOf.html","hash":"9ff3a4ca7f58bb85bfc318588b2bee7f4eed3b30","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Element.html","hash":"1c7a46b0e2f51f1e9275e808efd8a88af90d413c","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Service.RPCMethod.html","hash":"32774b1eccacdee92ed5204e8e82c5b0673ea6fb","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Map.html","hash":"e25f289fde44276c71119fbe71eda7fb1512e0fb","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Service.Method.html","hash":"6ace71b8ea55c9aa5955d16a457dcc7fa71eead2","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Service.html","hash":"4ae41775ba9e4f316c461566d3e1ef7cea515f97","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Namespace.html","hash":"fedf3575f30414d9e713e62a929aa5d66a47d019","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.Message.html","hash":"b3133df6aefb5712c8b11cb449f49808f344c5f8","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.html","hash":"f992123ef7bab970b19a15f3664bb6b9d8942b03","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Reflect.T.html","hash":"f2d05dc2a36356b335a461b18bbde0a2ab6862ab","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Util.html","hash":"b39b3f386c7ae29b46d7bdce0ca5ca6a6d32b6f7","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.html","hash":"bb7407494a2adc4a1851e343086cdf015cc9d89f","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/index.html","hash":"9f439e55437de4e92012ea6bc601c7be78a2b193","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/src/es5.js","hash":"bcc8b9b208a3e4772abcc26a9faa2e0555f2e4ef","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/externs/protobuf.js","hash":"97322c497549dffad8d8a8c592fe9b683470919d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/bower.json.in","hash":"c23ef589575defbe60b46b496f18f44cdc6acb64","modified":1526462366000},{"_id":"themes/next/node_modules/protobufjs/externs/fs.js","hash":"5380cef649f9eefdb92f4ab3b976636947928d73","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/PingExample.proto","hash":"78f522bbd023c16cafef53b77d1908550372da5b","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/protobuf.js","hash":"ab70e2133f79b5e2a16c0466dd82d2bcac98fbc0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/wrap.js","hash":"ea0c2979601fbaf478c2b5855badc5927bd4460a","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/annotations.proto","hash":"34ca0517b9516daed19bb16c278d6c3e7d234404","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/bench.js","hash":"dfa85a4421ab1fdd8cd8172b6093cbe457635d4a","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/T139.proto","hash":"55a2da8236a24699d1f86095c2af4b8043cf1ad0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/bench.txt","hash":"a8d5883aa9d41d45de8c6fb22394232ea09642d9","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/comments.proto","hash":"d94352738896adf144806c9b85913b6ee0dda175","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/T263.proto","hash":"083f8e5debf9b9e400daa949a9d30bc06342498f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/complex.json","hash":"49b08d759cd4ec8194ca4baa8e0bf013d9dc0238","modified":1526462489000},{"_id":"themes/next/node_modules/protobufjs/tests/camelcase.proto","hash":"6de575179cf34dac79e50828d8369f74707481b9","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/custom-options.json","hash":"6d65d3535569325046fd8161fa3e7602b7844548","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/complex.proto","hash":"e6edf7b6ef2dfe607cecb06447fa6c23e02828af","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example1u.proto","hash":"184573fd4723ecd381f40c2a18ea8464175a8c65","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example2.proto","hash":"e991873ae1b0742e6dfbedcdb8f716c51a1b54e8","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example3.proto","hash":"544570bb9914731d6f1adf12975f82c0e3afa53d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example5.proto","hash":"db13f3d5cfebeb69d6d9517660d289818d41bb31","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/custom-options.proto","hash":"ecd5e754f3a2c6d580d0d7d3e56119f9dc0682b8","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example1.proto","hash":"8d8aa20e4cab0a69a2e4c07fc7a33a497c95c47d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/example4.proto","hash":"21d549f5e84e19c2c39fdf03aa672b84d53e1f3b","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/extend.json","hash":"dd5d92bbf306cab48adeaa4d64888c2e66a72287","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/groups.proto","hash":"c413fa3fd37a52b31318b7c4e5404a7e1665f2bb","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/import_a.proto","hash":"ee3a7b543ccfe5082a8adc39b6f74525c6394872","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/import_b.proto","hash":"b1cbb754999f51ff058df3c37abcf0c4fce455b8","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/imports-toplevel.proto","hash":"93fc0f2dbdd9f9809636a343322260e17755305e","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/import_a_single_quote.proto","hash":"69b107611ad808aadb3fec601a0cfcf16406662c","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/import_common.proto","hash":"6a764e37180ec50c88b26dfdfe3435e3650ac3d6","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/extend.proto","hash":"2b98cd6e081da9915e93504fead4ea95ce9509f0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/imports.proto","hash":"e957374d0e855ecffa98440ab77c4597a7979bbb","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/imports.json","hash":"3fdc955bf48f22a4653b6f26673194b8792464da","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/numberformats.proto","hash":"4a819cdc8973c69e2c75a6cb1783bb79f9858297","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/negid.proto","hash":"8d161e69e3b08aa79b833c9f66a56bec1f81c567","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/oneof.proto","hash":"eb2e449b93321cbaed26e37a26b31a72cc65b773","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/optional.proto","hash":"27d4d07ea21c03c08515e5256460eb133ac7d041","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/options.json","hash":"20a96b07794ab0be72382a8bdcc4fda2bbb03599","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/packed.proto","hash":"20e020ecff4de3442fbe5b2ed64179f7742faee2","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/options.proto","hash":"7db094aff5cd945ff76010e0efd3a1bd7ac18989","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/proto3.proto","hash":"177877a17458b276e2a44c2569643588e8ec9a71","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/imports-weak.proto","hash":"39d52e728d5973361ffe74df87f15aabce94458c","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/repeated.proto","hash":"19c8018c433f6e48d8687bbeb0b6cea8c3a648ea","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/inner.proto","hash":"eab89cc509ccc3b6d7a21515a6f54ea28ce0c0f1","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/protobufnet.proto","hash":"bb0a97efa5905cafe4f4ad376f9f449465f1c113","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/toplevel.proto","hash":"742cc806e59f594b8d8b06f5b8ddf257636c3db0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/string_single_quote.proto","hash":"43843340b49e569b6e16f1ef2f34c2343f4e1238","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/setarray.proto","hash":"6c26181f8f3a42f06349d96125cda96ddb4a5e22","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/suite.html","hash":"804f3ddacf15e2400499ff36206c41fa9a66085f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/services.js","hash":"605a7ec7b165f3994ce89fced85820e4e282aff2","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/x64.proto","hash":"ad0173c93ae99a5457cbaa5214c059d1b03ba95f","modified":1485532820000},{"_id":"themes/next/node_modules/readline-sync/lib/encrypt.js","hash":"39207cd74c98c4f8173d14160cbba69213858358","modified":1517972773000},{"_id":"themes/next/node_modules/readline-sync/lib/read.cs.js","hash":"850840b9dbe3fafd9c3d1a639088040ef9736ec4","modified":1517972773000},{"_id":"themes/next/node_modules/readline-sync/lib/read.sh","hash":"cf1ccabc7a74e7f644353e6c150f12186916d829","modified":1517972773000},{"_id":"themes/next/node_modules/readline-sync/lib/read.ps1","hash":"6fbac8bc5a6412570c9bf7a7cefa820864dc6447","modified":1517972773000},{"_id":"themes/next/node_modules/readline-sync/lib/readline-sync.js","hash":"dafa7b529bc539fece0054c604b65487dba7523a","modified":1517972773000},{"_id":"themes/next/node_modules/protobufjs/scripts/build.js","hash":"4f5f22c2c9b503a5c7540150e41f30fc89497ecb","modified":1526462361000},{"_id":"themes/next/node_modules/string_decoder/lib/string_decoder.js","hash":"440bd1828612d1e583e33a4ec304673a11c782af","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_duplex.js","hash":"51384e1f945a0391b0d10aefedae0d9351401c01","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_readable.js","hash":"aa75ac312226562ce96b6b067777f52697d41dec","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_transform.js","hash":"e453a114a78f8a73aa5eccefa010895deae1f7a1","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_writable.js","hash":"7d77f48864ce8495fb30ab2b7e82727d45114cd6","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bbe17aece81ead7c39ec8d65f0cf6f146284aa2c","modified":499162500000},{"_id":"themes/next/node_modules/superagent/docs/head.html","hash":"016e84b23e557fe2da4c2902d91de1d40f67520f","modified":1524169193000},{"_id":"themes/next/node_modules/superagent/docs/index.md","hash":"fa6472b7cf55d14c0294990a6fc43a4c6cfd4e2e","modified":1524169193000},{"_id":"themes/next/node_modules/superagent/docs/style.css","hash":"e87ae7712b431975fa92e07f0cbeb087685bc8b3","modified":1524169193000},{"_id":"themes/next/node_modules/superagent/docs/tail.html","hash":"b6144a6a5a2af3484f2af73583ef0c5042ab5389","modified":1524169193000},{"_id":"themes/next/node_modules/superagent/lib/agent-base.js","hash":"46c59cead0bf0f2ca00c54408ce6aee92c926452","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/lib/is-object.js","hash":"cbf989930fd62951bef75c209d6f0e05c8120df3","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/client.js","hash":"e941ba50356c7414d9ca65e51664106d199357ae","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/lib/request-base.js","hash":"17b1ac4e90f9606d0960b60b4d9d14b06b84c3bc","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/lib/utils.js","hash":"f6f79f2481ec1e42727be5f4da46b54ffee8df4a","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/lib/response-base.js","hash":"4de9c9014bcfea1f7642e6b7a5168368cf7becd2","modified":1525019149000},{"_id":"themes/next/node_modules/lodash/fp/T.js","hash":"f10191c08571d40fee301d26e97240125511bb31","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/_baseConvert.js","hash":"74ba4f62d0a348474acc189c83fceb6a760ce27c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/__.js","hash":"9c805f4d417e7a952726f3cd1d0bfa7c30cfa7b8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/_convertBrowser.js","hash":"b4cceca914f9af59a7c47c384127602dce2abf6a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/_falseOptions.js","hash":"ad9c0db1f5df98f88d63bd70d729417a7eab2adf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/_util.js","hash":"5fbff66b69ff1dbdde5f1f64e9965ba5f63ecc94","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/add.js","hash":"9a7af31a7389d2b2b2ada006440c4cc5c2e42e14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/_mapping.js","hash":"0fa88f5921a98c85fb6d3d2310e8869d5daf9e1a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/after.js","hash":"b9b375ce8fc1a7d08495feac490844967e5c6ac0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/F.js","hash":"18f568c6af0e139bc63d9943f5e798fd09bf01b6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/always.js","hash":"d3c13a79ddd4488702c96b285bbfe2556ee67e17","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/allPass.js","hash":"d6accb07bf9f23b3d0f72ce21b787618d575da04","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/anyPass.js","hash":"4a3f89614864715dcc36c7ee5dbb9850f6ae2f95","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/array.js","hash":"6c3a1a438a1f341a9bfbf059da2d1efd4a582178","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/all.js","hash":"ca7a311804ca0107de2a6f00602710f36160c765","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assign.js","hash":"52e569f6c7d83714506850d8174be2c3a2992852","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/apply.js","hash":"eb2c8c5f1efdd93f4d55605df4874bea9f831b54","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/any.js","hash":"64f468269587c745e361d31e0d8b26cb8f67fb06","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/ary.js","hash":"b811ed8b5b34ff86e65589b38cf22f1d7699ed4d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignAll.js","hash":"57a1a620f001ae55ba98b560fa7a858cebc13023","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignAllWith.js","hash":"404f26b37a62ce5a1e9b6fb33672e69913d4efed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignInAll.js","hash":"3d99977ee0df2bc32edca5ceae451a08cb43bf76","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignIn.js","hash":"71da9458e2fdabef9d716d9b48060a12c0185afe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignWith.js","hash":"d4a0c3092be5c92abca026002a322407a1e12f2d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignInWith.js","hash":"b3b0adbd4b47e963b9f3ec93335b375deca2a320","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assoc.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/at.js","hash":"615c43358bc89d4eaed242300b9fd77631f72443","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assocPath.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/attempt.js","hash":"eb059364d0e518867b8fe2d4d9773ca481f80b15","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/bind.js","hash":"5620199ffaf7354deb17332bd96d023ef93a7563","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/before.js","hash":"c9fbf0e49c14385711d6335cb1dc0d6e09f3aea4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/assignInAllWith.js","hash":"47ae8b9efcba88af49e9a58fa2a5b7c35813cb7f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/bindAll.js","hash":"2e3944394c315756627aab74b8ce3cebab98662a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/bindKey.js","hash":"8884ec3af184de8a5f20829f6eb5fb6ea459582b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/capitalize.js","hash":"101f5c2148a579105036a5cdd25b4193812f64d3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/camelCase.js","hash":"8eb598ce4ff5d309c2ab8fb299f41df23c4cd308","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/ceil.js","hash":"0539c156c827c85dd682ece5986b9f7bac19a097","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/chain.js","hash":"c85611a5e7da7d0aaf29a45bd34130b56315199c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/clone.js","hash":"6cd53703b2949cbee86ce6d708942e248afb8b4d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/chunk.js","hash":"63359d1585edc86fb70c74388c36e0a96e16b96c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/cloneDeep.js","hash":"179860c9bdc495da2f5d8281fec35077b2f2b216","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/cloneDeepWith.js","hash":"365d2b00fa2e722ce8c60b0605bf3af06c6ff454","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/cloneWith.js","hash":"a303da7355a2bcf3314b47558b57c8e3b235094f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/clamp.js","hash":"d10d4fb46ea8518851b6578ef67dde23b2a9b013","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/collection.js","hash":"75a23149e229dc1435bbddc870542ac1ff298f91","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/castArray.js","hash":"ab5ea04ba48ee2920164fadb8b78d8a03f1cee6d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/complement.js","hash":"db8673391fb52d0d4682d80065e5f82809a3292a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/commit.js","hash":"2b2f58504601fed318dd5f6ef943a873018195cd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/cond.js","hash":"c5bcad894a249463aeabed85ac3d3e7474455533","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/conforms.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/conformsTo.js","hash":"fa5e2fa22ac3442d8ad5b09e3a6c0959316431ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/constant.js","hash":"109c49b151baa999c023e7934b4223e0fe3d84c5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/compose.js","hash":"ea122818ed87e1559af41edff0f2d2fa54319b9a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/create.js","hash":"7fdb4d9dfc8e2b4876ec6b47b9b32fa37eb1aa2c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/concat.js","hash":"64240c44714fa5369fc4092f00ef58caced12344","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/compact.js","hash":"b6603e874a29627153368292851fe987f5462bcf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/curryRightN.js","hash":"919ca15f73c98eb40bfddd2213edff6a8992e2e4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/countBy.js","hash":"52e5e9e4b6064c30131e7f678551f23f8120cf0d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/convert.js","hash":"5e125cf746680131339a8ab7f41d917bdccdf356","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/contains.js","hash":"cf59973c08cea72d4b25f223aa3c30e99fde8e55","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/date.js","hash":"bbf85ffcdfc83df6d5c24c84b03ca937f9796257","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/curry.js","hash":"ded1e6452bc77478e51a4b9a7f8f2eb9c07d1b03","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/deburr.js","hash":"b4aba68c497e84459d6d9739d71b0f1a3bb7182e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/debounce.js","hash":"c702651f3d6844c12c8e7fb2d2d07ee898f3c78e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defaults.js","hash":"0afcaa5650946e068d13f298bdcf3e185f5a1f07","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/curryRight.js","hash":"333b1a096341c2552aae7af172dfc6b1aa2d68d2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defaultsAll.js","hash":"2006e77adc3f6e20fc16af80af1a26d166d14c07","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defaultsDeepAll.js","hash":"ee6d0af3f9942f2314c2b6fc2f283debd885fe36","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defaultsDeep.js","hash":"6eea71a30ff427217403c02e6721e6bdaa0de604","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defer.js","hash":"49b70a2e28eca9a02a89437582cf42c165dd2d05","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/differenceBy.js","hash":"55c72db5c42636b2f5824b45979834483161d817","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/defaultTo.js","hash":"39bad3a9a0314e20e1fcc52f2c7c1711a796754d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/curryN.js","hash":"13f2d44be73b0df20161c72c0b77b69f8bfdba39","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/differenceWith.js","hash":"290648f706217284bb229fc0957d21578b89b0e2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dissoc.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/divide.js","hash":"86636acadd06d91f809acd2c1d31cf780caa8649","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dropLast.js","hash":"297bd9ff4c5ed9fd6323d3ce10286936be549bfd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/delay.js","hash":"1f6a34ed80e76bcfa748c686fbc67488d0164d78","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/difference.js","hash":"13ba75b75ad25ad44bcfcc552dd0fe00114c13da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dropLastWhile.js","hash":"3901051acf9fea300dfe2961fcc31890adabe4da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dropRightWhile.js","hash":"779915c003cbb1a9643965f284858729bc032b6a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/drop.js","hash":"2cf18a3172602551b9950bf4b21ef23b07f5c8e4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dropRight.js","hash":"e8beb9bca520499fc14e793b6e8f7a428d197bb9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dissocPath.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/dropWhile.js","hash":"3d82fced32a443d92d80485508cd79c34b0a0ac2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/equals.js","hash":"735240597ea9393397bbd638934ebfaea4f6b2c8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/endsWith.js","hash":"1e2c542c82f7aefc5fad986136445a7a4425e145","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/eq.js","hash":"e22365568b08047e550d002e351cef842cddabbd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/extendAll.js","hash":"33d62f7192821133af2eb6ed064b6dcd173a13aa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/extendAllWith.js","hash":"1d2dab39cc17f3beec2cbdf117837509ca72309d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/escapeRegExp.js","hash":"2a88b89297d34797244d963f2323e59a7c3d4d31","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/every.js","hash":"0499e846512778b49de2da8574e81f21dbd3ca40","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/filter.js","hash":"7f77256838b2435ebf7539e186cce009aa54c1a5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/find.js","hash":"86e525b8931055cfd1dbed74e13e649b39e8fa6e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findKey.js","hash":"7a3a8649e4119245549d42a71a20752a7a3258bc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findLast.js","hash":"a19b3954a423f675b6e556a4838d45a28eca25b1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findFrom.js","hash":"7a92981afdd815aa0d39348b752306abd7697559","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findIndex.js","hash":"6dae88bc0ea9a1c2ceb6bed27e6fcc1a993795cd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findLastFrom.js","hash":"72d9c3ee81778f2f3be72594451a11c7ece2e35b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findLastIndexFrom.js","hash":"077ebe8808fe2fe62d216b354af30236aa471903","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findLastIndex.js","hash":"25b3d6da9b75a73e37d908e0bd1c2c071eb81def","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findLastKey.js","hash":"d71353c58b59d98cc7d909a543f8f49ace63bf10","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/escape.js","hash":"68a5b97faa5723827ef59f065101bbbe2556e6bd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flatMap.js","hash":"1b0399b113f8f036d69c78626ffb7fdbd531a452","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flatMapDepth.js","hash":"04d4e92f43b87d2f5504ebfd7d095c0421322e6e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flatMapDeep.js","hash":"68eb25628604462da50f41131335e5bdd79dd931","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flatten.js","hash":"93940d34c59306c75e8680b2f54a9535f1eb56fe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flattenDeep.js","hash":"3d4a37408b913e82d947aa842b984fca60b9dd0d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flip.js","hash":"e13e97806d2757e3661b52657b0a81077bddddcf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/floor.js","hash":"a7a4526f7ffcc6fd12b5805cc687f5e31fb41152","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flattenDepth.js","hash":"c606dc88f1ff4ae80ccb61d0e293d46f53e687ba","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/fill.js","hash":"783c4109619e522701ef2956d070ec6f94ebb258","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forEachRight.js","hash":"fd98cd06ffb50506eacfab8999a3cc06d2c646b6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/findIndexFrom.js","hash":"61e3f312582261bc44d36fac85ddbe6f11f26a30","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flow.js","hash":"b1fa8a6738958fb2b0f61f55670e80e72b37f3f6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/flowRight.js","hash":"ba997b9952e847801199c2767ee07ffd64c4810a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forInRight.js","hash":"3f48c8bb263b1eb71cbaf4ad9d2606b3656f8a83","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/fromPairs.js","hash":"1e7734eac86bf368e7d1bf63ca1657952b20f13f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forEach.js","hash":"fe364b04d37562751d1e68482ddf6a7808156916","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forOwnRight.js","hash":"5e5befea43de625a990a571cabcf5545f7ce1ad2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forOwn.js","hash":"60ef3e46e036d39572320f2c6f7601881ca41955","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/functionsIn.js","hash":"8b79a911c832b5683868fa56bc7c6cdaeb4d5e88","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/get.js","hash":"27edd6c7c585dcd0222c1cea97765e5eb1c52925","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/functions.js","hash":"82f6797b95c815f8082611ca84cffad654ed7ee0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/getOr.js","hash":"423682307e027ac900a0cc83948ad83b19c2fca1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/groupBy.js","hash":"28032f75b908231d97cfacc99fc04ff0a3f22e65","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/gt.js","hash":"36dfa14d07d98b751b8d37ba1ee1e64c64971161","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/function.js","hash":"c7d47f84639e315320f598f32c3a8f8dc8b0a724","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/has.js","hash":"20fd58ff42e0550eb9f94e183225458d52436836","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/gte.js","hash":"d6e1cf7bd2d03d198791afb3eedae8323b06c262","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/hasIn.js","hash":"c9e75e41b1638417c4d1f9101c43469032522afd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/identical.js","hash":"40efa57b258af781819e8bd050c32583837184b5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/identity.js","hash":"59c993b05e7ec2f4653e4bc55b3025dcd5ca2f13","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/forIn.js","hash":"83e5d965ee8ff794867c6c8a2e01ca56fe76a15b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/head.js","hash":"886dc89b060616ea92340f7d68bc946f058e8c2c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/includes.js","hash":"c5b5262c60578989e7569a4ec24c14c22af9d4be","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/init.js","hash":"22ffae77010a1ac713f0326fa468621c3ab83a2c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/includesFrom.js","hash":"13cb72c249c72145915615e75617f529d36ad4d6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/inRange.js","hash":"57145747d9c73137b76796e00ed79263c9049c14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/indexBy.js","hash":"c4137629ebf66269744e84038e8a5c02084d931c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/initial.js","hash":"345cc5bbcd2fcb19a0d5e3ba7c44dc8d4bb85be9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/indexOf.js","hash":"f296c1ad76022ce01e1f733136933820a2744cfa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/indexOfFrom.js","hash":"a9af522fbc2eb5a6727c604d91e8ffc21198f5d4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invert.js","hash":"fd7502e8c46743d84540d1f6e83e3e70e4190812","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invertBy.js","hash":"f23b5d7017a48c8757e9e02f8e9198de8af6f181","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invertObj.js","hash":"f2acc5a6d3985a3d717e180810fc8da4b70eda6c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invoke.js","hash":"af082b901fb05e5ca0b8c366f2d91c1a80a02fd1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/intersectionBy.js","hash":"c5f67ae844b3c57014cf4ca6878fd805e7a0c7d8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invokeArgs.js","hash":"fae0d54f2a10c1da45de1894b3a854b2f42f88a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/intersection.js","hash":"1391dbb03a7ea4de5e8c8a937667c5b2f58d3b28","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invokeArgsMap.js","hash":"9cb53649858eb1e33827cc8513c16d9e7363d9da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/intersectionWith.js","hash":"f264dacabb5c65b41cdb9301fd281252ceefcd45","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isArrayBuffer.js","hash":"6d6c14aae84e1662f0fbac87ff49d1dc0c568444","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/invokeMap.js","hash":"e53c69c9c4a6be115fea0a3574c4d1255bfe5428","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isArrayLikeObject.js","hash":"4d053b5fbd0477fe770249346cbc0bcfb37a6219","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isBoolean.js","hash":"b91a773b54bd4822f9c23bb88b139b67f4f1eafb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isBuffer.js","hash":"192efd2ec17cbeeadc1e68b893e504b8b14afcaa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isDate.js","hash":"ccd1b64eeefbb7d146ab6294c52aeec2ad1a93a5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isArguments.js","hash":"675c9c3ee2f01b2ecbbcaa9637bbccd65f89d943","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isArrayLike.js","hash":"f6ef38c98c8344533e90a2212650cf936ce808c1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isArray.js","hash":"45376d39c70fb04bc0cea0bdda3b1998d0c76b3a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isEmpty.js","hash":"517aca0c6b7b51087db094f4ff1ac06bc50c765c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isElement.js","hash":"41b8187c0a4dfb59cdc5c939f1b3a68d674e7048","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isError.js","hash":"03dabdbd0e30796a8bdc2a341394d329a461a9d2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isFunction.js","hash":"a5644120eabb397e67c38922ffb9b87d22aab5b7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isFinite.js","hash":"79c3ad8c8702d1aab54ae80ea400d5f73ae49dc1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isEqualWith.js","hash":"685a3ecf2190a5656547f3a62fd8fc0c4fefcad4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isEqual.js","hash":"e143e5a19f1ceadc7a6d93d5bc95a4e62b6be530","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isLength.js","hash":"6aabade08bfdd6e8bb07e28225629c419b5e8c97","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isInteger.js","hash":"b30a8a902259cad6f2300f7b06d3f2bc3975f34e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isMap.js","hash":"c2421f5389375dd9697de826b777b3d99c8e833b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isNaN.js","hash":"c607c72d2d7f67fd2da46ca370acf5e12a024e44","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isMatchWith.js","hash":"0afec1beb71c2424691fd4b4dcb9100820374c26","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isNil.js","hash":"00960af435b0e8ad04bb1fea65d6a30ae8a61d06","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isNative.js","hash":"4dc770dd04ad9f97aad0b764d876375aad3c8a9e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isNull.js","hash":"dc555ce657002d169ecd3f2af155b6ddd64fc6f7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isObject.js","hash":"ffe7fe0c07a623545dedbd0c45ec219e3745cc99","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isNumber.js","hash":"6caecaae0ff0b438dbe62b2a814b14db80c6afd1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isMatch.js","hash":"ea5bb01a981706a79b547149e5aadb39369967ea","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isPlainObject.js","hash":"14b52f86eae7bcbe9d5f0400377d9315a588bfef","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isSet.js","hash":"7c2c1be0d45c657157fe1ba88986a6b105c0318f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isSafeInteger.js","hash":"e570e129d68bd49f8ba775f6b85ed596c4a96fbd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isRegExp.js","hash":"fc73a7faaf1e7ed7821d0600676678cd495326f0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isSymbol.js","hash":"d374ee1761cd7c88e18c0d89797249ad5848ddc1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isString.js","hash":"512ad2c4610306d11bb3bb3491f53abd029e5ea2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isWeakMap.js","hash":"2d9fb05f212d14e0ace898c6bab8563582d707cb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isObjectLike.js","hash":"49d650f710d56de004f9adb20ad8cf1b61f26554","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/iteratee.js","hash":"5a57ada3203e3a1b57b61923cda5737bc5bdf7ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isWeakSet.js","hash":"00837472f9eff86d2ffecbc9b54ed3605b3c72da","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/join.js","hash":"3ef2d8c47d359b75da09f77c3fe2266508d4f021","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isTypedArray.js","hash":"370900f84ff88e22af1153a209583c2bf6fc9415","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/isUndefined.js","hash":"0022a9050a33a2d65905711d005042506bc9abad","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/keys.js","hash":"5e7f14bc64715f1731977c278b871574eb7796dd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/keysIn.js","hash":"8e6ccf89f46ff56b75f2b23f820112e0982845ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lang.js","hash":"62dc2db0a784f758cb9347da261f8089d1df95b7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/last.js","hash":"482343e9c2122718717131d20ff454537bc3452f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lastIndexOf.js","hash":"34238beb4a520fcdcd9c46854d6dc7bfbcc1b5f9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lowerCase.js","hash":"10a1cbec9a77d960a0c2b470450877fe4596bd02","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lastIndexOfFrom.js","hash":"2206dc50977fb1f15fb7ddbce38cd8adcefdc0fa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/juxt.js","hash":"19b5b68440238c0945975ba74e5a43d633a4cb25","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/kebabCase.js","hash":"8c4c6c334759ea0ecf4b1529287aae9fb187e47d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/keyBy.js","hash":"623811ac634d2ea4518def1661ebcf95b0201530","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mapValues.js","hash":"15803c364129828e85167dca814187bd2ac879c1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mapKeys.js","hash":"ecdd3cd7edca30157bbb0bc2a3cd91058dc75199","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lowerFirst.js","hash":"e496119d716f19967b0070c7ec9c03d28b919122","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/matches.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/matchesProperty.js","hash":"73c7321e05c3a79d869afe876a64ae009d8d3da0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/math.js","hash":"dd031d6043c326be2e5c3a8b3a4bd728bc74650f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/map.js","hash":"b353305d3741738e30ccc46b96421df43380d99a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/meanBy.js","hash":"062613f280d0bed68bb11a9999721c0c90730c6a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lte.js","hash":"4926168ae6c4fe1a9493b20ddceb81f5ffef82a9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/lt.js","hash":"ebbdda9e5136aca682159edb9a951257370bc6f4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/memoize.js","hash":"d6bd34e0088a0f017e8c36785c6cb79450b2e0f3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/maxBy.js","hash":"9a5c1f5cbbb6375b8f314d5c3508854a76541613","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/max.js","hash":"72e93ed6cc51a6bb7ba5131cffbc4ed64b0d5148","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mean.js","hash":"73e71b6ebd607cc99741a6bd8a504f4b2d753cb3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/merge.js","hash":"087b5cb62cf464d2154b378d4a79fceb5987966f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mergeAll.js","hash":"e9d2d85cbcc2a728e6baf932d05f053901f0a7e7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mergeAllWith.js","hash":"7ed92253b45294795a4bf5e6fe8d5f716ad27b99","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mergeWith.js","hash":"061bbc4f62c653eb99021e78accc7ae915c3d8a0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/method.js","hash":"9c12a91f85dc26106523d5662166b6ee0056dd14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/min.js","hash":"e0a8670ec5ee7da49ea872f9eff2d5ec5bb5c1e6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/methodOf.js","hash":"d7ca6c11064364211c6b7f7fa8465377f2a07342","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/mixin.js","hash":"bff01db6635beb3588b48b53aa0b83d92430f62d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/minBy.js","hash":"7c81c5d5a852cb0ece8e3026820c1000d6ad10f5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/multiply.js","hash":"373b10cb68541026463c91d41901e052f3587044","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/negate.js","hash":"1503b32cfd9bc78f575f865ac3984bbb3dec2695","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/next.js","hash":"ff0900b4e5fdd889ec980c50e5e52d05d469b9f1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/nAry.js","hash":"bc98ebd544e4def682ac61ff204c16aba3b5a227","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/noop.js","hash":"dd608cb4eb01d202042edb374958ea37494d0ffc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/now.js","hash":"e455b0b859454a7852eeef13a2a7e2a26ba00502","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/nth.js","hash":"3cea03c8cc79b44fe085d53b73c2160ccd302029","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/nthArg.js","hash":"14cf05b970cf3ce3f5878e4396db31f286dc1653","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/number.js","hash":"56db9afc452bfa9338b206bf092497b8652f61f0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/omitAll.js","hash":"5c3a9227c6f9ddc785688becab205f8e912a9668","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/object.js","hash":"1f4e289be4a66881114caa5198b881b1f16fd4de","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/omit.js","hash":"b9a90a8700d55718cb1a3d68b15223d0b9d7de61","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/once.js","hash":"b6d33d5a9c4379ef7e1c46b09f9c865ecb8603bf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/omitBy.js","hash":"1ae512e4ff2af4984900b15292137fcc10161589","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/orderBy.js","hash":"7a17f923611248c0ea7086507bf568a043b98129","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/over.js","hash":"51db6346f35cb56c4ceff448ce83bb4b0529dd47","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/overArgs.js","hash":"adcf40dad62a1c856764978731537f30889b1c74","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/overEvery.js","hash":"3442bc9336ab31d30983323ab9e88f628085a1b1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/overSome.js","hash":"7de036f2f58dc0faecaf54be9adea63226aad560","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pad.js","hash":"383ad74a3c1d0de2b6ca0304eb1d1faa4bc5bd0a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/padCharsEnd.js","hash":"07914fc0fb8ecc33d9611986519b7c6607fe455a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/padStart.js","hash":"a312c6f78be12857bd315385eebcc8eabc67c1e2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/padCharsStart.js","hash":"5c7255195a70d48bba88ed00ac177d59c02e88e6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/parseInt.js","hash":"9f69cbcb1ac43f1e3e7d6cc58efd7685fe4a00aa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/padChars.js","hash":"4c63a99952765c19e7858c17f18da7c6612c35a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/partialRight.js","hash":"bcf63208bf8072ae6e7ff226467ec45fe20b7ace","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/padEnd.js","hash":"4aebe4522188368f563e7e72b2549083b542331b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/partition.js","hash":"205607a8169b9faeb2b51b0974805fb3cef84b89","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/partial.js","hash":"f2acb8a2cc54f7e90ae1cbca437be0f9c8bc4d68","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pathOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pathEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/path.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pickAll.js","hash":"a24ed77399bda55b6c76f52a7b2d0318e15e9d53","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pick.js","hash":"7818ee7a56a4493a25f0262b42226a99b5ea4e74","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/paths.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pipe.js","hash":"9a9cf735bad407cdf098744f528e907de4b8f8bd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pickBy.js","hash":"7e90e85df68c3e5ed8e18b36ef2f1033f9c192eb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pluck.js","hash":"56c45930b2236d7778657a85d48fb7c709e3010d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/prop.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/placeholder.js","hash":"d211b85c131bc2d7c0230fc611c2f88d1aa1ae62","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/propEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/plant.js","hash":"909ca1575840a93993b0cac28834173e1474eb9f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/propertyOf.js","hash":"a0309506e91e32300edd07989a6765ba76469785","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pull.js","hash":"e212c433d15f9e4aae0c7b7472df7478dce59826","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/propOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pullAllBy.js","hash":"82df6feed00d7586139b8d19babff6a119d12abc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/property.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pullAll.js","hash":"9d43ec3e85737776d1cba4dd43dfe33dcb691213","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/props.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pullAllWith.js","hash":"a4c03d7ae4b54c96e5050bbc7421bce119aed17e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/random.js","hash":"c9cacb8c48422049484d1b43f3e10da43f54fcf0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/pullAt.js","hash":"e64a22662e4110f3a7598bcbb20c3444ace05733","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/rangeStep.js","hash":"8bb13a69dce53d8cb160b155579da0e6167551f0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/range.js","hash":"c30a51ad9b00e95df9e8d84359393789adff6f70","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/rangeRight.js","hash":"87d5bc191b63a837147e1a06ff573017932f9956","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/rearg.js","hash":"d5b08395ea2c22d24207c8e80e19a62b8b68d49b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/rangeStepRight.js","hash":"2706912addb4a0f3cde29fdbc07e8e6efbca5022","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/reduce.js","hash":"7607f41b09579aa65dca0224fae135f2a7bd90fe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/reduceRight.js","hash":"db8224e00025bde9179b073a6aa8aaef52cbaf6e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/replace.js","hash":"f4cf1769a167cbafbca362598669cee3b2048b03","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/reject.js","hash":"f24c316dcf99cac19664e5f3cba90bcb7928ef1c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/remove.js","hash":"f6c76702ae01ec215d972d87850624d302a45b9f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/repeat.js","hash":"7af31ea1d388664c134aeff68f0d5cb72297004a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/rest.js","hash":"a860492108f67bef2af79852208f2dfd4f541d7f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/restFrom.js","hash":"7658cbf9d7d17aa68e24ae89e087b1f1f82858ac","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/result.js","hash":"e805c5972b63deb60f49d1513e570ed116a864b5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/reverse.js","hash":"723596c407da9faeb8a6029ef74e42e97bdc6be9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sample.js","hash":"2d93d3727f92362eeadcff288c3a8a733d023740","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/round.js","hash":"39a12f5a5a3ec3058dec8aa5118425b16d070281","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sampleSize.js","hash":"fcfe74bb18b06d6da53495935d23a7600f9b24f7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/set.js","hash":"35767c3a9b3e46a963c7fcec39391fa87136861a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/seq.js","hash":"4fd21585867c1b120e02b78852d98320ad8a38b2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/size.js","hash":"3fb55f18bf4ff0daea2c053a54a53c2674499e45","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/shuffle.js","hash":"2d110e1a05b0780b5ad4159ea18a807f7ea1e505","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/setWith.js","hash":"c5fab5be851b87976674b1459d61b445d0d5be14","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/slice.js","hash":"ad400dcd46e81370daf0ad7c745ea1ab58df49a1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/snakeCase.js","hash":"d233254a26e81ab2a81fac31c48215d4b0b44adc","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedIndex.js","hash":"04be86485281acfc53118491293043d70e3a7f2e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortBy.js","hash":"bbfdf129dc3ce45a017989b1b825542383812b73","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/some.js","hash":"0ab071ab57a97cb20b860f9125f2d3f1f131f833","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedIndexOf.js","hash":"70b13a8537667e2fcfeba4993992875bdf8ff864","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedIndexBy.js","hash":"47138204798bfa0b43928340b12bbdcff317f60d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedLastIndexBy.js","hash":"e53794520cd5b3ca6df2ffb977e0e6b7a5f9502c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedLastIndex.js","hash":"d6598c35bd7fb8887fd6fdbdcb8b18befa6632ad","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedUniqBy.js","hash":"dc651f780172d66beef630e5c50c006d9fba50d3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedLastIndexOf.js","hash":"94fc33bdee1fdebb80f0b00d195eb4a13bb926f0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sortedUniq.js","hash":"8e361b43dd485f7aa5971e947939324cda143dd3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/split.js","hash":"e785df2f7e7764f1bf518b872bc302679b505589","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/spread.js","hash":"347036d4ea05dea39b09f20275d06e8594b55ccf","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/spreadFrom.js","hash":"30b843077c519cbe18ec47e2ba9685f3a37e19e2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/startsWith.js","hash":"73df7824ddaf5d8dbcbfb2894234f8e5f4214497","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/startCase.js","hash":"aee3f36ca72d7fa30de64c0541e80b8ce2d729bd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/stubFalse.js","hash":"74f54c09c21a95c6e2168df204016afb1da85c08","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/stubArray.js","hash":"dd9b5ab21a9e90c5c2d33af270b15bb3a0d5a160","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/string.js","hash":"3a30865f86edf4dc3baff7567a894bc6f280a654","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/stubObject.js","hash":"3c5521da1935e4b266a480fb8c2240fc2e572ea9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/stubString.js","hash":"493b8cce32dd2d2f0915c335941afd8a2030c59f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/subtract.js","hash":"f76a659ba3d7724c8e4ff6049dfb6cb17627ae41","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/stubTrue.js","hash":"7d69609e3844f8e596fbdd77e68be6352240ef7d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sum.js","hash":"430189ab2c6a23195cb8ea5111921794b9175ebb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/sumBy.js","hash":"73e4807968a99437d8168517ac9fd13ceeac5886","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/symmetricDifference.js","hash":"c1db644f2796082ce8c1445f0788558fbd4a6ce4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/symmetricDifferenceBy.js","hash":"8cee02add02dca3ecabeeb07632dc8a2a1905e23","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/takeLast.js","hash":"ac465095bcff9ff29ae8337a6d86a7658bb67196","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/take.js","hash":"f9dd7f687a04982ac7aad57c525d98b1c3ffd1fe","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/takeRight.js","hash":"eed0e281c0ecf99c20f5668ce9e0dd154e45ca71","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/takeRightWhile.js","hash":"b090924faefdfd4a31e25c54931f3b46f61c8203","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/takeLastWhile.js","hash":"88248a7d663078cb48e2ecfc912a33ac3b097afa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/symmetricDifferenceWith.js","hash":"129d57b15724b6e3dbe5a83af781cf7e9a74bffa","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/tail.js","hash":"4515c52305fd72e45da2ac90042e05c2215178a2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/takeWhile.js","hash":"072405b57aebe0b9a274eb3709ecee82226092b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/tap.js","hash":"26ebee1454a84078cc66c9acb6c4844a5dbb6223","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/template.js","hash":"ee7becfdb63a3d9ff3dda057f1a9caef3a814554","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/templateSettings.js","hash":"b9a7dd2e08852490ea86ed35b1e7469482c2bb23","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/thru.js","hash":"e93cff48a14c89ca44d3cf7b14dd7ec275dd53ff","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/throttle.js","hash":"93c605d12d488e2ea9c6e6c63dbf42a538c66146","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toArray.js","hash":"f47d0cfbc5a869b78087164b18237c5448f21851","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toInteger.js","hash":"1a1797465c07599f7abc0f8430e46cff38d50986","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toIterator.js","hash":"961722cad23f72206b6f7d83e054c271b6a2add4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/times.js","hash":"216300e9d1f02445f1af5f8c8427f949133b75a1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toLength.js","hash":"7d567f44a37d6a32bbd5a3856d011d71a9665f5e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toPairs.js","hash":"c28dd8a85dfaf032e5db9c1ae75da809d8527223","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toNumber.js","hash":"3f6ed987b363575f5f35f6189b144ba3d907eb43","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toPairsIn.js","hash":"407a3784056e15bba952ddd7d835aff27eecc673","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toPath.js","hash":"d5cb075719634a9c336bea31d017ac20389c044d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toPlainObject.js","hash":"fa912ce1e006d37f4483a53391271acb71692997","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toFinite.js","hash":"3a63c6c9616bda4574b31fe27ef369c01cafd6c8","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toSafeInteger.js","hash":"fa9edb660be230da19a83e120f48052d9ee5400b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toString.js","hash":"70b8676332f4ca060ba84f05a9bf101749fbf3f3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/transform.js","hash":"932c1b9f13d1e4892db0ea9eefd4902f843f74b4","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trimChars.js","hash":"28eb05ea233dc6596ed3b17a3684c7225efa82be","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trim.js","hash":"f57135b04ed9e9db794f75b6b47b328440f06922","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trimCharsEnd.js","hash":"c2d9c19c69c5e695022119baabadaa64ef02414c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toLower.js","hash":"e0fb8417621f54e54d3df261d1e873438502ed70","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trimStart.js","hash":"50c328eddeec91b92f4eb516edcc78faaae87333","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toJSON.js","hash":"7ac9ef07def4a64b062a05e942d3d110e3492ec7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/truncate.js","hash":"af7ab1a8bcac66a7504359d2b2625b0b4bb6445c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trimEnd.js","hash":"a9f669bd68b6fb04ca71e18d5f2c88805ec7d61a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/trimCharsStart.js","hash":"8415cb22cbb73b5fd101e360400bf6182f4d488e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/toUpper.js","hash":"4312523e48af3aadf918218214ab329523305334","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unary.js","hash":"22e12bb090f8f305fb360a2372d87fcd9467399d","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unionBy.js","hash":"139742a9be22d7eb2195e7e7182d87a912936e2f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/uniq.js","hash":"54b58010d1988f7a6ec28dc4a2df2205e83029ae","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/uniqWith.js","hash":"af2818a584a4317e5148e52222afffa0c5fee59b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unionWith.js","hash":"c48bcdd3435f2cf4a650d30608cc929712943578","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/uniqBy.js","hash":"4111e9001db74d691176ba3e02af5527a4a77ed6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unapply.js","hash":"936c484aca78852157be00e7b5cb71da6f747bfd","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/union.js","hash":"8e1193fe25429e87a9cd2e4a29dbd279c5decd5f","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unescape.js","hash":"e91a70341966dbafb94a8d6fc723f23f3c3a31a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unzipWith.js","hash":"afc880fef61b32bc409f3a9a7359d755cdddf83b","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/uniqueId.js","hash":"414c720c8d11aeeca6b05cccb6deb16a0f27c943","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unnest.js","hash":"3d20beb0655413d13c2c55fdc3ac06013125edc6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/updateWith.js","hash":"9dd189e80bb45da43b4076a1643a45c69f8cf1a7","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unset.js","hash":"401e919462b8e66630dfc74e18796fdfa62ba6a3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/update.js","hash":"a7d197f6473f8a7a38c00acc709f53481c545474","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/useWith.js","hash":"992d0f455bb3b824323580e322a9c79bd378d0c6","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/unzip.js","hash":"29cd397f4baa016f6e6d1c8fc4326219106896e9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/upperCase.js","hash":"612a73d5f39d6d5a6f3c3b80ec89a6377e2e3c4a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/valueOf.js","hash":"a2ea35c715e7b3b68051a38cbf6802b29370d975","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/values.js","hash":"97fd629e19d9740fbfc87a26f86a259bbe7ca7f9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/value.js","hash":"e2d89ba1db613274b31d1d0fb1acb503644ad2e2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/valuesIn.js","hash":"b7b2dd2b81111cce5adfeeb45254a5372e6c28f5","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/where.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/whereEq.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/without.js","hash":"2599adcc37dbd771a16ea4cc2a0c1d4513f38a9a","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrap.js","hash":"3631e867dfc78a67db38ffff790ee94022015a52","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/upperFirst.js","hash":"084545106fd93e9acff00c4401918ed9054d55e3","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/util.js","hash":"0724cd943bdab0b6bac86e7ac14e815e5aa1d9ed","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrapperChain.js","hash":"1e4f82ce87696ad134450678d2fba27bb46cd123","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrapperValue.js","hash":"51e6e912753e7d425a490e90c8205fe83dc435f1","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrapperLodash.js","hash":"ee531effe7e5e4472083f98b35497f858be33bb0","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrapperReverse.js","hash":"0e41311c145f305b07da8c06db6e8e7ebe5433ec","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/words.js","hash":"88c9e852c37f155c0dc429a401d44df09d9ca51c","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/xor.js","hash":"bb7e8f6d42f3c73d3358ad081b4e00796d1cc771","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zip.js","hash":"3017d4235f2ff6d2658a88eb540246821e9dcf04","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/wrapperAt.js","hash":"7d374b517c61846dba2ec2898d75181025fde1be","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zipAll.js","hash":"e5e2a68f3c74299cb44da02653f7773d7f6ae554","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zipObject.js","hash":"8449412e15d18c596810ebfa34c5a0766f22b7e9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zipObjectDeep.js","hash":"e27ad4a21f3e47d1a59b796566d3a4c5ffbe5ebb","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/xorBy.js","hash":"476caccbc9387505d0e110f814102335c77bb511","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zipWith.js","hash":"641ede21898d379ba0b8b9038913fa0400a271b9","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/xorWith.js","hash":"8d0c86364c19f9c2b17feac93b112781ff81b3c2","modified":499162500000},{"_id":"themes/next/node_modules/lodash/fp/zipObj.js","hash":"353dfff83f25574ff58209ae8656869ab5516e81","modified":499162500000},{"_id":"themes/next/node_modules/uuid/bin/uuid","hash":"c5b3ec4d8a8f620420aa52a8f3a7cfdff1197667","modified":1537585159446},{"_id":"themes/next/node_modules/uuid/lib/rng-browser.js","hash":"7886d07e07d82af17c52b5b5debddac5f38484e7","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/md5-browser.js","hash":"6e2bef8a5892014d27b026e93c00abcba28a173f","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/md5.js","hash":"ec146c8bbb3628e50110ce5fb2e8c5c44eeb175c","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/bytesToUuid.js","hash":"21f3fe1411c266f0c539291ec70f90fdc50a0151","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/sha1.js","hash":"4f039ea8cae56dc7ed50a2e4595cbe22d7259438","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/rng.js","hash":"be0888747039b095cfc50d0fb6c82105d78ab40e","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/sha1-browser.js","hash":"b5419bcb23bc32a79ac898b5e6b11b27d486ccb0","modified":499162500000},{"_id":"themes/next/node_modules/uuid/lib/v35.js","hash":"db09248b7cef34de5673a2ea24f8780e9bda27ca","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/buffer-util.js","hash":"f907e38377d41a42e43a528c9f6948f2aaf34909","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/constants.js","hash":"2a8c95ea6c7c81be85ca73a079c4aa5956f22c89","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/extension.js","hash":"2335334e87814078c693d76e718ba543ea03a122","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/sender.js","hash":"2760a0fe23a88ecb104283a3558ddf959a9c4cd7","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/event-target.js","hash":"aeb442571da8cf1ef606f9e9765a56a001918f7f","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/receiver.js","hash":"7c3820aeaaef5f8cd1e8e65d37995389753f88a7","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/permessage-deflate.js","hash":"0c11f7a1865844b63654f8a3b7f2e49d32dbbf81","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/websocket-server.js","hash":"46190c713fca7cae63f07f9229f4e19910e24a69","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/websocket.js","hash":"01be30e222434140a7226744af4213591f34c967","modified":499162500000},{"_id":"themes/next/node_modules/ws/lib/validation.js","hash":"5b0255fb850f7c6126c51e7b2436663fb7cd9920","modified":499162500000},{"_id":"themes/next/node_modules/yargs/lib/completion.js","hash":"c6b42f85a1b277af518e874c85ad8a3372cc215a","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/lib/usage.js","hash":"bd4f76268f9d093a88d9fa04dc3b4b62bcef5f80","modified":1452491870000},{"_id":"themes/next/node_modules/yargs/lib/parser.js","hash":"44da675b52d65faab5ad8419771fad5a102447a6","modified":1452838315000},{"_id":"themes/next/node_modules/yargs/lib/tokenize-arg-string.js","hash":"09a8af7dac77372a3eaafacce18da57e65e787a6","modified":1452491870000},{"_id":"themes/next/node_modules/yargs/lib/validation.js","hash":"83412c0cd901237d7d91380ee84880eadb4fda33","modified":1439059377000},{"_id":"themes/next/node_modules/yargs/locales/de.json","hash":"ffcb949051e2a24feb3411a3e9e438b6dfbc41cd","modified":1440020119000},{"_id":"themes/next/node_modules/yargs/locales/en.json","hash":"f7f3d8d7a8a8367bb6aeed19cc850f598b5c8464","modified":1439528555000},{"_id":"themes/next/node_modules/yargs/locales/es.json","hash":"e0496c4ff926a1c72141bf12fcea5feb1b5c6ac9","modified":1439528555000},{"_id":"themes/next/node_modules/yargs/locales/fr.json","hash":"b1750db0f960b4041d335f3bda2f79ab52b21f49","modified":1439528555000},{"_id":"themes/next/node_modules/yargs/locales/ja.json","hash":"3c7babc2acca76784bd1e0521bc1793ddeec7bf8","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/pirate.json","hash":"36c58937b254ae548d9c5bde0b686f5b51e7eccc","modified":1439528555000},{"_id":"themes/next/node_modules/yargs/locales/ko.json","hash":"8c8c8efd420b8cfd0f46ea54e7bc863473cafde9","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/id.json","hash":"33f77c9fb11ac72f4d56e1c2f97ecf6436a69768","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/nb.json","hash":"e59b7beb20a18b9d1ab8bcec6076870f609475af","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/pl.json","hash":"34a0e25894873eded51e616b93f18f77c7b83f46","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/zh.json","hash":"7b7c12fc6a41516254f336dd14bcc23752091288","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/pt.json","hash":"156d95fc019083afcdfc0ded0eafbcdd466a3cf3","modified":1439529106000},{"_id":"themes/next/node_modules/yargs/locales/tr.json","hash":"33ed2f793625641a85ea6efd5aaa062c7fae8e13","modified":1449111809000},{"_id":"themes/next/node_modules/yargs/locales/pt_BR.json","hash":"a8f5b2dc5e9e8a6b30231b63c1e6c67b5ac8e42e","modified":1449111809000},{"_id":"themes/next/.git/objects/pack/pack-3e52764a8afa019df9f67388c6a7bda8276f576c.idx","hash":"2336e2ab2f148df64e14a0751475a63ee4688833","modified":1537581777731},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537581777902},{"_id":"themes/next/node_modules/axios/dist/axios.min.map","hash":"3342217636d264d26f781081b9ee279b74021ac6","modified":1519082636000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer-dataview.min.map","hash":"5e081642b8c9f6dd0cf113a4fa77c547817385a9","modified":1455285571000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer.min.map","hash":"5afa0ec4146c8589e9b1c6a9476d199ededff9e1","modified":1455285568000},{"_id":"themes/next/node_modules/core-js/client/shim.min.js","hash":"13dcc6c0755bf5dd09fae75ab4179dbefce7e1ea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/client/library.min.js","hash":"8a3907f9e5ccab8ddf2338dc6c21d9bb4227733f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.date.to-primitive.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.date.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.function.name.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.constructor.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.flags.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.match.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.split.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.replace.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.search.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.date.to-primitive.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.date.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.function.name.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.object.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.number.constructor.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.flags.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.match.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.replace.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.search.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.split.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.to-string.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/dist/live-query.min.js.map","hash":"e68ab4079a6b8baeb0f60b0e398ec651707ae3c2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Cloud.html","hash":"f0494276e5d4f46ef45b2376f84542de8d1d9df1","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.ACL.html","hash":"dd9221724b16021ea07bfc60c9d9984576543e5d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Leaderboard.html","hash":"bb80b0290c6a801a3d211eb03741c6cff8c9640f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Query.html","hash":"15ddd50149e714372b1ba21062fb76ec0cca60df","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.Object.html","hash":"df99a82afdac2157769965ba867eac1078d9c543","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/request.js.html","hash":"298751b19e783a1ceea5b0bfd2a41904262cd8e4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/user.js.html","hash":"1ec0bc430a4b9133ffe87e619be4e15f801f6a1b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/object.js.html","hash":"45b97a4bd2b99a424daff13a2298a99f6313bae2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.js","hash":"e411c08c374860558b132522d59ad6e0c0f5b21d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/polyfills/polyfills.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf-light.min.map","hash":"cb5552f93a3f7dd906c724b3e127fd14adeaad58","modified":1526462386000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf.min.map","hash":"80e3da2d96135cdad73123445431a5418ddd6d19","modified":1526462382000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.Builder.Message.html","hash":"48d20d57a81d8870e224929ceab7343f17dd44c2","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/tests/suite.js","hash":"369419f8bbb55a581ace259bb25b3b8f2eb16413","modified":1485532820000},{"_id":"themes/next/node_modules/superagent/docs/test.html","hash":"c15d414f07ba3a158d8254e6c4b8f5d7108123ff","modified":1481494461000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537581777745},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8b320de509e9a598810b87e8e1aa91e33782a3ad","modified":1537581777747},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1537581777805},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1537581777842},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537581777815},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537581777806},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537581777816},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537581777816},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537581777816},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537581777817},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537581777823},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537581777834},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537581777842},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1537581777842},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1537581777843},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537581777843},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1537581777844},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537581777843},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1537581777848},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1537581777851},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537581777850},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1537581777849},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537581777851},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1537581777852},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1537581777853},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537581777853},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537581777855},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1537581777856},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537581777856},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537581777856},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1537581777857},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537581777858},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1537581777858},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1537581777859},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1537634972574},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537581777859},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1537581777860},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1537581777860},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"58f87062210200c778eb92e20a9453bb6a5a03fa","modified":1537581777886},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"cbeafa67a4379506db5bffa39da21eaf9e8df669","modified":1537606385859},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537581777892},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537581777893},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537584731184},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1537584731187},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537584728396},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"b66e601570ec0f4a2b6ef4e7f98c80a4b6004978","modified":1537584731197},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1537584731180},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1537584731194},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1537584731195},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1537584731195},{"_id":"themes/next/source/lib/bookmark/.git/index","hash":"fd485a65be969b02ece28747e788cc04950dae40","modified":1537585176128},{"_id":"themes/next/source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537585173595},{"_id":"themes/next/source/lib/bookmark/.git/config","hash":"7c5ec419dd0549da89bdd8376a1327f19049f461","modified":1537585176121},{"_id":"themes/next/source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537585176117},{"_id":"themes/next/source/lib/needsharebutton/.git/config","hash":"3bd2fc1363cc36b469c252931084daa7b046d52a","modified":1537595762409},{"_id":"themes/next/source/lib/bookmark/.git/packed-refs","hash":"887c94abd6c6687c55ee33a37d1463c5604c109f","modified":1537585176114},{"_id":"themes/next/source/lib/needsharebutton/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537595762398},{"_id":"themes/next/source/lib/needsharebutton/.git/packed-refs","hash":"b8257d6414531eacbf9c3d5203aed82a78416ae1","modified":1537595762395},{"_id":"themes/next/source/lib/needsharebutton/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537595726075},{"_id":"themes/next/source/lib/needsharebutton/.git/index","hash":"92d4618795db3f21daf3d655c20e9dd4fc068000","modified":1537595762417},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537581777905},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537581777904},{"_id":"themes/next/source/lib/reading_progress/.git/config","hash":"961f76a65d5278408c0317ac92bff35cfe52dfe8","modified":1537585052510},{"_id":"themes/next/source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537585052506},{"_id":"themes/next/source/lib/reading_progress/.git/index","hash":"9c32ada2f03484f1831bfee13876a6bba42abb71","modified":1537585052525},{"_id":"themes/next/source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537585049308},{"_id":"themes/next/source/lib/reading_progress/.git/packed-refs","hash":"47ca9f7dfcd1e7e9cf23b80dc8fa8544e36d048c","modified":1537585052503},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/index.html","hash":"b8ffe19604159e81cb5e46ffcdcd721a146dd2df","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/prettify.css","hash":"c913ae292c2060519657a2ce6d8366a09e71004b","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/prettify.js","hash":"43f2560c12ab3c378b4e8ef24ce54df255974b32","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/base.css","hash":"61ff1245179fba36e2924b1ab9cdb92222901f0e","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/sort-arrow-sprite.png","hash":"7d887a09a1d329cb65d85327cc809ced7059b35f","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/sorter.js","hash":"22e214a23aa976891fa6bfc1ba7c3ed79c289960","modified":1505146456000},{"_id":"themes/next/node_modules/axios/lib/adapters/README.md","hash":"c2fb161db24f3066109f92c2cbe2fa5735510917","modified":1518296169000},{"_id":"themes/next/node_modules/axios/lib/cancel/Cancel.js","hash":"efee0bd8003bf407b00c974d99609f553825e82c","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/adapters/xhr.js","hash":"b2716b17f85d6c476f00e3c3cc9ec3e84b4281a3","modified":1519077740000},{"_id":"themes/next/node_modules/axios/lib/cancel/CancelToken.js","hash":"bd2ca0dec0d577cb4d2937defa84af1f552b0d8b","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/adapters/http.js","hash":"e75a536419e33d01af5f5ebd89c59a70ff5a12df","modified":1519077740000},{"_id":"themes/next/node_modules/axios/lib/core/InterceptorManager.js","hash":"4351fbd46e028169e7159497aed710bfb16c1018","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/core/Axios.js","hash":"161cdad21ed6febb46c6906df09fe8ba25a87650","modified":1519077740000},{"_id":"themes/next/node_modules/axios/lib/core/createError.js","hash":"50ddc0220beb5edded3742e6124a8052a2ab2d72","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/cancel/isCancel.js","hash":"02abe1cad49d0ee69ad732c43f3ecd2526d55a16","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/core/dispatchRequest.js","hash":"5624f0cd8f1f9069c60beb69d83a96655bb46bed","modified":1518982675000},{"_id":"themes/next/node_modules/axios/lib/core/README.md","hash":"6060092216a87cfec1e2eee3a5b8f981e4cca2bf","modified":1518296169000},{"_id":"themes/next/node_modules/axios/lib/core/settle.js","hash":"cde052d4b12f8c5ffa02e783b5733d55dda4ad0d","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/core/enhanceError.js","hash":"be7087571a8a9b7e58d0e822e66fc6d13ae84e19","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/core/transformData.js","hash":"ca9f79d079e4f36de9ffbaf708d2fe3aa14eb3f0","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/bind.js","hash":"6f135c7f71330f8ef13867e0910297093d7f8cd7","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/buildURL.js","hash":"350689ef8bb1882cacf4fe0e4c596245328661fd","modified":1519077740000},{"_id":"themes/next/node_modules/axios/lib/helpers/btoa.js","hash":"731be16e807f2cc4c774e867b4da1f9c199c045a","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/combineURLs.js","hash":"cddb3eeac349b71f0007e9caa2bb15e1e83f9aa9","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/deprecatedMethod.js","hash":"b255a5da5b09f0c4a224ae7d1f85ac14dc57286b","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/cookies.js","hash":"82aeeb638f5c3fd8f8ecf81447fa1de5b98520a4","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/README.md","hash":"25d69f6bbc97c383a91abf970753292b329e60e6","modified":1518296169000},{"_id":"themes/next/node_modules/axios/lib/helpers/isURLSameOrigin.js","hash":"c72819c9388e948fc6172e5187fd5add28d14dbb","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/isAbsoluteURL.js","hash":"bb43203ffd44780dc643764e556afea6eb0c97ec","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/parseHeaders.js","hash":"2a4b7b11ff6c499de4d8554303c85d6356c2515f","modified":1518376128000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer-dataview.js","hash":"2fe9a0a6b2866224f50b43701d10ccf47c456f44","modified":1455285565000},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer.js","hash":"848ab6ff9101994cea975e009f811ad1a9fb8bd7","modified":1455285565000},{"_id":"themes/next/node_modules/axios/lib/helpers/normalizeHeaderName.js","hash":"6a768ffb28dd12857b45946979967527a732dda9","modified":1518376128000},{"_id":"themes/next/node_modules/axios/lib/helpers/spread.js","hash":"b6cc8c1b95a7dde825ff94b89d8016552a4771ad","modified":1518376128000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/base64.js","hash":"244cbd57f0eab0d266f1e0e7b7d10f8348df5230","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/binary.js","hash":"0e278f013db44f8a88bcb94ccd4f2e41b83e5111","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/utf8.js","hash":"75eca6c24d0117a5ff87660d426685c088afb1ce","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/hex.js","hash":"568ecc822fb4cc484c84a3ec17abeb3b998583fc","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/debug.js","hash":"080ec745632ec8bf8b3ca74b1f54cd864f9233a7","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/capacity.js","hash":"c4b005cd18b3322e329560871b674f65cab22cca","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/append.js","hash":"8b8e19ef23607725b86020f30b48722a5c527c3d","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/assert.js","hash":"8632e9f34c5f40364bcb71ba7016adedf4fc5973","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/clear.js","hash":"454a19d5cda527c315b32316e9a2ba9c1c8fb356","modified":1410552789000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/compact.js","hash":"8344e33b3acdcf585ec347602a9ebb179da549b3","modified":1445623829000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/ensureCapacity.js","hash":"9bbce6778b649397a5381bc4d9cf753ddbdd1ec1","modified":1410552811000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/clone.js","hash":"19b20635f0d4433902bf253e01a539f88c49b41c","modified":1445623829000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/copy.js","hash":"9fa5092b47214b8dee4e8f2b31da31297a23f7bb","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/fill.js","hash":"2dd02a07ac36091e804196fe0e7afa3d5bb653e5","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/mark.js","hash":"27e02da8e5771085b22aebaaa6325925b2ba5324","modified":1410552825000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/flip.js","hash":"f2595a8eca68b0b2aadae087d08bc50d60a21f6f","modified":1410552820000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/order.js","hash":"1fe9513627ffdeecd0131b36eeddd51d6af50362","modified":1410552834000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/prepend.js","hash":"657b9b8b9bcd93c2857a46dfc8d81522dde4f223","modified":1445623749000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/printDebug.js","hash":"5c1a940117dce472fdf6674dbac50509b7554a7c","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/remaining.js","hash":"6752020afb5875d55cd32bb4d5dcb77bde45ca9a","modified":1410552853000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/reset.js","hash":"a57bb978b6bf613afc1fac2d265392686766c8bf","modified":1410552858000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/resize.js","hash":"92f1281216cd195bb24208d4d7c80ab2d7dac819","modified":1445623758000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/reverse.js","hash":"d854c30a4f470681f983ec70e8c48f5d4310e0bd","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/skip.js","hash":"b76296c827da64badccc2f5981a63a1ce045ae92","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/toBuffer.js","hash":"5753f40feaae472bfec701a0a8f8a2afe13d2b39","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/slice.js","hash":"ce556eb69e1c406d90a1ae4dfd0d3c384068cec3","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/toString.js","hash":"46c066340e05799342df4ecd110fe467220612de","modified":1455284636000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/copy-within.js","hash":"8ce70669460c873550645275f5a78988368522d2","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/concat.js","hash":"564aeee0982ff6a71972ee058777ec1dbf056c2f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/every.js","hash":"c42fd4fa3b2eb14aa80a7ce0e3f17202110ccb1e","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/entries.js","hash":"16a2f739821e69edf3eedd17975b0af7f764185a","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/fill.js","hash":"964ee51df651d394c5de04d9b78fedddd0c866c9","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/filter.js","hash":"43bcb7f0013d04ef2b32593f095cc9ec111b44f2","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/find-index.js","hash":"300da9a4e828883d29cc527a55664f93cef0fca1","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/from.js","hash":"626e9f75b3f4300b10cb874e045f40ccacfd7309","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/includes.js","hash":"f02cb2ffe756198682e10a4142153dbf564d8237","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/index-of.js","hash":"f87e21e912d132ce07726d64d06344245a4472bd","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/keys.js","hash":"8e96f7f830585a16943039f1d737d08ec40853c7","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/join.js","hash":"1d56442dd36000c2f789e54cf99d3b5d8de9f5d6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/last-index-of.js","hash":"83c44205321b908a3fd5f79bd782f723baf53921","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/pop.js","hash":"5c97d6e9117a709b75b6e57e62a4afdc2381e7a4","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/of.js","hash":"57df9a40553ce97ea4f133ae5bb04a7678873cf6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/map.js","hash":"84e700ecaaac305475b1b7c15dec2fa01e4aae0e","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/push.js","hash":"de80acae010830242cc37b585c3c395d531a8a67","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/reduce-right.js","hash":"f35f4880501b9f73105e6d1f80746bdf85609cd2","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/reduce.js","hash":"32df6840a956291bdfe656ec89b6a9fcf88305ac","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/reverse.js","hash":"5fc91afd30f3acdc160745fc8057f9fbd2ffbd98","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/slice.js","hash":"1b6188cfb07968afc09e31dcceb6b534d51d715b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/some.js","hash":"04e6f1cf72e216edbb3fc423f4227b657389a92d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/shift.js","hash":"b6edb22243b9344110fdbe09be25bd49827d6729","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/sort.js","hash":"5e8e4f181810cab9a112cd7a139a23fe9ae00571","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/for-each.js","hash":"d5b30fce8768c268023a64aa53d327245a606a96","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/find.js","hash":"3c0154b2dd0610de552f24ce39243809ff5ebd0d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/splice.js","hash":"8a9b663725d32e3fc3e9e826ff59e7193a5d7dca","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/unshift.js","hash":"b56d9d9bca65d9f58f97dd8b2d251ca16fa5aeec","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/error/is-error.js","hash":"a572c4239ff17b9a48c4fa4f4b9af08ed3dfa7e3","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/array/values.js","hash":"af60608279374900db922ab9e7d3fa46de046c8a","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/json/stringify.js","hash":"f67b35eb30a32b04d84a9572a664e09b0c8b6309","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/asinh.js","hash":"a8328d579420b69f388f4cb9b1c06baa442459f8","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/acosh.js","hash":"9498f7c89269e506113cb6dd22a1f23d79546807","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/clz32.js","hash":"c224038f7aebeeee3e025202c6ba7731f07c2a60","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/atanh.js","hash":"11cc2aaf3b03da7a87f019125b11b3533dd5fc24","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/cosh.js","hash":"4ffbca3d20475d96130a38541d4b972f7b3b443f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/cbrt.js","hash":"38c5ca2f0c795824fd68e3d4f95e0689d2b25485","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/fround.js","hash":"f2dc9088945c1a019a4a6cd64bfa4d77d4523a22","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/expm1.js","hash":"8d82631d57a7ed547c92b1d2f4f493e12a7ec0ba","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/hypot.js","hash":"681f80ab188289188bfc157df62832cb79bf5760","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/isubh.js","hash":"7d197c53c4e28eda244cc0e51a7d10cb9d924548","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/imul.js","hash":"08d7bd83670d2c12588e6a6f60d64ba82d31bf6b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/iaddh.js","hash":"a4b447984e6584099b8743ee1f3f3274e6fa1ce7","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/log10.js","hash":"0de09ced98a26cce11abf566f087dc4948b4c2c6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/sign.js","hash":"ac68fe133dba015b83a17139c8e75eed1c5e7e54","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/tanh.js","hash":"7a2de5c5dc5ee30e860c851535ac577c479f96ce","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/imulh.js","hash":"449697a265bda04c0f2df8c03c987c1666cd7d43","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/trunc.js","hash":"98bc5ed5bffb0f6dd0259a101708fabf8a115cf3","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/log1p.js","hash":"2d14e2d8a2f85910c2cff1cb11abfec543132ebc","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/sinh.js","hash":"30772cbaaa3b33feed62837a5f5d337ec0f549b5","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/umulh.js","hash":"276134a7889885e14019e775d2678ca54274b020","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/math/log2.js","hash":"4b45490410cc885ac1d4b938e7e78c16112f4119","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/at.js","hash":"ea3e1e4c7d6d72f6660a0a4f7079e4c2e0349357","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/ends-with.js","hash":"f71879cf24842a96776a8372a152a950adcac07f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/code-point-at.js","hash":"48d5450c6f3f789b1bf85b8d85904c5f5b64ce17","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/match-all.js","hash":"ab74d171206e2793edde6925d92551f3c667b899","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/pad-left.js","hash":"effa33fba9fd546c888519ef1a0456340ed76296","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/pad-end.js","hash":"6271ccdfea34005263b04e2ca14abae8be72306f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/includes.js","hash":"b15a2c9500de72ab32aa8746e87b1ca5e18857fc","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/pad-right.js","hash":"6271ccdfea34005263b04e2ca14abae8be72306f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/from-code-point.js","hash":"5388a77265404e2a02ad9af9a767cd331761aaaf","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/pad-start.js","hash":"effa33fba9fd546c888519ef1a0456340ed76296","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/raw.js","hash":"0f6eb9575bdcd8a886e95bea0082b0f8829247e6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/repeat.js","hash":"a5b45d3a47d9c50869904e83e304464eea04154f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/trim-end.js","hash":"1cf748db075a6d86ac5213c3e71336cfb2231121","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/starts-with.js","hash":"f54cc0c2b3d3ff86059af704c4258f30500532d8","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/trim-start.js","hash":"4ade2f5bbe9dd13336947071a18644a569b0c1d6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/epsilon.js","hash":"7ecf08214264ff042724f8f06e0b0bf15f844551","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/trim.js","hash":"a23f78a7acf8d8b9e0f7c255bad2fa789a3e1a1e","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/is-finite.js","hash":"5ffa89657cd0e1a2df9fe143ed6ebce5b14f8f55","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/is-integer.js","hash":"313d7df7c0b403b663061b9610225d3c20ab34c5","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/is-nan.js","hash":"1c2561c32e8e3bf3c2f39fe643de51e289b80310","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/is-safe-integer.js","hash":"86857e5894db98a7b98d5afffbd97fa9e93052ce","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/max-safe-integer.js","hash":"9d2368dcceeabb2437028a98886e68706fa9342f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/parse-int.js","hash":"57e3c96eab12a70eb4473ce7a01f42f6d9407e88","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/parse-float.js","hash":"e1529ada3618d2d0297fd1f87d9bb58001842b7a","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/trim-left.js","hash":"583af361cee0c2e14dd4a889a90d53f7f7190447","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/string/trim-right.js","hash":"7b6932f8ad3058da1b546deff85e965079e6ff6a","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/number/min-safe-integer.js","hash":"29ba194445fa31c517b9f5d18c05f18dd1d357b6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/assign.js","hash":"1e28b0f0e1857455c200877d8bddbe0f026e7f65","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/define-properties.js","hash":"ec31ddd82fb8c35fdd7e421942754804c35368c0","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/entries.js","hash":"262c69a024ff97ffb4416cf1c1eaec0425bda695","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/create.js","hash":"15973e2a49449fe7d8f29c8c1b2c11227a5b4c1b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/define-property.js","hash":"73d0bf2dac8e1e12b646d6f76ec9ec0e9a452824","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js","hash":"21dd0b49f6b48ad04fdd77bd0def8ad9fa65a9ff","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/get-own-property-names.js","hash":"f856b6b511b418fd0a60b7b13e90845a7e0d382d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/get-own-property-descriptors.js","hash":"e6d68e4bdbadf83d5cdf2b144fbcf21447845685","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/freeze.js","hash":"971ac6adab8a648eef713ab52d4666dc9bf1ccf7","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/get-own-property-symbols.js","hash":"87655a0e31907bc0570de68e31f58836200645f6","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/get-prototype-of.js","hash":"73e68428f125dc7880e8fba0a3ec188e42233377","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/is-extensible.js","hash":"08c220b95dbb2b10f66b1d75087b4bc2e728cd83","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/is-frozen.js","hash":"ff968bc61038164d378d66a31ca3097f3f675f00","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/is-sealed.js","hash":"1f40323ddf157eee6ce92bf62773bba1710c9f5d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/is.js","hash":"cf604991fd18a448afd85a0b070e582fa093a11b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/keys.js","hash":"932549c3bfa501ef939840c1a43710ce09c7ed42","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/prevent-extensions.js","hash":"f8a01a4630cb9dcf98476c3775d155b057b9ceb0","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/seal.js","hash":"51172c8ea9ddbe5add780ed72168c531f5d74c8b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/set-prototype-of.js","hash":"874387ca9d4a5a752069e9d302e4addc48557ed1","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/regexp/escape.js","hash":"52b5a785632242a33119879b67001319516f563f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/object/values.js","hash":"e9359279f1eb600dece668ffcde8436efe96ab60","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/apply.js","hash":"5dee945e5b65f5f742d854b8d1d398dac919059b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/define-metadata.js","hash":"84b038f379ed454c2269b8976bb84a71d3e122d1","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/define-property.js","hash":"58ef223b5babe911017a312896642cb0d948281b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/delete-metadata.js","hash":"a77989d3434dd8ccfafa365246bad736826904dd","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/construct.js","hash":"4effe70580ba3fac6584828f9245e7255f4c1016","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/delete-property.js","hash":"c042f1ac62f9edadb0c2afefadf7393af7f39977","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-metadata.js","hash":"51dec6a60e59beee61700b8c4f70893cf3b4a185","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-own-metadata-keys.js","hash":"2c8192b30825716b10d69684a0a6568a8386fc5d","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/enumerate.js","hash":"e325eaabebeb1f3ed0da415ee0410cf6567c8513","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-own-metadata.js","hash":"76b0b29bf6eeea9ff76d152b037435ee959961ab","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-own-property-descriptor.js","hash":"25fefd00cf61097e0f6969eced05a95c57564953","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-prototype-of.js","hash":"2545cd64d8eea0086d1eb083ff4e82b870ab6242","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get.js","hash":"9ce00c05d4fab5fbcbf847af1b983e1970afa045","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/get-metadata-keys.js","hash":"6a613da247abd5a30756d9eaf7cb22e14ce8d9d7","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/has-metadata.js","hash":"02a7511e2f9b8fe850fc92378221852158128e75","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/has-own-metadata.js","hash":"7bbfab718405f39b9583f4fa4885e2e85dcb48d5","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/is-extensible.js","hash":"ef1a64cf5adb05ad79f53b8f9db3c33732a22a6b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/metadata.js","hash":"a8133f3f92b16da09ed25fe34320d711c20773bc","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/own-keys.js","hash":"b3b5430d2d94e8354a325fb106cf78d9137041e9","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/prevent-extensions.js","hash":"9446a7f20b8b4a7024f4b9c80e6cba86fa94b327","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/set-prototype-of.js","hash":"f9107e8091b6cda4e5a2539ef078cf90bf9b608f","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/has.js","hash":"df3a5f8804c5a41b4e85f32f8acce8d61575c895","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/reflect/set.js","hash":"e5dcbf0de97b932ea17fa3c24770aa0d937d287c","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/async-iterator.js","hash":"b90d4b54024a184aa763a8a1b432cb3412d142fc","modified":1487000694000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/for.js","hash":"8ca990306f89e81feb6e834f8cdff145501e2a0a","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/has-instance.js","hash":"4eb8221d045d881b61a18431c894bd2763e3ba85","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/is-concat-spreadable.js","hash":"635cec4c3d7bb447bed0f6c6a935e3d4510fd79c","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/match.js","hash":"2edf6327799ff1372cbad2bf849db066e1ff34c1","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/iterator.js","hash":"81db9cd56054a6fd3955b569e9d5639885d4e266","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/replace.js","hash":"28bbbc250e02a1c5dff07f32f51131654185b640","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/key-for.js","hash":"cfc33e2105878dd632a2eccd63bbb1b99f9f010b","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/system/global.js","hash":"dfbadfdbd072ab4817823ae6c4b0b31593fa3d15","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/observable.js","hash":"8ce65430420cbfb03983e5cf5e77efb927694296","modified":1487000694000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/search.js","hash":"78509ca7c8dd825ca32ac3ab6003f57c4bed7533","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/to-primitive.js","hash":"0ce54308e9fabca7d605040ea077b5738264d6b9","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/species.js","hash":"278e42ead59190cc73f80f6276c9157c380adc68","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/split.js","hash":"29c6600777c87053aa1f3d483c82846074df86ce","modified":1502898501000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/to-string-tag.js","hash":"fbee32cfdaea1902a5a5f2756dc2fc59b6abef0a","modified":1502898501000},{"_id":"themes/next/node_modules/core-js/client/core.min.js.map","hash":"da32a64d207bd2d4ac62aa73fb53118705840de8","modified":499162500000},{"_id":"themes/next/node_modules/babel-runtime/core-js/symbol/unscopables.js","hash":"124463d894b831f827fa44c1972f8bd6f5d367e8","modified":1502898501000},{"_id":"themes/next/node_modules/core-js/client/core.min.js","hash":"15502b953f1d1ddeb64e72fec54704e88daea395","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/copy-within.js","hash":"888275d2b87cd83d0329adb50424ab30cca973dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/entries.js","hash":"0a90beb0ee4c2af8a737b6cafa2490d84dfa4192","modified":499162500000},{"_id":"themes/next/node_modules/core-js/client/library.min.js.map","hash":"6d8ef2c858c367b40f2c49d16bb39d8f93e4b3b9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/concat.js","hash":"342bc35cd7ee72863d1eef01d8743de18ae86948","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/fill.js","hash":"245602c87f38246e888b48760a3f8d786d2747f1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/every.js","hash":"212a9444ba45f8c46c517acb563ddb920f49740a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/find-index.js","hash":"bf56cfe2bcce03b37841998867d31f32b60d1441","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/flatten.js","hash":"270362b8b9cc8adcc34ded9c32113b3df751ed5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/find.js","hash":"a5a24c1953105abfeca6cef33cb26a06ae889de0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/flat-map.js","hash":"aca21dee3553f338b5235e9c6767d5f34573ad6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/filter.js","hash":"304e1662196b2f7d898680fcf4a4b0292bf99db4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/for-each.js","hash":"f2a9d23340d7cfe29a49e62cebea869764cb49a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/from.js","hash":"b0adde5febb2f034de3ee154405ed006b7712109","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/index.js","hash":"3f4b44c92a8ebba35e0780c5135e069f4b0f6184","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/includes.js","hash":"265b5dc5ecccd4814b78ae19d4106c31c221e8b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/index-of.js","hash":"7777f97f989c8676e66c278bff7da92cdb3c4336","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/is-array.js","hash":"b9f48b11a236a36c0a3b8f23a19778a09375f701","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/join.js","hash":"9614938b4d65419c017f4fe1991b23826f96bff3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/iterator.js","hash":"ed8f2bf8f0494b0d4e0c48253794f2c5a1b589ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/map.js","hash":"44b3cfd63d46beb55c00d1b242d6a8a61a960a28","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/keys.js","hash":"842bb5d5226d276a3a227ef2dfee8dc0c85d5cc6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/of.js","hash":"b4aef05ff0c228d2de0f0318d5cc6f64b98ae4c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/last-index-of.js","hash":"3da419d96e7c5fcfd350d02052df382e5eb5314b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/push.js","hash":"ff67e1620ccb8cc0f2acecf0bbe8446ccddf3939","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/pop.js","hash":"86ff51e81651091a085051e78d33506ecea03db2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/shift.js","hash":"267131c6de5b381b1d1f5629f4b9930fa6a854eb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/reduce.js","hash":"833b096453fd638a808a88ac4551adce3cce8a6d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/reduce-right.js","hash":"57a55d2faf2bdb1e065e246052215f01f9e9c7d1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/reverse.js","hash":"5e22da992873fbd929f420a60c7a52c839809e3e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/splice.js","hash":"83f5c3fbda2914080915bdd5927a1275665102cb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/slice.js","hash":"30cfc752c9d67ab38a089c6c4c9fbde667ef85a1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/sort.js","hash":"2d0e5ea3886a2616362e9ab0787ae518be8d679f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/unshift.js","hash":"b6cefed94a6de999cd0996475672a2e29c38430e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/some.js","hash":"e1697b293f1e161a5cd5c672693839c25901644c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/values.js","hash":"ed8f2bf8f0494b0d4e0c48253794f2c5a1b589ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/index.js","hash":"dae2a675b0040590ec48625b9062774ed584ba59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/now.js","hash":"8ed35f007e25b1741eb9aecec38d22f776ca6dcb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/to-primitive.js","hash":"14393c1a1d23133181d4be5c227090389aaace8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/to-iso-string.js","hash":"7a524be47d7e83280cc57fdeaa39ef167c02f6f1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/to-json.js","hash":"6b7ddaa0daf5a52a15bb6a0bee4863732e139ee7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/date/to-string.js","hash":"ad4df6af124a18ced745ef87eb15ca6b1e74189a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/error/index.js","hash":"e2dbe262d787884d7140c4a7564d8c2a29ac7c18","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/dom-collections/index.js","hash":"2304b264a3ba7d968515ea66d820c535b24df19f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/error/is-error.js","hash":"20cd8a0d254ca5189e29ba43acd147b5e0de647f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/has-instance.js","hash":"fa90e39efa4dc297ddd06deedcb88e137b6c1592","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/index.js","hash":"28266e00bf205a1b31c027a8b139411e485db6e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/name.js","hash":"fd70f2c9bf1b493e22b0445547738baf46e46734","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/part.js","hash":"df32d3f1c9952151a82c8f06c316436c1e7dbdb8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/bind.js","hash":"153cf3bf066a478d3bcd28cae685495f1871ee41","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/dom-collections/iterator.js","hash":"8a0d872d8cc99c1f1eab0a2f792acd7b50e2ae72","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/json/index.js","hash":"d71c301821cbd44746cf4042709db1fd2f9e938a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/map/index.js","hash":"f71c3be88ebbd0ed9ca5bdf79eaab00742a3bce2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/map/from.js","hash":"86c66889db36e962d6441dc6f877e7fceb52fbd4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/json/stringify.js","hash":"3763a77062b3a9cbd90c7b07a42d745fcdc59761","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/map/of.js","hash":"ee764f00b4b58103422a07ff714da65b7158db98","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/asinh.js","hash":"624eb2a3e0d6863e608bea0efd8716575d24552c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/cbrt.js","hash":"d60637f20606255536fa73d747b63a470bb2f5a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/acosh.js","hash":"7fb91f2a85264c687059e47d7922f1c8037acd13","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/atanh.js","hash":"2754d2a06b93b2b525098004cf8700cfab123ec0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/clz32.js","hash":"e7ae4f185e1f7e660acfddeb697088eb2225b274","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/clamp.js","hash":"8a6dd0dc18ce4343a68998f49145a34db85a7eb7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/deg-per-rad.js","hash":"13c6e27c19bd5f43dc5adaecc3720e36823bd436","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/cosh.js","hash":"08bdcd56c7466536bc2142f6e2d774140071203d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/fscale.js","hash":"5ed3787c6f028e57f870b1c0f398805ea220586b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/hypot.js","hash":"80ee5c4551462d50988dcc44c0841f0824f7d3fc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/iaddh.js","hash":"2d87110b369e8d793c3f2415cc2654bfed5714e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/fround.js","hash":"18d42c12bb3050c8c82aaec677ab4fd9c7e83547","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/imulh.js","hash":"691fd55d7a88bc0d91e32ed0ce17280d64c3832c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/index.js","hash":"a05f99f5eba6c849d4ba85955d0d78e946beceee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/isubh.js","hash":"8eaf622ddf2ba420d08f38dd4c3ab28088589892","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/imul.js","hash":"222ae1858a5278209da70d3699bcd25e1a78d158","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/log10.js","hash":"4cb9cc44bb75ef0b1191e0156ada1096e959df56","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/log1p.js","hash":"e09bc836c4d6caf91ab5dd311423cc288d25f0b7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/expm1.js","hash":"6b377d88cba333f62ddd8265b4b69a30352aaaf6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/degrees.js","hash":"2fd8ed066be3108364bc2d994feedd75a2e8c7f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/rad-per-deg.js","hash":"f7f4c34e8c9bf32bc254e1427baffca216cbc1c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/log2.js","hash":"00dde73c001c54bd4e07daac27e05ae5070536f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/radians.js","hash":"4342f4aa0a5ebe9c2d89285d19d6d477da54a94a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/sign.js","hash":"006129598ffacfb30b913e8770a7cb4bcfd0dff9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/tanh.js","hash":"6ce51aeb08ec9e099af6d4c4a87caf4fd7e9d771","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/scale.js","hash":"a5f994309c36b8b6e8e75a171189909ed1975c9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/sinh.js","hash":"44666395975413186b515f71691f3ecc896fb444","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/signbit.js","hash":"1010eb5793f6a5c5067689363c127da3658f1b3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/constructor.js","hash":"df124f073bed9a8f33531705d8e68f78475f7418","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/umulh.js","hash":"e36844d011737548524024a12fd21cc77ebd1ed0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/math/trunc.js","hash":"57b3bb82d1252fb0f7c740a9c4ca08b69de09a26","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/index.js","hash":"e77d8cb99b41702794d78b9ba81ec9fbf9eaf40f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/is-finite.js","hash":"5e75b8931fd25398eac5dbd1559bab13e92b277d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/is-integer.js","hash":"1728b6ad20b4db077a5e79e6dd1bc3c4749de079","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/is-safe-integer.js","hash":"e65cacf03b0344fd44171f90238ca5c92e91b437","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/is-nan.js","hash":"e3505463112e0256ee4f5c20e6fa1aed00a89fde","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/iterator.js","hash":"79a57e54b5d6709bfe01fa10b77aa39d2ca43a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/max-safe-integer.js","hash":"5dd3362ea111aa72b24a963bef5999a4981eeca7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/min-safe-integer.js","hash":"a581212464b943f0c14b1480a87fe21c14810018","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/parse-float.js","hash":"5c704b1fd70e3d47847489340eb51f25634e952d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/to-precision.js","hash":"fcd55d4fbe2dd21e5bf22f30485fa80184d8edef","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/parse-int.js","hash":"2416bc74d7c51425f80b5a912efeb0cbeb54c7e2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/to-fixed.js","hash":"d2e78536ca5410404b4da7dee7a61d05cd4a3b3a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/epsilon.js","hash":"2353a86a34f6c57f9358bb60b65a7993a524c2bc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/assign.js","hash":"a52e7a4e49fc27ea9bfa9b4f9db60082010e1797","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/classof.js","hash":"dac8c91856d82e1c3ea319f1194e6f18f78e1eb6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/create.js","hash":"cfafc4109f0add769d4cfc0ee69960592ddd622f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/define-setter.js","hash":"302d49a8fc8ce56f3a3c87df931aba4dbccc10bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/define-properties.js","hash":"30dcd7fb7a2a7ca6739b386fd9ed7f6cef6a2b19","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/define-getter.js","hash":"a713bdd5dbcf0043a19dcd6362397d332fc16272","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/define.js","hash":"719c086456f0d84f8ecfd6e2439df72f6e4fe302","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/entries.js","hash":"beb0cdc202537d5cfa3d25103a609f7007d9b023","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/get-own-property-descriptor.js","hash":"f7b18a608f6b9281b3f957f2cae4aa6da4fe7f68","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/get-own-property-descriptors.js","hash":"b733790a345c51befd70b4029e611152e87225c5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/get-own-property-symbols.js","hash":"c1c6c0643696d256cd4c2e9b49f9651be8ac7caf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/define-property.js","hash":"4c208e94fe30bd4d07c6bfe330c646657daa5328","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/index.js","hash":"78acd1a842343a1ef7eb29227727aebc6a222bc9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/get-prototype-of.js","hash":"a3f0d659f12776de341338c30abdbe37edf3c1e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/freeze.js","hash":"62c46a53a21ce702b7143d84ae198c4ea7afb67b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/is-extensible.js","hash":"3b4b9bedd8431b518582bdb9bef8a4372f59aa0b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/is-frozen.js","hash":"8f03fed34fa3ef645e685594f1138bbf1acb6803","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/is-object.js","hash":"671e970e73fe94321efd0722d29bc91450894039","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/keys.js","hash":"b978b2d3fbdc9f1be8df2df4fe78e07e104923c3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/lookup-getter.js","hash":"89b305f21512994ccf6d58c7172e1720b215a319","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/is.js","hash":"1b08df870a00a477c1038a2ba9cb056cb84e260e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/lookup-setter.js","hash":"4ada921598c386a799708c44d572951b2ec77b09","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/is-sealed.js","hash":"f5a893afb5ce5b4582a0f7a6ff1f58892233a39c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/prevent-extensions.js","hash":"ccea0576fbf28c1a54ca24fba243600c22637398","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/make.js","hash":"265b8f90037db8cd3d73c385350b831a3eee8d11","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/set-prototype-of.js","hash":"8826876dfd3c802fe43cf626b2cd0052e6d2c6ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/seal.js","hash":"66b29d5d3159bd1c68374287637b824cfae4102a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/get-own-property-names.js","hash":"660e96466f5c3a186cbe3d8235c385994a6ef575","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/object/values.js","hash":"33175277693bb888f0bd9a1d4052362d1a4775cf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/promise/finally.js","hash":"7371654014ca987dfdee4d37e7e3f129b04b653b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/promise/index.js","hash":"e609ec2bd0e2ef9c524e05dc1dd1053a155cd837","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/promise/try.js","hash":"49e93747aa749e873d8d47c24cdf4a4776b50269","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/apply.js","hash":"04d939e759fc24528ccc6a316c239ec22db0d456","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/construct.js","hash":"6ecae319deb8dc7b164dfb7882ffd16834a71eb9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/delete-property.js","hash":"6330a7452121f0dbb8d75f5d933e5ec99e995b83","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/define-property.js","hash":"c13861562c9e2044748ba70756f7b4682c30036b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/delete-metadata.js","hash":"4e68a6c5fc72f2bba4b300f8ccec947e7b7239d3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/define-metadata.js","hash":"e079efc2320e189c2b5c286f1a2c6e32cdba8105","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/enumerate.js","hash":"78fa4ba7b1620726dd9b564f8745f50c006a86f5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-metadata-keys.js","hash":"023d4ade8d260be9e6636ea2afac68ce9da87bd2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-metadata.js","hash":"83368cfd6c295d794fd38ca15921e653f3c328ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-own-metadata.js","hash":"d82525da16a9f6d2951e4fd625498d45cfb3ec9a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-own-metadata-keys.js","hash":"01ac30d8c4f08bed712fcf52c64a418169d0563e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-own-property-descriptor.js","hash":"03164bdb787d836983d8d1b68d6e09ea54812c82","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/has-metadata.js","hash":"178443f2fad3c76957351e418d8a528549947f64","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get.js","hash":"378da2d93ddf8390c1a6332ec1ed0b82326b24e9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/has.js","hash":"193411ae2a0ff4624ed5c30fd316f4a6993c5084","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/index.js","hash":"8a7e8936fd1cc4e0c1300f8275e4486a76308ade","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/has-own-metadata.js","hash":"a678449db49aa4377f7bba3216c7fe0c8730a66e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/is-extensible.js","hash":"31e98d9e3727d8ec5c98f4c89abaf52c54f4f3ff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/own-keys.js","hash":"edea5ac4a2a311d246ce9270d7f511527e0fcb96","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/prevent-extensions.js","hash":"710858c6cccdf634daaf81dfdf233b306b274eff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/metadata.js","hash":"b24565d098a8b9efa6bb7a2470199f7a77464235","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/get-prototype-of.js","hash":"e0dbb30baad90a6770ec463fb9f8bf3d2cd03e43","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/set-prototype-of.js","hash":"106fd8004eb75e059c3affcb286da1a547d9a4f0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/reflect/set.js","hash":"07aec89064474ba19cb25532d01e315637dadd8d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set/from.js","hash":"4595d1362589db6ccc807a548a7f02c5f1c46cb9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/constructor.js","hash":"7eab5e5616b1fcde7619b5059a43feee72ef0aaf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set/index.js","hash":"a613c02ba75289a04aae0493bf0a94d16419dc02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/set/of.js","hash":"5914c261c93fe5d86deb003357c7b635d885e40e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/flags.js","hash":"48eafd53df131dd06eb894ee87b6dd546d46785d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/escape.js","hash":"ca39299b13988b550e0ad9bfc20f888d33ecb6be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/index.js","hash":"eea3ab574c34fd8f9caff45120cf8848211f9b31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/match.js","hash":"7b50060a5c9a46bf764ad734d9759883aed97687","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/replace.js","hash":"0e35c8b3817b483939dbe31a8fe1ed718a10e8a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/split.js","hash":"8f41ea156094cf37377d2d97306e58b171becd89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/to-string.js","hash":"5dba78b784d1aa0f62ce87e645c3e28b160f5373","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/regexp/search.js","hash":"6628a48115c976a3dd796f8dd2fcd9c8c0b54f12","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/anchor.js","hash":"a2d6dc073a2e9e034116a5e90ab3a3db26f703a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/big.js","hash":"f0c2f5ece677b8f30587cf8af7f18ccc74860168","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/at.js","hash":"99da9445e6e49c8c0ac16b9af04fad8524df03f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/bold.js","hash":"ab246e87319031005a141ccf414c26f7205c2a79","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/code-point-at.js","hash":"949ff30a70f742a656ed1b2d68473d821ec29766","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/ends-with.js","hash":"c1e8d3eaa0668ffc8f41428109a7c562ae8442dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/escape-html.js","hash":"00f53b59ae0df5be32804771c32d506672bdf6ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/blink.js","hash":"f555dca93f69b43d24c7be1a487fe8586f011818","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/fontcolor.js","hash":"2a5c107e3f07430bb7948a1183d4822e976c3042","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/from-code-point.js","hash":"645a05a13060be66e095ae8a56b57f7a1b1fca05","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/fontsize.js","hash":"69852282463ec556a1171e3d8eb40c725f5ebc65","modified":499162500000},{"_id":"themes/next/node_modules/core-js/client/shim.min.js.map","hash":"3277b961d26438e2178dd1575b702c407407eb79","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/italics.js","hash":"10810fd2526451ebaf37cf0b3953f7aa5a74c1c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/includes.js","hash":"bae05f6a38aa3ce3680b2afeddb19968c56bd317","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/fixed.js","hash":"8971248fb0157535c365e83de1fa7e46d7e24d02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/index.js","hash":"fb9a1083960ded3ffeaf7482f3f6437ca458867e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/iterator.js","hash":"ecceb9c28587b97818b58ec1d6299dcdbd92b52a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/pad-start.js","hash":"6c9522af3b6a9fd1e6c7a1d09ffd2e2776614c59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/pad-end.js","hash":"52392b3b9d69ab83d00b32b3eabbe7df6143a46b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/raw.js","hash":"e1dac00e0f81fb9d5ca35222b8ba9a1d04102e6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/repeat.js","hash":"6e2cf17f4d4027f589abeeb952cd9e77260e4b2c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/link.js","hash":"5789f9ec28b872f98acf71e4926b5ff43132f6f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/starts-with.js","hash":"8e85a76c90334c5d4a3299ad0bbd775bf0121051","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/strike.js","hash":"c2a43592d68b33a04998013d87b4b4a0b38a3c1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/sub.js","hash":"f2f518a4730540fb1beac4188a065e94abc986ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/small.js","hash":"df10df9628c24bbc90b533a53809fbe40e354fcc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/trim-end.js","hash":"de59c3f523cceabea6f82661084cff2ee4f26de5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/sup.js","hash":"200e1f8ee570b8d06b5211ca5c42ed4dc5a4d2ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/trim-start.js","hash":"005ad020f1f4eed2f58d3d45c6dfecee9102a26f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/unescape-html.js","hash":"f6bebd68fb7e67a3d3f757378d4f6fa4b193f660","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/trim-right.js","hash":"de59c3f523cceabea6f82661084cff2ee4f26de5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/trim.js","hash":"dc19e18e042943bdb883655d58a53ce359fbbb0b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/system/global.js","hash":"bfdf4d05b6d832f196757a5e9059c85dd91a2c8e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/system/index.js","hash":"f2fb57816a728e2d74c76a7ca86056d89b7371b4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/trim-left.js","hash":"005ad020f1f4eed2f58d3d45c6dfecee9102a26f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/match-all.js","hash":"1a44958c842fc55f5ffbe34bb69c11f97e3b60a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-map/from.js","hash":"4148017846db2cfd86532668a23a4288cc1c6680","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-map/of.js","hash":"69673839fb16cdc54334e63ef180b5544439ee6d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-map/index.js","hash":"82fa616fdceda10040e396a442b3650aa5512dff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-set/from.js","hash":"cd7dbb56ef15e3af3d9a34b2be2ad6033ca8e1d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/for.js","hash":"720eab6eed39a007c0b8249dbff059ea6eb5dbc6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/async-iterator.js","hash":"41179119bcb82c86daddee6b37ef37fa198fb223","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-set/of.js","hash":"2e01d46dcb7ec4665c8e40e76534091eb2a378e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/weak-set/index.js","hash":"00e46cee59a537b77ab4cff4598ddb5088465721","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/is-concat-spreadable.js","hash":"bc003a91f35580ecda7f59a75948118e797845e3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/index.js","hash":"5095bd95d514bf97c8268ef80165cd08a79aa4de","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/has-instance.js","hash":"982d20e4476762790403c3cb86079532b3436684","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/iterator.js","hash":"46867dfcb342ab590cb6df8e3ea8291e05931ab2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/observable.js","hash":"7f1aa50c169b6e4c89e9b2f1007ef50fb71df52d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/match.js","hash":"7eb5335cccabf7f861e6ffc3ebcad5b125161a32","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/key-for.js","hash":"74551b985c578cd28563bf39f3a177818e4ca009","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/replace.js","hash":"3f53ee1814a7691faa63d0cb9ba975b5b73edfab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/species.js","hash":"7c9a78a525f3f565cc0388dcf4aae56e54cf6ea9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/to-primitive.js","hash":"c9712326b87b9aeb1e1eb4fbdf95d62789f52ddf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/to-string-tag.js","hash":"c175234b7c7eaa60b3a26a9626e23ece9a6580b6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/search.js","hash":"addbc8a2f07cf9ad84f303d38ec1c4418343ba94","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/unscopables.js","hash":"ea5637c5947795c3ba84950b4404aa7b870ef269","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/data-view.js","hash":"84c354c806ea1caaa8f9c5aea6ea084f39a489dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/array-buffer.js","hash":"14b41d86f5e6fcb765769c186e686556da10cc03","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/float64-array.js","hash":"9c982c3fe8e46e81d8b2ac16ebe31d3983176372","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/index.js","hash":"266808d8a847bfc92ba8ace6fc5ebbe4704a1f16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/symbol/split.js","hash":"d4a2fba2a78dcf64359e22d6a5023814750ed6ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/float32-array.js","hash":"5e82a24bd7bd32a465e63e9853b0d030cc6109ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/int8-array.js","hash":"40cdea2647372067c048ecc25463dc9278eb0328","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/uint32-array.js","hash":"c2f9c036349f320f24893ffbd677a7cd60f4244a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/int16-array.js","hash":"4b4eb4368238c9d777e98e9c9c4e6eed194ddb34","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/int32-array.js","hash":"cc4707ea4936af6c2c59a103f2625005fd1ea4a8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/uint16-array.js","hash":"164e3b181f278321041e180f241dbf63c96a61d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/uint8-array.js","hash":"92d0fa747d94937d248424029e92885c4c3b69b1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/typed/uint8-clamped-array.js","hash":"a0ac4e8b92aa4d92d8c7b381ca60a5d05e4f4c9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/array.js","hash":"49705585cb8254747e5d0f5102477446df4b56a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/date.js","hash":"7eb27ab39a45e7abe03daf9d1c803ee769e43062","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/function.js","hash":"ccc7a221dac94d9d95034b6782246c8b7e9744b3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/map.js","hash":"eff2e7688d6e600611799986fc95ba07c94d2159","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/object.js","hash":"66e076b918ecf946167f21aeef86b168ada0aa1c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/parse-int.js","hash":"76db73513547102678147feb20c7ba6cb08aa080","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/index.js","hash":"07951afa3d23d128866435244474f1095b9482e0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/number.js","hash":"a1135e9043d305f06c5d7d5d5edd46cc040c1dc5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/math.js","hash":"9acc6eade170f9a518c88aa847d894a34e286928","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/regexp.js","hash":"6a4cdfade597c3dd2c57a4894b605ab4742b32a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/set.js","hash":"af862d19834a897d6a720fdbb105d5d2f434ddf0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/string.js","hash":"48387e0b38f05aea67f4dd2267da53341a3c4587","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/symbol.js","hash":"641973de0b373dfdb6ad46b2e78022bd3f33c7e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/promise.js","hash":"703c7b01a31f261cb7a06731889203aab37ffbf4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/typed.js","hash":"55d10b0d1d07f45cb3e4e779813e7a95ce85823e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/weak-map.js","hash":"c4c60c685a22ae339e8e7835c972e2cf1109b545","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/reflect.js","hash":"afef5e6ae91fafe8aecf5adf7f4980179f52d779","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/dict.js","hash":"84914f9f137bc04a4752ee4cd07eeafb96caabc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/delay.js","hash":"228e248f7f9bce1c79f1b01fbc1045cb6b399cc1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/function.js","hash":"4b1a524df30af9c5f22e2422f4c65210850a5ac5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/weak-set.js","hash":"c9b4cee2139b3f6b78aaa6ad46d0d80fa44b1286","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/regexp.js","hash":"26865b4b0db26e1ff480466b03cbe78570f36dec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/index.js","hash":"0a02ba673064b37349451f5d87cec5cfecf5ec23","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/number.js","hash":"f16d562109e52f1491f70e423e3123a518c413e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es5/index.js","hash":"6ccd318bedc64315d50fa7a8010026a848f5e36c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/string.js","hash":"84c386fdd87097fdbddaea8216da0cd327ab8823","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es6/parse-float.js","hash":"01735a2d9abd3d186c33628d650032c8bd975118","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/asap.js","hash":"886a1a46374a861e623fcccfcb0d366195961a1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/error.js","hash":"82dc4acd33694a83bdd40171a23ade8f18e175bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/global.js","hash":"44f4d9111918bb8870e9bb1ea3d3646036704bee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/_.js","hash":"8fcd44d9d8fe3703a8bf46e80bb8579bffae30dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/core/object.js","hash":"1b0d2bc5d1a28a06c281a2ddf6ae41cc3c5d5750","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/array.js","hash":"f2465e0f8fd7857ca38be99f9b3c274b05e0c977","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/map.js","hash":"cae54f44d958a19876302bb371129944e9eb411b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/object.js","hash":"56490d465f6ebec6e0766bff91df52cde99b3407","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/observable.js","hash":"52bf2478fdaebcef1c6175b92bc86dcd8bb7ca91","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/promise.js","hash":"a3d969ca87c6d459d17e2662d24bff02572c0322","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/set.js","hash":"77740afe9e2ef084fce83c7a6d2a860526f2140e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/reflect.js","hash":"cf18136ddc911060825a965f077d54cc6c42f413","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/symbol.js","hash":"d554ddd831c283bc1b3481bb2c8a0e9b81008d3b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/index.js","hash":"79fc719731cbc384f259ff203c5d5421b48a257e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/system.js","hash":"e5ca41179a7219355cf9fcfedbc97f644d9db260","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/weak-set.js","hash":"2527172ae73c6cb268c2a9ffd1d3f7ef0fcd0c98","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/_.js","hash":"8fcd44d9d8fe3703a8bf46e80bb8579bffae30dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/string.js","hash":"f3391fc39fdaa2f98e8a49aed0dd822707f5a234","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/asap.js","hash":"886a1a46374a861e623fcccfcb0d366195961a1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/clear-immediate.js","hash":"3b3b5ae376c9d30b08275986571442021b540543","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/dict.js","hash":"84914f9f137bc04a4752ee4cd07eeafb96caabc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/delay.js","hash":"228e248f7f9bce1c79f1b01fbc1045cb6b399cc1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/weak-map.js","hash":"25c8227c432c828757bb0a1bb97a6207dafc7ebe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/es7/math.js","hash":"c9036eb236d04896c617309aad8c2b8590ede010","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/get-iterator-method.js","hash":"6db7cb4fed71875b9a32905a6d21d13dc424b9a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/global.js","hash":"44f4d9111918bb8870e9bb1ea3d3646036704bee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/is-iterable.js","hash":"81360c40904a8c551269ce9dec22b9c19a5378e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/map.js","hash":"312a8758a8fa370e5d3ae5ba984bb1cf356e966b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/observable.js","hash":"52bf2478fdaebcef1c6175b92bc86dcd8bb7ca91","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/parse-int.js","hash":"76db73513547102678147feb20c7ba6cb08aa080","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/get-iterator.js","hash":"3152fe88fcfc2032ef14414e379942225b4615df","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/promise.js","hash":"cfa711624f5f866f7e76eed3c2e607079923002c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set-immediate.js","hash":"adf05345afc0bf5a8b304d32f76271b367265cf7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/parse-float.js","hash":"01735a2d9abd3d186c33628d650032c8bd975118","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set-interval.js","hash":"6008901c6fc183d1e2f5bb988f5caad1a0980626","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set.js","hash":"6df4aff857f3d7dd6b9d6317ab70f56097a71897","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set-timeout.js","hash":"c98fcb7a85fb3b9b5efd4d0d206bc472c5731f41","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-map.js","hash":"90e6e9b81670554dc92a84f723979492f81ec7e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-set.js","hash":"7e82642f9aa41d7cbad3db55246960182564d9f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/0.js","hash":"f0ca8b11b2a695d5639295c118f33861cd9ecfa3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/2.js","hash":"91df8b3800e78552341f2ff10624a4278c8290e7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/1.js","hash":"a8377a14ab0f6d79b8b28f4fedb730ba86dec1dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/3.js","hash":"a9ec36a646e5638a7bfca18a37c43783cdf2dbde","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/4.js","hash":"7328855fd3a30678a3583492aac740ad67884e46","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/index.js","hash":"f6bba9219400ca212286ec311b0599c55b7c4474","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/web/dom-collections.js","hash":"385d6d31fe179117bc3a9d6e332127cc2ab3940f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/web/immediate.js","hash":"80ae5e8c23698071670d4a23567c9bd973894493","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/stage/pre.js","hash":"b8f09007b71ee988657e3918d8adcc085f5cf2ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/web/timers.js","hash":"c59a64cc92aed28020b3b52272608c52c61836fe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/web/index.js","hash":"789fe3478614cd8f2b0a3be84396e28c64c53ab4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_a-function.js","hash":"016951d668b8b3504efa11ea140ff98adc85abc2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_a-number-value.js","hash":"89cf29c2a8290bc9cf2379838e1c25d1d3c30780","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_add-to-unscopables.js","hash":"0314f0d3b6c2987bc37b5dd3f13fecfa976166d0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_an-instance.js","hash":"afe37a98c53bd0b221e377f1879d3222f4d09d52","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-copy-within.js","hash":"c500969eb8b37d4ba571403d48249e0bd722ade7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-includes.js","hash":"aadc82d74f8ae37a1ecd086949cd0543ac79d3bc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-from-iterable.js","hash":"c5c5771d6deac206033506a96ab8abdbb6b722e8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_an-object.js","hash":"1f40d81801e2a33c4a6451b7c533f7787639d029","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-methods.js","hash":"61c03727f0361616c1dbd4b373ac10bbfa4745f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-reduce.js","hash":"4097884ae38bb668ce5867224da5f2c975f8b80e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_bind.js","hash":"20108a0cc0b9a0f12a74e59e55be86ca5a9a08aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-species-constructor.js","hash":"75b5ba48389675e9a6e7f14da5f08c9c791e128f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-species-create.js","hash":"ea972f817b1ba5ca5538fe2b40521d3723195597","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_array-fill.js","hash":"4b480801ed2aa1df175d7ff2fe91e9a71e494380","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_collection-to-json.js","hash":"4dd36ac327ef6e964899c2d468eef3eb6eb3a1b5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_cof.js","hash":"140ea7bea3fa0bdfa83d91b83d587f9080be15c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_classof.js","hash":"c665a826eae98ea2b7b9f239f7991dc1775aa6c4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_create-property.js","hash":"2b1f133bbe0e05d3f2086151e3e2e02f6613b402","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_core.js","hash":"b54dbb1b1de84a1f5ea33861c562a8b1cf51f79f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_collection-strong.js","hash":"20c3504123ea3217d13101d0a3bbd5d364174bfe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_collection.js","hash":"96a3e53abc4e252cca952f1d625dd21d288c5176","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_date-to-iso-string.js","hash":"44a9f2ff34048800acd913267916e255a58b146a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_ctx.js","hash":"30170d4b9d02483c76953c9e3457efbf58246d1c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_date-to-primitive.js","hash":"56c77ba2447d32f8095c1d0785808d0815811bec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_collection-weak.js","hash":"07504511356f4f6455917e81e39c1b9f00f35aea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_defined.js","hash":"21dbef0c3eb36a6bae002222b5c39cd801876b23","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_enum-bug-keys.js","hash":"241c67b20a51c0b008fd49457a8d55f42cc735ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_enum-keys.js","hash":"b1ab88cb8c21614126af8b53d0ea5d2b4e59e2dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_descriptors.js","hash":"beeea40d08ec16a5a027a5e82881a58579da99e2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_fails.js","hash":"97827e50dee39c71168af5c46775d932c5e59d21","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_flags.js","hash":"4f3adef075102ca8ba8c958aa7991bb87fcb7a74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_export.js","hash":"fc7aa777f8cc9fe0587646b7ef314c5007504322","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_fails-is-regexp.js","hash":"0371de81e0e43a2f60f4b262d96e6c73ef6ebc6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_fix-re-wks.js","hash":"de41ecc278bd8553ebdb07814203bcb89e03e7a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_global.js","hash":"62c66a217459e6a6b23ae63b128671f10cac9aa4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_entry-virtual.js","hash":"47f4d11bdbf515fb997f1eee017a6adf6f838903","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_for-of.js","hash":"568c3191f355976bd75687e27ad6139868e93793","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_dom-create.js","hash":"708c0a69f1a2da4fa06e2ed4055a5aed06bad667","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_html.js","hash":"33adf5ef3fb2b6693446406cb8ab19893d3bd096","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_ie8-dom-define.js","hash":"11a02c11edc39c2796064487937556c5c42a97ec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_hide.js","hash":"42487ccccc411d8a958981ef61efcbceee1ccf1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_flatten-into-array.js","hash":"fe146091179f307b5266e492cc85606b4e453927","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iobject.js","hash":"0ea718e6d7831c907c152324b7110806c08d9d31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_invoke.js","hash":"c8208fedbaf6f0693273b4515eee17d11639dd60","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_has.js","hash":"79121fb33a591d7d158ede5d25453314055bd374","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_is-array-iter.js","hash":"11bbf184cf1fa814ce2f8c0e0d5f28e4cdc43d33","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_inherit-if-required.js","hash":"f8d1ccf8ad9ab03e472fcf06c92179d4d3489f74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_is-integer.js","hash":"f641e2c137f51bb175cba8c813f71e64eaa664b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_is-array.js","hash":"c37ecc574d27c8aed45c27b7c7d6688d36efabf6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_is-object.js","hash":"a95397416e0b54b1c8207f91ec710f09ac8d923a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_is-regexp.js","hash":"66314f7d957a027da9a432236b5c9c9165bc5e3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iter-define.js","hash":"3f2c7c756d856cec2e3cdf50d7ed7f9792c90225","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iter-detect.js","hash":"7eade41047d4fa07c0dde891b44022b1d7583302","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iter-create.js","hash":"4763ce238cfc9975c74bb182cc08f6bc1878d341","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iterators.js","hash":"6d71154c41bc03acd3768f7a365efd35cadf4e46","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iter-call.js","hash":"fc3aba2edc53f037c7cd494896e57eafaae0d1b7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_iter-step.js","hash":"ab29ae76c6f3fd0de3f4cdfc1ac2aebacd3d6b92","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_keyof.js","hash":"0a36bef196d14f0df2b4d6fdba5d2d97e7d5506f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_library.js","hash":"b7eb1fa8fc50d45836e7b1967912ca8ae3056b7c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_math-log1p.js","hash":"7a12ffb95d45508b17fd3a8f74814198d190bca2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_math-expm1.js","hash":"33afe1cf6cba7c02c261abeb03e1e5fd0144147e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_math-sign.js","hash":"de7de668bb5350ae5cdccc55864b81e6e08049d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_metadata.js","hash":"5435c9ab3e7a024dd0ced39fd49a25304229b005","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_math-scale.js","hash":"79143837e35b35f76a13edb9c3b2ff8198b3a9dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_new-promise-capability.js","hash":"691960fa1b5dacd0756bc49317a8ecc01e0c7df9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_microtask.js","hash":"63601f87d8b43f7f3c8b97541cc3134c8faa9113","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-assign.js","hash":"d21fe43c808f022e6d448a6d02458e1b14d08068","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-define.js","hash":"ff965426dc23f8201391226c2f224847e440f782","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-create.js","hash":"7469b3aa75951e4399164c6248bb414bcef02723","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-dps.js","hash":"c26a092cf18f413680dbc1ed23b51630fbc48ef3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-dp.js","hash":"436c3d4e9dfc031a79b38b651e12fb7f0dd1c306","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-forced-pam.js","hash":"288c9bacae800257c0589c7759929bff84064b6e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-gopd.js","hash":"b1866473b6035f56507d2a654481466440621d90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_math-fround.js","hash":"880f0ebdc5b6c49ac37ed57f1f866b2f82d316a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-gopn-ext.js","hash":"c371b70c57206a77183b139365a8338a928f3746","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-gops.js","hash":"b9f5c998f75613e6d1228fa23f7feb5d5a1e5770","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-gopn.js","hash":"6b4f6536fbb97a88152e1a16bf0ec46cdb406d31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-keys-internal.js","hash":"a34519df37a2711e64dabb64d4a06e32ebb3d1d5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-gpo.js","hash":"bbddf24b80f9173bb72c3c12e397f46c39cdc583","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-keys.js","hash":"c1a11350ae836ced1746d0d181985c40ebf233ec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-sap.js","hash":"2b702367dfd4c87d8039ef50e5710ddf663f2289","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_parse-float.js","hash":"be604795bd336b946cc2b601cdc05009f516e35e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-to-array.js","hash":"13de05701247fce0e07efeec862d60fd6c5151be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_object-pie.js","hash":"b9adce7a393cc4425bf0e1bbe81f9758dc696427","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_own-keys.js","hash":"b8fdef8d65c2a854499f9b2138adfa49aa8d0b89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_path.js","hash":"00ba09f9f9129e8486e638c07778ea638feaec4a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_parse-int.js","hash":"6ef64b6e77f5473814780ed952c65af39066b323","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_perform.js","hash":"ee2f45fae924ed557c69f3e5f9fbde3485144e3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_meta.js","hash":"9ac19bdf05cbf0c82b2aed80e350c645b17218a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_partial.js","hash":"5e9bccae0081e59c25b3d75ce59d60b54bdd46a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_redefine.js","hash":"01d633965430658b688b22ccf674ec76280adc19","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_property-desc.js","hash":"a173208473cd5d3b7d7a3997dea92c55a01f0333","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_promise-resolve.js","hash":"bd2cd36e9b1c44a102bf204d00937c71cb5e2455","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_replacer.js","hash":"9b60eab7b4c41e5fe3b9bb33a4a8bd3ffbd52f6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_redefine-all.js","hash":"24048e7f3b8d98dfd90373bf67b3d01096b85f1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_set-collection-from.js","hash":"21f1478c21cbc66185fc2883a7b45eb862b46a2f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_same-value.js","hash":"25cdfc36640038b5bdc6753f1ca1b6560790db6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_set-proto.js","hash":"ddf359673c9105f4a242a670c6153509ffef1c57","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_set-species.js","hash":"0c0c873da83c3c3ea9431ad2b5ee935fb7243bec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_shared-key.js","hash":"e7adef1543db08aaa59004afb00196b953b9fee1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_set-to-string-tag.js","hash":"0707cd6b53136a9431b21c9640d0b62e52d60e95","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_species-constructor.js","hash":"84cc9fe7d62b5c38d9dd630ec5d77ded730b8cd4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_strict-method.js","hash":"bc7100447b421737603933a59927174d547ad188","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_set-collection-of.js","hash":"efb9c3272bd8a41909711a617ebdff7534bbe17f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-at.js","hash":"89cb57be2327fe81e53bea8239ab9c80c3fa5784","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-html.js","hash":"2ec6ef81485ab85231ea83bcdb60861fd8453249","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-repeat.js","hash":"0937d2ec080ced18afabb6b9b309a3f078945ef0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-pad.js","hash":"efc7cba5e7b78e8654367b5f246c837cf38bf577","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-context.js","hash":"6b36c10849e29d85be74ee0f7b3c70d57d44aac4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-ws.js","hash":"810e8ee92e022afa0b627993a426870450d0d4a1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-absolute-index.js","hash":"d1572f01ace068e65c370a4d04d1515e4d366931","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_string-trim.js","hash":"a0f9cf7a737ce72228b6b01aeffe3edc1d78588e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_shared.js","hash":"e909bcad1bd7e2655abda5d0141ae778c9c8a81f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-object.js","hash":"0263e492ef6fb466ee301974d96e597c074d0215","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-index.js","hash":"928cf808af421e16801f475e72e9d85db6505f51","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_task.js","hash":"30aa426fb1553cacc6543555532ea8e93f092736","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-length.js","hash":"f9cb326832b5f48b995eb28977645602e21b71e3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-integer.js","hash":"fd2955e9f0f08e509a3350d44cde95eb93de5768","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-primitive.js","hash":"21ac2dec6272919b687e51b5674fbf6cc470e656","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_typed-array.js","hash":"79024bffed2ee3e7473a8fface575f9715b72eb8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_typed-buffer.js","hash":"e474cc7f9809a6eeb8c073cbee6ca3563c9dc90b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_to-iobject.js","hash":"5e7f034eb89e27cc6f59d12a68617bb755e06d2c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_uid.js","hash":"fa411f0b8a4606f43dd7439fcc092650998bd183","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_user-agent.js","hash":"9667e9299bb8a83ea7e18ca993833d3b8d2ff66a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_typed.js","hash":"2679afbed9bd60d34ad19909224c30d7aea1fcdf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_validate-collection.js","hash":"9f0d734cddf1c80ae90379e85686a9e959a28432","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_wks.js","hash":"3b33ecb0f2975f954ff26cd34eab3e7d3f8fbe68","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_wks-ext.js","hash":"52ebec5699b44c07333384df4eea2666d7d89add","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.delay.js","hash":"1bfb45b425ef0107ad77c29de550b5550a704d85","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.dict.js","hash":"54c21beaa6990a943523b333fc9eea98895a50de","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.get-iterator.js","hash":"13733d4cbd08f0782f0fab4a29f6d16339b1dd6e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/_wks-define.js","hash":"5c27909cf6f9bbd3ba36c5bec2f12b2b1d0b27be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.function.part.js","hash":"b5c56640236ccefd06dd378d9fb8c4edabbf0e90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.is-iterable.js","hash":"b7a50639d842d76858955dad6f7ec7297a9f81ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.get-iterator-method.js","hash":"ecd68afd841a0be41e958376ffb6c9f05ecf75f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.object.classof.js","hash":"81fff05e05990f43142b1333c1fbfd5d759078ab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.number.iterator.js","hash":"c43fa5b3839925321e789892ebac43835f70444e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.object.define.js","hash":"e2f25c2369a3f8e9ed063fa473fc185cb33fc20e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.object.is-object.js","hash":"abc1301c3bb0f68f62ba95b81f7b79872b1890ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.string.escape-html.js","hash":"478e196015aab7984a2e8f87b171fb250f148268","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.object.make.js","hash":"cb21642f60fbae31bb66c27950d0b4f1d3d72b3e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es5.js","hash":"08c63bee2ff4dea036f52cf1d089863cd5255cee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.every.js","hash":"1d02f1e9b3f4457c4e4a038d6e5baef19969fd22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.regexp.escape.js","hash":"5f21e107097a5575ecd2fc6d791e94c2f465f73a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.fill.js","hash":"bd15e5daf4c161d8a6b1b054b84cb2e37de6e9bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.filter.js","hash":"863948af7f813d423f37d2a789aaa2def621294e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.find-index.js","hash":"307621674c6642769c2b42347a014886a28c6baf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.find.js","hash":"2317f054697833ceca2058c8a43e859149c89f9c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.copy-within.js","hash":"8bea385deaf272d2f1eeebd794206c3a867e1a50","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/core.string.unescape-html.js","hash":"e6a6dba86367e902157322b680769c5fb4211a01","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.from.js","hash":"c00ef163afc707087d2a329ca5b178f5f36d8cff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.for-each.js","hash":"5fb6f5153f62e29e12c69c3679af79b4649af97b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.join.js","hash":"6ef7d983b9cea36680a5071c603cbb2a30c66425","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.index-of.js","hash":"69d30167b7c9b9a1ff8ce75ebc67c32de698089a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.last-index-of.js","hash":"61d6224a7b96acd2c9a619efd16d2c1ca35b8a8e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.map.js","hash":"44ca3ff6cc49a6af7a01fb30e014ac2ffa0d899a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.is-array.js","hash":"e5915ae62be75d6dca23736f2783d268f087dcc5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.reduce-right.js","hash":"c489385c5cf2c452481aa8f8d604087ada95bace","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.of.js","hash":"5950d079ff9a2aa3d0879c35c721afe784757d08","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.iterator.js","hash":"2655d1294e495cc8839023eb4e72f22807275852","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.reduce.js","hash":"09fecb0f8d37784bca383845f71a87f6810e6ac0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.species.js","hash":"81ad28dc4d2e601ad0fcb4645980302e14c26268","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.slice.js","hash":"813477fe950e8d270b65511d538d04d9f8466847","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.some.js","hash":"a5cf839f7781b962b0ca41340bad5e158bed29d0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.date.now.js","hash":"3f36a5d769b5d9dbbf6b63bde7e37af3d83c2244","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.array.sort.js","hash":"0e9183b733bf646dd5bf9d7ad710f84d81e6d8a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.date.to-json.js","hash":"3c2189332bf9d09e4abe54462816c4efdc735354","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.function.bind.js","hash":"14f42c81ebbcc547d361e689d0083d5a3db55543","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.date.to-iso-string.js","hash":"3a945afff6423724892f7daacef0c2d79fa73a37","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.acosh.js","hash":"17da1380c3d5b622c22a2ad0839f2673e3c2e787","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.map.js","hash":"6d66825f45ed4984abbd425cd1521da242365c11","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.function.has-instance.js","hash":"bbb95f25ffe7463ba463355803559b8b68439417","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.atanh.js","hash":"6066c91187209944e2ed0cfb5f6a37a3e94a094f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.cbrt.js","hash":"60410068183522cb5d2529ff5c3f44bedcae35d4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.clz32.js","hash":"b53cbda6e039e7fd9dcad17ef9149f0f539f004d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.expm1.js","hash":"bf648e02379a38038e2af153731fb40ae6a1d503","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.asinh.js","hash":"68a91e3b0ba51101a30cd0e89f284267ffda3883","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.fround.js","hash":"1f5a0a7e04f2f833e7b9b03a1be35907560ce450","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.imul.js","hash":"9b286cbb3433294640df916f2ea15f9e4871a581","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.cosh.js","hash":"4bb3b6f0771c14470840c9c268d6811a2cd7cd3b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.hypot.js","hash":"a6e566820780802587b03d00aec375a27b241b37","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.log10.js","hash":"f07ed986cb306d1bfa741a2ca0dbe1139bcc1294","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.sign.js","hash":"b21d1d587e5b404c88df73ae0d974516a3d4b401","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.log1p.js","hash":"86418d77f024d356cdac5d088d5b9d290c934db9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.sinh.js","hash":"dfe7e669c306a0417d4c2467131f2b1b0aa07fb5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.tanh.js","hash":"8336bad0aabac96f6100bf3eca9ec37a387d72c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.log2.js","hash":"0d6dfc0de21db752d757a24bf50a701922400037","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.epsilon.js","hash":"3b4d6e0d643df7898ad463e3cecf7a25209182f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.is-nan.js","hash":"26933a54c17eac2a6caa2da594fe3cb0108a074b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.is-safe-integer.js","hash":"ff5459e02406058fd4b772f5795561060f3a3bbc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.is-integer.js","hash":"4d771017f5cdede053855503efb0a92f1bab7d90","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.is-finite.js","hash":"726186bffc18586f1ed0e1797f541710a126c487","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.max-safe-integer.js","hash":"d33ee9ff9836cb9d1efa5d64423ea7a6bb13f5d4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.min-safe-integer.js","hash":"ed87dd436f9058501f7f732963b21304613a5ede","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.math.trunc.js","hash":"42b8fd67ce7acd601b89ef5f6e354e58c06c1b1d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.parse-int.js","hash":"47458fdefb649e019a3eac2d623cf8ec4cc28918","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.parse-float.js","hash":"83401bc7fc16201dd462c020c64335f1aa3495d2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.to-fixed.js","hash":"525666a910e1f099d182d6716221777ff96e297d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.assign.js","hash":"52238ff9eecbfb5b926d12c6546f1b92409633b5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.number.to-precision.js","hash":"b925da733b919c78adfa61fd7a0503e424f1a7fe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.create.js","hash":"1a5d8fa0ff4268b651cb63ab8b57004c145aa73c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.define-properties.js","hash":"f8309c4f31975e4a6c2c818358e7e2db0e7f951d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.freeze.js","hash":"603fe33698fd6dffac17af4ed4505cf299389776","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.define-property.js","hash":"fb192c6675776d379d31b38fe53de3b023cad121","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.get-own-property-names.js","hash":"c32969a038666f77f1355ff89fdbe86185c1aa8f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","hash":"0812898a4340f3dd607e5b96621a8702a061c434","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.get-prototype-of.js","hash":"843a9df8b46d9498540d0c92c95e5e9243a8d267","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.is-frozen.js","hash":"338b40f0359a679b528be98be3a5f4bcc41f3541","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.is-sealed.js","hash":"9bf58eccddf9e81756bfc0c3fff06fff9fc2fc01","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.is.js","hash":"f1ee304c27bcf7d3252b6470417375ec8433f263","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.is-extensible.js","hash":"48d4438003aa76461f1d928adad49cfc4e1aeace","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.keys.js","hash":"0f1f8c37e22d70520814d07e947a861ceb968747","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.set-prototype-of.js","hash":"7eb0bf22d40880d684edfe69edb5e31557359b48","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.seal.js","hash":"2c63edd2c813c5d771bce5376fe709f645437ca5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.object.prevent-extensions.js","hash":"44712aa6d1010a706ad4c6302e85b873af94eb8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.parse-float.js","hash":"f88a2ef1976f43f71a4bea2a47e6ec7baed18695","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.apply.js","hash":"14819902d1a6a3323b2a22dd81c9c32a499f3be0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.parse-int.js","hash":"8d749402171737a3c730cff5c7b9c349115bd04c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.promise.js","hash":"a63c7389a4fdc08699052ece441b43189692f0b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.construct.js","hash":"63d6ffb1dacf6eb3a02924fcb6f7c8d196678e5e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.define-property.js","hash":"fcf833bcab52bd2efd5ea2808683f70e860ac696","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.delete-property.js","hash":"d6345bdfa38d830bc4a60866b325e9b7c067071e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.enumerate.js","hash":"a68277621b6b207e7e1ed99aeddbc2b88f56bb82","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.get-own-property-descriptor.js","hash":"2ff2323337699cc8f003991d14e75d6f1e6afbcf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.get.js","hash":"a3e1412345d6f6b07a00bbcac09ba121f1ad30e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.get-prototype-of.js","hash":"9a2a4f691bfb911c8ea6747649bf97580cc9f707","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.has.js","hash":"86b29f81a9732e12a973d9a54903cfa7d7bdc95d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.is-extensible.js","hash":"aa128dcb565d0154ac62b07cf77396da8d884725","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.prevent-extensions.js","hash":"97801384a4ef874be160e002eda9a934bc0379f5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.own-keys.js","hash":"93a111807621b46a8d53efa967890d9283328047","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.set-prototype-of.js","hash":"ea79c75b8d47f10475bc1b45cacfc93a25ca2792","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.regexp.constructor.js","hash":"91d43bdceda09d4d91dd2a7bcfa7a891f128fe83","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.reflect.set.js","hash":"1b6f8de5c1df6b890bf645848e0b2fdb9b94fe6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.set.js","hash":"3cdf5f06297e9cd7f080826579fc208ca9da8466","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.anchor.js","hash":"fe572983fa6c4010914c329c2f2157a3541a7575","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.big.js","hash":"320190495a2d11b74e2d1ea04fe77ce663cabdab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.blink.js","hash":"cae4f21a2beb175466ec4e9509f46a39b2cd1332","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.bold.js","hash":"89c35b678679dc628b0af847a0620ecd9175adcf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.ends-with.js","hash":"e7c9d588bf9c7d7b8dec48ab21c68227c5e97ffe","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.fixed.js","hash":"a73d3c523e1c0096dc31016d6383e81698139459","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.code-point-at.js","hash":"798f0b26886f992192a8582b28e58bbfdd14217c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.fontsize.js","hash":"89a6b57c29ceb0aad8d31da2a30db16dd937ca14","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.from-code-point.js","hash":"02ad5fc360634ebe410e50a5b4891f48be060a00","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.fontcolor.js","hash":"34d5a6e6b44eade721fa31dc2176ecdee5bbc4b1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.italics.js","hash":"3d1352dd4097d615543d228a072237ad9d08fa59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.link.js","hash":"5028f460660ef1221a1ee706e1abff1563a2feb3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.raw.js","hash":"affe6dbbb0a1a08ba6866655819701d8bb4eb978","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.repeat.js","hash":"36efdb394692add15b546f016bd05700c584ff5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.iterator.js","hash":"380cab9516fa51d03a853a22e49ebc7044825fb0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.starts-with.js","hash":"87580e6ec681fc8faf92f40f5548a9622232dbb6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.strike.js","hash":"eb40e6bfffb5466a7e2ab6627040c03494b0eb7e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.sub.js","hash":"bc5e467ed52d746362ce5444006b36912bb822bd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.small.js","hash":"909b386f4a5224d847952d453dfd4d517b70e0ac","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.sup.js","hash":"c563a0d10a98c9deda8b6c003a64844f291223d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.trim.js","hash":"743bb333e6cdd69bd7f443b0829de151660126c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.array-buffer.js","hash":"a9283d0354bd57dddad60ef64dba766f8b19f63c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.data-view.js","hash":"c15ea398efab13edfa97e527a73d79097d71be55","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.float32-array.js","hash":"2b674626f080893bc4e80b9cea4e5698563eadb5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.symbol.js","hash":"c681059f1dcda1c45ec7b135fba34a3def6b1f02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.int16-array.js","hash":"da8a19a1b80a2eee8abb4059dae924e853ce90c4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.int32-array.js","hash":"83d979d22a2c443c8e078865573b04ac201e0399","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.float64-array.js","hash":"0196b9f13f329d99ad66b9fe4a631aad62c67e66","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.int8-array.js","hash":"6a2baed32d46ea5cec53cecc0442e89f6e0f6551","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.uint32-array.js","hash":"99648112929e26113d74230b883d53514cb806db","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.uint8-array.js","hash":"6c2c819ca18ad0035b081280a6237f4bc38871aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.uint16-array.js","hash":"5fbfa8ad1113f23f72008ade2ea96cd6f103f9ea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.typed.uint8-clamped-array.js","hash":"69b1971f56f444a0f32c304f272de52e3e9b464a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.weak-set.js","hash":"61bd9e0ebe6c8c30eda972e1e25086735ba618ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.array.flat-map.js","hash":"02a4022c272d14d1ecd91cd632021d852c34d0f2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.array.flatten.js","hash":"34b1f849f242a4b9f5ddbbc51ffb08cb66896254","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.string.includes.js","hash":"53031ede9409714ab7b156a77f94d0f30fb6d8a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es6.weak-map.js","hash":"e68155f4413814779480a11f053f1f6d9995a7a7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.asap.js","hash":"5edef0c4c7cbf59f8ccdb5e6386c2efec841ead8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.error.is-error.js","hash":"6d6dfa14fb57762ba3279ba761aadbead1bd57d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.map.to-json.js","hash":"bd4b1029e4edc669f8e0f971b582180004a229f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.deg-per-rad.js","hash":"4b890d363e3c40b66bb7a8e25288ca8633a9e0aa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.array.includes.js","hash":"f7fc98a62305fa172d950307c9730ad980b1c0bb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.map.from.js","hash":"4cffe0dea30d8e423a0cff0b4e9d65a46a3395fc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.map.of.js","hash":"e5da6050f39b4c3a204637e20883dd7850317282","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.degrees.js","hash":"1f226106c3addbdd5f267394ddf65e41a1788e89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.fscale.js","hash":"40b4578eb13f3feb14b7654308f38420e0139450","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.iaddh.js","hash":"b2e5818ee649c327abddf0d1eadada88db891bb1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.clamp.js","hash":"a22301cdbb20c0ef2a260dc5a23972c672e651ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.imulh.js","hash":"49434269a547bd9dcfe2e0a0a7c1dd6590ca81a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.isubh.js","hash":"661d2ddc3228dbcb37c10672dd1314ee4e3819a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.rad-per-deg.js","hash":"d4f03cf3ffa18a5dc2456f0a1e39e65a96886cc3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.global.js","hash":"15a35ae33d4ee8ab1f14ffefb24c1c1e29e2fc60","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.signbit.js","hash":"0cbb73cfe9e0a3848d1c897424a31a09c00fda03","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.umulh.js","hash":"76ccf44bffd15601f901439e4a28a1098af99c34","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.define-getter.js","hash":"7ba6bc1b6c70fb5142bf6f2550ce0b538cb7ff74","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.define-setter.js","hash":"061ce4b3c33febbf6f29c183f891d9ecaab5a160","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.lookup-getter.js","hash":"075124b25f737ef93946ffb79dc92240d973203b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.entries.js","hash":"6fb24bd186c6855e2546de16054aa73b7f49e90e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.scale.js","hash":"96e94fcf2ec3f3322529eff1af6b26cace9a6fdc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.get-own-property-descriptors.js","hash":"efdf3d55eb6b97eaea5db5247ec009517862aa9b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.values.js","hash":"6e4646583e6fed26d50565630519ff35343e9c18","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.promise.finally.js","hash":"3612e83d5fbcee13728838a580bf8779bd012efa","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.define-metadata.js","hash":"b53be80df64217ef6b6536ddead128dba611fc9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.object.lookup-setter.js","hash":"b1552293f893f29e7b7b7c66f9b576039a493e62","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.observable.js","hash":"e7d4d3db8eb3e71225f92f4c9868b2c24ce608ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.promise.try.js","hash":"3687d6f41779ec8f675c59064e29a7a64afb5083","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.get-metadata.js","hash":"caec777aedb6c5f91fe2c309b02c611d5627368b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.get-own-metadata-keys.js","hash":"6e973c1f4d338e24f989df822cf2b7e4e1f0feb0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.metadata.js","hash":"d4511391917c4307466611bb7605663a36675b89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.get-own-metadata.js","hash":"d004d45415878719d4aa12ead552d9cf398e6ccb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.delete-metadata.js","hash":"1d3a0c994cc689ee5257834472c8b8a415817b1d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.get-metadata-keys.js","hash":"d31ec9c4b28ba0aff609cd837c866fedfdcaef12","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.set.from.js","hash":"429a204d7601be8e9381abb28c95c136b4167490","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.has-own-metadata.js","hash":"6c1d3bcc2de0941948def54100d187c9ddd51fce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.math.radians.js","hash":"9b77eeb091097b1ddcedf75b173077b4696a5ca9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.set.to-json.js","hash":"8a5bfc86cab82c8a6dcffc9ce3e8fda2afb5d8c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.set.of.js","hash":"628b259f38ccd5facfb69fbb420ac057ae5ea5ac","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.match-all.js","hash":"3e3c812a8edd3555c7f5942e54cbf9382c1f81a6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.at.js","hash":"697abd7d44e19f49d71182d4ab786b18ea0acb88","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.pad-start.js","hash":"791fc76cf262861a60a26545d39c052520b3e6ef","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.pad-end.js","hash":"2c1e63716d9ef9944c4d13cd36895e66e1262a58","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.symbol.async-iterator.js","hash":"8346b4ea52bd0b07dbf8e166cebd8d650bc5ed07","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.trim-left.js","hash":"0eae79a50db7277efa7e436162b28b8e531127fd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.string.trim-right.js","hash":"2fcd9b316ccc4917af7b52abf1558e68366ca635","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.system.global.js","hash":"c764d7bcc89720667ba4f39265f9f5aeff70ab58","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.weak-set.from.js","hash":"a082f262daf6a1902db6139a48fce28b3e4c0ef2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.weak-map.of.js","hash":"b987ac2f7c8479d9ca0c5c225cc29067c68b2841","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.symbol.observable.js","hash":"d3956dc9cf359b8d71344b01fd10d2a6da7125c1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.weak-map.from.js","hash":"ee4cac63f3d0674b9f7b9b798590f30a4ebe4ce5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.weak-set.of.js","hash":"bc60f7f6e1059c9b480bb1bd76ed6bac23ffdf4a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/web.dom.iterable.js","hash":"1390cd48fc99a3cabdaf043966cb537026a8da6a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/web.timers.js","hash":"0c4ce86177cfce33b975990cba5fd499dc009000","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/es7.reflect.has-metadata.js","hash":"4ffe2bda3bcd6343bb0a3d75af879d7253f316d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/modules/web.immediate.js","hash":"60e58a4f98a3aad155ea880bac1d96261386684b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_add-to-unscopables.js","hash":"0314f0d3b6c2987bc37b5dd3f13fecfa976166d0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_collection.js","hash":"96a3e53abc4e252cca952f1d625dd21d288c5176","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_path.js","hash":"00ba09f9f9129e8486e638c07778ea638feaec4a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_export.js","hash":"fc7aa777f8cc9fe0587646b7ef314c5007504322","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_redefine.js","hash":"01d633965430658b688b22ccf674ec76280adc19","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_redefine-all.js","hash":"24048e7f3b8d98dfd90373bf67b3d01096b85f1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.date.to-json.js","hash":"3c2189332bf9d09e4abe54462816c4efdc735354","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_library.js","hash":"b7eb1fa8fc50d45836e7b1967912ca8ae3056b7c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/_set-species.js","hash":"0c0c873da83c3c3ea9431ad2b5ee935fb7243bec","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/es6.regexp.constructor.js","hash":"91d43bdceda09d4d91dd2a7bcfa7a891f128fe83","modified":499162500000},{"_id":"themes/next/node_modules/core-js/modules/library/web.dom.iterable.js","hash":"1390cd48fc99a3cabdaf043966cb537026a8da6a","modified":499162500000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/-internal.js","hash":"fd69cadbd59dd8ebc5faf5e626b7a58556595672","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/asap.js","hash":"84a3f9bb0cad250692ef0ea34528b40e6de89867","modified":1513709731000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/enumerator.js","hash":"34f692bf3a8b44db8d878521c9f4699d5055e931","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/polyfill.js","hash":"8d16cedd94fa7334ffbbe03d19c97a750b41dfe3","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/promise.js","hash":"fc1f8208760516b2f687a3bdd4a93a64192eacb7","modified":1516734770000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/then.js","hash":"b7beaca88e2089e99f267b5668231ea4c733a987","modified":1485530028000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/utils.js","hash":"64e88048c8c1fcd58690b397272e80ce3b7d2a04","modified":1513709731000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/.eslintrc","hash":"9249b5c46b21d7e51bd0d9ad96c27d7a7a1d720b","modified":1506087694000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/.coveralls.yml","hash":"90709e4fb4ce17729974b3a140ccbf330519835c","modified":1497485783000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/.npmignore","hash":"90fef7cc1058bd0f85b0959c4fcd49230a29593e","modified":1497485783000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/.travis.yml","hash":"ad20938f07f056cbbdb35383aebc88feb5ecc361","modified":1506087694000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/LICENSE","hash":"d16a2786962571280a11cae01d5e59aeb1351c9a","modified":1497485783000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/Makefile","hash":"27ba9abecf06bf547905c50f5979caff65574b4c","modified":1506087694000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/karma.conf.js","hash":"93fef7cf3ed6f04d2cfc3cd0b8d5d972d35cfd29","modified":1497485783000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/package.json","hash":"517290592af67065a72ee02626fb0cf8e76c945a","modified":1537585159152},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/node.js","hash":"aa7655ee80c9a485313675f9379c2f18d33ea061","modified":1497485783000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/ms/index.js","hash":"0d10ee921436fa5ff5988445cc67676219dfffbe","modified":1494937320000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/CHANGELOG.md","hash":"9e7ab0e94f1d90c8073a4f75c79e01e2d86bef4c","modified":1506453203000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/ms/readme.md","hash":"e875d9fa741fe44893c778974860f362724e35ec","modified":1494937493000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/ms/package.json","hash":"7bdff28b18a4d24ede7763623d8e791724f6047d","modified":1537585159152},{"_id":"themes/next/node_modules/follow-redirects/node_modules/ms/license.md","hash":"884e84ebfddafd93b5bb814df076d2ebd1757ba8","modified":1494937320000},{"_id":"themes/next/node_modules/javascript-state-machine/demo/images/alerts.red.png","hash":"eb3d8e43123cfeec114c68ba3c2cd928fc14682a","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/demo/images/alerts.yellow.png","hash":"9da35f0d7f4af105916b4dce55d22edfd62d0116","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/demo/images/alerts.green.png","hash":"5a1163483fec8e9d9b5bb6eecdaa0a619bae07cc","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/test/qunit/qunit.css","hash":"8e307f8643dd75d149338665f7180dfb5c635612","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/test/requirejs/index.html","hash":"74f96d28a7c19c9ed4a86d5713e95459b6691963","modified":1479584424000},{"_id":"themes/next/node_modules/javascript-state-machine/test/requirejs/require.js","hash":"73567c842c5287e1ae81e6dba50ec06536aebe36","modified":1479584424000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-min.js","hash":"aa374f4a0da53443b4abafdaa106c33b3a141d0b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-rn-min.js","hash":"3e417b3066a1f6a8e804c0af6308b19812a9db2c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-weapp-min.js","hash":"5f996edd5be44d7e12de83ae8a255de7b8289d5e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/app-router.js","hash":"8c0c7dcf119059b071b9184021363e7ee72c2bc9","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/acl.js","hash":"180b7d324fd83fb6bbdda052378ca5a5085a4a97","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/cache.js","hash":"ad2666df4755d7b5de9873f09c15132587a0c516","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/cloudfunction.js","hash":"ff3e64e2c268bf8cd25f8fc9b1eb749151bdd94e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/conversation.js","hash":"26613f97aa7303dd33d14ad977aedcdc7de32502","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/av.js","hash":"606ebb7f98ff793cde079e91093ecb88379ce7bf","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/event.js","hash":"3af966776953537f2ec9d68018a6f7a5fb837ce6","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/geopoint.js","hash":"7212ed7aae51a3fa04b09c441b966865879e00f5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/file.js","hash":"a433ab4fee1263a31464063eac76a3f3cb00ae3e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/captcha.js","hash":"477cfa060da2655a6e2ad15d3b195d770d0dd58d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/index.js","hash":"d92506fe04d6a575ff5ddee0b0207dd79f9618e3","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/index-live-query.js","hash":"05c98830352312fd6fa06ed1687d7d63f8ab5340","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/init.js","hash":"100dfa752b8e6301c4495e21ca5cf2c41117d05d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/leaderboard.js","hash":"e3980f334949bf04b6d0329310d654049081bc1d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/localstorage.js","hash":"fde4649c4bdca4d12ac2f8c3fd1d0749373c69a5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/insight.js","hash":"7dc9b46b09d159ac0d198364e7e0285c08310541","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/error.js","hash":"b7a8006c93a30c273e26147ce7b29c0607fd2a45","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/live-query.js","hash":"e5df32fdfb82eae0a4c0988fd17a02fdda68fcf8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/object.js","hash":"29d5c702ff9825efe7445b5a16a78da32bf811c8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/push.js","hash":"6673ce6ba1b6d427de16d4a1ff4d41b131a72f67","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/op.js","hash":"098677495ca0d5d0182d6d9d62da5edb3046c6a8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/query.js","hash":"99115f7a043a05d43a6679cb7b4350e77871998b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/promise.js","hash":"ab3c7b20e879fb68a99934fe96860244d58d588c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/role.js","hash":"a7235206cee7e930e43c1b8ab2ce36e83520f9c2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/search.js","hash":"c48c0d76aae1ff87fe2560dd50332a71934229cb","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/relation.js","hash":"ef74b4900c840014fd54365d8b94dce48459ac4a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/request.js","hash":"2fa6e39f1272baaf41a595f36b2ba7564a30582e","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/version.js","hash":"5f98ff6ed5845a17d2b74a35ec8c220f7e6cf604","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/user.js","hash":"7b6dd0071f783bbdfc05bc288a2f86fff2f9d22c","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/status.js","hash":"b4dbc26a5dd637a06cbf6a5385a9398777c6abe6","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/AV.User.html","hash":"c05ddb2bc35cc592738d306f61be00b70e942d45","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/scripts/linenumber.js","hash":"ccbf2747b02c5204bf135f3b48fcfb74540c62e8","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/styles/prettify.css","hash":"d0354fc14b5f8865fd6843be22b52380be08176a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/styles/jsdoc.css","hash":"1cfddc9f5465f366835dff3b694532096cce58c4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/LICENSE","hash":"10457f3cb574cbc7bf1d82e2b1262219dd144223","modified":1462734419000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/package.json","hash":"c94f2f120777dc530e078e8299028bf85c3b7c1b","modified":1537585159153},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/index.js","hash":"5f6cfccb3a39939a4d27412c71c1f31fe358b640","modified":1514923040000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.js.map","hash":"60db0352ed891a18707b0dcc900537c5db70da19","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/index.d.ts","hash":"1e2f1676741d48bbf2a30aba502378b637819328","modified":1524684931000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/README.md","hash":"a7f6f8274e6375e8b9bd6032f929b65727519758","modified":1511976290000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/conversation-base.js","hash":"d17b5e2f42535dfb3ab79078dddcc6a4e7e5691f","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/chat-room.js","hash":"c2aa7479f6bc8cbb18aa3ecc070aea1e6c7c32ae","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/index.js","hash":"8e49980e3e99da1d1de0cdaa30078783f053ffd4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/persistent-conversation.js","hash":"23b3646db57c9ed9ef386ed9871deb9edb0d3ef0","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/service-conversation.js","hash":"5462a47ad2a7fb500201e5e4a2092ca89831b165","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/conversation.js","hash":"aca4a50d6d3ab0d2f2417f202233a339bfa17f34","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/events/im.js","hash":"127d9235c3bd6387d09db5f353ac2022fb97cd23","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/events/core.js","hash":"4f1ed1766e3ec18759e7f037745ff0d0641e6593","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/conversations/temporary-conversation.js","hash":"cfc6be637e8e1d4b3f6f76ffb357c67a2d77f715","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/binary-message.js","hash":"3d61026baf41d8f9393a126c9c8fa8a7c8b9f1f1","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/message.js","hash":"ec258d1e7e1ba241ea9907822a54388ce4325190","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/helpers.js","hash":"214bf59a7bdd8eb144ad83968249189faecddff6","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/av-message.js","hash":"7e834d991773dfe421f0e249ee277729b8997e36","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/polyfills/polyfills-weapp.js","hash":"1fd2e728c165472d434e235f192f974b23de93f4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/text-message.js","hash":"da73807bad6250ee2f360c51497d3483b18bcee2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/polyfills/ws-browser.js","hash":"c392ab77a8e2c44d4c7cee6219f8a8754a515b83","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/recalled-message.js","hash":"b0af0220593e150a18591fcb182b747e4d3acb88","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/messages/typed-message.js","hash":"f258530fa621d6d0b9ff11e97134e1bb3b76b3b5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/utils/global.js","hash":"aff95b8da3374b236a01a0be16a498e5f392c108","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/utils/expirable.js","hash":"36390d31fbeb114294a44c3e4f65589797d0abd0","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/utils/cache.js","hash":"ee50f0dd328650c5587f63daa45f4308c55ed920","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/src/utils/index.js","hash":"b280c5958f4036794d2dbd02525709d55bc7a982","modified":499162500000},{"_id":"themes/next/node_modules/protobufjs/docs/scripts/linenumber.js","hash":"ccbf2747b02c5204bf135f3b48fcfb74540c62e8","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/util.js","hash":"ce6239f4dba776cc7bfe7170640c701cfa80c37d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Bold-webfont.eot","hash":"88e07164acfdb480c1cf6be262cd5b6937b9ca14","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-BoldItalic-webfont.eot","hash":"52b86eec6342845e4234f15c63ac94a6654be60b","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Bold-webfont.woff","hash":"8cf65f42a2a8c349ccd6ab63b6cbd17c96fd665c","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Italic-webfont.woff","hash":"1ae6b2d40bb12d7600f9498eca7cbf62f1c1bd32","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Italic-webfont.eot","hash":"82156b1c2e259609a3ec41b1532874180d9d4c37","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-BoldItalic-webfont.woff","hash":"32b5b01161c8dad08352c59672d6e29d5dc593d4","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Light-webfont.eot","hash":"3b118f81ac22a995f7ce5faf2216012b5d217adb","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Light-webfont.woff","hash":"523f9403d934ba017bfe924cdc40f1bb0e5d97e2","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-LightItalic-webfont.eot","hash":"699c42202c6a3ce56fbb8929186e9662fe5d6aa4","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-LightItalic-webfont.woff","hash":"d6afa745fcdb941c95c811e20365128ca5aa73b0","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Regular-webfont.eot","hash":"a64c0e7003dd8ec5e9d265956dbadd6e8b12c155","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/styles/prettify-jsdoc.css","hash":"f67de4031b53cf5986d680e040904b613a7a2744","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/styles/jsdoc-default.css","hash":"1392eb7a3dd91b5a29b1ac9321c65fadff70db49","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/index.js","hash":"fb03639f0306626acb17eb4e4b0595fd6f0eb167","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/docs/styles/prettify-tomorrow.css","hash":"eb4c3a2e3f7b67dd77017acef89712a77eaa14ad","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/README.md","hash":"c7419c08aedb43bfc50e242ad0b2bd8f88fc553d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/json.json","hash":"53dc07d0a9f87a311f591dbb16e07f57d9b947be","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/json.js","hash":"37b7bf66f9a54b92cba23de2416e2c28b82861c0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/json.proto","hash":"644d3125f1c0aa7035510499a5f9051b23db962f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/package.json","hash":"c8dbba1865d05575d62e60525e900e41eebcea76","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/protoify/test.js","hash":"cacc13248924bf00b13045176a77ab6a42d54bb3","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/websocket/package.json","hash":"d4938f93a410ba0e25a81fd122c24382b14691ee","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/websocket/README.md","hash":"0e099f782aecc1eb6cd6a120d82f24793da7b592","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/websocket/server.js","hash":"3c06a4658090bec612a86840c40308a5ce4c5df5","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/DotProto.js","hash":"2faa1eed9fd5990804a2f63681db1f00a699bece","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Map.js","hash":"b774e791bbe5af0740e77f011b8a8f89bf215d4e","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Lang.js","hash":"1b8542cc7abfc3aef757b69e860045d28e358727","modified":1526462015000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Builder.js","hash":"47d2c47e2458f4998111969448a1180b16a7f24f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Util.js","hash":"9f3885e48298811f2dae38ee45b72e5101607063","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect.js","hash":"6857064a0bcde208b7a9f4a2e8486fdc14ae30a7","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/dupimport/common.proto","hash":"4d8fcea226ce35ddd0810f180e4c53d3f1e58656","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/dupimport/dep1.proto","hash":"e17713a4180f11ea9e7a347f9f553f4145befc94","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/dupimport/main.proto","hash":"c011070c1040e2c12aa371175cb4aa28ee8813dc","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/dupimport/dep2.proto","hash":"6405d6acff0d175c4df1545970c5871db51e710e","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/importRoot/file1.proto","hash":"9d115dc718af8647336e8064e204c2b3f5ec12d1","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/importRoot/file2.proto","hash":"644d745b33a61b9969fc586b7afe02ed5a5f65a6","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/field_name_same_as_package/main.proto","hash":"fcb4ce05a53cc14bb7ba584d36da118cb400622a","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/importRoot/file3.proto","hash":"e3792ea4d7bea1fa57ca0bb4e207f2a618e44cc6","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/field_name_same_as_package/sub.proto","hash":"deb99a345481adf4e7d119e87479c2acf199dd23","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/nodeunit-browser/nodeunit.css","hash":"0f7847bf82d6d570ab6638427a8660a6a6e88b8f","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/nodeunit-browser/LICENSE","hash":"700aecb485f87354ea2eb0a7bdb78a0c69ef91ea","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/proto2js/Foo.proto","hash":"dea7a35a7aedd2da818bd3588be024e92aee8400","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/proto2js/Bar.proto","hash":"873a251005a6056f935503b1b3149dd0a8a23c3d","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/proto2js/Bar.json","hash":"78d3d2ad38c2cbfd780f5662112434eab597c498","modified":1485532820000},{"_id":"themes/next/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":499162500000},{"_id":"themes/next/node_modules/superagent/lib/node/index.js","hash":"278bbeb5aa16881f45881a340b40a54cf7e616f9","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/docs/images/bg.png","hash":"044789dabaa38d389639dc884a2795c82a58086f","modified":1478530871000},{"_id":"themes/next/node_modules/superagent/lib/node/unzip.js","hash":"e37e5a96567801cca7db8964ad854eafe956cff0","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/node/response.js","hash":"eb0016a710ff9f7a1ae894c3c14df468b8aa667f","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/node/agent.js","hash":"ba5d546c016934a8164290f1fb24658ce5fac1fa","modified":1525016398000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537581777900},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537581777907},{"_id":"themes/next/node_modules/bytebuffer/dist/bytebuffer-node.js","hash":"694f05ac4e1145fc25e147f01e4b922f6fe85ff8","modified":1455285565000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/README.md","hash":"65d9d60fa0cd4cb997ec0b4d7aff8390aef24401","modified":1506453087000},{"_id":"themes/next/node_modules/leancloud-realtime-plugin-live-query/dist/live-query.js.map","hash":"975706b843296f6e6529f88c22ea156f3c446f35","modified":499162500000},{"_id":"themes/next/node_modules/javascript-state-machine/test/qunit/qunit.js","hash":"8d9ff449f78275c8bfefdf027e39beb287631a69","modified":1479584424000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf-light.js","hash":"1e23bd0b930034a0edd9b596281ce66b3d9d1905","modified":1526462376000},{"_id":"themes/next/node_modules/protobufjs/docs/ProtoBuf.js.html","hash":"21315272562006989d05da472452738277b8de43","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Regular-webfont.woff","hash":"5092881fad2caffdc6bf71bdab1ea547b73d3564","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/tests/nodeunit-browser/nodeunit.js","hash":"1f11a4df230979ab93e15c60c66c4785d8e16a27","modified":1485532820000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8b320de509e9a598810b87e8e1aa91e33782a3ad","modified":1537581777745},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537581777820},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1537581777817},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1537581777820},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1537581777818},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537581777820},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537581777818},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537581777818},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537581777819},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537581777819},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537581777821},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1537581777821},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537581777822},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1537581777822},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537581777824},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537581777823},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537581777824},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537581777822},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537581777824},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537581777824},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1537581777825},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537581777825},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1537581777818},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1537581777826},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1537581777827},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537581777826},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1537581777827},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1537581777829},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1537581777828},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537581777828},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1537581777831},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1537581777829},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537581777828},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537581777831},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537581777831},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1537581777830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537581777832},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537581777832},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1537581777832},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537581777833},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537581777833},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537581777834},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1537581777835},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1537581777833},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537581777827},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537581777836},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1537581777835},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537581777836},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537581777837},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537581777837},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537581777837},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537581777838},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1537581777839},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537581777840},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537581777839},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537581777840},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537581777839},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1537581777841},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1537581777841},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537581777841},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537581777854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537581777899},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537581777857},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537584728397},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537584728396},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537581777854},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537584728398},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537584728400},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537584728397},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537584728398},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537584728397},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537584728400},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537584728399},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537584728395},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537584728399},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"0faf8a6b229847e675c27de42d6aabd1b3ac3722","modified":1537584731185},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537584728401},{"_id":"themes/next/source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537585173597},{"_id":"themes/next/source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537585173598},{"_id":"themes/next/source/lib/bookmark/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537585173597},{"_id":"themes/next/source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537585173595},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1537584731196},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537585173599},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537585173596},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537585173599},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537585173598},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537585173596},{"_id":"themes/next/source/lib/bookmark/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537585173600},{"_id":"themes/next/source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537585173598},{"_id":"themes/next/source/lib/bookmark/.git/logs/HEAD","hash":"28953679a3b88085bbeabf1ad1e40b001b4aa1f9","modified":1537585176118},{"_id":"themes/next/source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537585173594},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537595726076},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537595726078},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537595726077},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537595726080},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537595726081},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537595726080},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537595726081},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537595726078},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537595726079},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537595726079},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537595726077},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/HEAD","hash":"dbad8e40665bf0bcefbbba6d2d971e69d0931584","modified":1537595762399},{"_id":"themes/next/source/lib/needsharebutton/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537595726075},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537585049308},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537585049308},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537585049310},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537585049309},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537585049310},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537585049308},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537585049308},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537585049311},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537585049310},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537585049311},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537585049309},{"_id":"themes/next/source/lib/reading_progress/.git/logs/HEAD","hash":"4eef8ee13bca28edfe8696b702ec8e5aff3e8783","modified":1537585052507},{"_id":"themes/next/source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537585049307},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/async-throttle/index.js.html","hash":"fdc1e8d556475ba10e82edc7db64f685eb57fa7a","modified":1505146456000},{"_id":"themes/next/node_modules/async-limiter/coverage/lcov-report/async-throttle/index.html","hash":"6168e0b1e0d2fa4f50737fb48faa76db7c2757a1","modified":1505146456000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/impl/debug.js","hash":"c8e289ead188a17449e3004e2ce83b942761f853","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/impl/binary.js","hash":"14d419c978a8aa7ea0cfee9ca18fe9734db41b6b","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/impl/base64.js","hash":"bd521053f0fed0107473ac4d8ff36e6c18c239d5","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/impl/hex.js","hash":"14f7268eb58fa8d761aff3261b56e9b54232c756","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/encodings/impl/utf8.js","hash":"5ca672ad6947f7590a90749ee63dcf14ad66f11d","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/accessor.js","hash":"f24591f920f0b9b189d7896516faf67b407c34f7","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/allocate.js","hash":"bcb66740c2a077622f6f556ef17bc902ccde38a6","modified":1390416812000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/concat.js","hash":"321f76192bbdf894eb86db327abfa4040700cc42","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/type.js","hash":"09288d5a7e4579e17c483690ee0a1653ad49580a","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/isByteBuffer.js","hash":"19f017eb39a2d5e74b77dd7017ebc2368fa3fee5","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/types/bytes/bytes.js","hash":"f6778bf141d5f1f8e5d3d5741b36e268a0306f74","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/bytes/bitset.js","hash":"0ee07dea912cfc7ad0e151a006b159bd09ed7a0e","modified":1455284781000},{"_id":"themes/next/node_modules/bytebuffer/src/methods/static/wrap.js","hash":"17f8f2653aeae440799076c6988d9cf3045da9ae","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/types/floats/float64.js","hash":"3c7040b71ef4a2fbd3a04198b8ebc66b83245bdb","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/floats/ieee754.js","hash":"c6638a86dd0403eefc73091a8f36009fab9f0f69","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/varints/varint32.js","hash":"cecdfeef2a1f17d4ea972ccb8080621709a2edad","modified":1437058978000},{"_id":"themes/next/node_modules/bytebuffer/src/types/varints/varint64.js","hash":"baf71f412eda7d2bd9f7d3c5b915e59c341a4054","modified":1437058994000},{"_id":"themes/next/node_modules/bytebuffer/src/types/floats/float32.js","hash":"9c3cf06ad70fa468810ae347746baf17018c56ec","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/types/ints/int16.js","hash":"23765435041ad7871071731f3db13f9589930d66","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/ints/int32.js","hash":"7d177e567ea0ef4a8483a3b76d1d43263b9b40c5","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/ints/int64.js","hash":"4e790989fd8a3858faf83afc37e64ac6192cef70","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/ints/int8.js","hash":"caec7604ff5bd355cb4eb563295b9c99cd7bef8e","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/strings/cstring.js","hash":"b1cf36f9fff4dcf7d17d49af33a310e1f4d292dc","modified":1434841553000},{"_id":"themes/next/node_modules/bytebuffer/src/types/strings/vstring.js","hash":"298b59872939d1593a380dc87b14cdbebfa79395","modified":1445549542000},{"_id":"themes/next/node_modules/bytebuffer/src/types/strings/istring.js","hash":"897253bc995e94a5c8c1951c276c30f094ece1d4","modified":1455284636000},{"_id":"themes/next/node_modules/bytebuffer/src/types/strings/utf8string.js","hash":"771a44039da7136d670e15df7d7734c3342b6629","modified":1455284636000},{"_id":"themes/next/node_modules/core-js/client/library.js","hash":"b289d04bed80482f5a913daf316e16cca1576431","modified":499162500000},{"_id":"themes/next/node_modules/core-js/client/shim.js","hash":"2f4b6f687ba63cd010bad96c2c35b57b4c8aeb01","modified":499162500000},{"_id":"themes/next/node_modules/core-js/client/core.js","hash":"3285163efce8bf2b26cbb96ed3d54093a91188ea","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/copy-within.js","hash":"b2c18eb301af800625ee7269abf1eb1b012d4ec0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/every.js","hash":"ade5bf84976b7c8e4118e5a569f0970bd6fea317","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/entries.js","hash":"360fc95a37a2059dde966484e75821556c296d24","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/fill.js","hash":"e59f0e874998822abd7f3c3a01d2a91c0f00f863","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/find.js","hash":"d93681586eb4572b34cc85ebf64e41bdbe5c2160","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/flat-map.js","hash":"1acd208529633ee46d39523bc9d3a241992997a4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/filter.js","hash":"aa59202563ffb52986a6683acfcdd9d25c7f95d8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/find-index.js","hash":"a1a98719e1d56bc13d61a6915f74df9242631442","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/for-each.js","hash":"a6354baa7787e079b76a0c4497f58167195835c6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/index-of.js","hash":"ca2ac5a1cf634a3e91149bd40e2352a9b2c52bff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/flatten.js","hash":"4a5fbfde99a69fd9b8b2478cb30b1e10dc7a6e35","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/includes.js","hash":"208742ce8cca93d8e9b5754505fa0f3a7784ef16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/index.js","hash":"9db69a69c0ddaa335351ddf5e54f081e2ea1dab4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/join.js","hash":"a019b3214411b80ef374fff42c2728b1f6c2c2e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/iterator.js","hash":"39f0c9dc16b79ab1ef17a4294809f2b9e6c48979","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/keys.js","hash":"9bf029b15d04a1c99eeb548cbb10112c9c386ccf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/last-index-of.js","hash":"b07d6a078cc4dfb99c2993abae93d00882a66925","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/map.js","hash":"3c2effa3075034dc4537614e8d4594606f006b5b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/reduce-right.js","hash":"cd64f8134cf12cbd2fe729ec687db97a5470a55f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/reduce.js","hash":"a2fba46d3e5f33089dbea00877024896bd8a7309","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/slice.js","hash":"ede73fa8928befd0360a1d41cfce2318d807e61b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/some.js","hash":"716be04830d8c30f0144b57c5c5ac77f83049623","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/values.js","hash":"39f0c9dc16b79ab1ef17a4294809f2b9e6c48979","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/array/virtual/sort.js","hash":"263bdef689d84e2d0fe5a9c7261283d261f53f54","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/virtual/bind.js","hash":"23e22a73e6add276f54cca350cddf7958ac9b374","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/virtual/part.js","hash":"7d0a80ad04918019b75908e8b71932174d68c64b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/function/virtual/index.js","hash":"1f89f0b49c55868d2af5dcb41fc3e8f4936704a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/virtual/iterator.js","hash":"1d8a707753a36696b808bb8b26bbc49ed2767217","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/virtual/index.js","hash":"70994591988d18dfe2f44e7ac15b171fbf285f14","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/virtual/to-precision.js","hash":"d49f5dd1b02050bd0f5561491de0816973d64d22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/number/virtual/to-fixed.js","hash":"b89a5b6691ad58ae10550ceb8412d4fddd9da58c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/anchor.js","hash":"4d3c11e89546bf70c7debab2be43db5989a528e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/big.js","hash":"9692a968e31a99d71ebebdc1e782e77014ce6438","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/code-point-at.js","hash":"ea8fc8caccca0c7b5e293b88fc82183acd5622a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/at.js","hash":"dd40f2e859c069d898430fbf5778a74acd8db4e9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/escape-html.js","hash":"266bde4693084cbaf5b93b573d29dc451418a1ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/ends-with.js","hash":"de7af44b73e04af14eb4312b8544ab7ede26dbe2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/fixed.js","hash":"98e22e2c522f7533a57de39fabe3e78051c44360","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/bold.js","hash":"db6ca1a01ccf5bcc4b91a8f9096ff5e099b8bbf9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/includes.js","hash":"468bb530aa50ce51377ce01e796a133c82eedfaf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/fontcolor.js","hash":"00a17c665d37cf346158d6aa8a7b6740885a3a4d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/index.js","hash":"6534ef882c5bc05e9f9093197174de83fc842d16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/italics.js","hash":"71008852eab48f11292caafea72e0cc4298f1ff5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/fontsize.js","hash":"a48bc7323dd7903800c819da45012c6089d3691f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/link.js","hash":"12a7bdf733e14ff12349e0ca4089f6f26a33ba4c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/match-all.js","hash":"7a80944dd5a0df5cec066737cdaffdde97a17b5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/pad-end.js","hash":"84e45ad4917c9caeb0cdb3ab8b8ac8ac405f93d6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/repeat.js","hash":"710695ac7a0510189b8cb98693dde915861148fb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/pad-start.js","hash":"d9d6e7ffc1aad4c7528cfd3043aac3c081dd2bf8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/small.js","hash":"ad9e63ea5640693eb406614b214852c985fadb7e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/iterator.js","hash":"6d6f4c3c7797b70b0ff26bf52b03649b33892caf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/starts-with.js","hash":"c7cb81b8a375c44a37a5be3e39044c0a2cffdc26","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/strike.js","hash":"2d2e7ed8b50c8ba057cc1f83c1ac112ebdd36c76","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/sup.js","hash":"703773b33024013827bef16ef28b64f362ccce22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/blink.js","hash":"90770f01020379a3d12b34fb8ce4ca8807fdfb8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/trim-end.js","hash":"78e99892601b60b7ba2d6eb4f7215321a1bd2a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/trim-right.js","hash":"78e99892601b60b7ba2d6eb4f7215321a1bd2a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/sub.js","hash":"2ca8aa616abe661425057d3325c420b228b190d6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/trim-start.js","hash":"392ae1870d0e5f5e63b8ce5dcec3f9ece242065d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/trim.js","hash":"2eaa2a3348bf92dbb2a5ead1730a74975b1e9014","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/unescape-html.js","hash":"4d1771072f7e2f6d66d4c3f2aac572b7db9929ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/fn/string/virtual/trim-left.js","hash":"392ae1870d0e5f5e63b8ce5dcec3f9ece242065d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/copy-within.js","hash":"888275d2b87cd83d0329adb50424ab30cca973dc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/entries.js","hash":"0a90beb0ee4c2af8a737b6cafa2490d84dfa4192","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/every.js","hash":"212a9444ba45f8c46c517acb563ddb920f49740a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/concat.js","hash":"342bc35cd7ee72863d1eef01d8743de18ae86948","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/filter.js","hash":"304e1662196b2f7d898680fcf4a4b0292bf99db4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/fill.js","hash":"245602c87f38246e888b48760a3f8d786d2747f1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/find-index.js","hash":"bf56cfe2bcce03b37841998867d31f32b60d1441","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/find.js","hash":"a5a24c1953105abfeca6cef33cb26a06ae889de0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/flat-map.js","hash":"aca21dee3553f338b5235e9c6767d5f34573ad6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/for-each.js","hash":"f2a9d23340d7cfe29a49e62cebea869764cb49a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/flatten.js","hash":"270362b8b9cc8adcc34ded9c32113b3df751ed5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/index-of.js","hash":"7777f97f989c8676e66c278bff7da92cdb3c4336","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/index.js","hash":"3f4b44c92a8ebba35e0780c5135e069f4b0f6184","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/from.js","hash":"b0adde5febb2f034de3ee154405ed006b7712109","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/is-array.js","hash":"b9f48b11a236a36c0a3b8f23a19778a09375f701","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/iterator.js","hash":"ed8f2bf8f0494b0d4e0c48253794f2c5a1b589ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/join.js","hash":"9614938b4d65419c017f4fe1991b23826f96bff3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/of.js","hash":"b4aef05ff0c228d2de0f0318d5cc6f64b98ae4c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/pop.js","hash":"86ff51e81651091a085051e78d33506ecea03db2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/last-index-of.js","hash":"3da419d96e7c5fcfd350d02052df382e5eb5314b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/includes.js","hash":"265b5dc5ecccd4814b78ae19d4106c31c221e8b2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/reduce-right.js","hash":"57a55d2faf2bdb1e065e246052215f01f9e9c7d1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/push.js","hash":"ff67e1620ccb8cc0f2acecf0bbe8446ccddf3939","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/reduce.js","hash":"833b096453fd638a808a88ac4551adce3cce8a6d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/keys.js","hash":"842bb5d5226d276a3a227ef2dfee8dc0c85d5cc6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/slice.js","hash":"30cfc752c9d67ab38a089c6c4c9fbde667ef85a1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/shift.js","hash":"267131c6de5b381b1d1f5629f4b9930fa6a854eb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/reverse.js","hash":"5e22da992873fbd929f420a60c7a52c839809e3e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/unshift.js","hash":"b6cefed94a6de999cd0996475672a2e29c38430e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/map.js","hash":"44b3cfd63d46beb55c00d1b242d6a8a61a960a28","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/values.js","hash":"ed8f2bf8f0494b0d4e0c48253794f2c5a1b589ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/some.js","hash":"e1697b293f1e161a5cd5c672693839c25901644c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/index.js","hash":"dae2a675b0040590ec48625b9062774ed584ba59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/sort.js","hash":"2d0e5ea3886a2616362e9ab0787ae518be8d679f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/now.js","hash":"8ed35f007e25b1741eb9aecec38d22f776ca6dcb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/to-string.js","hash":"ad4df6af124a18ced745ef87eb15ca6b1e74189a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/to-iso-string.js","hash":"7a524be47d7e83280cc57fdeaa39ef167c02f6f1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/to-json.js","hash":"6b7ddaa0daf5a52a15bb6a0bee4863732e139ee7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/date/to-primitive.js","hash":"14393c1a1d23133181d4be5c227090389aaace8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/dom-collections/iterator.js","hash":"8a0d872d8cc99c1f1eab0a2f792acd7b50e2ae72","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/splice.js","hash":"83f5c3fbda2914080915bdd5927a1275665102cb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/dom-collections/index.js","hash":"2304b264a3ba7d968515ea66d820c535b24df19f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/bind.js","hash":"153cf3bf066a478d3bcd28cae685495f1871ee41","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/name.js","hash":"fd70f2c9bf1b493e22b0445547738baf46e46734","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/has-instance.js","hash":"fa90e39efa4dc297ddd06deedcb88e137b6c1592","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/index.js","hash":"28266e00bf205a1b31c027a8b139411e485db6e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/error/index.js","hash":"e2dbe262d787884d7140c4a7564d8c2a29ac7c18","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/json/index.js","hash":"d71c301821cbd44746cf4042709db1fd2f9e938a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/part.js","hash":"df32d3f1c9952151a82c8f06c316436c1e7dbdb8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/error/is-error.js","hash":"20cd8a0d254ca5189e29ba43acd147b5e0de647f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/map/from.js","hash":"86c66889db36e962d6441dc6f877e7fceb52fbd4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/json/stringify.js","hash":"3763a77062b3a9cbd90c7b07a42d745fcdc59761","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/map/of.js","hash":"ee764f00b4b58103422a07ff714da65b7158db98","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/acosh.js","hash":"7fb91f2a85264c687059e47d7922f1c8037acd13","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/asinh.js","hash":"624eb2a3e0d6863e608bea0efd8716575d24552c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/clamp.js","hash":"8a6dd0dc18ce4343a68998f49145a34db85a7eb7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/cbrt.js","hash":"d60637f20606255536fa73d747b63a470bb2f5a5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/map/index.js","hash":"f71c3be88ebbd0ed9ca5bdf79eaab00742a3bce2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/atanh.js","hash":"2754d2a06b93b2b525098004cf8700cfab123ec0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/clz32.js","hash":"e7ae4f185e1f7e660acfddeb697088eb2225b274","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/degrees.js","hash":"2fd8ed066be3108364bc2d994feedd75a2e8c7f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/cosh.js","hash":"08bdcd56c7466536bc2142f6e2d774140071203d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/fround.js","hash":"18d42c12bb3050c8c82aaec677ab4fd9c7e83547","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/deg-per-rad.js","hash":"13c6e27c19bd5f43dc5adaecc3720e36823bd436","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/fscale.js","hash":"5ed3787c6f028e57f870b1c0f398805ea220586b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/hypot.js","hash":"80ee5c4551462d50988dcc44c0841f0824f7d3fc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/imul.js","hash":"222ae1858a5278209da70d3699bcd25e1a78d158","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/index.js","hash":"a05f99f5eba6c849d4ba85955d0d78e946beceee","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/iaddh.js","hash":"2d87110b369e8d793c3f2415cc2654bfed5714e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/imulh.js","hash":"691fd55d7a88bc0d91e32ed0ce17280d64c3832c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/expm1.js","hash":"6b377d88cba333f62ddd8265b4b69a30352aaaf6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/log10.js","hash":"4cb9cc44bb75ef0b1191e0156ada1096e959df56","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/log1p.js","hash":"e09bc836c4d6caf91ab5dd311423cc288d25f0b7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/isubh.js","hash":"8eaf622ddf2ba420d08f38dd4c3ab28088589892","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/log2.js","hash":"00dde73c001c54bd4e07daac27e05ae5070536f8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/rad-per-deg.js","hash":"f7f4c34e8c9bf32bc254e1427baffca216cbc1c0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/scale.js","hash":"a5f994309c36b8b6e8e75a171189909ed1975c9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/tanh.js","hash":"6ce51aeb08ec9e099af6d4c4a87caf4fd7e9d771","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/radians.js","hash":"4342f4aa0a5ebe9c2d89285d19d6d477da54a94a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/trunc.js","hash":"57b3bb82d1252fb0f7c740a9c4ca08b69de09a26","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/sinh.js","hash":"44666395975413186b515f71691f3ecc896fb444","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/is-finite.js","hash":"5e75b8931fd25398eac5dbd1559bab13e92b277d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/constructor.js","hash":"df124f073bed9a8f33531705d8e68f78475f7418","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/umulh.js","hash":"e36844d011737548524024a12fd21cc77ebd1ed0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/epsilon.js","hash":"2353a86a34f6c57f9358bb60b65a7993a524c2bc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/index.js","hash":"e77d8cb99b41702794d78b9ba81ec9fbf9eaf40f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/signbit.js","hash":"1010eb5793f6a5c5067689363c127da3658f1b3f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/is-integer.js","hash":"1728b6ad20b4db077a5e79e6dd1bc3c4749de079","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/is-nan.js","hash":"e3505463112e0256ee4f5c20e6fa1aed00a89fde","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/iterator.js","hash":"79a57e54b5d6709bfe01fa10b77aa39d2ca43a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/min-safe-integer.js","hash":"a581212464b943f0c14b1480a87fe21c14810018","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/math/sign.js","hash":"006129598ffacfb30b913e8770a7cb4bcfd0dff9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/max-safe-integer.js","hash":"5dd3362ea111aa72b24a963bef5999a4981eeca7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/parse-float.js","hash":"5c704b1fd70e3d47847489340eb51f25634e952d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/to-fixed.js","hash":"d2e78536ca5410404b4da7dee7a61d05cd4a3b3a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/to-precision.js","hash":"fcd55d4fbe2dd21e5bf22f30485fa80184d8edef","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/parse-int.js","hash":"2416bc74d7c51425f80b5a912efeb0cbeb54c7e2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/create.js","hash":"cfafc4109f0add769d4cfc0ee69960592ddd622f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/assign.js","hash":"a52e7a4e49fc27ea9bfa9b4f9db60082010e1797","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/define-properties.js","hash":"30dcd7fb7a2a7ca6739b386fd9ed7f6cef6a2b19","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/define-getter.js","hash":"a713bdd5dbcf0043a19dcd6362397d332fc16272","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/define-property.js","hash":"4c208e94fe30bd4d07c6bfe330c646657daa5328","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/is-safe-integer.js","hash":"e65cacf03b0344fd44171f90238ca5c92e91b437","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/define.js","hash":"719c086456f0d84f8ecfd6e2439df72f6e4fe302","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/classof.js","hash":"dac8c91856d82e1c3ea319f1194e6f18f78e1eb6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/freeze.js","hash":"62c46a53a21ce702b7143d84ae198c4ea7afb67b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/get-own-property-descriptor.js","hash":"f7b18a608f6b9281b3f957f2cae4aa6da4fe7f68","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/define-setter.js","hash":"302d49a8fc8ce56f3a3c87df931aba4dbccc10bf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/get-own-property-names.js","hash":"660e96466f5c3a186cbe3d8235c385994a6ef575","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/get-own-property-descriptors.js","hash":"b733790a345c51befd70b4029e611152e87225c5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/get-prototype-of.js","hash":"a3f0d659f12776de341338c30abdbe37edf3c1e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/index.js","hash":"78acd1a842343a1ef7eb29227727aebc6a222bc9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/is-frozen.js","hash":"8f03fed34fa3ef645e685594f1138bbf1acb6803","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/get-own-property-symbols.js","hash":"c1c6c0643696d256cd4c2e9b49f9651be8ac7caf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/is-extensible.js","hash":"3b4b9bedd8431b518582bdb9bef8a4372f59aa0b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/is-sealed.js","hash":"f5a893afb5ce5b4582a0f7a6ff1f58892233a39c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/is-object.js","hash":"671e970e73fe94321efd0722d29bc91450894039","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/keys.js","hash":"b978b2d3fbdc9f1be8df2df4fe78e07e104923c3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/lookup-getter.js","hash":"89b305f21512994ccf6d58c7172e1720b215a319","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/make.js","hash":"265b8f90037db8cd3d73c385350b831a3eee8d11","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/entries.js","hash":"beb0cdc202537d5cfa3d25103a609f7007d9b023","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/prevent-extensions.js","hash":"ccea0576fbf28c1a54ca24fba243600c22637398","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/is.js","hash":"1b08df870a00a477c1038a2ba9cb056cb84e260e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/values.js","hash":"33175277693bb888f0bd9a1d4052362d1a4775cf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/set-prototype-of.js","hash":"8826876dfd3c802fe43cf626b2cd0052e6d2c6ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/seal.js","hash":"66b29d5d3159bd1c68374287637b824cfae4102a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/promise/finally.js","hash":"7371654014ca987dfdee4d37e7e3f129b04b653b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/promise/index.js","hash":"e609ec2bd0e2ef9c524e05dc1dd1053a155cd837","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/object/lookup-setter.js","hash":"4ada921598c386a799708c44d572951b2ec77b09","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/promise/try.js","hash":"49e93747aa749e873d8d47c24cdf4a4776b50269","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/define-metadata.js","hash":"e079efc2320e189c2b5c286f1a2c6e32cdba8105","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/define-property.js","hash":"c13861562c9e2044748ba70756f7b4682c30036b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/apply.js","hash":"04d939e759fc24528ccc6a316c239ec22db0d456","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/construct.js","hash":"6ecae319deb8dc7b164dfb7882ffd16834a71eb9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/delete-property.js","hash":"6330a7452121f0dbb8d75f5d933e5ec99e995b83","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/delete-metadata.js","hash":"4e68a6c5fc72f2bba4b300f8ccec947e7b7239d3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/enumerate.js","hash":"78fa4ba7b1620726dd9b564f8745f50c006a86f5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-metadata-keys.js","hash":"023d4ade8d260be9e6636ea2afac68ce9da87bd2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-own-metadata-keys.js","hash":"01ac30d8c4f08bed712fcf52c64a418169d0563e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-own-metadata.js","hash":"d82525da16a9f6d2951e4fd625498d45cfb3ec9a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-own-property-descriptor.js","hash":"03164bdb787d836983d8d1b68d6e09ea54812c82","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-metadata.js","hash":"83368cfd6c295d794fd38ca15921e653f3c328ae","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get-prototype-of.js","hash":"e0dbb30baad90a6770ec463fb9f8bf3d2cd03e43","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/get.js","hash":"378da2d93ddf8390c1a6332ec1ed0b82326b24e9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/has-own-metadata.js","hash":"a678449db49aa4377f7bba3216c7fe0c8730a66e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/has-metadata.js","hash":"178443f2fad3c76957351e418d8a528549947f64","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/has.js","hash":"193411ae2a0ff4624ed5c30fd316f4a6993c5084","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/index.js","hash":"8a7e8936fd1cc4e0c1300f8275e4486a76308ade","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/is-extensible.js","hash":"31e98d9e3727d8ec5c98f4c89abaf52c54f4f3ff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/metadata.js","hash":"b24565d098a8b9efa6bb7a2470199f7a77464235","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/prevent-extensions.js","hash":"710858c6cccdf634daaf81dfdf233b306b274eff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/own-keys.js","hash":"edea5ac4a2a311d246ce9270d7f511527e0fcb96","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/set-prototype-of.js","hash":"106fd8004eb75e059c3affcb286da1a547d9a4f0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/reflect/set.js","hash":"07aec89064474ba19cb25532d01e315637dadd8d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set/from.js","hash":"4595d1362589db6ccc807a548a7f02c5f1c46cb9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set/index.js","hash":"a613c02ba75289a04aae0493bf0a94d16419dc02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/set/of.js","hash":"5914c261c93fe5d86deb003357c7b635d885e40e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/constructor.js","hash":"7eab5e5616b1fcde7619b5059a43feee72ef0aaf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/escape.js","hash":"ca39299b13988b550e0ad9bfc20f888d33ecb6be","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/index.js","hash":"eea3ab574c34fd8f9caff45120cf8848211f9b31","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/flags.js","hash":"48eafd53df131dd06eb894ee87b6dd546d46785d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/match.js","hash":"7b50060a5c9a46bf764ad734d9759883aed97687","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/replace.js","hash":"0e35c8b3817b483939dbe31a8fe1ed718a10e8a2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/search.js","hash":"6628a48115c976a3dd796f8dd2fcd9c8c0b54f12","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/split.js","hash":"8f41ea156094cf37377d2d97306e58b171becd89","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/regexp/to-string.js","hash":"5dba78b784d1aa0f62ce87e645c3e28b160f5373","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/has-instance.js","hash":"982d20e4476762790403c3cb86079532b3436684","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/for.js","hash":"720eab6eed39a007c0b8249dbff059ea6eb5dbc6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/index.js","hash":"5095bd95d514bf97c8268ef80165cd08a79aa4de","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/async-iterator.js","hash":"41179119bcb82c86daddee6b37ef37fa198fb223","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/key-for.js","hash":"74551b985c578cd28563bf39f3a177818e4ca009","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/match.js","hash":"7eb5335cccabf7f861e6ffc3ebcad5b125161a32","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/iterator.js","hash":"46867dfcb342ab590cb6df8e3ea8291e05931ab2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/observable.js","hash":"7f1aa50c169b6e4c89e9b2f1007ef50fb71df52d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/species.js","hash":"7c9a78a525f3f565cc0388dcf4aae56e54cf6ea9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/split.js","hash":"d4a2fba2a78dcf64359e22d6a5023814750ed6ad","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/search.js","hash":"addbc8a2f07cf9ad84f303d38ec1c4418343ba94","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/replace.js","hash":"3f53ee1814a7691faa63d0cb9ba975b5b73edfab","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/anchor.js","hash":"a2d6dc073a2e9e034116a5e90ab3a3db26f703a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/to-primitive.js","hash":"c9712326b87b9aeb1e1eb4fbdf95d62789f52ddf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/to-string-tag.js","hash":"c175234b7c7eaa60b3a26a9626e23ece9a6580b6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/unscopables.js","hash":"ea5637c5947795c3ba84950b4404aa7b870ef269","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/blink.js","hash":"f555dca93f69b43d24c7be1a487fe8586f011818","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/bold.js","hash":"ab246e87319031005a141ccf414c26f7205c2a79","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/at.js","hash":"99da9445e6e49c8c0ac16b9af04fad8524df03f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/big.js","hash":"f0c2f5ece677b8f30587cf8af7f18ccc74860168","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/ends-with.js","hash":"c1e8d3eaa0668ffc8f41428109a7c562ae8442dd","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/code-point-at.js","hash":"949ff30a70f742a656ed1b2d68473d821ec29766","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/escape-html.js","hash":"00f53b59ae0df5be32804771c32d506672bdf6ce","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/fontcolor.js","hash":"2a5c107e3f07430bb7948a1183d4822e976c3042","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/fixed.js","hash":"8971248fb0157535c365e83de1fa7e46d7e24d02","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/from-code-point.js","hash":"645a05a13060be66e095ae8a56b57f7a1b1fca05","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/includes.js","hash":"bae05f6a38aa3ce3680b2afeddb19968c56bd317","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/fontsize.js","hash":"69852282463ec556a1171e3d8eb40c725f5ebc65","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/index.js","hash":"fb9a1083960ded3ffeaf7482f3f6437ca458867e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/italics.js","hash":"10810fd2526451ebaf37cf0b3953f7aa5a74c1c9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/iterator.js","hash":"ecceb9c28587b97818b58ec1d6299dcdbd92b52a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/link.js","hash":"5789f9ec28b872f98acf71e4926b5ff43132f6f4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/match-all.js","hash":"1a44958c842fc55f5ffbe34bb69c11f97e3b60a9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/pad-end.js","hash":"52392b3b9d69ab83d00b32b3eabbe7df6143a46b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/repeat.js","hash":"6e2cf17f4d4027f589abeeb952cd9e77260e4b2c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/pad-start.js","hash":"6c9522af3b6a9fd1e6c7a1d09ffd2e2776614c59","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/raw.js","hash":"e1dac00e0f81fb9d5ca35222b8ba9a1d04102e6b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/starts-with.js","hash":"8e85a76c90334c5d4a3299ad0bbd775bf0121051","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/sub.js","hash":"f2f518a4730540fb1beac4188a065e94abc986ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/small.js","hash":"df10df9628c24bbc90b533a53809fbe40e354fcc","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/strike.js","hash":"c2a43592d68b33a04998013d87b4b4a0b38a3c1b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/sup.js","hash":"200e1f8ee570b8d06b5211ca5c42ed4dc5a4d2ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/trim-start.js","hash":"005ad020f1f4eed2f58d3d45c6dfecee9102a26f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/trim-end.js","hash":"de59c3f523cceabea6f82661084cff2ee4f26de5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/trim-left.js","hash":"005ad020f1f4eed2f58d3d45c6dfecee9102a26f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/trim-right.js","hash":"de59c3f523cceabea6f82661084cff2ee4f26de5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/unescape-html.js","hash":"f6bebd68fb7e67a3d3f757378d4f6fa4b193f660","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/trim.js","hash":"dc19e18e042943bdb883655d58a53ce359fbbb0b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/system/global.js","hash":"bfdf4d05b6d832f196757a5e9059c85dd91a2c8e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/system/index.js","hash":"f2fb57816a728e2d74c76a7ca86056d89b7371b4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/symbol/is-concat-spreadable.js","hash":"bc003a91f35580ecda7f59a75948118e797845e3","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/array-buffer.js","hash":"14b41d86f5e6fcb765769c186e686556da10cc03","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/index.js","hash":"266808d8a847bfc92ba8ace6fc5ebbe4704a1f16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/int16-array.js","hash":"4b4eb4368238c9d777e98e9c9c4e6eed194ddb34","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/float32-array.js","hash":"5e82a24bd7bd32a465e63e9853b0d030cc6109ca","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/int8-array.js","hash":"40cdea2647372067c048ecc25463dc9278eb0328","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/int32-array.js","hash":"cc4707ea4936af6c2c59a103f2625005fd1ea4a8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/uint16-array.js","hash":"164e3b181f278321041e180f241dbf63c96a61d9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/uint8-array.js","hash":"92d0fa747d94937d248424029e92885c4c3b69b1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/uint8-clamped-array.js","hash":"a0ac4e8b92aa4d92d8c7b381ca60a5d05e4f4c9f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/uint32-array.js","hash":"c2f9c036349f320f24893ffbd677a7cd60f4244a","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-map/index.js","hash":"82fa616fdceda10040e396a442b3650aa5512dff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-map/of.js","hash":"69673839fb16cdc54334e63ef180b5544439ee6d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-map/from.js","hash":"4148017846db2cfd86532668a23a4288cc1c6680","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-set/from.js","hash":"cd7dbb56ef15e3af3d9a34b2be2ad6033ca8e1d7","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/float64-array.js","hash":"9c982c3fe8e46e81d8b2ac16ebe31d3983176372","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-set/index.js","hash":"00e46cee59a537b77ab4cff4598ddb5088465721","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/weak-set/of.js","hash":"2e01d46dcb7ec4665c8e40e76534091eb2a378e1","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/typed/data-view.js","hash":"84c354c806ea1caaa8f9c5aea6ea084f39a489dc","modified":499162500000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/promise/race.js","hash":"558d98b241bca029f63a7b34bd9a2da6c59cae54","modified":1485530028000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/promise/reject.js","hash":"7b56a2fff99e39af4b1949e6e7e4ad0331de0a22","modified":1485530028000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/promise/resolve.js","hash":"22254e88efea06b012f3eb322a8a3a93c2ce2285","modified":1485530028000},{"_id":"themes/next/node_modules/es6-promise/lib/es6-promise/promise/all.js","hash":"d6e557926693fab344a936ba3a6689d4be466117","modified":1516734770000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/src/node.js","hash":"6a0da57e0adbfe592cc3df2c2e708083f7dcad28","modified":1506453049000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/src/browser.js","hash":"836c2d882a28ef05767ab67e4499b443922d7adf","modified":1506452836000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/src/index.js","hash":"be4a5e319ff5c28b88a1ab4d272b59bd420e22e3","modified":1506087694000},{"_id":"themes/next/node_modules/follow-redirects/node_modules/debug/src/debug.js","hash":"58e3676c3989d3f6c03fa8f50485c1249a0b148a","modified":1506452836000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/polyfills/index-weapp.js","hash":"363e37aa0a2583bec9c31bea7befb8d87feab836","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/ua/comments-browser.js","hash":"03ca32eef3347c32edc3d859041c642260a83474","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/ua/index.js","hash":"91f1aa9d46b22c9c561164c96d9f3b57a4adcfd4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/polyfills/index.js","hash":"8f75a48ad4f7cad21e6a885a1aff81ced8b4d74b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/uploader/cos.js","hash":"b733ef07f35e48bce3fd39881c904983619cbd48","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/uploader/qiniu.js","hash":"02557b18d804523542a6bb0d6aed3a5f2f3a4bcf","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/ua/comments.js","hash":"cb24b9f3c2a846878d0aba1a9ef833416f0c65a5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/uploader/s3.js","hash":"2918791ae38fe80234b57fdd62dad89b2f0c146b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/index.js","hash":"b4adbe481efafd4bacf03038cc3af48a44ff0e4a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/localstorage-browser.js","hash":"9f8164d3f3d725005acbe68a47aa174290edaede","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/localstorage-rn.js","hash":"0a9e9a4ee6591ae50eeb193dcd1da5ed11cfba45","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/parse-base64.js","hash":"0201a75a9cb4ba7119c3f4f644369140a1fad7b0","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/localstorage.js","hash":"815c5ef7ee45ee581f9746f05e762a9c3501f5f7","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/node/utils/parse-base64-browser.js","hash":"0af045db6a5ab875257d17ada384e6099c1d2a4b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/scripts/prettify/lang-css.js","hash":"0a6564da73538b95de1d787c36347f63595891b4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/scripts/prettify/prettify.js","hash":"a4e5934397f97f79b8066984475c90af8a970a36","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/umd/eventemitter3.min.js.map","hash":"3bc8951345ad31334d70b89be0771832b09af944","modified":1524686032000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/umd/eventemitter3.min.js","hash":"233543386d119b40480c483751c9338446f47dba","modified":1524686032000},{"_id":"themes/next/node_modules/leancloud-realtime/node_modules/eventemitter3/umd/eventemitter3.js","hash":"7413adb4e5dc4f2b27f8dbda3ac6dc3fb4b69d3d","modified":1524686031000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.browser.min.js","hash":"9afb74d8680602c27a9ea75737e70907776462de","modified":499162500000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/sources/binary.js","hash":"7db66b11398400fa45ef5194964cb1cc4ae6caf8","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/sources/json.js","hash":"566804aa7f6b318d73884819be9cad9330842f91","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/sources/proto.js","hash":"125203b2ec8e751753beb869b71474d260e42f6a","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/targets/amd.js","hash":"94ca3d7af120ee89081fae0f7360bc571a1cb2d9","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/targets/js.js","hash":"e3c578d69caf1ded6fe8ef3f8f4d18f54cf19b63","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/targets/proto.js","hash":"e9d70e34e8b4c9d05ff5b079310641cc2749e971","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/targets/json.js","hash":"5390f6a62efc7a547d6e7a02d07ea961957373fd","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/cli/pbjs/targets/commonjs.js","hash":"ec0fa49881253bbae7e849ab7178376cb2085fc3","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/dist/protobuf.js","hash":"9dfb1905c964581fe9a115ea4c15a235687d9aa0","modified":1526462376000},{"_id":"themes/next/node_modules/protobufjs/docs/scripts/prettify/lang-css.js","hash":"0a6564da73538b95de1d787c36347f63595891b4","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/scripts/prettify/Apache-License-2.0.txt","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/scripts/prettify/prettify.js","hash":"a4e5934397f97f79b8066984475c90af8a970a36","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Regular-webfont.svg","hash":"3ef5f272f68816f72f197f45f420507baf552599","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/examples/websocket/www/example.proto","hash":"5eb7ff6f5ecfddfe2652b3310119411ddc3293eb","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Builder/Enum.js","hash":"00b9280ff44423a881d23a7643f9ee5a574b3883","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Builder/Message.js","hash":"da06a412bc2b5ce13964529cac1756c06f93b7c9","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/examples/websocket/www/index.html","hash":"adcf729a6f2c04756459588f7a56ab00bb750543","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Builder/Service.js","hash":"c1c926f5791e42848dcf87bfaeb28b9182501af1","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/DotProto/Tokenizer.js","hash":"cd2ea4ada03f000f59398f8c99051394e440f8bd","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/DotProto/Parser.js","hash":"29e9a90c9e35292f2d0a4052efe34b6096f5c39c","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Element.js","hash":"9e702a5b1ff3fa7dce60083d683452b888f8ac63","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Enum.js","hash":"46d93bc7361b24bc4dcb1ff98ea087ab4eabd8a3","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Extension.js","hash":"4d1e4ec0ea9f8b0704b881b18925b24986bf0961","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Namespace.js","hash":"27b6776023efd4fa1a719f8a0272c9a987dc119a","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Message.js","hash":"4856fade37f15c5fcabf7fbd1c603884fa26e1de","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Service.js","hash":"1c5f0a146dd447ba4d1dcd3518e9e9dd1bc091ff","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/google/protobuf/descriptor.json","hash":"2cc7aabae530ef890d3d36b8398435fa7c399004","modified":1526462387000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/T.js","hash":"b627b98ff853a1dd111b2df0bb7afdac2dcdd672","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/google/protobuf/README.md","hash":"bf77404f1402fdb4d3c94dd52fa9093b6fa5f042","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/google/protobuf/descriptor.proto","hash":"d3cf224bb55214cd65d82696e6b0856f8d08fab0","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/tests/google/protobuf/descriptor.proto","hash":"d3cf224bb55214cd65d82696e6b0856f8d08fab0","modified":1485532820000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/BufferList.js","hash":"8fd98c787f1764c80b11306d6acfb7d3b35c7d27","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/destroy.js","hash":"d0307824af8519303bdf619abfd31633e68bd6dc","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/stream.js","hash":"90b89ec87417d1301e7615a3ba50b04626c2796c","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/stream-browser.js","hash":"0167a0dc72daab83989846563aae870f37549151","modified":499162500000},{"_id":"themes/next/node_modules/superagent/lib/node/parsers/index.js","hash":"1a647d3bf5fbaeb5c87da8588d36d45a1c163557","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/node/parsers/text.js","hash":"56cf69548729e58655836d3cf3f98c8f34d5ec86","modified":1525019149000},{"_id":"themes/next/node_modules/superagent/lib/node/parsers/json.js","hash":"af8f8663d05de331a224f1db9c1a6363649dab40","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/node/parsers/image.js","hash":"5794f4c55e88cf37f245ebcec7706f0a9ca1252c","modified":1525016398000},{"_id":"themes/next/node_modules/superagent/lib/node/parsers/urlencoded.js","hash":"373832e2eb52c750cad33ed34c8db824bbb05ad9","modified":1525019149000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537581777897},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1537584731195},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.js","hash":"bb06c18063101658d65cc47957e87c73d85c539a","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.weapp.min.js","hash":"9ee09d526d4c5b69024bbaa936f0cb7c3b594dbf","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/docs/scripts/prettify/Apache-License-2.0.txt","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.js.map","hash":"d5ed57610926d57c11f5e0541d40c76b9e1069c2","modified":499162500000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-BoldItalic-webfont.svg","hash":"f5afa7aa8284c543aab60526ac6d814df69dc7d1","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-LightItalic-webfont.svg","hash":"7fa9bac5f0e338506cda852e84df0fe1927585a7","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Italic-webfont.svg","hash":"9edb8e027cfb6ca4af27caea837f34e4349cddf7","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Light-webfont.svg","hash":"0e1b5e663900cdbb72da8a08f0f7909c8d2c980e","modified":1485533035000},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1537584731165},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1537584730478},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1537584730813},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1537584730814},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1537584731160},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1537584730815},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1537584730476},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1537584731164},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1537584730816},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1537584730479},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1537584730480},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1537584730817},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1537584730477},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"01fe0b1cf911f9e2e30415be1c967b1eaae2ee38","modified":1537584731185},{"_id":"themes/next/source/lib/bookmark/.git/refs/heads/master","hash":"0d74c802af2ae1718308cb07fda4520f5dc7f8d0","modified":1537585176118},{"_id":"themes/next/source/lib/bookmark/.git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1537585176026},{"_id":"themes/next/source/lib/bookmark/.git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1537585176089},{"_id":"themes/next/source/lib/bookmark/.git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1537585176031},{"_id":"themes/next/source/lib/bookmark/.git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1537585176062},{"_id":"themes/next/source/lib/bookmark/.git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1537585176065},{"_id":"themes/next/source/lib/bookmark/.git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1537585176027},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1537585176060},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1537585176097},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1537585176037},{"_id":"themes/next/source/lib/bookmark/.git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1537585176033},{"_id":"themes/next/source/lib/bookmark/.git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1537585176091},{"_id":"themes/next/source/lib/bookmark/.git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1537585176090},{"_id":"themes/next/source/lib/bookmark/.git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1537585176038},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1537585176025},{"_id":"themes/next/source/lib/bookmark/.git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1537585176055},{"_id":"themes/next/source/lib/bookmark/.git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1537585176100},{"_id":"themes/next/source/lib/bookmark/.git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1537585176048},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1537585176032},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/16717bb5a449fab2291e6397c30c6cb34814f1","hash":"5e244da7b9b6dfc9ad924ee5259805d4ae272c2e","modified":1537585176036},{"_id":"themes/next/source/lib/bookmark/.git/objects/29/de98ce86c01618ebbe3352e213db74feda0dc0","hash":"046bf7ab442c095f0150c96fe06d83855c92092f","modified":1537585176053},{"_id":"themes/next/source/lib/bookmark/.git/objects/36/6ee3e25fa36be8ea88ed1c7913a8de8fd3b820","hash":"81c45f061381dd947da576758992b64b6101fbc8","modified":1537585176045},{"_id":"themes/next/source/lib/bookmark/.git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1537585175630},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1537585176098},{"_id":"themes/next/source/lib/bookmark/.git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1537585176078},{"_id":"themes/next/source/lib/bookmark/.git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1537585176083},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1537585176064},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1537585176049},{"_id":"themes/next/source/lib/bookmark/.git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1537585176096},{"_id":"themes/next/source/lib/bookmark/.git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1537585176099},{"_id":"themes/next/source/lib/bookmark/.git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1537585176084},{"_id":"themes/next/source/lib/bookmark/.git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1537585176093},{"_id":"themes/next/source/lib/bookmark/.git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1537585176025},{"_id":"themes/next/source/lib/bookmark/.git/objects/60/438c0c99eece781f9c7b2779ab7673ab34ba62","hash":"76032e20bf2916b03d9f795982831868f42a03af","modified":1537585176046},{"_id":"themes/next/source/lib/bookmark/.git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1537585175632},{"_id":"themes/next/source/lib/bookmark/.git/objects/75/4a45e75b8a6dc256755287312c729adc2fc6c9","hash":"e700708d93a902401e54d96d4d632ae4225cdf2c","modified":1537585176067},{"_id":"themes/next/source/lib/bookmark/.git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1537585175622},{"_id":"themes/next/source/lib/bookmark/.git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1537585176028},{"_id":"themes/next/source/lib/bookmark/.git/objects/69/d5670af93cd1d3f0acc082583b1d150c5d61b5","hash":"e6c6fdb25f5fc4949594e217ae14d309b2fba4a1","modified":1537585175623},{"_id":"themes/next/source/lib/bookmark/.git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1537585176043},{"_id":"themes/next/source/lib/bookmark/.git/objects/84/08abfa6c03a2809cb160da5badc6d1050bfbb3","hash":"9d3f29a89223403d1a0292681a330cbf7616c190","modified":1537585175622},{"_id":"themes/next/source/lib/bookmark/.git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1537585176054},{"_id":"themes/next/source/lib/bookmark/.git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1537585176030},{"_id":"themes/next/source/lib/bookmark/.git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1537585176058},{"_id":"themes/next/source/lib/bookmark/.git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1537585176085},{"_id":"themes/next/source/lib/bookmark/.git/objects/92/f5900e81d1cf9e90787b7138f4285434e45c10","hash":"05c5b8557d69133fd01ebd1b85a5e009a822ca20","modified":1537585176063},{"_id":"themes/next/source/lib/bookmark/.git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1537585175627},{"_id":"themes/next/source/lib/bookmark/.git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1537585175629},{"_id":"themes/next/source/lib/bookmark/.git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1537585176037},{"_id":"themes/next/source/lib/bookmark/.git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1537585176041},{"_id":"themes/next/source/lib/bookmark/.git/objects/a9/21fc59cd52b57fc3093fbdc04b446bae0a2f8a","hash":"a2e879b7fdb0cf153f8526064a6b8810b2cd8988","modified":1537585176066},{"_id":"themes/next/source/lib/bookmark/.git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1537585175629},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1537585176029},{"_id":"themes/next/source/lib/bookmark/.git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1537585176076},{"_id":"themes/next/source/lib/bookmark/.git/objects/aa/d78f9de11c827340e4695cbc1f5a73f53ee577","hash":"0f5086a5818caf093dcf60126a7d0f72bc73928b","modified":1537585176072},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1537585175631},{"_id":"themes/next/source/lib/bookmark/.git/objects/bc/0570da6c07cf361d794008e58455455a2580be","hash":"822af280dbbe78499a932faf9229f4c467d48cbe","modified":1537585176069},{"_id":"themes/next/source/lib/bookmark/.git/objects/c6/26688a33395276a262158e171027a61c56150c","hash":"3727c122ab41e9dd1abc6490a40eb28f212c5c8e","modified":1537585175624},{"_id":"themes/next/source/lib/bookmark/.git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1537585176101},{"_id":"themes/next/source/lib/bookmark/.git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1537585176031},{"_id":"themes/next/source/lib/bookmark/.git/objects/c1/7940ffb480f454472c9083efabce723ff53cd4","hash":"29bbded01d4399f509abd809c00957f182226432","modified":1537585176057},{"_id":"themes/next/source/lib/bookmark/.git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1537585176073},{"_id":"themes/next/source/lib/bookmark/.git/objects/ce/70a57b7d6bcddae01e3434d416c27c84b24727","hash":"d8ccbf99469b51ae629347665f96354c264457b4","modified":1537585176059},{"_id":"themes/next/source/lib/bookmark/.git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1537585176075},{"_id":"themes/next/source/lib/bookmark/.git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1537585176090},{"_id":"themes/next/source/lib/bookmark/.git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1537585176039},{"_id":"themes/next/source/lib/bookmark/.git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1537585176084},{"_id":"themes/next/source/lib/bookmark/.git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1537585176092},{"_id":"themes/next/source/lib/bookmark/.git/objects/e7/aba3f8ec35017b4dd2bc8f5ca94253a8674ce7","hash":"8fe85003f71bf38e6ae367366ae6e95a819d046d","modified":1537585175621},{"_id":"themes/next/source/lib/bookmark/.git/objects/de/52a356f671fa73a9d9910c26968d47100c655f","hash":"5bd5f521df149c8e24640151b6d83b3c6be1fd30","modified":1537585175625},{"_id":"themes/next/source/lib/bookmark/.git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1537585175628},{"_id":"themes/next/source/lib/bookmark/.git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1537585175626},{"_id":"themes/next/source/lib/bookmark/.git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1537585176040},{"_id":"themes/next/source/lib/bookmark/.git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1537585176088},{"_id":"themes/next/source/lib/bookmark/.git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1537585176081},{"_id":"themes/next/source/lib/bookmark/.git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1537585176042},{"_id":"themes/next/source/lib/bookmark/.git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1537585176086},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/heads/master","hash":"ae6535e3616c38cb4f9e4f4fd033d9cd7366f4c8","modified":1537595762399},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/97d452adf1f9aa29468c10dc5aca581c40d35d","hash":"8247b73544627904f1c49b2d48e8a5ca24c49d94","modified":1537595758192},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/34/73a532c76c2ec7eaafc9bba9bc37851cb5a349","hash":"991d675a7982030fef4e8103ecdf717e2e153143","modified":1537595758189},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/10/7997cd9f09e787407d6a579bb0ead61ba0c44e","hash":"a7bb772e0f541b9f0c5e4682f88881faef7d2b87","modified":1537595756144},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/37/e84bbc9c853d9abc39b18361a67d09402a9fec","hash":"330ba4772d5feaf23bd85aa38be94a1b254cac8a","modified":1537595759736},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/40/a8a2ab6075fb13a489aa2585f55518e03440cc","hash":"40a879b454bae72ba30ab918e7cbb3dee04c45c4","modified":1537595759738},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/41/f2acffe002ce9fa94904bdbb105c62697c08bf","hash":"6aca807e726bf9bbffdab1b97cae1132dd3570c8","modified":1537595759737},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/46/66508d485306f48ac866f4a0eded896b01adb0","hash":"a37ee79e50b83b3a5a7f736cfc6b8eafc210ebca","modified":1537595759724},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/51/e4a626dc726971ce48b9d29531ec4fa11ab93c","hash":"8bc98d2bd4f224fbba56e0339ba9e1abfbd0e676","modified":1537595756144},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/35/b5765a89abcc57439ad0e7b60dc67225e76570","hash":"b020fa3885506f64651a4a63d42b32c7874a072a","modified":1537595757852},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/63/ce5669cda10d9c600a65df1c509155a9dce354","hash":"e7eefb05c18a77c99c1044dc53cc0b33bc4bc723","modified":1537595756145},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1537595756149},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/ad104add4d67baba615eccfcc7876bdf60256f","hash":"787497f0b2a074be846ae940ba58475a830690d4","modified":1537595759726},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1537595759725},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/b1d62571d3374de0902fdf14c3fd925263c295","hash":"f0d087a62296e14072d250d0db5bfeb01e3e0f4c","modified":1537595756147},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/91/85a82ce05e0c4c6287e3ce6c31d79049a6c5de","hash":"d40af8a4f325b8b2d6eeb1f51497d2313aade46d","modified":1537595759730},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/80/8d63b637e30043e74f5150047c232028ffa3bf","hash":"c7cd9201316a2cf66b63cd0f520dc827912d8be8","modified":1537595756149},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9c/850e429959950cfd82a30843ad130dfd24331a","hash":"001c3423e8a4bf2ccd3e0ad3080d5cace613d42c","modified":1537595759735},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1537595759722},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a1/5c0ab3f7ca37d06a7a3dc28f6375ac8fcaffe1","hash":"3aa24fa2254a71f9b408a01ad7154cc1cbf7cde6","modified":1537595756146},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/99/ac01b3cae78a765c45566d5540596f71f0f9ed","hash":"394e54788569a0aef47f5c1867b7a617d314b677","modified":1537595756142},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9a/563a770314159840897f1852b05f183911ae71","hash":"0949c3c36849e955c84cc66f544fbeeca266ae19","modified":1537595759724},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/c5d2b0c8ded3a5465f659504d5654759b45ce9","hash":"133f2916c8dd706d9ea44203f671d42abed6d183","modified":1537595758185},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1537595759723},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b4/8a9ad41dbacf220607a3854e23f2136ced96fb","hash":"81ee83b48edb7df4f08573cdd14200be5f62128a","modified":1537595756141},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/da/3a5548a43813122821bf626fdd51a15f89afe3","hash":"1d8c39585806e5c7b051eb58d566a399b0e77006","modified":1537595756143},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/bf/839b1a2dfd79af314506907196f817d1d540b0","hash":"196a52782c02c03b787cca10ca172a6be6ddb8e0","modified":1537595759728},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/eb/83c3470835cc056d65fbaec5ba59fc01a341c6","hash":"a48447a56db4dce3b2ce99fcfd4cbb5d5902877f","modified":1537595758192},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b2/8efd888e853a00d7c8ba8fc827ddb0edb6668b","hash":"8c17e115b7c8a860650191fc1b74e7861ab0f7b9","modified":1537595762381},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/a400ecc881307dc0faa24170ae0a9bcbba861c","hash":"4b82935622bd12041cf7665503ae8e060705e7fd","modified":1537595756140},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/fc2c417f7156d25437bbe069fa10645b4c3a63","hash":"377e0fce80cab14d6966371260926ee78da12b09","modified":1537595756148},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/fd49187c43c81ad64c250eac1d63893c073e38","hash":"0e6f432ab1ec9a413655267ad3f62205e2e71f99","modified":1537595758191},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e7/169e14c00f267f49acb69c1ba41dc9a3229d36","hash":"2b79081ef52aec5ca3896894e25e330aed84ac6f","modified":1537595762380},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9f/e80d3fee719ad9953c0e8e8dec472bb727d17d","hash":"09516f8a3f62a9e286f3ac1985969d0913d53271","modified":1537595758181},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1537585052450},{"_id":"themes/next/source/lib/reading_progress/.git/refs/heads/master","hash":"35b5015021477f00984d50ee8894b23b639bb6d4","modified":1537585052507},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1537585052482},{"_id":"themes/next/source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1537585052464},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1537585052453},{"_id":"themes/next/source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1537585052472},{"_id":"themes/next/source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1537585052479},{"_id":"themes/next/source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1537585052489},{"_id":"themes/next/source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1537585052474},{"_id":"themes/next/source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1537585052480},{"_id":"themes/next/source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1537585052487},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1537585052462},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1537585052476},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1537585052468},{"_id":"themes/next/source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1537585052470},{"_id":"themes/next/source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1537585052488},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1537585052486},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1537585052472},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1537585052467},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1537585052481},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1537585052485},{"_id":"themes/next/source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1537585052471},{"_id":"themes/next/source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1537585052459},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1537585052466},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1537585052490},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/fill.js","hash":"e59f0e874998822abd7f3c3a01d2a91c0f00f863","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/entries.js","hash":"360fc95a37a2059dde966484e75821556c296d24","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/copy-within.js","hash":"b2c18eb301af800625ee7269abf1eb1b012d4ec0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/every.js","hash":"ade5bf84976b7c8e4118e5a569f0970bd6fea317","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/filter.js","hash":"aa59202563ffb52986a6683acfcdd9d25c7f95d8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/find-index.js","hash":"a1a98719e1d56bc13d61a6915f74df9242631442","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/find.js","hash":"d93681586eb4572b34cc85ebf64e41bdbe5c2160","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/flat-map.js","hash":"1acd208529633ee46d39523bc9d3a241992997a4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/flatten.js","hash":"4a5fbfde99a69fd9b8b2478cb30b1e10dc7a6e35","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/includes.js","hash":"208742ce8cca93d8e9b5754505fa0f3a7784ef16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/for-each.js","hash":"a6354baa7787e079b76a0c4497f58167195835c6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/index-of.js","hash":"ca2ac5a1cf634a3e91149bd40e2352a9b2c52bff","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/index.js","hash":"9db69a69c0ddaa335351ddf5e54f081e2ea1dab4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/iterator.js","hash":"39f0c9dc16b79ab1ef17a4294809f2b9e6c48979","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/join.js","hash":"a019b3214411b80ef374fff42c2728b1f6c2c2e6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/keys.js","hash":"9bf029b15d04a1c99eeb548cbb10112c9c386ccf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/last-index-of.js","hash":"b07d6a078cc4dfb99c2993abae93d00882a66925","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/map.js","hash":"3c2effa3075034dc4537614e8d4594606f006b5b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/reduce-right.js","hash":"cd64f8134cf12cbd2fe729ec687db97a5470a55f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/reduce.js","hash":"a2fba46d3e5f33089dbea00877024896bd8a7309","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/slice.js","hash":"ede73fa8928befd0360a1d41cfce2318d807e61b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/some.js","hash":"716be04830d8c30f0144b57c5c5ac77f83049623","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/sort.js","hash":"263bdef689d84e2d0fe5a9c7261283d261f53f54","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/virtual/part.js","hash":"7d0a80ad04918019b75908e8b71932174d68c64b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/virtual/index.js","hash":"1f89f0b49c55868d2af5dcb41fc3e8f4936704a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/array/virtual/values.js","hash":"39f0c9dc16b79ab1ef17a4294809f2b9e6c48979","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/function/virtual/bind.js","hash":"23e22a73e6add276f54cca350cddf7958ac9b374","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/virtual/to-fixed.js","hash":"b89a5b6691ad58ae10550ceb8412d4fddd9da58c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/virtual/index.js","hash":"70994591988d18dfe2f44e7ac15b171fbf285f14","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/virtual/to-precision.js","hash":"d49f5dd1b02050bd0f5561491de0816973d64d22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/number/virtual/iterator.js","hash":"1d8a707753a36696b808bb8b26bbc49ed2767217","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/at.js","hash":"dd40f2e859c069d898430fbf5778a74acd8db4e9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/big.js","hash":"9692a968e31a99d71ebebdc1e782e77014ce6438","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/anchor.js","hash":"4d3c11e89546bf70c7debab2be43db5989a528e4","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/blink.js","hash":"90770f01020379a3d12b34fb8ce4ca8807fdfb8b","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/bold.js","hash":"db6ca1a01ccf5bcc4b91a8f9096ff5e099b8bbf9","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/code-point-at.js","hash":"ea8fc8caccca0c7b5e293b88fc82183acd5622a0","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/ends-with.js","hash":"de7af44b73e04af14eb4312b8544ab7ede26dbe2","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/escape-html.js","hash":"266bde4693084cbaf5b93b573d29dc451418a1ba","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/fontcolor.js","hash":"00a17c665d37cf346158d6aa8a7b6740885a3a4d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/fixed.js","hash":"98e22e2c522f7533a57de39fabe3e78051c44360","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/fontsize.js","hash":"a48bc7323dd7903800c819da45012c6089d3691f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/includes.js","hash":"468bb530aa50ce51377ce01e796a133c82eedfaf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/index.js","hash":"6534ef882c5bc05e9f9093197174de83fc842d16","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/italics.js","hash":"71008852eab48f11292caafea72e0cc4298f1ff5","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/link.js","hash":"12a7bdf733e14ff12349e0ca4089f6f26a33ba4c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/iterator.js","hash":"6d6f4c3c7797b70b0ff26bf52b03649b33892caf","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/pad-end.js","hash":"84e45ad4917c9caeb0cdb3ab8b8ac8ac405f93d6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/match-all.js","hash":"7a80944dd5a0df5cec066737cdaffdde97a17b5f","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/repeat.js","hash":"710695ac7a0510189b8cb98693dde915861148fb","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/small.js","hash":"ad9e63ea5640693eb406614b214852c985fadb7e","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/starts-with.js","hash":"c7cb81b8a375c44a37a5be3e39044c0a2cffdc26","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/strike.js","hash":"2d2e7ed8b50c8ba057cc1f83c1ac112ebdd36c76","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/sup.js","hash":"703773b33024013827bef16ef28b64f362ccce22","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/sub.js","hash":"2ca8aa616abe661425057d3325c420b228b190d6","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/trim-end.js","hash":"78e99892601b60b7ba2d6eb4f7215321a1bd2a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/trim-left.js","hash":"392ae1870d0e5f5e63b8ce5dcec3f9ece242065d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/trim-right.js","hash":"78e99892601b60b7ba2d6eb4f7215321a1bd2a5c","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/trim-start.js","hash":"392ae1870d0e5f5e63b8ce5dcec3f9ece242065d","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/trim.js","hash":"2eaa2a3348bf92dbb2a5ead1730a74975b1e9014","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/pad-start.js","hash":"d9d6e7ffc1aad4c7528cfd3043aac3c081dd2bf8","modified":499162500000},{"_id":"themes/next/node_modules/core-js/library/fn/string/virtual/unescape-html.js","hash":"4d1771072f7e2f6d66d4c3f2aac572b7db9929ba","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-rn-min.js","hash":"134803771697998a4d77e593774cd88a680a7065","modified":499162500000},{"_id":"themes/next/node_modules/protobufjs/docs/fonts/OpenSans-Bold-webfont.svg","hash":"5a6a63870c020200db4d664aa4c45e021a000749","modified":1485533035000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Enum/Value.js","hash":"86c5190216c676082f1dcd6b69074c67d0e19dcb","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Message/Field.js","hash":"beef95813fcaef4b4448b9bb4942f785c57568ab","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Message/ExtensionField.js","hash":"dbf2c54a42e05a236d3bbba2cf1b06471001f558","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Service/RPCMethod.js","hash":"c597a85188d825f63a4d5c51e540246b33e98115","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Message/OneOf.js","hash":"6ee4886a71748c35c6ff8465551a77c199bc6986","modified":1485532820000},{"_id":"themes/next/node_modules/protobufjs/src/ProtoBuf/Reflect/Service/Method.js","hash":"24b6ea5c90fd64d92a69292033dc01bf774a61fb","modified":1485532820000},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1537584731159},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/1f/9bfac8ac3b22f100c85bb82877c7af973f011a","hash":"74f0088767a48b5b8874bb5e8953604058233105","modified":1537595757851},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-min.js","hash":"0067e6febd47ad67cdcc51ae2dfea826a30c775f","modified":499162500000},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"0faf8a6b229847e675c27de42d6aabd1b3ac3722","modified":1537584731186},{"_id":"themes/next/source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537585176116},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/heads/master","hash":"28953679a3b88085bbeabf1ad1e40b001b4aa1f9","modified":1537585176119},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537584731183},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537595762398},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/heads/master","hash":"dbad8e40665bf0bcefbbba6d2d971e69d0931584","modified":1537595762400},{"_id":"themes/next/source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537585052506},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/heads/master","hash":"4eef8ee13bca28edfe8696b702ec8e5aff3e8783","modified":1537585052508},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-weapp-min.js","hash":"1e3956a41b58ac5aac0215def9bbe338237e2fa9","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-weapp.js","hash":"08c674348186996f340bcf13c8e5ad803ee54671","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av.js","hash":"70a25cdb586134a734583118280c493f7d8c9399","modified":499162500000},{"_id":"themes/next/node_modules/lodash/lodash.js","hash":"ab67b2dd6598912d7811eebf13f0aa7b67756670","modified":499162500000},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"0faf8a6b229847e675c27de42d6aabd1b3ac3722","modified":1537584731183},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"28953679a3b88085bbeabf1ad1e40b001b4aa1f9","modified":1537585176116},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"4eef8ee13bca28edfe8696b702ec8e5aff3e8783","modified":1537585052506},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/remotes/origin/HEAD","hash":"dbad8e40665bf0bcefbbba6d2d971e69d0931584","modified":1537595762398},{"_id":"themes/next/node_modules/leancloud-storage/dist/av.js.map","hash":"274c422e44ea4d203ad8e70f5ea44963ea504c93","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.browser.js","hash":"d249712c6f590f0322493ef3feac68daf790288b","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.weapp.js","hash":"5e8a01a4f2b807824bf57e216847e6641b97e0e0","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-weapp.js.map","hash":"15e5e465d4b0648a48805f4a8f60b8142e0b6442","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.weapp.js","hash":"fa7020a428c58c7b7eebf769e53336db62003858","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.browser.js","hash":"068f919d02de30896aa2e94bf9e5d0e7ce11d2ac","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.browser.min.js.map","hash":"91f27723644465449bbc51c91b2cba49ae3bf727","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.weapp.min.js.map","hash":"a77a3df4b6766f686137ce66b4a3ff2a769b7503","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-rn-min.js.map","hash":"d4d57ba830309855b5d5cd3c26b5e00d185eb6ee","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.browser.js.map","hash":"f457245e3ecd31fc6506956e7379cb94b8cc5bce","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-min.js.map","hash":"ac694ba54b1ccd796147e8c3da63fe51d9bffae2","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query.js","hash":"4416d90966edd7dd973a12f70797e5efe574c7e5","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-weapp.js","hash":"9fdfeee1a67541b2a9ecb718e73d119eac1ace2f","modified":499162500000},{"_id":"themes/next/.git/objects/pack/pack-3e52764a8afa019df9f67388c6a7bda8276f576c.pack","hash":"b0f6ef7281302885e46ecdf8782c3fd8b935ba52","modified":1537581777728},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-weapp-min.js.map","hash":"008e2043ce13fee288f0ef1effe5febd8a598fdc","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime-core.weapp.js.map","hash":"bd188f0fe212734220f00ef19dd070298bdf6d2d","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query.js.map","hash":"2c18907214899fddf38647d496395c6938c06818","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.browser.js.map","hash":"435c009ff2a319186c0aea2cd81824fb6f32ec56","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-weapp.js.map","hash":"5a36bf46d9f41393a9f56a0d22c9bb4386555fb4","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-realtime/dist/realtime.weapp.js.map","hash":"f0af2feef6e8625de7bb71e931553e0fe09343e3","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-min.js.map","hash":"02bb07c78733ab684a586d5ffd168994e224ad74","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-rn-min.js.map","hash":"702b763e380101f33bad867bdffd8f57c8fb6852","modified":499162500000},{"_id":"themes/next/node_modules/leancloud-storage/dist/av-live-query-weapp-min.js.map","hash":"2217939efaf6506ea9c0d26faa4d3c9b5148e73c","modified":499162500000},{"_id":"public/atom.xml","hash":"f87e9ee09b524a33d59dab978e99aaff30061f2d","modified":1573790201866},{"_id":"public/search.xml","hash":"0bd13470701eb4fb3e163c534643c5497fc61180","modified":1573790202404},{"_id":"public/about/index.html","hash":"f2e601140bcf7aa5f8749808b7d61a995cda9194","modified":1573790202863},{"_id":"public/categories/index.html","hash":"21c3ada4429ad59c2591fb3ae9e708dca370748f","modified":1573790202866},{"_id":"public/tags/index.html","hash":"8aa9a9b269760bdab58d8c04a50ed30a388cd4f1","modified":1573790202867},{"_id":"public/2019/11/14/Python中如何优雅的使用assert断言/index.html","hash":"db71b874e081b77adf154bd2c4d300c2fee70913","modified":1573790202867},{"_id":"public/2019/10/10/Git分支管理策略及简单操作/index.html","hash":"bc977f735fd5f0407d5392e16925ab379bf5da37","modified":1573790202868},{"_id":"public/2019/10/07/浅析Python中的列表和元组/index.html","hash":"689bf4fb2e65ddb3fd5465c2447834413756e287","modified":1573790202868},{"_id":"public/2019/10/07/浅析Python中列表操作之-和/index.html","hash":"3cbcc1eace6594edc6ee8cf8f6ca15c22e1d6733","modified":1573790202868},{"_id":"public/2019/10/01/神经网络的学习为何要设定损失函数？/index.html","hash":"cf578f77b897a40561aaf855f51d08f191cb7f90","modified":1573790202870},{"_id":"public/2019/06/20/服务器中的物理CPU、逻辑CPU和CPU核数/index.html","hash":"dc4d2895d89ce1befee84bd5559f29f339f5f79a","modified":1573790202871},{"_id":"public/2019/05/28/Linux查看端口占用情况/index.html","hash":"ce16e42150bd0449dc07f5587f58788fded5b1e2","modified":1573790202875},{"_id":"public/2019/09/29/神经网络的激活函数为什么要使用非线性函数/index.html","hash":"593ee942469f80c080a5718a304e8a77cccd04eb","modified":1573790202875},{"_id":"public/2019/03/29/Java多线程读写HashMap遇到的坑/index.html","hash":"f499b61cb51ef37f79609d4cb5526ce848e15a8e","modified":1573790202876},{"_id":"public/2019/05/21/Java实时读取log日志文件示例代码/index.html","hash":"0715f392c762fc70f5c4fa17928b159151faf14d","modified":1573790202876},{"_id":"public/2019/02/21/进程地址空间/index.html","hash":"0411f6041249381c4f7d5d420ab70ce8607ef212","modified":1573790202877},{"_id":"public/2019/03/15/Python中如何表示正负无穷大/index.html","hash":"8ab91d4ca8e8a30381fc6ed9130cef66bc4b5dee","modified":1573790202877},{"_id":"public/2019/02/15/布尔环/index.html","hash":"5eab8723d8dd5a5f2e592a5de291d7ae5ecb5d1a","modified":1573790202878},{"_id":"public/2019/02/20/异常的分类/index.html","hash":"6f11f43e9e091f7ceb79d9ce9ea3ca03f8238105","modified":1573790202894},{"_id":"public/2018/12/03/Python中如何生成一定格式的日期字符串/index.html","hash":"404c85f9bce28ed7cee7482151dbd8cde411be40","modified":1573790202894},{"_id":"public/2018/11/27/Python中append和extend效率/index.html","hash":"a92502d246948bc53932fd6aaf0046915accbd17","modified":1573790202894},{"_id":"public/2018/11/07/IP地址的分类/index.html","hash":"a538697e40a6527d85753a80da88ee3db0af9636","modified":1573790202894},{"_id":"public/2018/11/05/Java内部类/index.html","hash":"d94dc5ae5a8ec1ac5e1ce2d1a123876cb469ccc5","modified":1573790202895},{"_id":"public/2018/11/04/Java中的接口和抽象类/index.html","hash":"a3cc0e87e6b9e1c789b8e920adad727bf64e5e26","modified":1573790202895},{"_id":"public/2018/11/01/Redis之数据类型的内部编码/index.html","hash":"dbe1076ad92867063b849e4a2d187b47e0cf278c","modified":1573790202896},{"_id":"public/2018/10/30/Java包装类中的缓存设计/index.html","hash":"b7043ebba6940ae22ce83fa1b69b2a8f50e5a516","modified":1573790202896},{"_id":"public/2018/10/30/Java中的单例模式/index.html","hash":"f32a249ea94f0fb9d5b82b456394f3175198c7e8","modified":1573790202896},{"_id":"public/2018/10/30/Java中的代码块/index.html","hash":"d7e2799782f1b0d36f377e341281eb7e922ac949","modified":1573790202896},{"_id":"public/2018/10/29/Java编译类型和运行类型/index.html","hash":"0e4fc957022bd883480705eb800b87557d9f17e5","modified":1573790202905},{"_id":"public/2018/10/29/Java之Object根类/index.html","hash":"a922859c4599187521aea523eb39ef0524ea9abd","modified":1573790202908},{"_id":"public/2018/10/29/Java之super和this/index.html","hash":"8dcde82f3b46756bbf6ccd71b2a8c2655f5733eb","modified":1573790202909},{"_id":"public/2018/10/26/Java方法的值传递机制/index.html","hash":"f9892445c916fc927e77bd21492cc39dd5bc0b36","modified":1573790202912},{"_id":"public/2018/10/25/四种方法实现交换两个变量的值/index.html","hash":"950c0082cbe73a867778499d67736d17b76213f5","modified":1573790202912},{"_id":"public/2018/10/24/Java中的-赋值运算/index.html","hash":"35a3d3e07e3f919c4948b224847cc060cfd2f887","modified":1573790202913},{"_id":"public/2019/11/04/神经网络中为什么不能将权重初始值设置为一样的值/index.html","hash":"dda339abd527d80a2e0bd1f8a559eab3e26b3dfd","modified":1573790202913},{"_id":"public/2019/02/11/搭建Git服务器的一种方法/index.html","hash":"8da7359f1c8fa2001cccfe093673b2b73228940b","modified":1573790202913},{"_id":"public/2018/09/29/C语言中的-if-n-1-和-if-1-n-的区别/index.html","hash":"a266f4e9edfb11a22e0034e2de2e4f10a639ec40","modified":1573790202914},{"_id":"public/2018/09/28/如何理解http是无连接，无状态的？/index.html","hash":"177c03cddde2153305e8e1752547fcd509bdc725","modified":1573790202914},{"_id":"public/2018/09/28/JSP相关概念/index.html","hash":"6bd159ba7c319d823dbe05425d4c6f6303a4cc11","modified":1573790202914},{"_id":"public/2018/09/27/面试总结之Java-Web篇-持续更新/index.html","hash":"075cfd92780e84fae7da3fc042ad1862dbb132fe","modified":1573790202915},{"_id":"public/2018/09/26/数据库范式/index.html","hash":"34d67572cff6ed5e2cb6e8dc3da21c6a7e72610b","modified":1573790202915},{"_id":"public/2018/09/26/数据库事务的四个特性及四个隔离级别/index.html","hash":"d2c0588c92b5067d99276a322a879e6ef110f90b","modified":1573790202915},{"_id":"public/2018/09/26/PostgreSQL函数、索引和视图操作Demo/index.html","hash":"f80c9c77a4192703f2ede623020cc49fdecb0467","modified":1573790202915},{"_id":"public/2018/09/26/PostgreSQL数据操作和数据表约束Demo/index.html","hash":"ce7ef58b9ccd43b8d234266aa7baaf549a9400ef","modified":1573790202916},{"_id":"public/2018/09/26/DROP、DELETE和TRUNCATE区别/index.html","hash":"d7a097a0e73ea3f7c5d6eb951fee2e6c0df0b856","modified":1573790202916},{"_id":"public/2018/09/26/PostgreSQL数据库、数据表、数类型和运算符Demo案例/index.html","hash":"ceaad15d5716c9c685da65561d36f0883e4865a7","modified":1573790202916},{"_id":"public/2018/09/26/面试总结之数据库篇-持续更新/index.html","hash":"adac4674dd798fb7eee003323ed2b8456ce3de59","modified":1573790202917},{"_id":"public/2018/09/25/URL、URI和URN三者之间的区别/index.html","hash":"d6b27f3f6c8715f5de3f317a670be2a0038eef79","modified":1573790202917},{"_id":"public/2018/09/25/计算机网络常用协议端口归纳/index.html","hash":"ea874568195292f8718dec1c424da3837f061610","modified":1573790202917},{"_id":"public/2018/09/25/DHCP续租过程/index.html","hash":"cc6fced3e81988c85b9ecfe4418b85649ffe2a5b","modified":1573790202927},{"_id":"public/2018/09/19/计算机网络各层协议/index.html","hash":"4d203598dec23ca31af58b977fd0fb1dc05ecea6","modified":1573790202927},{"_id":"public/2018/09/19/maven约定目录配置/index.html","hash":"938a72342f62bf53a9f9bc587a37e839f64a15c2","modified":1573790202927},{"_id":"public/2018/09/18/Mac-Dock栏分组/index.html","hash":"4f10b7731fcc4bb88ecad2b3af74e91f626db2b9","modified":1573790202928},{"_id":"public/2018/09/09/Java-方法设置默认参数/index.html","hash":"76e12b68a09edb3b45fcb122023357884c79a304","modified":1573790202928},{"_id":"public/2018/09/07/Java-关键字this和super/index.html","hash":"3d935e2681b7cd8dc1069139bcf3d1f99cf91f9c","modified":1573790202928},{"_id":"public/2018/09/06/Linux-使用su和su-切换用户的区别/index.html","hash":"9c31ecb879c86b4f29e56f96838fca114dd0be31","modified":1573790202928},{"_id":"public/2018/09/06/Java类属性和方法的可见性/index.html","hash":"2f6b1466d347a6b577f039087d2fa0bfdfa3673b","modified":1573790202929},{"_id":"public/2018/09/05/Linux文件名查找/index.html","hash":"8a0f6af8be17c00a971b3b7bbbb2805096bd7510","modified":1573790202929},{"_id":"public/2018/09/05/Linux切割命令split/index.html","hash":"a655a4edfe8d6ca136eeb953a4b3543e6a24179f","modified":1573790202929},{"_id":"public/2018/09/05/Linux-命令回传码与-或/index.html","hash":"6fde8603e200c7b320455b78976c0ccd321aba75","modified":1573790202929},{"_id":"public/2018/09/05/Linux-Bash-默认的组合键汇总/index.html","hash":"41b6195838c8cf5c2b441d705e7ce1e2ac3e12cb","modified":1573790202930},{"_id":"public/2018/09/05/Linux数据流重定向/index.html","hash":"94e01b0fae1c0b70ad4ecdf0c26c1150e937d99f","modified":1573790202930},{"_id":"public/2018/09/04/java平台结构/index.html","hash":"a07478379708c15b49925d0d0aaae98dc6601278","modified":1573790202930},{"_id":"public/2018/09/02/java入门小知识/index.html","hash":"970607024b39863f9b67c3ac4635eb2b6b6f3a09","modified":1573790202931},{"_id":"public/2018/09/02/Jet-Brains-IDE-常用快捷键/index.html","hash":"37bdf95263730cef7aeab87b0ca9e90417485f8e","modified":1573790202931},{"_id":"public/2018/09/01/子网掩码的作用-详细介绍/index.html","hash":"fb3bdd9a015d69282991989beb87418ed4505e40","modified":1573790202931},{"_id":"public/2018/08/31/计算机网络之子网-掩码/index.html","hash":"2c4b59761008fa9bd98a8603c043f33e38dfbe5c","modified":1573790202932},{"_id":"public/2018/08/30/Linux命令英文缩写/index.html","hash":"618339fac43bc5fe9b33557435d3d934aa606071","modified":1573790202932},{"_id":"public/2018/08/28/SQL语法练习-一/index.html","hash":"06ac37f7e7dfb652a5457d9bbe861a68dbeab632","modified":1573790202932},{"_id":"public/2018/08/24/Linux-使用useradd命令时发生了什么/index.html","hash":"d9192146e70813f7c7ee5c618083fe5f07c033b3","modified":1573790202932},{"_id":"public/2018/09/26/PostgreSQL数据查询Demo/index.html","hash":"054e8ffc8623411afd777a7ea0fa566c3b6fe664","modified":1573790202933},{"_id":"public/2018/08/23/Linux-文件特殊权限之SUID、GUID、SBIT/index.html","hash":"9f47defee86791d869f6ff102f6c420f97e3aac4","modified":1573790202934},{"_id":"public/2018/08/22/Linux根目录下目录介绍及各项缩写全称/index.html","hash":"80c28f3ebea807c1b80eb8ab0e1c95cbe30d3466","modified":1573790202943},{"_id":"public/2018/07/25/TCP-套接字编程/index.html","hash":"d6e078971748f25d2928e3a151ce92be073b5119","modified":1573790202944},{"_id":"public/2018/07/25/UDP-套接字编程/index.html","hash":"a5947a0692271e43d14ee217b0c78308ebbfc416","modified":1573790202945},{"_id":"public/2018/05/11/Mac下打开swf文件/index.html","hash":"45849ea48b4bd10584fdc6072af875a1a25eec02","modified":1573790202945},{"_id":"public/2018/05/08/Mac下profile文件/index.html","hash":"1f65bcfe98867fbba6f645e06e9210f5252f08a4","modified":1573790202945},{"_id":"public/2018/05/05/Linux之crontab命令/index.html","hash":"f51843e9d17db84c17a9d79c218062de212eb5d9","modified":1573790202945},{"_id":"public/2018/04/25/终端格式化打印json数据的方法/index.html","hash":"a61758b25043b7688e2ee6a09e1607303443f1dd","modified":1573790202945},{"_id":"public/2018/04/19/python3-产生随机字符串/index.html","hash":"b5a43b12cc4d11c84c2f08c10eff6580844e7660","modified":1573790202945},{"_id":"public/2018/04/09/HTML里引入CSS的四种方式/index.html","hash":"f721fb90662b1a4543be13781a591b42ac0cac18","modified":1573790202945},{"_id":"public/2018/04/06/Python3-解包和压包/index.html","hash":"3829228ecdf7b74bc99adb3375144bdb77d1e705","modified":1573790202946},{"_id":"public/2018/03/29/Python3-对象操作的时间复杂度总结/index.html","hash":"523f47d964946f56c758c4720f49bad0b6544ea6","modified":1573790202946},{"_id":"public/2018/03/29/Python3-for-else-陷阱/index.html","hash":"8c45fbd948da1e6707b79aaa741afa01b6fa22f2","modified":1573790202946},{"_id":"public/2018/03/29/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint/index.html","hash":"70263f63943857b89eb2406f095bb71f031c4eef","modified":1573790202946},{"_id":"public/2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/index.html","hash":"3ecbde627d3c5a373873067d6f64c8075a6b3fe0","modified":1573790202948},{"_id":"public/2018/03/27/原码、反码、补码/index.html","hash":"2ba1df0fa7d46be1e1ab694e5d9b80140b50785f","modified":1573790202970},{"_id":"public/2018/03/26/正向代理和反向代理/index.html","hash":"1db1f3dcd92880bc0bbdc54af976722c8669d40f","modified":1573790202971},{"_id":"public/2018/03/20/一次完整的HTTP请求流程/index.html","hash":"6438ecc7b2d662808a65b2e1fdeedb50e30edadb","modified":1573790202971},{"_id":"public/2018/03/19/三次握手 | 四次挥手/index.html","hash":"92aaeb5704bb37301abb692f2267ae352ce5fe07","modified":1573790202971},{"_id":"public/2018/03/19/Python3-回文字符串的判断/index.html","hash":"d96ca14e41c0ce78813108892c502f6d902534c1","modified":1573790202971},{"_id":"public/2018/03/19/Python3-单例模式/index.html","hash":"62c36b648cb02d3c6602a5e46efe4dd118fff7fd","modified":1573790202971},{"_id":"public/2018/03/17/Python3-基于链表技术实现栈/index.html","hash":"407398a1251d632f42a4bfb64eaec73611417284","modified":1573790202971},{"_id":"public/2018/03/17/Python3-基于顺序表技术实现栈类/index.html","hash":"d282b28dbba5036158fafc8889955a7b42b1871e","modified":1573790202972},{"_id":"public/2018/03/13/什么是Socket-转/index.html","hash":"7f813bddf8c72871025b1bd1b19af1dece4ed0b7","modified":1573790202972},{"_id":"public/2018/03/12/Python3-实现遍历目录与子目录，并抓取-py文件/index.html","hash":"34acf27a172deae3d963dbfad8d748db4cc7c09b","modified":1573790202972},{"_id":"public/2018/03/12/Python3-os和sys模块的作用，以及常用的模块方法/index.html","hash":"cb2acd7069abb74fc5e6e5d131405c01bb2cd380","modified":1573790202972},{"_id":"public/2018/03/12/Tesseract的使用/index.html","hash":"24f3640e0094c9531616030936124ab8d939371c","modified":1573790202972},{"_id":"public/2018/03/12/Python3-将两个排好序的列表合并成一个有序列表/index.html","hash":"9f2c0da36593485b7026ad657c794fe428f642a9","modified":1573790202972},{"_id":"public/2018/03/09/Python3-实现常见的各种排序方法/index.html","hash":"4cb290beee2f68389297e03d1aa3567cb24d88d3","modified":1573790202977},{"_id":"public/2018/03/09/Python3-实现二分查找/index.html","hash":"82b1c2c55c6bca47d3ab0be1520d8ff9d6a3e2b1","modified":1573790202977},{"_id":"public/2018/03/09/Python3-向上取整ceil-向下取整floor-四舍五入round/index.html","hash":"091c6c916f79749563a2c1e6228443568df4a2b6","modified":1573790202977},{"_id":"public/2018/03/08/Apache和Nginx的对比/index.html","hash":"e7212347112ff2bf0805271d968227b5a7420909","modified":1573790202977},{"_id":"public/2018/03/08/用户密码保存的方式有哪些/index.html","hash":"03b8a1ea04ca88ae947e62e69b6218dfb97ad5a5","modified":1573790202979},{"_id":"public/2018/03/07/进程间的通信方式-IPC/index.html","hash":"4c1d1bdbcea3fa8ac4467d15c9ca497790823c04","modified":1573790202979},{"_id":"public/2018/03/15/Python3-实现二叉树前、中、后序遍历及按层遍历/index.html","hash":"eea36fd67af79a980db41775176f9ff45aa8b9c6","modified":1573790202979},{"_id":"public/2018/03/07/三种多路复用IO实现方式：select，poll，epoll/index.html","hash":"5e3b36e4756bdd13ea9749343491789b9fdfefb1","modified":1573790202979},{"_id":"public/2018/03/07/Django运行方式以及处理流程简介-转载/index.html","hash":"62f452b181591e3562df1b0ec143017265be39d5","modified":1573790202979},{"_id":"public/2018/03/07/浅谈TCP和UDP的区别以及应用/index.html","hash":"51cd101eef6f68183664f420ad3f473ea98d6bf5","modified":1573790202980},{"_id":"public/2018/03/07/浅谈Session和Cookie的区别与联系/index.html","hash":"cb52ee22ea886776d744081ec3f5ffee3ac37848","modified":1573790202980},{"_id":"public/2018/03/07/如何理解操作系统中的同步和异步、阻塞和非阻塞/index.html","hash":"89878324df7910c63c9ef1be12f40ae5168025ce","modified":1573790202980},{"_id":"public/2018/03/06/Python3-nonlocal声明/index.html","hash":"72a3817904f583d391e593998992ad8370f8a85e","modified":1573790202981},{"_id":"public/2018/03/06/Python3-闭包/index.html","hash":"4670ec0e1d609486b5d846ca4dd52d12f983ce7b","modified":1573790202981},{"_id":"public/2018/03/06/Python3-让字典保持有序/index.html","hash":"48cb05b3a3dc46339c0ec25ef6e447ff810a6f52","modified":1573790202981},{"_id":"public/2018/03/06/Python2-7-x与Python3-x差异/index.html","hash":"702146eacb21906ec7f75a14a96b5ff6ceb086dc","modified":1573790202981},{"_id":"public/2018/03/05/Python3-垃圾回收机制/index.html","hash":"4eef3fec77ef017b490137f8fc56f26d65074fbd","modified":1573790202981},{"_id":"public/2018/03/05/IO密集型任务、计算密集型任务，以及多线程、多进程/index.html","hash":"8ab27155ace07555c72506bb9f20e459d5c58072","modified":1573790202982},{"_id":"public/2018/03/04/进程、线程、协程/index.html","hash":"db1277b8b06375c8018e4427d21e387c0bbb2f5e","modified":1573790202982},{"_id":"public/2018/03/03/Mac-OS-命令之文件-夹-删除/index.html","hash":"b21cb63d32f441820c5834bde148bc55d5f888a1","modified":1573790202982},{"_id":"public/2018/03/03/Python3-使用virtualenv搭建虚拟环境/index.html","hash":"d8e7942b23fd901e6fbc2157fb597b077f35c9b3","modified":1573790202982},{"_id":"public/2018/03/03/Markdown小技巧之空格输入/index.html","hash":"b8c4ab33a19caef0612dc327b00af6168e930664","modified":1573790202982},{"_id":"public/2018/03/03/Python3-is和-的区别/index.html","hash":"f07ebad2b450c2c30601e2fd90efe6e5c8130958","modified":1573790202983},{"_id":"public/2018/03/03/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy/index.html","hash":"1fb9a56f8cd479bf414f979bbfcd1c4053c89677","modified":1573790202983},{"_id":"public/2018/03/03/Python3-作用域/index.html","hash":"f7307a0bf082dacdda519d9d1c426bcf50ee4d79","modified":1573790202983},{"_id":"public/2018/03/03/Python3-函数重载/index.html","hash":"8a301228cf069f1bb6360042ba17475795d3f979","modified":1573790202984},{"_id":"public/2018/03/03/Python3-子类的查看与类的对象判断/index.html","hash":"d65c79ebf2f9b367657098dbf69ec9209ca28c91","modified":1573790202984},{"_id":"public/2018/03/03/Python3-鸭子类型/index.html","hash":"a221bc86f722077211f0d7459accf50fcdde67cc","modified":1573790202984},{"_id":"public/2018/03/03/python3-如何用一个表达式合并两个字典/index.html","hash":"e747d48307dfddfd1cebe0c83176310f0450ec2c","modified":1573790202984},{"_id":"public/2018/03/01/if-name-main/index.html","hash":"ae5517caa094e72eca199267f21e2b20b20aff81","modified":1573790202985},{"_id":"public/2018/03/01/Python3-自省/index.html","hash":"cca4f90e02280d5a17fe845da77d96adeba37894","modified":1573790202985},{"_id":"public/2018/03/01/Python3-类变量和实例变量/index.html","hash":"1aa32e3a8e2acc256f87fd9ae5a84004f4d9471f","modified":1573790202986},{"_id":"public/2018/03/01/python3-可迭代对象、迭代器和生成器/index.html","hash":"313b67e8e7c6c91a93b52c2624186801369b7b97","modified":1573790202991},{"_id":"public/2018/03/03/Python3-真假值对照表/index.html","hash":"dc37c9188873b61fa2b9241308d2681959819d73","modified":1573790202991},{"_id":"public/2018/03/01/Python3-单下划线和双下划线/index.html","hash":"4796eb31ec570e106c0c92913785f24543d038f2","modified":1573790202992},{"_id":"public/2018/02/28/Hexo博客Next主题添加Fork-me-on-GitHub标签/index.html","hash":"af8e1855177addbab8f3de34087126e297289cc0","modified":1573790202992},{"_id":"public/2018/02/28/从零开始学爬虫-05/index.html","hash":"b14d2981f058727b55348631441b414d568d33ec","modified":1573790202992},{"_id":"public/2018/02/28/Hexo部署的网站项目-deploy-git-中添加README-md/index.html","hash":"5c173779fe157830271b6e83b4448ff12bacfd9b","modified":1573790202993},{"_id":"public/2018/02/28/从零开始学爬虫-03/index.html","hash":"cdab1efa7f01c67c442ece9587e20fb56e0d1af9","modified":1573790202993},{"_id":"public/2018/02/28/从零开始学爬虫-04/index.html","hash":"b002567bf26a9077382270de69d98494fd8b6e4f","modified":1573790202993},{"_id":"public/2018/02/28/从零开始学爬虫-02/index.html","hash":"d719d04f4a9d6e7074530bf686b6ff6fde380607","modified":1573790202993},{"_id":"public/2018/03/01/Python3-staticmethod和-classmethod/index.html","hash":"1929bcc7ce513580109fd21921aa64a08103115a","modified":1573790202993},{"_id":"public/2018/02/28/从零开始学爬虫-01/index.html","hash":"d87fc4864d1694de48adf73510ff83cb7d3ec46d","modified":1573790202993},{"_id":"public/2018/02/27/Python3-使用Selenium-PhantomJS爬火影忍者漫画/index.html","hash":"9b1c684e9da0928453bc3f7aaed5415b26663cda","modified":1573790202993},{"_id":"public/2018/02/27/简谈爬虫攻与防/index.html","hash":"4a1dbe615c14d44bd684f4ff26548032a0947343","modified":1573790202994},{"_id":"public/2018/02/26/hello-world/index.html","hash":"6eb0514b70b7b2aad087b78b61f2343abb141765","modified":1573790202994},{"_id":"public/2018/02/27/一种Git保留两个repo的commit信息进行合并的方法/index.html","hash":"54075be9d2cea89777b4b3a7f232e699c02f467a","modified":1573790202994},{"_id":"public/categories/面试/index.html","hash":"9dd77298962938492ea600b8704f4f076651d438","modified":1573790202994},{"_id":"public/categories/网络/index.html","hash":"a452e1f509b4be066cf66fb08ac5328ce235efaa","modified":1573790202994},{"_id":"public/2018/02/27/Django2-0-1搭建电影网站/index.html","hash":"68ea5a47d644c5c499b33915bf5044060ae27d1c","modified":1573790202994},{"_id":"public/categories/网络/page/2/index.html","hash":"342c4d7d8782e36208314aefddb36008aec1720d","modified":1573790202994},{"_id":"public/2018/02/27/Github多分支管理Hexo-Blog项目/index.html","hash":"809c8d1a95361e86926da5e4acdc8839f8b98040","modified":1573790202994},{"_id":"public/categories/Python3-进阶/page/2/index.html","hash":"be8c2dad62aa5f45be298df062f52acc50aca150","modified":1573790202994},{"_id":"public/categories/Python3-进阶/page/4/index.html","hash":"8d0ed34ec37ca5f091a39cb57fa58b9aece85bc6","modified":1573790202995},{"_id":"public/categories/面试/数据库/index.html","hash":"b39242e73478e578554866fe72cf1aaf87f72fc9","modified":1573790202995},{"_id":"public/categories/Hexo/index.html","hash":"6a886f4e50d5de22993a0fb8fb6492d0f874b71f","modified":1573790202995},{"_id":"public/categories/Git/index.html","hash":"43f6ad8b6dd28720b369d78cc262ce02f021b15c","modified":1573790202995},{"_id":"public/categories/操作系统/index.html","hash":"d9ecb5fd70c599ac5ece88ef90335f9afdc9dad2","modified":1573790202995},{"_id":"public/categories/Python3-进阶/index.html","hash":"e6c6147dfbecfe5865bedb9804381fdf9ef67ffa","modified":1573790202996},{"_id":"public/categories/Python3-进阶/page/3/index.html","hash":"1b74800e3569f53144573cc0d6ffa611cbd66aed","modified":1573790202996},{"_id":"public/categories/Django/index.html","hash":"cab5d3f3b1b81563c8b46e7144565393d740a83f","modified":1573790202996},{"_id":"public/categories/Frontend/index.html","hash":"6487be2b76884d09d9f426ee703f771d23dc453b","modified":1573790202996},{"_id":"public/categories/Java/index.html","hash":"c0f6bd886cbda52146a03aa2d47d2ca6cf3f9469","modified":1573790202996},{"_id":"public/categories/Java/page/2/index.html","hash":"efacbdc49bcdb90e11ee31390c98ed39167f5f9c","modified":1573790202996},{"_id":"public/categories/操作系统/多任务处理/index.html","hash":"9f6465358eef53774255ea9496e1d286b1ad81ca","modified":1573790202997},{"_id":"public/categories/Linux-Mac-OS/index.html","hash":"4a07ec3ea9ef549cbc61b4b4c6662a11ff0b5caf","modified":1573790203006},{"_id":"public/categories/Linux-Mac-OS/page/2/index.html","hash":"5f7efadf12419129b75e450a8bb1e807a4cd7fc5","modified":1573790203011},{"_id":"public/categories/IDE/index.html","hash":"ba24cbce876afb0d5c4509c1f23fd23aa8d83369","modified":1573790203011},{"_id":"public/categories/Python3-进阶/Python3-闭包/index.html","hash":"13f47333ee47bbeef1f71d2a8617d4d97664a609","modified":1573790203011},{"_id":"public/categories/Python3-进阶/Staticmethod-Classmethod/index.html","hash":"ebd035bc697278778abcc52457439e75423cffa0","modified":1573790203011},{"_id":"public/categories/Python3-进阶/Python3-作用域/index.html","hash":"65467b845a47ecd42c5a1e86b75ab1c068cff53e","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-virtualenv/index.html","hash":"d69c46b3ec462090b986fa533526b9fb1af797f9","modified":1573790203012},{"_id":"public/categories/Spider/index.html","hash":"c31487973161fa9ee089a016676e6908f3e9d482","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-重载/index.html","hash":"5d851539160e16ff736fbbae274d4692bf722ac2","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-下划线/index.html","hash":"f6a3e3a121cb10fa712521e937e0e8d954da38c9","modified":1573790203012},{"_id":"public/categories/Algorithm/index.html","hash":"dbd5e66fb793a57667ea198ced1950ba3ca5e858","modified":1573790203012},{"_id":"public/categories/Data-Structures/index.html","hash":"99d97a754e69547fe2ff136cf6120a48664f610b","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-拷贝对象/index.html","hash":"4444166d55527f4bba4fa96211df877795f154a9","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-True-or-False/index.html","hash":"fd42e80713365c30daa6b99ae0c56b2362417dd1","modified":1573790203012},{"_id":"public/categories/Python3-进阶/Python3-自省/index.html","hash":"c3f89d397e866dcd3b6887678e214252c03b7a65","modified":1573790203015},{"_id":"public/categories/玩转苹果/index.html","hash":"21cebab667cf15fef704ac63b2ba19098b7f70ac","modified":1573790203015},{"_id":"public/categories/Python3-进阶/类变量-和-实例变量/index.html","hash":"5a0566f0e06073b25c7a1215dd9adf936f24e5be","modified":1573790203016},{"_id":"public/categories/Python3-进阶/Python3-字典/index.html","hash":"49d7499e2061786963294a0e3180e854f500ec38","modified":1573790203016},{"_id":"public/categories/Python3-进阶/Python3-鸭子类型/index.html","hash":"ea3385a49287746553661173a80106b43821e928","modified":1573790203016},{"_id":"public/categories/Redis/index.html","hash":"b24e469539e47169c7b003e2d0d615180eb092c1","modified":1573790203016},{"_id":"public/categories/Tesseract/index.html","hash":"1c12ca5c1689e26b005a6b3f12f549ec04e7cff4","modified":1573790203016},{"_id":"public/categories/SQL/index.html","hash":"d2113fe7db178f558f0ab71a5373a804c409b5e8","modified":1573790203017},{"_id":"public/categories/Markdown/index.html","hash":"f7259ca3489f33d2f8b7d75bbdf1dda5bfc9048c","modified":1573790203031},{"_id":"public/categories/Python3-进阶/Python3-迭代器和生成器/index.html","hash":"29756e7620ea98b971ad5629a4c1404adc6b107b","modified":1573790203033},{"_id":"public/categories/Python3-进阶/Python3-数据结构/index.html","hash":"80d77f608edc99af4b61fdcc97fb7d9b9a89e9f0","modified":1573790203033},{"_id":"public/categories/Spider/Selenium/index.html","hash":"0b52bdd6e052abc01ad20466c68047f5bd29a8dd","modified":1573790203034},{"_id":"public/categories/机器学习/index.html","hash":"8541acf1fde76cbd9d436e0e3565c5ad9692a4e9","modified":1573790203034},{"_id":"public/categories/Spider/Scrapy/index.html","hash":"13ba6ffe004be97422329a270a7a6bb3c61b42ae","modified":1573790203035},{"_id":"public/categories/Spider/Urllib/index.html","hash":"82085d2de2355e819a2473821fb4452661d43285","modified":1573790203035},{"_id":"public/categories/面试/Java-Web/index.html","hash":"23c087adf11400bd3a3fd86891a98e087d59518d","modified":1573790203035},{"_id":"public/categories/Redis/数据类型/index.html","hash":"1affcfe74f1ac580bb740ce98410bb13b7f45948","modified":1573790203036},{"_id":"public/archives/index.html","hash":"41de1a90a9364f7143b5aafc9ef6042a9f132d8f","modified":1573790203036},{"_id":"public/archives/page/2/index.html","hash":"3d7b53cb71f14c93e14f49e4672ae76393fe6390","modified":1573790203036},{"_id":"public/archives/page/3/index.html","hash":"e369feb76e54eb18c4e2c15db14eca9775752aea","modified":1573790203036},{"_id":"public/archives/page/4/index.html","hash":"32e6ff2b5c43bb9dd2f51c484e7fc2b01fd42335","modified":1573790203036},{"_id":"public/archives/page/5/index.html","hash":"8104cedfe2b1a97b56b989fad82a5ae5bdc51c04","modified":1573790203036},{"_id":"public/archives/page/6/index.html","hash":"430cfc0a173700f5c1cbca18c1c9394d7b7697c0","modified":1573790203036},{"_id":"public/archives/page/7/index.html","hash":"7e0f8b3825f72a1fedcee510b6ed3f3a9ea4ab06","modified":1573790203046},{"_id":"public/archives/page/8/index.html","hash":"27a800f9b8be0261991316b9e1e0cc8d14ad7954","modified":1573790203046},{"_id":"public/archives/page/9/index.html","hash":"3819a6bd7007a80c162f9e8470c3547c16554b77","modified":1573790203075},{"_id":"public/archives/page/10/index.html","hash":"3ee3568f858fa1f188bb6d32f361c49dfc395f6b","modified":1573790203076},{"_id":"public/archives/page/11/index.html","hash":"ef1624c85bcd53416ee108db7e139dd8d6b3ad6e","modified":1573790203076},{"_id":"public/archives/page/12/index.html","hash":"097c2ca8555a4c1043d3c4904827040edeb726f8","modified":1573790203076},{"_id":"public/archives/page/13/index.html","hash":"4706d7a9c21f595d8171aba920f6f8ab6144dbdb","modified":1573790203076},{"_id":"public/archives/page/14/index.html","hash":"b664f1e32516df0f18da299671317ebaf46d1294","modified":1573790203077},{"_id":"public/archives/page/15/index.html","hash":"70f15b1a1720abec2b669d694a0f1f763e1e40dc","modified":1573790203078},{"_id":"public/archives/2018/index.html","hash":"5f9360c13e40cb29c0b4c48e6770bd1527bb7ae5","modified":1573790203078},{"_id":"public/archives/2018/page/2/index.html","hash":"b996699891918e0f76fff285f168c549a28bce59","modified":1573790203078},{"_id":"public/archives/2018/page/3/index.html","hash":"df0f244617a793550ff02bcf634bcb1d17bc0454","modified":1573790203078},{"_id":"public/archives/2018/page/4/index.html","hash":"781adf63bb23c386aa77668dd082acbc56160829","modified":1573790203079},{"_id":"public/archives/2018/page/5/index.html","hash":"fcbb2e71b5b3f09bed509b7801e873083605212e","modified":1573790203079},{"_id":"public/archives/2018/page/6/index.html","hash":"7e8774801609865cd59cbe22bba57a27bf1b38ef","modified":1573790203079},{"_id":"public/archives/2018/page/7/index.html","hash":"f42251be929b9ee61cf56976fd10221f932f5db8","modified":1573790203079},{"_id":"public/archives/2018/page/8/index.html","hash":"70c6e4234d6ba12675d217ad79bab848cbfd53ee","modified":1573790203079},{"_id":"public/archives/2018/page/9/index.html","hash":"55edca92ad1e7aa16da99db677d687bad1ad49fa","modified":1573790203079},{"_id":"public/archives/2018/page/10/index.html","hash":"21e28b129ab6fe6b615f95dbf305c735829b8d3d","modified":1573790203080},{"_id":"public/archives/2018/page/11/index.html","hash":"a1627807d139cbd0fd0a73d6e3e85b339a071271","modified":1573790203080},{"_id":"public/archives/2018/page/12/index.html","hash":"916dae47a3f4f10b9b944dc1eee1428a2b8aa01e","modified":1573790203080},{"_id":"public/archives/2018/page/13/index.html","hash":"0ed36ada66cba7dd213a971b78f0938fc6da228a","modified":1573790203081},{"_id":"public/archives/2018/02/page/2/index.html","hash":"3109ff6ecb51a5f673d75cac3232a5ef6b2fd0a1","modified":1573790203081},{"_id":"public/archives/2018/03/index.html","hash":"ef643bde186e4e3a9d7a7e1ac257af3bf53c9ce2","modified":1573790203081},{"_id":"public/archives/2018/03/page/2/index.html","hash":"dd08e55500f9c8f391810b110464c6fe4ce65838","modified":1573790203081},{"_id":"public/archives/2018/03/page/3/index.html","hash":"fa950b7266decb4bfb39ac06805d01c34be468e1","modified":1573790203082},{"_id":"public/archives/2018/03/page/4/index.html","hash":"e79a8f458a02e2aa195f13fa8436af6dec5eda10","modified":1573790203082},{"_id":"public/archives/2018/03/page/5/index.html","hash":"426f4afb43816f3b3e15b3d19691a3810bc63e8f","modified":1573790203082},{"_id":"public/archives/2018/03/page/6/index.html","hash":"28608854997f20f619a21a6b77e112dc30a477f9","modified":1573790203082},{"_id":"public/archives/2018/04/index.html","hash":"d77343cca530ae3502494d6595a1242cceb95f80","modified":1573790203083},{"_id":"public/archives/2018/05/index.html","hash":"5265391b8b5e950702d4aa12a032b4398e0bf068","modified":1573790203083},{"_id":"public/archives/2018/07/index.html","hash":"10663cdbfb17b6e54ef25c3e2a25997e20829192","modified":1573790203083},{"_id":"public/archives/2018/08/index.html","hash":"6de4068c2ca0f8f9149ac28e9dce34494673ae53","modified":1573790203083},{"_id":"public/archives/2018/09/index.html","hash":"7d231da6e79d5ccbf2ed91924b85228fd159b8b7","modified":1573790203083},{"_id":"public/archives/2018/09/page/2/index.html","hash":"e012e52e9e56755f59fefc5f0cb2bc4ca634c913","modified":1573790203083},{"_id":"public/archives/2018/09/page/3/index.html","hash":"0762fd85dcb5aa3c81f0d053990c756753844ed9","modified":1573790203083},{"_id":"public/archives/2018/09/page/4/index.html","hash":"8075a3ef588b5971003b182e7f6c8b410612c73c","modified":1573790203083},{"_id":"public/archives/2018/02/index.html","hash":"c21a467bd1eb9bc206b4aba3401b796d97f568a5","modified":1573790203083},{"_id":"public/archives/2018/10/index.html","hash":"27e43a7aaaef93f38dcfef2a44c577ed6c34a278","modified":1573790203084},{"_id":"public/archives/2018/11/index.html","hash":"2998cc5d7db85f83bc9011bdc9d3a538df11282f","modified":1573790203084},{"_id":"public/archives/2018/12/index.html","hash":"3563b814206c1d08fce3cc8ede6fffdf480264f4","modified":1573790203084},{"_id":"public/archives/2019/index.html","hash":"5c651c6bb94497e0f8e21103d1e0fc64839d7d61","modified":1573790203084},{"_id":"public/archives/2019/page/2/index.html","hash":"e60c313f47fdd9b2695c2c583f5e180dd50f632b","modified":1573790203084},{"_id":"public/archives/2019/02/index.html","hash":"b48e32d89617bfc87c7b220a58c5d882990699c7","modified":1573790203084},{"_id":"public/archives/2019/03/index.html","hash":"255926843e5bbb02ba782de775f8688b8cb00325","modified":1573790203084},{"_id":"public/archives/2019/05/index.html","hash":"19826940207fb6b31c763b7a7664f29e1baa8797","modified":1573790203084},{"_id":"public/archives/2019/06/index.html","hash":"e69d80ca5298e50c3b1d486651b575569e9b6921","modified":1573790203084},{"_id":"public/archives/2019/09/index.html","hash":"7396aa46b73ca36d5fe6d8610c14f9cbfe7c438f","modified":1573790203085},{"_id":"public/archives/2019/10/index.html","hash":"ecec8cd1ae6ce3d2265b3bdd1fc36fa3cb02a476","modified":1573790203085},{"_id":"public/archives/2019/11/index.html","hash":"c745f609a9bd58e3005d08f2d34d0a769ce2202e","modified":1573790203085},{"_id":"public/tags/面试/index.html","hash":"f01606c37f92aa0945dd4a0e8ded14d3ce93975e","modified":1573790203085},{"_id":"public/tags/面试/page/2/index.html","hash":"7a120130e4fb12d39d4c1532624ec39eaa9166d6","modified":1573790203085},{"_id":"public/tags/网络/index.html","hash":"53d19e57ff16e8144c53abcdf6cd0d56d926611f","modified":1573790203086},{"_id":"public/tags/网络/page/2/index.html","hash":"86f250f1b8f975a956e5fcf75feea5e3be010441","modified":1573790203086},{"_id":"public/tags/Python3/index.html","hash":"907721b6119885f251530356c7d5273a432708ec","modified":1573790203086},{"_id":"public/tags/Python3/page/2/index.html","hash":"3103d9718e54a1eedbed419bb0e084fd5f10747f","modified":1573790203086},{"_id":"public/tags/Python3/page/3/index.html","hash":"6476e146ad8b1bea27b87ef10773355ee3bcc459","modified":1573790203086},{"_id":"public/tags/Python3/page/4/index.html","hash":"1b69a497e3046c293ff4ee21bccf6be3ac929be5","modified":1573790203086},{"_id":"public/tags/Python3/page/5/index.html","hash":"845a659242990f489c5983567a5909888cf580b1","modified":1573790203087},{"_id":"public/tags/Python3/page/6/index.html","hash":"78b5e157084f22e6a1bb3e17fcb68d0e93ff24f8","modified":1573790203087},{"_id":"public/tags/Django/index.html","hash":"11c5395f127cb903a6bca9a1a832c9ccdbb189d5","modified":1573790203088},{"_id":"public/tags/数据库/index.html","hash":"70688b58cec19b41b9a6ce0c15c2023c24d622c5","modified":1573790203089},{"_id":"public/tags/Hexo/index.html","hash":"b0b1060cf957d868d35b4dafea106272d7edf84d","modified":1573790203090},{"_id":"public/tags/Git/index.html","hash":"cb679570f965ee3d27c1ae9939b7ef6a48425ff6","modified":1573790203090},{"_id":"public/tags/操作系统/index.html","hash":"1e9a6aab88e0ee994de778cdaddc8f2b273c0104","modified":1573790203090},{"_id":"public/tags/Frontend/index.html","hash":"4c32703d1c69aa1d1d4d5023647e98668e13cd6a","modified":1573790203090},{"_id":"public/tags/Java/index.html","hash":"150d1fc425c836e6753ab9f60437816633558763","modified":1573790203090},{"_id":"public/tags/Java/page/2/index.html","hash":"1c6c7012c9733328ac04d9320c8a5f749d37cc2f","modified":1573790203090},{"_id":"public/tags/Linux-Mac-OS/page/2/index.html","hash":"2fc33b11140fccdceb9c16eefa46c597d984dbcf","modified":1573790203091},{"_id":"public/tags/IDE/index.html","hash":"d94558f5d7f3ed39abb22111d717ed9b2a2bc652","modified":1573790203091},{"_id":"public/tags/Markdown/index.html","hash":"63029617cecab22b28f74882e379bda117f45355","modified":1573790203091},{"_id":"public/tags/Spider/index.html","hash":"bec8856bcb570a38f6a5361ccd33e5a63235426a","modified":1573790203091},{"_id":"public/tags/Selenium/index.html","hash":"a5e72474d9015c79ba2a9c17ae6666440ab4a339","modified":1573790203091},{"_id":"public/tags/PhantomJS/index.html","hash":"42c4dbf2c306ce0915256aded97fc76c3c414e62","modified":1573790203091},{"_id":"public/tags/Algorithm/index.html","hash":"8d2c695cc808f3ca824c3bc1ccaab0c5479a0dfc","modified":1573790203092},{"_id":"public/tags/设计模式/index.html","hash":"1fd64a9e1ebcfe35c33b3771e24f5f95fb9d11cf","modified":1573790203092},{"_id":"public/tags/Web服务器/index.html","hash":"fd0628634032219a4a11b60fe6ec4625633a5bc4","modified":1573790203092},{"_id":"public/tags/Data-Structures/index.html","hash":"0da26da5535a458cf8865ac00d39e95594c50ed6","modified":1573790203092},{"_id":"public/tags/Linux-Mac-OS/index.html","hash":"1bf0e0848d3dc8a9867fbfaca954f3063d17eaf2","modified":1573790203092},{"_id":"public/tags/玩转苹果/index.html","hash":"b71dbd0a587ece3ca192b1321921dccb8887a0b8","modified":1573790203093},{"_id":"public/tags/Redis/index.html","hash":"abb57a1be0654c404ac605bda0c08c3f2a1eabec","modified":1573790203093},{"_id":"public/tags/SQL/index.html","hash":"12cc8807c3ddf8249e0930c506ff10e85372bcc8","modified":1573790203093},{"_id":"public/tags/Tesseract/index.html","hash":"3972ae4183f7571ada38b16de9e3b094cbc82aff","modified":1573790203093},{"_id":"public/tags/Urllib/index.html","hash":"cfa0c9206d6a0d0ea8150d19120edae615a8fd8d","modified":1573790203093},{"_id":"public/tags/Funny/index.html","hash":"4c8d21b30509010598d81459d2329c1e188463d4","modified":1573790203093},{"_id":"public/tags/Python源码/index.html","hash":"9d45d97bed1999bded62483e43e3269fe584ef9a","modified":1573790203093},{"_id":"public/tags/计算机基础/index.html","hash":"1fd397fa4905f69bdd9c0047df3325a4f229d5a5","modified":1573790203093},{"_id":"public/tags/Github/index.html","hash":"4a9179813e00dd319710a5a1c9d6d4659eb42f89","modified":1573790203094},{"_id":"public/tags/机器学习/index.html","hash":"370b05cbf29c9d560fdb90030aaa4da6599f276a","modified":1573790203094},{"_id":"public/tags/神经网络/index.html","hash":"408b41e739b5310951f32bb2fa3dbccad9e2f7da","modified":1573790203094},{"_id":"public/tags/加密/index.html","hash":"89cee0a9ad9c5b1381ec78dc13d90ff66fd8f529","modified":1573790203094},{"_id":"public/tags/Scrapy/index.html","hash":"1d390acc44920f8c8d81bfe13d19f5353fadac64","modified":1573790203094},{"_id":"public/tags/Java-Web/index.html","hash":"d52fbfc19efeaa0dc7aca16bdb57a400548d84a3","modified":1573790203094},{"_id":"public/index.html","hash":"6bd0e357e14a899d9112abd71f2c2e0d7131fcf8","modified":1573790203094},{"_id":"public/page/2/index.html","hash":"43e02acccf7183d767910916f73521540d68a95a","modified":1573790203094},{"_id":"public/page/3/index.html","hash":"ac7c608efcab0e3891d67c75802fdca3bd5c8ced","modified":1573790203095},{"_id":"public/page/4/index.html","hash":"4709b06abe16ee56aaa9500ec5b52dc521afd844","modified":1573790203095},{"_id":"public/page/5/index.html","hash":"dfe1e5f945563fff285964e31e4aa1e24438b558","modified":1573790203095},{"_id":"public/page/6/index.html","hash":"34621f3d4dbfff72a05de85f9b9372a42e183454","modified":1573790203096},{"_id":"public/page/7/index.html","hash":"839f2aa835144596b820859bd9821222f7095630","modified":1573790203096},{"_id":"public/page/8/index.html","hash":"fa49c992f6b1d7fc6d30dfc916e595b267737c36","modified":1573790203096},{"_id":"public/page/9/index.html","hash":"2514064b9d166b5521d5a74e837d6c854f27665c","modified":1573790203096},{"_id":"public/page/10/index.html","hash":"d2563eaf75a913b063f361c439c7e27066562ac5","modified":1573790203097},{"_id":"public/page/11/index.html","hash":"c6593fe692c4bc24759d058ae8e269dfec82e731","modified":1573790203097},{"_id":"public/page/12/index.html","hash":"9ec662fc73cf39e390267f1262015845f5dce12c","modified":1573790203097},{"_id":"public/page/13/index.html","hash":"136987a10a08c8c26e739f15ca58674631676ab0","modified":1573790203097},{"_id":"public/page/14/index.html","hash":"04f1b563cd8387c96d60bed6a8580074ecea9dbf","modified":1573790203098},{"_id":"public/page/15/index.html","hash":"188f942d823449f909855f4517a2a7d01d1b7a42","modified":1573790203099},{"_id":"public/2019/11/15/如何优雅滴在手机上跑Python代码/index.html","hash":"9fd75d54fd48013b2da248cdfef8e3bdb4a5ce2e","modified":1573790203164},{"_id":"public/categories/Tools/index.html","hash":"5cd798864c1f4fe86e738dfd8362adaa89ee4c2a","modified":1573790203165},{"_id":"public/tags/Tools/index.html","hash":"614aeda3dc3ba61d50814f52e4564de88c629011","modified":1573790203165},{"_id":"public/README.md","hash":"3535b5914786d3308f3b3d0b16d5de9d19fa9424","modified":1573790203237},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573790203237},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1573790203237},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573790203237},{"_id":"public/CNAME","hash":"5db3e3c11d5692cb4315e39fb27af311a14cb878","modified":1573790203237},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573790203237},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573790203237},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573790203237},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573790203237},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573790203237},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573790203237},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573790203237},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573790203237},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573790203237},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1573790203237},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573790203237},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573790203237},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573790203237},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573790203237},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1573790203238},{"_id":"public/uploads/IMG_1847.JPG","hash":"8bea4d8a11f71501edde7fe68618be061d04fadd","modified":1573790203238},{"_id":"public/uploads/avatar.jpg","hash":"486f26a392d7783a3e9ac1a81ddecbde060f47e5","modified":1573790203238},{"_id":"public/uploads/IMG_1341.JPG","hash":"05c54cee8370727d66263420febab59db112c694","modified":1573790203238},{"_id":"public/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1573790203238},{"_id":"public/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1573790203238},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573790203238},{"_id":"public/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1573790203238},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1573790203238},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573790203238},{"_id":"public/uploads/selfieblackwhite.jpg","hash":"a248e19f003a0693d5f2278031d72e09ff7b7365","modified":1573790205563},{"_id":"public/uploads/IMG_1356.JPG","hash":"4b8144e3248a429770c00be174336d01187a3cdc","modified":1573790205567},{"_id":"public/uploads/selfiecolor.jpg","hash":"1097014b9b820daff8b530e1e66a4be81516d85d","modified":1573790205574},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573790205574},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573790205574},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1573790205974},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1573790205974},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1573790205974},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1573790205974},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1573790205974},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1573790205974},{"_id":"public/js/src/utils.js","hash":"e437eff1d3781c4a1aec9ff2060565524a37c983","modified":1573790205974},{"_id":"public/lib/fancybox/README.html","hash":"acfa25ca9b6457a4a70a4b35cf72c9dafc33584e","modified":1573790205974},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1573790205974},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1573790205974},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1573790205974},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1573790205974},{"_id":"public/lib/bookmark/README.html","hash":"be0c3f6a13505fb32611ef5e7269a7e4f35eecc9","modified":1573790205974},{"_id":"public/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1573790205985},{"_id":"public/lib/needsharebutton/README.html","hash":"16294954bab07c47f87edf3742ab2547c63d5193","modified":1573790205986},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1573790205986},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1573790205986},{"_id":"public/lib/reading_progress/README.html","hash":"3287121425b2e90fc66e6410984e80a8c85d9ecd","modified":1573790205986},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573790205986},{"_id":"public/lib/reading_progress/package.json","hash":"e404a0bdf26df62eb89173c6fe5f5824345801c5","modified":1573790205986},{"_id":"public/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1573790205986},{"_id":"public/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1573790205986},{"_id":"public/js/src/schemes/pisces.js","hash":"58f87062210200c778eb92e20a9453bb6a5a03fa","modified":1573790205986},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1573790205986},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1573790205986},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1573790205987},{"_id":"public/css/main.css","hash":"ae1a6be5aeef24c978915820744fe482141f2b0e","modified":1573790205987},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"4e74d9b54ef66091fd23379e8a3f42ca50bd5a70","modified":1573790205987},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3de20fa310cf852746e619cbbd1f79d42ca6e838","modified":1573790205988},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573790205988},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1573790205994},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1573790205994},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573790205994},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"cbeafa67a4379506db5bffa39da21eaf9e8df669","modified":1573790205995},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1573790205995},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1573790205995},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1573790205995},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1573790205995},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1573790205996},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573790205996}],"Category":[{"name":"面试","_id":"ck2zm0wzz0004exotwooayj25"},{"name":"网络","_id":"ck2zm0x0j000aexotz1y1cmjw"},{"name":"Python3 进阶","_id":"ck2zm0x10000gexotvowpttgg"},{"name":"Django","_id":"ck2zm0x1f000mexotokix7sv5"},{"name":"数据库","parent":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x1k000sexotnv7fh3p7"},{"name":"Hexo","_id":"ck2zm0x220013exottaclnlr7"},{"name":"Git","_id":"ck2zm0x28001cexotnkvue9pz"},{"name":"操作系统","_id":"ck2zm0x2y001uexotvb1pfs7y"},{"name":"Frontend","_id":"ck2zm0x350020exotunzpusby"},{"name":"Java","_id":"ck2zm0x3p0028exot1r1xkj9v"},{"name":"多任务处理","parent":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0x68004aexot4od0nf0s"},{"name":"Linux/Mac OS","_id":"ck2zm0x6y0050exotw1ldnjpc"},{"name":"IDE","_id":"ck2zm0x760059exotdwdvjcqt"},{"name":"Markdown","_id":"ck2zm0xcp0085exothjmfitjl"},{"name":"Python3 闭包","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xeb008uexotkzmcklkh"},{"name":"Staticmethod & Classmethod","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xew0094exotpqjba5d1"},{"name":"Python3 作用域","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xf9009cexotirt0ru1z"},{"name":"Python3 virtualenv","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xfo009lexot3r9a16o6"},{"name":"Spider","_id":"ck2zm0xg8009texotd4yzcdkb"},{"name":"Python3 重载","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xgf00a3exotvmotb4gy"},{"name":"Python3 下划线","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xgp00abexotp1gw4krf"},{"name":"Algorithm","_id":"ck2zm0xh100akexot7vo9x58w"},{"name":"Data Structures","_id":"ck2zm0xhj00b0exot1nfuquzr"},{"name":"Python3 拷贝对象","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xio00bqexot5cm4whvj"},{"name":"Python3 True or False","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xj300byexotck3ute0m"},{"name":"Python3 自省","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xjl00cfexotp9tf0xyw"},{"name":"玩转苹果","_id":"ck2zm0xju00cnexotpcy7d3bp"},{"name":"类变量 和 实例变量","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xku00cxexotdpq6qn2b"},{"name":"Python3 字典","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xl600ddexot35yp3s6m"},{"name":"Python3 鸭子类型","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xlv00duexotqrtrjj52"},{"name":"Redis","_id":"ck2zm0xm200e2exotdhlwk9ge"},{"name":"SQL","_id":"ck2zm0xme00ecexotj5puum14"},{"name":"Tesseract","_id":"ck2zm0xms00eiexotcp11iik4"},{"name":"Python3 迭代器和生成器","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xmx00eoexotff26ept2"},{"name":"Python3 数据结构","parent":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xn100euexoth3zu4pkb"},{"name":"Selenium","parent":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xn200f2exotk5d3od2a"},{"name":"Urllib","parent":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xn400f9exotj5d85wu8"},{"name":"机器学习","_id":"ck2zm0xnm00g2exotjzzl5ytr"},{"name":"Scrapy","parent":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xnv00gkexotjrvfzozk"},{"name":"Java Web","parent":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0xny00gsexoty5gczuz4"},{"name":"数据类型","parent":"ck2zm0xm200e2exotdhlwk9ge","_id":"ck2zm0xo000gyexotbsc4a0ed"},{"name":"Tools","_id":"ck2zm0xoa00h5exotxlhi7smn"}],"Data":[],"Page":[{"title":"About","date":"2018-02-27T10:04:16.000Z","_content":"\n\n> 从学习涉及上千摄氏度的热能专业到研究2K超流氦极低温区的制冷及低温工程，最后竟然成了一个程序猿，简直不相信这是我寄几。\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-02-27 18:04:16\n---\n\n\n> 从学习涉及上千摄氏度的热能专业到研究2K超流氦极低温区的制冷及低温工程，最后竟然成了一个程序猿，简直不相信这是我寄几。\n","updated":"2018-09-11T15:07:23.591Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck2zm0wzt0001exotxbo8w26i","content":"<blockquote>\n<p>从学习涉及上千摄氏度的热能专业到研究2K超流氦极低温区的制冷及低温工程，最后竟然成了一个程序猿，简直不相信这是我寄几。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从学习涉及上千摄氏度的热能专业到研究2K超流氦极低温区的制冷及低温工程，最后竟然成了一个程序猿，简直不相信这是我寄几。</p>\n</blockquote>\n"},{"title":"分类","date":"2018-02-26T07:16:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-26 15:16:43\ntype: \"categories\"\n---\n","updated":"2018-02-27T10:50:06.227Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2zm0wzx0003exotzc50pdmd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-26T07:13:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-26 15:13:29\ntype: \"tags\"\n---\n","updated":"2018-02-27T10:50:23.228Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2zm0x0b0007exotgap5fkxv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C语言中的'if(n==1)'和'if(1==n)'的区别","date":"2018-09-28T16:04:53.000Z","_content":"\n>C语言中两种if语句判断方式。请问哪种写法更好？为什么？\n```c\n    int n;\n    if (n == 1) // 第一种判断方式\n    if (1 == n) // 第二种判断方式\n```\n\n<!-- more -->\n\n#### 第一种写法\n\n##### 缺点\n\n- 在写判断语句的时候很容易漏写一个“=” ,比如把\n`if (n == 1) { } 写成 if (n = 1) { }`。\n而在C中 “n = 1” 是有返回值的， 这个返回值是1， 于是原语句相当于\n if ( 1 ) { } ,即条件永远为真，{ } 内的代码始终能够得到执行，当这样的\n错误深深埋藏在代码当中，非常难以debug。\n\n##### 优点\n\n- 主要目的是防止写成if(n = 1)而导致错误,但现在的编译器一般会给出警告信息所以现在不常用了.第1种更符合习惯,只要把相应的编译选项打开,一般不会出问题。\n\n\n#### 第二种写法\n##### 缺点\n- 反人类\n##### 优点\n- if ( 1 == n ) { } 及时少写一个\"=\", 编译器就会报错，省得在运行期调试\n得死去活来。\n\n- 会省掉很多  debug  的时间的。\n\n\n\n\n\n\n\n\n------\n","source":"_posts/C语言中的-if-n-1-和-if-1-n-的区别.md","raw":"---\ntitle: C语言中的'if(n==1)'和'if(1==n)'的区别\ndate: 2018-09-29 00:04:53\ntags:\n  - 面试\ncategories:\n  - 面试\n---\n\n>C语言中两种if语句判断方式。请问哪种写法更好？为什么？\n```c\n    int n;\n    if (n == 1) // 第一种判断方式\n    if (1 == n) // 第二种判断方式\n```\n\n<!-- more -->\n\n#### 第一种写法\n\n##### 缺点\n\n- 在写判断语句的时候很容易漏写一个“=” ,比如把\n`if (n == 1) { } 写成 if (n = 1) { }`。\n而在C中 “n = 1” 是有返回值的， 这个返回值是1， 于是原语句相当于\n if ( 1 ) { } ,即条件永远为真，{ } 内的代码始终能够得到执行，当这样的\n错误深深埋藏在代码当中，非常难以debug。\n\n##### 优点\n\n- 主要目的是防止写成if(n = 1)而导致错误,但现在的编译器一般会给出警告信息所以现在不常用了.第1种更符合习惯,只要把相应的编译选项打开,一般不会出问题。\n\n\n#### 第二种写法\n##### 缺点\n- 反人类\n##### 优点\n- if ( 1 == n ) { } 及时少写一个\"=\", 编译器就会报错，省得在运行期调试\n得死去活来。\n\n- 会省掉很多  debug  的时间的。\n\n\n\n\n\n\n\n\n------\n","slug":"C语言中的-if-n-1-和-if-1-n-的区别","published":1,"updated":"2018-09-29T05:19:57.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0wzh0000exot5jlcftya","content":"<blockquote>\n<p>C语言中两种if语句判断方式。请问哪种写法更好？为什么？<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"comment\">// 第一种判断方式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span> == n) <span class=\"comment\">// 第二种判断方式</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"第一种写法\"><a href=\"#第一种写法\" class=\"headerlink\" title=\"第一种写法\"></a>第一种写法</h4><h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在写判断语句的时候很容易漏写一个“=” ,比如把<br><code>if (n == 1) { } 写成 if (n = 1) { }</code>。<br>而在C中 “n = 1” 是有返回值的， 这个返回值是1， 于是原语句相当于<br>if ( 1 ) { } ,即条件永远为真，{ } 内的代码始终能够得到执行，当这样的<br>错误深深埋藏在代码当中，非常难以debug。</li>\n</ul>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>主要目的是防止写成if(n = 1)而导致错误,但现在的编译器一般会给出警告信息所以现在不常用了.第1种更符合习惯,只要把相应的编译选项打开,一般不会出问题。</li>\n</ul>\n<h4 id=\"第二种写法\"><a href=\"#第二种写法\" class=\"headerlink\" title=\"第二种写法\"></a>第二种写法</h4><h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>反人类<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5></li>\n<li><p>if ( 1 == n ) { } 及时少写一个”=”, 编译器就会报错，省得在运行期调试<br>得死去活来。</p>\n</li>\n<li><p>会省掉很多  debug  的时间的。</p>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>C语言中两种if语句判断方式。请问哪种写法更好？为什么？<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"comment\">// 第一种判断方式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span> == n) <span class=\"comment\">// 第二种判断方式</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>","more":"<h4 id=\"第一种写法\"><a href=\"#第一种写法\" class=\"headerlink\" title=\"第一种写法\"></a>第一种写法</h4><h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在写判断语句的时候很容易漏写一个“=” ,比如把<br><code>if (n == 1) { } 写成 if (n = 1) { }</code>。<br>而在C中 “n = 1” 是有返回值的， 这个返回值是1， 于是原语句相当于<br>if ( 1 ) { } ,即条件永远为真，{ } 内的代码始终能够得到执行，当这样的<br>错误深深埋藏在代码当中，非常难以debug。</li>\n</ul>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>主要目的是防止写成if(n = 1)而导致错误,但现在的编译器一般会给出警告信息所以现在不常用了.第1种更符合习惯,只要把相应的编译选项打开,一般不会出问题。</li>\n</ul>\n<h4 id=\"第二种写法\"><a href=\"#第二种写法\" class=\"headerlink\" title=\"第二种写法\"></a>第二种写法</h4><h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>反人类<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5></li>\n<li><p>if ( 1 == n ) { } 及时少写一个”=”, 编译器就会报错，省得在运行期调试<br>得死去活来。</p>\n</li>\n<li><p>会省掉很多  debug  的时间的。</p>\n</li>\n</ul>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Sep 29 2018 13:19:57 GMT+0800 (China Standard Time)","title":"C语言中的'if(n==1)'和'if(1==n)'的区别","path":"2018/09/29/C语言中的-if-n-1-和-if-1-n-的区别/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>C语言中两种if语句判断方式。请问哪种写法更好？为什么？<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"comment\">// 第一种判断方式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span> == n) <span class=\"comment\">// 第二种判断方式</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>","date":"2018-09-28T16:04:53.000Z","pv":0,"totalPV":0,"categories":"面试","tags":["面试"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"DHCP续租过程","date":"2018-09-25T02:27:21.000Z","_content":"\n计算机网络发展的早些时候，当一台设备想要在网络上通信的时候，它需要被手动分配一个地址。随着网络的发展，手动方式变得烦琐，为了解决这个问题，`BOOTY协议(Bootstrap Protocol)`被创建出来给链接到网络的设备自动分配地址。BOOTY协议后来被更加复杂的`动态主机配置协议DHCP(Dynamic Host Configuration Protocol)`取代。\n\nDHCP用的端号是`UDP67`和`UDP68`，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。`客户端向68端口（bootps）广播请求配置，服务器向67端口（bootpc）广播回应请求`。\n\n#### DHCP续租过程\n\n\n| DHCP客户端   | DORA过程  | DHCP服务器 |\n| :-----:     | :-----------: |:------:|\n|      →     | 发现Discover  → |   →    |\n|      ←     | 提供Offer    ←  |     ←    |\n|      →     | 请求Request   → |    →     |\n|       ←    | 确认Acknowledgement  ←|     ←    |\n\n<!-- more -->\n\n##### 1.发现数据包\n第一个数据包从`0.0.0.0`的`68端口`发往`255.255.255.255`的`67端口`。客户端使用0.0.0.0，是因为目前还没有IP地址。数据包发往255.255.255.255，是因为这是一个独立于网络的广播地址，从而能够确保这个数据包会被发往网络上的每一台设备。因为这台设备并不知道DHCP服务器的地址，所有它的第一个数据包是为了寻找正在监听的DHCP服务器。\n\nDHCP客户端对请求响应速度要求很高。由于DHCP有其内置的保证可靠性的方法，也就意味着UDP是最合适的协议。\n\n数据包中包括了所请求的IP地址，表示客户端希望得到的IP的地址，通常是之前用过的IP地址。\n\n\n##### 2.提供数据包\n\n这个数据包包含了和前一个数据包相同的事务ID，该ID告诉我们这个响应与原先的请求相对应。该数据包由DHCP服务器发出，用于向客户端提供服务。它提供的信息，包括自己的IP，以及给客户端提供的地址等。\n\n##### 3.请求数据包\n\n当客户端收到DHCP服务器提供的数据包之后，它将以一个DHCP请求数据包作为接收确认。该数据包仍然从IP为0.0.0.0的地址发出，因为我们还没有完成获取IP地址的过程。目的地址为255.255.255.255.\n\n\n值得注意的是在选项域(Option)中所请求的IP地址不在为空,而是上一个提供数据包中提供的客户端IP。DHCP服务器标识域野包含了IP地址。\n\n##### 4.确认数据包\n\n该过程是DHCP在确认数据包中给客户端发送其所请求的IP地址，并在数据库中记录相关信息。此时客户端就有了一个IP地址，并且可以用它在网络上通信。\n\n\n#### DHCP租约内续租\n当DHCP给一个客户端分配了一个IP时，它同时给客户端定下了一个租约。也就是说客户端只能在有限的时间内使用该IP地址，否则必须续租。\n\n前面介绍的DORA过程出现在客户端第一次获取IP地址或者其租约时间已经过期的情况下。在这两种情况下们该设备都被视为违约过期。\n\n当一个拥有IP地址的客户端在租约期内重新启动，他必须进行一次精简版的DORA过程来重新认领它的IP地址，该过程被称为租约内续租。\n\n在租约内续租时，发现和提供数据包就变得没有必要了。考虑到其与租约过期时的DORA过程类似，可以发现在租约期内续租并不需要那么做，而只是完成请求和确认两个步骤就好了。\n","source":"_posts/DHCP续租过程.md","raw":"---\ntitle: DHCP续租过程\ndate: 2018-09-25 10:27:21\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\n计算机网络发展的早些时候，当一台设备想要在网络上通信的时候，它需要被手动分配一个地址。随着网络的发展，手动方式变得烦琐，为了解决这个问题，`BOOTY协议(Bootstrap Protocol)`被创建出来给链接到网络的设备自动分配地址。BOOTY协议后来被更加复杂的`动态主机配置协议DHCP(Dynamic Host Configuration Protocol)`取代。\n\nDHCP用的端号是`UDP67`和`UDP68`，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。`客户端向68端口（bootps）广播请求配置，服务器向67端口（bootpc）广播回应请求`。\n\n#### DHCP续租过程\n\n\n| DHCP客户端   | DORA过程  | DHCP服务器 |\n| :-----:     | :-----------: |:------:|\n|      →     | 发现Discover  → |   →    |\n|      ←     | 提供Offer    ←  |     ←    |\n|      →     | 请求Request   → |    →     |\n|       ←    | 确认Acknowledgement  ←|     ←    |\n\n<!-- more -->\n\n##### 1.发现数据包\n第一个数据包从`0.0.0.0`的`68端口`发往`255.255.255.255`的`67端口`。客户端使用0.0.0.0，是因为目前还没有IP地址。数据包发往255.255.255.255，是因为这是一个独立于网络的广播地址，从而能够确保这个数据包会被发往网络上的每一台设备。因为这台设备并不知道DHCP服务器的地址，所有它的第一个数据包是为了寻找正在监听的DHCP服务器。\n\nDHCP客户端对请求响应速度要求很高。由于DHCP有其内置的保证可靠性的方法，也就意味着UDP是最合适的协议。\n\n数据包中包括了所请求的IP地址，表示客户端希望得到的IP的地址，通常是之前用过的IP地址。\n\n\n##### 2.提供数据包\n\n这个数据包包含了和前一个数据包相同的事务ID，该ID告诉我们这个响应与原先的请求相对应。该数据包由DHCP服务器发出，用于向客户端提供服务。它提供的信息，包括自己的IP，以及给客户端提供的地址等。\n\n##### 3.请求数据包\n\n当客户端收到DHCP服务器提供的数据包之后，它将以一个DHCP请求数据包作为接收确认。该数据包仍然从IP为0.0.0.0的地址发出，因为我们还没有完成获取IP地址的过程。目的地址为255.255.255.255.\n\n\n值得注意的是在选项域(Option)中所请求的IP地址不在为空,而是上一个提供数据包中提供的客户端IP。DHCP服务器标识域野包含了IP地址。\n\n##### 4.确认数据包\n\n该过程是DHCP在确认数据包中给客户端发送其所请求的IP地址，并在数据库中记录相关信息。此时客户端就有了一个IP地址，并且可以用它在网络上通信。\n\n\n#### DHCP租约内续租\n当DHCP给一个客户端分配了一个IP时，它同时给客户端定下了一个租约。也就是说客户端只能在有限的时间内使用该IP地址，否则必须续租。\n\n前面介绍的DORA过程出现在客户端第一次获取IP地址或者其租约时间已经过期的情况下。在这两种情况下们该设备都被视为违约过期。\n\n当一个拥有IP地址的客户端在租约期内重新启动，他必须进行一次精简版的DORA过程来重新认领它的IP地址，该过程被称为租约内续租。\n\n在租约内续租时，发现和提供数据包就变得没有必要了。考虑到其与租约过期时的DORA过程类似，可以发现在租约期内续租并不需要那么做，而只是完成请求和确认两个步骤就好了。\n","slug":"DHCP续租过程","published":1,"updated":"2018-09-25T03:29:19.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0wzv0002exot5bi0uqtm","content":"<p>计算机网络发展的早些时候，当一台设备想要在网络上通信的时候，它需要被手动分配一个地址。随着网络的发展，手动方式变得烦琐，为了解决这个问题，<code>BOOTY协议(Bootstrap Protocol)</code>被创建出来给链接到网络的设备自动分配地址。BOOTY协议后来被更加复杂的<code>动态主机配置协议DHCP(Dynamic Host Configuration Protocol)</code>取代。</p>\n<p>DHCP用的端号是<code>UDP67</code>和<code>UDP68</code>，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。<code>客户端向68端口（bootps）广播请求配置，服务器向67端口（bootpc）广播回应请求</code>。</p>\n<h4 id=\"DHCP续租过程\"><a href=\"#DHCP续租过程\" class=\"headerlink\" title=\"DHCP续租过程\"></a>DHCP续租过程</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">DHCP客户端</th>\n<th style=\"text-align:center\">DORA过程</th>\n<th style=\"text-align:center\">DHCP服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">发现Discover  →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">提供Offer    ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">请求Request   →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">确认Acknowledgement  ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h5 id=\"1-发现数据包\"><a href=\"#1-发现数据包\" class=\"headerlink\" title=\"1.发现数据包\"></a>1.发现数据包</h5><p>第一个数据包从<code>0.0.0.0</code>的<code>68端口</code>发往<code>255.255.255.255</code>的<code>67端口</code>。客户端使用0.0.0.0，是因为目前还没有IP地址。数据包发往255.255.255.255，是因为这是一个独立于网络的广播地址，从而能够确保这个数据包会被发往网络上的每一台设备。因为这台设备并不知道DHCP服务器的地址，所有它的第一个数据包是为了寻找正在监听的DHCP服务器。</p>\n<p>DHCP客户端对请求响应速度要求很高。由于DHCP有其内置的保证可靠性的方法，也就意味着UDP是最合适的协议。</p>\n<p>数据包中包括了所请求的IP地址，表示客户端希望得到的IP的地址，通常是之前用过的IP地址。</p>\n<h5 id=\"2-提供数据包\"><a href=\"#2-提供数据包\" class=\"headerlink\" title=\"2.提供数据包\"></a>2.提供数据包</h5><p>这个数据包包含了和前一个数据包相同的事务ID，该ID告诉我们这个响应与原先的请求相对应。该数据包由DHCP服务器发出，用于向客户端提供服务。它提供的信息，包括自己的IP，以及给客户端提供的地址等。</p>\n<h5 id=\"3-请求数据包\"><a href=\"#3-请求数据包\" class=\"headerlink\" title=\"3.请求数据包\"></a>3.请求数据包</h5><p>当客户端收到DHCP服务器提供的数据包之后，它将以一个DHCP请求数据包作为接收确认。该数据包仍然从IP为0.0.0.0的地址发出，因为我们还没有完成获取IP地址的过程。目的地址为255.255.255.255.</p>\n<p>值得注意的是在选项域(Option)中所请求的IP地址不在为空,而是上一个提供数据包中提供的客户端IP。DHCP服务器标识域野包含了IP地址。</p>\n<h5 id=\"4-确认数据包\"><a href=\"#4-确认数据包\" class=\"headerlink\" title=\"4.确认数据包\"></a>4.确认数据包</h5><p>该过程是DHCP在确认数据包中给客户端发送其所请求的IP地址，并在数据库中记录相关信息。此时客户端就有了一个IP地址，并且可以用它在网络上通信。</p>\n<h4 id=\"DHCP租约内续租\"><a href=\"#DHCP租约内续租\" class=\"headerlink\" title=\"DHCP租约内续租\"></a>DHCP租约内续租</h4><p>当DHCP给一个客户端分配了一个IP时，它同时给客户端定下了一个租约。也就是说客户端只能在有限的时间内使用该IP地址，否则必须续租。</p>\n<p>前面介绍的DORA过程出现在客户端第一次获取IP地址或者其租约时间已经过期的情况下。在这两种情况下们该设备都被视为违约过期。</p>\n<p>当一个拥有IP地址的客户端在租约期内重新启动，他必须进行一次精简版的DORA过程来重新认领它的IP地址，该过程被称为租约内续租。</p>\n<p>在租约内续租时，发现和提供数据包就变得没有必要了。考虑到其与租约过期时的DORA过程类似，可以发现在租约期内续租并不需要那么做，而只是完成请求和确认两个步骤就好了。</p>\n","site":{"data":{}},"excerpt":"<p>计算机网络发展的早些时候，当一台设备想要在网络上通信的时候，它需要被手动分配一个地址。随着网络的发展，手动方式变得烦琐，为了解决这个问题，<code>BOOTY协议(Bootstrap Protocol)</code>被创建出来给链接到网络的设备自动分配地址。BOOTY协议后来被更加复杂的<code>动态主机配置协议DHCP(Dynamic Host Configuration Protocol)</code>取代。</p>\n<p>DHCP用的端号是<code>UDP67</code>和<code>UDP68</code>，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。<code>客户端向68端口（bootps）广播请求配置，服务器向67端口（bootpc）广播回应请求</code>。</p>\n<h4 id=\"DHCP续租过程\"><a href=\"#DHCP续租过程\" class=\"headerlink\" title=\"DHCP续租过程\"></a>DHCP续租过程</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">DHCP客户端</th>\n<th style=\"text-align:center\">DORA过程</th>\n<th style=\"text-align:center\">DHCP服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">发现Discover  →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">提供Offer    ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">请求Request   →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">确认Acknowledgement  ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n</tbody>\n</table>","more":"<h5 id=\"1-发现数据包\"><a href=\"#1-发现数据包\" class=\"headerlink\" title=\"1.发现数据包\"></a>1.发现数据包</h5><p>第一个数据包从<code>0.0.0.0</code>的<code>68端口</code>发往<code>255.255.255.255</code>的<code>67端口</code>。客户端使用0.0.0.0，是因为目前还没有IP地址。数据包发往255.255.255.255，是因为这是一个独立于网络的广播地址，从而能够确保这个数据包会被发往网络上的每一台设备。因为这台设备并不知道DHCP服务器的地址，所有它的第一个数据包是为了寻找正在监听的DHCP服务器。</p>\n<p>DHCP客户端对请求响应速度要求很高。由于DHCP有其内置的保证可靠性的方法，也就意味着UDP是最合适的协议。</p>\n<p>数据包中包括了所请求的IP地址，表示客户端希望得到的IP的地址，通常是之前用过的IP地址。</p>\n<h5 id=\"2-提供数据包\"><a href=\"#2-提供数据包\" class=\"headerlink\" title=\"2.提供数据包\"></a>2.提供数据包</h5><p>这个数据包包含了和前一个数据包相同的事务ID，该ID告诉我们这个响应与原先的请求相对应。该数据包由DHCP服务器发出，用于向客户端提供服务。它提供的信息，包括自己的IP，以及给客户端提供的地址等。</p>\n<h5 id=\"3-请求数据包\"><a href=\"#3-请求数据包\" class=\"headerlink\" title=\"3.请求数据包\"></a>3.请求数据包</h5><p>当客户端收到DHCP服务器提供的数据包之后，它将以一个DHCP请求数据包作为接收确认。该数据包仍然从IP为0.0.0.0的地址发出，因为我们还没有完成获取IP地址的过程。目的地址为255.255.255.255.</p>\n<p>值得注意的是在选项域(Option)中所请求的IP地址不在为空,而是上一个提供数据包中提供的客户端IP。DHCP服务器标识域野包含了IP地址。</p>\n<h5 id=\"4-确认数据包\"><a href=\"#4-确认数据包\" class=\"headerlink\" title=\"4.确认数据包\"></a>4.确认数据包</h5><p>该过程是DHCP在确认数据包中给客户端发送其所请求的IP地址，并在数据库中记录相关信息。此时客户端就有了一个IP地址，并且可以用它在网络上通信。</p>\n<h4 id=\"DHCP租约内续租\"><a href=\"#DHCP租约内续租\" class=\"headerlink\" title=\"DHCP租约内续租\"></a>DHCP租约内续租</h4><p>当DHCP给一个客户端分配了一个IP时，它同时给客户端定下了一个租约。也就是说客户端只能在有限的时间内使用该IP地址，否则必须续租。</p>\n<p>前面介绍的DORA过程出现在客户端第一次获取IP地址或者其租约时间已经过期的情况下。在这两种情况下们该设备都被视为违约过期。</p>\n<p>当一个拥有IP地址的客户端在租约期内重新启动，他必须进行一次精简版的DORA过程来重新认领它的IP地址，该过程被称为租约内续租。</p>\n<p>在租约内续租时，发现和提供数据包就变得没有必要了。考虑到其与租约过期时的DORA过程类似，可以发现在租约期内续租并不需要那么做，而只是完成请求和确认两个步骤就好了。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 25 2018 11:29:19 GMT+0800 (China Standard Time)","title":"DHCP续租过程","path":"2018/09/25/DHCP续租过程/","eyeCatchImage":null,"excerpt":"<p>计算机网络发展的早些时候，当一台设备想要在网络上通信的时候，它需要被手动分配一个地址。随着网络的发展，手动方式变得烦琐，为了解决这个问题，<code>BOOTY协议(Bootstrap Protocol)</code>被创建出来给链接到网络的设备自动分配地址。BOOTY协议后来被更加复杂的<code>动态主机配置协议DHCP(Dynamic Host Configuration Protocol)</code>取代。</p>\n<p>DHCP用的端号是<code>UDP67</code>和<code>UDP68</code>，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。<code>客户端向68端口（bootps）广播请求配置，服务器向67端口（bootpc）广播回应请求</code>。</p>\n<h4 id=\"DHCP续租过程\"><a href=\"#DHCP续租过程\" class=\"headerlink\" title=\"DHCP续租过程\"></a>DHCP续租过程</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">DHCP客户端</th>\n<th style=\"text-align:center\">DORA过程</th>\n<th style=\"text-align:center\">DHCP服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">发现Discover  →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">提供Offer    ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">请求Request   →</td>\n<td style=\"text-align:center\">→</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">确认Acknowledgement  ←</td>\n<td style=\"text-align:center\">←</td>\n</tr>\n</tbody>\n</table>","date":"2018-09-25T02:27:21.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Apache和Nginx的对比","date":"2018-03-07T18:11:57.000Z","_content":"## Apache\n\n1. apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache\n2. apache 发展到现在，模块超多，基本想到的都可以找到\n3. apache 更为成熟，少 bug ，nginx 的 bug 相对较多\n4. apache 超稳定\n5. apache 对 PHP 支持比较简单，nginx 需要配合其他后端用\n6. apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。\n7. apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区\n\n<!-- more -->\n\n## Nginx\n\n1. 轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源\n2. 抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。\n3. nginx 处理静态文件好，静态处理性能比 apache 高三倍以上\n4. nginx 的设计高度模块化，编写模块相对简单\n5. nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃\n6. nginx 作为负载均衡服务器，支持 7 层负载均衡\n7. nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器\n8. 启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级\n9. 社区活跃，各种高性能模块出品迅速\n\n## 总结\n\nnginx 相对 apache 的优点：\n\n  * 轻量级，同样起web 服务，比apache 占用更少的内存及资源\n  * 抗并发，`nginx 处理请求是异步非阻塞的`，支持更多的并发连接，而`apache 则是阻塞型的`，在高并发下nginx 能保持低资源低消耗高性能\n  * 配置简洁\n  * 高度模块化的设计，编写模块相对简单\n  * 社区活跃\n\napache 相对nginx 的优点：\n\n  * rewrite ，比nginx 的rewrite 强大\n  * 模块超多，基本想到的都可以找到\n  * 少bug ，nginx 的bug 相对较多\n  * 超稳定\n\n两者最核心的区别在于 `apache 是同步多进程模型，一个连接对应一个进程`，而 `nginx 是异步的，多个连接（万级别）可以对应一个进程`\n\n一般来说，需要性能的 web 服务，用 nginx 。如果不需要性能只求稳定，更考虑 apache ，后者的各种功能模块实现得比前者，例如 ssl 的模块就比前者好，可配置项多。epoll(freebsd 上是 kqueue ) 网络 IO 模型是 nginx 处理性能高的根本理由，但并不是所有的情况下都是 epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的 select 模型或许比 epoll 更高性能。当然，这只是根据网络 IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。\n\n更为通用的方案是，前端 nginx 抗并发，后端 apache 集群，配合起来会更好。\n","source":"_posts/Apache和Nginx的对比.md","raw":"---\ntitle: Apache和Nginx的对比\ndate: 2018-03-08 02:11:57\ntags:\n  - Web服务器\n---\n## Apache\n\n1. apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache\n2. apache 发展到现在，模块超多，基本想到的都可以找到\n3. apache 更为成熟，少 bug ，nginx 的 bug 相对较多\n4. apache 超稳定\n5. apache 对 PHP 支持比较简单，nginx 需要配合其他后端用\n6. apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。\n7. apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区\n\n<!-- more -->\n\n## Nginx\n\n1. 轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源\n2. 抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。\n3. nginx 处理静态文件好，静态处理性能比 apache 高三倍以上\n4. nginx 的设计高度模块化，编写模块相对简单\n5. nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃\n6. nginx 作为负载均衡服务器，支持 7 层负载均衡\n7. nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器\n8. 启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级\n9. 社区活跃，各种高性能模块出品迅速\n\n## 总结\n\nnginx 相对 apache 的优点：\n\n  * 轻量级，同样起web 服务，比apache 占用更少的内存及资源\n  * 抗并发，`nginx 处理请求是异步非阻塞的`，支持更多的并发连接，而`apache 则是阻塞型的`，在高并发下nginx 能保持低资源低消耗高性能\n  * 配置简洁\n  * 高度模块化的设计，编写模块相对简单\n  * 社区活跃\n\napache 相对nginx 的优点：\n\n  * rewrite ，比nginx 的rewrite 强大\n  * 模块超多，基本想到的都可以找到\n  * 少bug ，nginx 的bug 相对较多\n  * 超稳定\n\n两者最核心的区别在于 `apache 是同步多进程模型，一个连接对应一个进程`，而 `nginx 是异步的，多个连接（万级别）可以对应一个进程`\n\n一般来说，需要性能的 web 服务，用 nginx 。如果不需要性能只求稳定，更考虑 apache ，后者的各种功能模块实现得比前者，例如 ssl 的模块就比前者好，可配置项多。epoll(freebsd 上是 kqueue ) 网络 IO 模型是 nginx 处理性能高的根本理由，但并不是所有的情况下都是 epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的 select 模型或许比 epoll 更高性能。当然，这只是根据网络 IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。\n\n更为通用的方案是，前端 nginx 抗并发，后端 apache 集群，配合起来会更好。\n","slug":"Apache和Nginx的对比","published":1,"updated":"2018-03-07T18:31:50.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x050006exot0b4sn3tc","content":"<h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><ol>\n<li>apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache</li>\n<li>apache 发展到现在，模块超多，基本想到的都可以找到</li>\n<li>apache 更为成熟，少 bug ，nginx 的 bug 相对较多</li>\n<li>apache 超稳定</li>\n<li>apache 对 PHP 支持比较简单，nginx 需要配合其他后端用</li>\n<li>apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。</li>\n<li>apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><ol>\n<li>轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源</li>\n<li>抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。</li>\n<li>nginx 处理静态文件好，静态处理性能比 apache 高三倍以上</li>\n<li>nginx 的设计高度模块化，编写模块相对简单</li>\n<li>nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃</li>\n<li>nginx 作为负载均衡服务器，支持 7 层负载均衡</li>\n<li>nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器</li>\n<li>启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级</li>\n<li>社区活跃，各种高性能模块出品迅速</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>nginx 相对 apache 的优点：</p>\n<ul>\n<li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li>\n<li>抗并发，<code>nginx 处理请求是异步非阻塞的</code>，支持更多的并发连接，而<code>apache 则是阻塞型的</code>，在高并发下nginx 能保持低资源低消耗高性能</li>\n<li>配置简洁</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃</li>\n</ul>\n<p>apache 相对nginx 的优点：</p>\n<ul>\n<li>rewrite ，比nginx 的rewrite 强大</li>\n<li>模块超多，基本想到的都可以找到</li>\n<li>少bug ，nginx 的bug 相对较多</li>\n<li>超稳定</li>\n</ul>\n<p>两者最核心的区别在于 <code>apache 是同步多进程模型，一个连接对应一个进程</code>，而 <code>nginx 是异步的，多个连接（万级别）可以对应一个进程</code></p>\n<p>一般来说，需要性能的 web 服务，用 nginx 。如果不需要性能只求稳定，更考虑 apache ，后者的各种功能模块实现得比前者，例如 ssl 的模块就比前者好，可配置项多。epoll(freebsd 上是 kqueue ) 网络 IO 模型是 nginx 处理性能高的根本理由，但并不是所有的情况下都是 epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的 select 模型或许比 epoll 更高性能。当然，这只是根据网络 IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。</p>\n<p>更为通用的方案是，前端 nginx 抗并发，后端 apache 集群，配合起来会更好。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><ol>\n<li>apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache</li>\n<li>apache 发展到现在，模块超多，基本想到的都可以找到</li>\n<li>apache 更为成熟，少 bug ，nginx 的 bug 相对较多</li>\n<li>apache 超稳定</li>\n<li>apache 对 PHP 支持比较简单，nginx 需要配合其他后端用</li>\n<li>apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。</li>\n<li>apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区</li>\n</ol>","more":"<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><ol>\n<li>轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源</li>\n<li>抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。</li>\n<li>nginx 处理静态文件好，静态处理性能比 apache 高三倍以上</li>\n<li>nginx 的设计高度模块化，编写模块相对简单</li>\n<li>nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃</li>\n<li>nginx 作为负载均衡服务器，支持 7 层负载均衡</li>\n<li>nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器</li>\n<li>启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级</li>\n<li>社区活跃，各种高性能模块出品迅速</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>nginx 相对 apache 的优点：</p>\n<ul>\n<li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li>\n<li>抗并发，<code>nginx 处理请求是异步非阻塞的</code>，支持更多的并发连接，而<code>apache 则是阻塞型的</code>，在高并发下nginx 能保持低资源低消耗高性能</li>\n<li>配置简洁</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃</li>\n</ul>\n<p>apache 相对nginx 的优点：</p>\n<ul>\n<li>rewrite ，比nginx 的rewrite 强大</li>\n<li>模块超多，基本想到的都可以找到</li>\n<li>少bug ，nginx 的bug 相对较多</li>\n<li>超稳定</li>\n</ul>\n<p>两者最核心的区别在于 <code>apache 是同步多进程模型，一个连接对应一个进程</code>，而 <code>nginx 是异步的，多个连接（万级别）可以对应一个进程</code></p>\n<p>一般来说，需要性能的 web 服务，用 nginx 。如果不需要性能只求稳定，更考虑 apache ，后者的各种功能模块实现得比前者，例如 ssl 的模块就比前者好，可配置项多。epoll(freebsd 上是 kqueue ) 网络 IO 模型是 nginx 处理性能高的根本理由，但并不是所有的情况下都是 epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的 select 模型或许比 epoll 更高性能。当然，这只是根据网络 IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。</p>\n<p>更为通用的方案是，前端 nginx 抗并发，后端 apache 集群，配合起来会更好。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 08 2018 02:31:50 GMT+0800 (China Standard Time)","title":"Apache和Nginx的对比","path":"2018/03/08/Apache和Nginx的对比/","eyeCatchImage":null,"excerpt":"<h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><ol>\n<li>apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache</li>\n<li>apache 发展到现在，模块超多，基本想到的都可以找到</li>\n<li>apache 更为成熟，少 bug ，nginx 的 bug 相对较多</li>\n<li>apache 超稳定</li>\n<li>apache 对 PHP 支持比较简单，nginx 需要配合其他后端用</li>\n<li>apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。</li>\n<li>apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区</li>\n</ol>","date":"2018-03-07T18:11:57.000Z","pv":0,"totalPV":0,"categories":"","tags":["Web服务器"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Differences between `==` and `is` in Python3?---(Reprint)","date":"2018-03-28T18:47:37.000Z","_content":"\n## Source Question\nMy [Google-fu](https://english.stackexchange.com/questions/19967/what-does-google-fu-mean) has failed me.\n\nIn Python, are the following two tests for equality equivalent?\n\n```Python\nn = 5\n# Test one.\nif n == 5:\n    print 'Yay!'\n\n# Test two.\nif n is 5:\n    print 'Yay!'\n```\n\nDoes this hold true for objects where you would be comparing instances (a `list` say)?\n\nOkay, so this kind of answers my question:\n\n```python\nL = []\nL.append(1)\nif L == [1]:\n    print 'Yay!'\n# Holds true, but...\n\nif L is [1]:\n    print 'Yay!'\n# Doesn't.\n```\n\nSo `==` tests value where `is` tests to see if they are the same object?\n\n<!-- more -->\n\n\n## Answers 1\n\n`is` will return `True` if two variables point to the same object, `==` if the objects referred to by the variables are equal.\n\n```python\n>>> a = [1, 2, 3]\n>>> b = a\n>>> b is a\nTrue\n>>> b == a\nTrue\n>>> b = a[:]\n>>> b is a\nFalse\n>>> b == a\nTrue\n```\n\nIn your case, the second test only works `because Python caches small integer objects`, which is an implementation detail. For `larger integers`, this does not work:\n\n```python\n>>> 1000 is 10**3\nFalse\n>>> 1000 == 10**3\nTrue\n```\n\nThe same holds true for `string literals`:\n\n```python\n>>> \"a\" is \"a\"\nTrue\n>>> \"aa\" is \"a\" * 2\nTrue\n>>> x = \"a\"\n>>> \"aa\" is x * 2\nFalse\n>>> \"aa\" is intern(x*2)\nTrue\n```\nPlease see [this question](https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none) as well.\n\n## Answers 2\n\nThere is a simple rule of thumb to tell you when to use `==` or `is`.\n\n  * `==` is for _value equality_. Use it when you would like to know if two objects have the same value.\n  * `is` is for _reference equality_. Use it when you would like to know if two references refer to the same object.\n\nIn general, when you are comparing something to a simple type, you are usually checking for _value equality_, so you should use `==`. For example, the intention of your example is probably to check whether x has a value equal to 2 (`==`), not whether `x` is literally referring to the same object as 2.\n\n\nSomething else to note: because of the way the CPython reference implementation works, you'll get unexpected and inconsistent results if you mistakenly use `is` to compare for reference equality on integers:\n\n```python\n>>> a = 500\n>>> b = 500\n>>> a == b\nTrue\n>>> a is b\nFalse\n```\n\nThat's pretty much what we expected: `a` and `b` have the same value, but are distinct entities. But what about this?\n\n```python\n>>> c = 200\n>>> d = 200\n>>> c == d\nTrue\n>>> c is d\nTrue\n```\n\nThis is inconsistent with the earlier result. What's going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here's an example demonstrating this:\n\n```python\n>>> for i in range(250, 260): a = i; print \"%i: %s\" % (i, a is int(str(i)));\n...\n250: True\n251: True\n252: True\n253: True\n254: True\n255: True\n256: True\n257: False\n258: False\n259: False\n```\n\nThis is another obvious reason not to use `is`: the behavior is left up to implementations when you're erroneously using it for value equality.\n\n\n## References\n\n1. [Is there a difference between `==` and `is` in Python?\n](https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659)\n","source":"_posts/Differences-between-and-is-in-Python3---(Reprint).md","raw":"---\ntitle: Differences between `==` and `is` in Python3?---(Reprint)\ndate: 2018-03-29 02:47:37\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n## Source Question\nMy [Google-fu](https://english.stackexchange.com/questions/19967/what-does-google-fu-mean) has failed me.\n\nIn Python, are the following two tests for equality equivalent?\n\n```Python\nn = 5\n# Test one.\nif n == 5:\n    print 'Yay!'\n\n# Test two.\nif n is 5:\n    print 'Yay!'\n```\n\nDoes this hold true for objects where you would be comparing instances (a `list` say)?\n\nOkay, so this kind of answers my question:\n\n```python\nL = []\nL.append(1)\nif L == [1]:\n    print 'Yay!'\n# Holds true, but...\n\nif L is [1]:\n    print 'Yay!'\n# Doesn't.\n```\n\nSo `==` tests value where `is` tests to see if they are the same object?\n\n<!-- more -->\n\n\n## Answers 1\n\n`is` will return `True` if two variables point to the same object, `==` if the objects referred to by the variables are equal.\n\n```python\n>>> a = [1, 2, 3]\n>>> b = a\n>>> b is a\nTrue\n>>> b == a\nTrue\n>>> b = a[:]\n>>> b is a\nFalse\n>>> b == a\nTrue\n```\n\nIn your case, the second test only works `because Python caches small integer objects`, which is an implementation detail. For `larger integers`, this does not work:\n\n```python\n>>> 1000 is 10**3\nFalse\n>>> 1000 == 10**3\nTrue\n```\n\nThe same holds true for `string literals`:\n\n```python\n>>> \"a\" is \"a\"\nTrue\n>>> \"aa\" is \"a\" * 2\nTrue\n>>> x = \"a\"\n>>> \"aa\" is x * 2\nFalse\n>>> \"aa\" is intern(x*2)\nTrue\n```\nPlease see [this question](https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none) as well.\n\n## Answers 2\n\nThere is a simple rule of thumb to tell you when to use `==` or `is`.\n\n  * `==` is for _value equality_. Use it when you would like to know if two objects have the same value.\n  * `is` is for _reference equality_. Use it when you would like to know if two references refer to the same object.\n\nIn general, when you are comparing something to a simple type, you are usually checking for _value equality_, so you should use `==`. For example, the intention of your example is probably to check whether x has a value equal to 2 (`==`), not whether `x` is literally referring to the same object as 2.\n\n\nSomething else to note: because of the way the CPython reference implementation works, you'll get unexpected and inconsistent results if you mistakenly use `is` to compare for reference equality on integers:\n\n```python\n>>> a = 500\n>>> b = 500\n>>> a == b\nTrue\n>>> a is b\nFalse\n```\n\nThat's pretty much what we expected: `a` and `b` have the same value, but are distinct entities. But what about this?\n\n```python\n>>> c = 200\n>>> d = 200\n>>> c == d\nTrue\n>>> c is d\nTrue\n```\n\nThis is inconsistent with the earlier result. What's going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here's an example demonstrating this:\n\n```python\n>>> for i in range(250, 260): a = i; print \"%i: %s\" % (i, a is int(str(i)));\n...\n250: True\n251: True\n252: True\n253: True\n254: True\n255: True\n256: True\n257: False\n258: False\n259: False\n```\n\nThis is another obvious reason not to use `is`: the behavior is left up to implementations when you're erroneously using it for value equality.\n\n\n## References\n\n1. [Is there a difference between `==` and `is` in Python?\n](https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659)\n","slug":"Differences-between-and-is-in-Python3---(Reprint)","published":1,"updated":"2018-03-28T19:25:46.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x0d0008exot7c02oqt5","content":"<h2 id=\"Source-Question\"><a href=\"#Source-Question\" class=\"headerlink\" title=\"Source Question\"></a>Source Question</h2><p>My <a href=\"https://english.stackexchange.com/questions/19967/what-does-google-fu-mean\" target=\"_blank\" rel=\"noopener\">Google-fu</a> has failed me.</p>\n<p>In Python, are the following two tests for equality equivalent?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># Test one.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n == <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test two.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n <span class=\"keyword\">is</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br></pre></td></tr></table></figure>\n<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>\n<p>Okay, so this kind of answers my question:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = []</span><br><span class=\"line\">L.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> L == [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Holds true, but...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Doesn't.</span></span><br></pre></td></tr></table></figure>\n<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>\n<a id=\"more\"></a>\n<h2 id=\"Answers-1\"><a href=\"#Answers-1\" class=\"headerlink\" title=\"Answers 1\"></a>Answers 1</h2><p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a[:]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>In your case, the second test only works <code>because Python caches small integer objects</code>, which is an implementation detail. For <code>larger integers</code>, this does not work:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000</span> <span class=\"keyword\">is</span> <span class=\"number\">10</span>**<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000</span> == <span class=\"number\">10</span>**<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>The same holds true for <code>string literals</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">is</span> <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> <span class=\"string\">\"a\"</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> x * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> intern(x*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>Please see <a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\" target=\"_blank\" rel=\"noopener\">this question</a> as well.</p>\n<h2 id=\"Answers-2\"><a href=\"#Answers-2\" class=\"headerlink\" title=\"Answers 2\"></a>Answers 2</h2><p>There is a simple rule of thumb to tell you when to use <code>==</code> or <code>is</code>.</p>\n<ul>\n<li><code>==</code> is for <em>value equality</em>. Use it when you would like to know if two objects have the same value.</li>\n<li><code>is</code> is for <em>reference equality</em>. Use it when you would like to know if two references refer to the same object.</li>\n</ul>\n<p>In general, when you are comparing something to a simple type, you are usually checking for <em>value equality</em>, so you should use <code>==</code>. For example, the intention of your example is probably to check whether x has a value equal to 2 (<code>==</code>), not whether <code>x</code> is literally referring to the same object as 2.</p>\n<p>Something else to note: because of the way the CPython reference implementation works, you’ll get unexpected and inconsistent results if you mistakenly use <code>is</code> to compare for reference equality on integers:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>That’s pretty much what we expected: <code>a</code> and <code>b</code> have the same value, but are distinct entities. But what about this?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c == d</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c <span class=\"keyword\">is</span> d</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>This is inconsistent with the earlier result. What’s going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here’s an example demonstrating this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">250</span>, <span class=\"number\">260</span>): a = i; <span class=\"keyword\">print</span> <span class=\"string\">\"%i: %s\"</span> % (i, a <span class=\"keyword\">is</span> int(str(i)));</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">250</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">251</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">252</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">253</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">254</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">255</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">256</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">257</span>: <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"number\">258</span>: <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"number\">259</span>: <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>This is another obvious reason not to use <code>is</code>: the behavior is left up to implementations when you’re erroneously using it for value equality.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659\" target=\"_blank\" rel=\"noopener\">Is there a difference between <code>==</code> and <code>is</code> in Python?\n</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Source-Question\"><a href=\"#Source-Question\" class=\"headerlink\" title=\"Source Question\"></a>Source Question</h2><p>My <a href=\"https://english.stackexchange.com/questions/19967/what-does-google-fu-mean\" target=\"_blank\" rel=\"noopener\">Google-fu</a> has failed me.</p>\n<p>In Python, are the following two tests for equality equivalent?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># Test one.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n == <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test two.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n <span class=\"keyword\">is</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br></pre></td></tr></table></figure>\n<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>\n<p>Okay, so this kind of answers my question:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = []</span><br><span class=\"line\">L.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> L == [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Holds true, but...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Doesn't.</span></span><br></pre></td></tr></table></figure>\n<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>","more":"<h2 id=\"Answers-1\"><a href=\"#Answers-1\" class=\"headerlink\" title=\"Answers 1\"></a>Answers 1</h2><p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a[:]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>In your case, the second test only works <code>because Python caches small integer objects</code>, which is an implementation detail. For <code>larger integers</code>, this does not work:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000</span> <span class=\"keyword\">is</span> <span class=\"number\">10</span>**<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000</span> == <span class=\"number\">10</span>**<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>The same holds true for <code>string literals</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">is</span> <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> <span class=\"string\">\"a\"</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> x * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"aa\"</span> <span class=\"keyword\">is</span> intern(x*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>Please see <a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\" target=\"_blank\" rel=\"noopener\">this question</a> as well.</p>\n<h2 id=\"Answers-2\"><a href=\"#Answers-2\" class=\"headerlink\" title=\"Answers 2\"></a>Answers 2</h2><p>There is a simple rule of thumb to tell you when to use <code>==</code> or <code>is</code>.</p>\n<ul>\n<li><code>==</code> is for <em>value equality</em>. Use it when you would like to know if two objects have the same value.</li>\n<li><code>is</code> is for <em>reference equality</em>. Use it when you would like to know if two references refer to the same object.</li>\n</ul>\n<p>In general, when you are comparing something to a simple type, you are usually checking for <em>value equality</em>, so you should use <code>==</code>. For example, the intention of your example is probably to check whether x has a value equal to 2 (<code>==</code>), not whether <code>x</code> is literally referring to the same object as 2.</p>\n<p>Something else to note: because of the way the CPython reference implementation works, you’ll get unexpected and inconsistent results if you mistakenly use <code>is</code> to compare for reference equality on integers:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>That’s pretty much what we expected: <code>a</code> and <code>b</code> have the same value, but are distinct entities. But what about this?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c == d</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c <span class=\"keyword\">is</span> d</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>This is inconsistent with the earlier result. What’s going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here’s an example demonstrating this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">250</span>, <span class=\"number\">260</span>): a = i; <span class=\"keyword\">print</span> <span class=\"string\">\"%i: %s\"</span> % (i, a <span class=\"keyword\">is</span> int(str(i)));</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">250</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">251</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">252</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">253</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">254</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">255</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">256</span>: <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"number\">257</span>: <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"number\">258</span>: <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"number\">259</span>: <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>This is another obvious reason not to use <code>is</code>: the behavior is left up to implementations when you’re erroneously using it for value equality.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python/134659#134659\" target=\"_blank\" rel=\"noopener\">Is there a difference between <code>==</code> and <code>is</code> in Python?\n</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 29 2018 03:25:46 GMT+0800 (China Standard Time)","title":"Differences between `==` and `is` in Python3?---(Reprint)","path":"2018/03/29/Differences-between-and-is-in-Python3---(Reprint)/","eyeCatchImage":null,"excerpt":"<h2 id=\"Source-Question\"><a href=\"#Source-Question\" class=\"headerlink\" title=\"Source Question\"></a>Source Question</h2><p>My <a href=\"https://english.stackexchange.com/questions/19967/what-does-google-fu-mean\" target=\"_blank\" rel=\"noopener\">Google-fu</a> has failed me.</p>\n<p>In Python, are the following two tests for equality equivalent?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># Test one.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n == <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test two.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> n <span class=\"keyword\">is</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br></pre></td></tr></table></figure>\n<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>\n<p>Okay, so this kind of answers my question:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = []</span><br><span class=\"line\">L.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> L == [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Holds true, but...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> [<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yay!'</span></span><br><span class=\"line\"><span class=\"comment\"># Doesn't.</span></span><br></pre></td></tr></table></figure>\n<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>","date":"2018-03-28T18:47:37.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Django2.0.1搭建电影网站","date":"2018-02-27T05:48:44.000Z","_content":"![首页](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png)\n\n本项目已经部署到服务器，可以通过该IP查看\nhttp://59.110.221.56/\n[GitHub源代码](https://github.com/ByiProX/ThoughtWorks-Cinema)\n<!--more-->\n\n## 技术栈\n> Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust\n\n\n## 本地服务运行方法\n\n终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：\n\n```python\nsource ../venv/bin/activate.fish\nsource ../venv/bin/activate\nsource ../venv/bin/activate.csh\n```\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n**如果报错**，终端进入requirements.txt所在目录，运行命令：\n```python3\npip3 install -r requirements.txt\n```\n\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n## 单元测试运行方法 ##\n在manage.py路径下终端运行\n\n```python\npython3 manage.py test\n```\n\n## 网站功能描述\n\n- 实现导航栏搜索电影，支持按年份搜索和类型搜索\n    -- 显示分类列表\n    -- 点击分类显示符合分类要求的电影\n\n- 实现搜索功能，支持按电影名称模糊搜索\n\n- 实现电影详细信息查看功能\n    -- 显示电影详细信息\n    -- 显示豆瓣 Top 5 影评\n    -- 在电影详细页面显示相似电影推荐\n    -- 增加电影观看链接\n\n## API\n\n- 按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545\n\n- 按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼\n\n- 按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish\n\n- 按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情\n\n- 按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003\n\n\n## 网站性能测试结果\n\n在文件locustfile.py路径下运行\n```python3\nlocust --host=http://59.110.221.56\n```\n\n### 压力测试\n* 采取的框架：**locust**\n* 服务器性能：\n    * CPU：1核\n    * 内存：2 GB (I/O优化)\n    * 带宽：1Mbps\n* 测试结果：\n    * 500人：100%正确\n    * 1000人：40%出错率\n* 测试截图\n\n\n\n![Screen Shot 2018-02-08 at 16.15.49.png](http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.14.10.png](http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.13.49.png](http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 电影网站的其他截图\n\n![list](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png)\n![detail](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png)\n\n\n## Reference\n\n[Locust 简介以及使用](https://my.oschina.net/u/1447352/blog/1499428/)\n","source":"_posts/Django2-0-1搭建电影网站.md","raw":"---\ntitle: Django2.0.1搭建电影网站\ndate: 2018-02-27 13:48:44\ntags:\n  - Django\n  - Python3\ncategories:\n  - Django\n---\n![首页](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png)\n\n本项目已经部署到服务器，可以通过该IP查看\nhttp://59.110.221.56/\n[GitHub源代码](https://github.com/ByiProX/ThoughtWorks-Cinema)\n<!--more-->\n\n## 技术栈\n> Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust\n\n\n## 本地服务运行方法\n\n终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：\n\n```python\nsource ../venv/bin/activate.fish\nsource ../venv/bin/activate\nsource ../venv/bin/activate.csh\n```\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n**如果报错**，终端进入requirements.txt所在目录，运行命令：\n```python3\npip3 install -r requirements.txt\n```\n\n然后执行：\n```python\npython3 TWS_Cinema/manage.py runserver\n```\n\n## 单元测试运行方法 ##\n在manage.py路径下终端运行\n\n```python\npython3 manage.py test\n```\n\n## 网站功能描述\n\n- 实现导航栏搜索电影，支持按年份搜索和类型搜索\n    -- 显示分类列表\n    -- 点击分类显示符合分类要求的电影\n\n- 实现搜索功能，支持按电影名称模糊搜索\n\n- 实现电影详细信息查看功能\n    -- 显示电影详细信息\n    -- 显示豆瓣 Top 5 影评\n    -- 在电影详细页面显示相似电影推荐\n    -- 增加电影观看链接\n\n## API\n\n- 按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545\n\n- 按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼\n\n- 按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish\n\n- 按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情\n\n- 按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003\n\n\n## 网站性能测试结果\n\n在文件locustfile.py路径下运行\n```python3\nlocust --host=http://59.110.221.56\n```\n\n### 压力测试\n* 采取的框架：**locust**\n* 服务器性能：\n    * CPU：1核\n    * 内存：2 GB (I/O优化)\n    * 带宽：1Mbps\n* 测试结果：\n    * 500人：100%正确\n    * 1000人：40%出错率\n* 测试截图\n\n\n\n![Screen Shot 2018-02-08 at 16.15.49.png](http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.14.10.png](http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-02-08 at 16.13.49.png](http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 电影网站的其他截图\n\n![list](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png)\n![detail](https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png)\n\n\n## Reference\n\n[Locust 简介以及使用](https://my.oschina.net/u/1447352/blog/1499428/)\n","slug":"Django2-0-1搭建电影网站","published":1,"updated":"2018-02-27T06:41:59.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x0h0009exot886x2nw7","content":"<p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png\" alt=\"首页\"></p>\n<p>本项目已经部署到服务器，可以通过该IP查看<br><a href=\"http://59.110.221.56/\" target=\"_blank\" rel=\"noopener\">http://59.110.221.56/</a><br><a href=\"https://github.com/ByiProX/ThoughtWorks-Cinema\" target=\"_blank\" rel=\"noopener\">GitHub源代码</a><br><a id=\"more\"></a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><blockquote>\n<p>Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust</p>\n</blockquote>\n<h2 id=\"本地服务运行方法\"><a href=\"#本地服务运行方法\" class=\"headerlink\" title=\"本地服务运行方法\"></a>本地服务运行方法</h2><p>终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ../venv/bin/activate.fish</span><br><span class=\"line\">source ../venv/bin/activate</span><br><span class=\"line\">source ../venv/bin/activate.csh</span><br></pre></td></tr></table></figure>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果报错</strong>，终端进入requirements.txt所在目录，运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单元测试运行方法\"><a href=\"#单元测试运行方法\" class=\"headerlink\" title=\"单元测试运行方法\"></a>单元测试运行方法</h2><p>在manage.py路径下终端运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py test</span><br></pre></td></tr></table></figure>\n<h2 id=\"网站功能描述\"><a href=\"#网站功能描述\" class=\"headerlink\" title=\"网站功能描述\"></a>网站功能描述</h2><ul>\n<li><p>实现导航栏搜索电影，支持按年份搜索和类型搜索<br>  – 显示分类列表<br>  – 点击分类显示符合分类要求的电影</p>\n</li>\n<li><p>实现搜索功能，支持按电影名称模糊搜索</p>\n</li>\n<li><p>实现电影详细信息查看功能<br>  – 显示电影详细信息<br>  – 显示豆瓣 Top 5 影评<br>  – 在电影详细页面显示相似电影推荐<br>  – 增加电影观看链接</p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><p>按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545</p>\n</li>\n<li><p>按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼</p>\n</li>\n<li><p>按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish</p>\n</li>\n<li><p>按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情</p>\n</li>\n<li><p>按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003</p>\n</li>\n</ul>\n<h2 id=\"网站性能测试结果\"><a href=\"#网站性能测试结果\" class=\"headerlink\" title=\"网站性能测试结果\"></a>网站性能测试结果</h2><p>在文件locustfile.py路径下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locust --host=http://59.110.221.56</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><ul>\n<li>采取的框架：<strong>locust</strong></li>\n<li>服务器性能：<ul>\n<li>CPU：1核</li>\n<li>内存：2 GB (I/O优化)</li>\n<li>带宽：1Mbps</li>\n</ul>\n</li>\n<li>测试结果：<ul>\n<li>500人：100%正确</li>\n<li>1000人：40%出错率</li>\n</ul>\n</li>\n<li>测试截图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.15.49.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.14.10.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.13.49.png\"></p>\n<h2 id=\"电影网站的其他截图\"><a href=\"#电影网站的其他截图\" class=\"headerlink\" title=\"电影网站的其他截图\"></a>电影网站的其他截图</h2><p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png\" alt=\"list\"><br><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png\" alt=\"detail\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://my.oschina.net/u/1447352/blog/1499428/\" target=\"_blank\" rel=\"noopener\">Locust 简介以及使用</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png\" alt=\"首页\"></p>\n<p>本项目已经部署到服务器，可以通过该IP查看<br><a href=\"http://59.110.221.56/\" target=\"_blank\" rel=\"noopener\">http://59.110.221.56/</a><br><a href=\"https://github.com/ByiProX/ThoughtWorks-Cinema\" target=\"_blank\" rel=\"noopener\">GitHub源代码</a><br>","more":"</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><blockquote>\n<p>Bootstrap 3 + Django 2.0.1 + MySQL 5.7.17 + Nginx + locust</p>\n</blockquote>\n<h2 id=\"本地服务运行方法\"><a href=\"#本地服务运行方法\" class=\"headerlink\" title=\"本地服务运行方法\"></a>本地服务运行方法</h2><p>终端在venv文件夹路径下开启虚拟环境(根据自己的shell进行选择)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ../venv/bin/activate.fish</span><br><span class=\"line\">source ../venv/bin/activate</span><br><span class=\"line\">source ../venv/bin/activate.csh</span><br></pre></td></tr></table></figure>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果报错</strong>，终端进入requirements.txt所在目录，运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 TWS_Cinema/manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单元测试运行方法\"><a href=\"#单元测试运行方法\" class=\"headerlink\" title=\"单元测试运行方法\"></a>单元测试运行方法</h2><p>在manage.py路径下终端运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py test</span><br></pre></td></tr></table></figure>\n<h2 id=\"网站功能描述\"><a href=\"#网站功能描述\" class=\"headerlink\" title=\"网站功能描述\"></a>网站功能描述</h2><ul>\n<li><p>实现导航栏搜索电影，支持按年份搜索和类型搜索<br>  – 显示分类列表<br>  – 点击分类显示符合分类要求的电影</p>\n</li>\n<li><p>实现搜索功能，支持按电影名称模糊搜索</p>\n</li>\n<li><p>实现电影详细信息查看功能<br>  – 显示电影详细信息<br>  – 显示豆瓣 Top 5 影评<br>  – 在电影详细页面显示相似电影推荐<br>  – 增加电影观看链接</p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><p>按电影id搜索 —— api/movie/id/        # 例如：api/movie/id/1291545</p>\n</li>\n<li><p>按电影名搜索 —— api/movie/title/     # 例如：api/movie/title/大鱼</p>\n</li>\n<li><p>按电影原始名搜索 —— api/movie/original_title/     # 例如：api/movie/original_title/Big Fish</p>\n</li>\n<li><p>按电影类型搜索 —— api/movie/genre/   # 例如：api/movie/genre/剧情</p>\n</li>\n<li><p>按电影年份搜索 —— api/movie/year/    # 例如：api/movie/year/2003</p>\n</li>\n</ul>\n<h2 id=\"网站性能测试结果\"><a href=\"#网站性能测试结果\" class=\"headerlink\" title=\"网站性能测试结果\"></a>网站性能测试结果</h2><p>在文件locustfile.py路径下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locust --host=http://59.110.221.56</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><ul>\n<li>采取的框架：<strong>locust</strong></li>\n<li>服务器性能：<ul>\n<li>CPU：1核</li>\n<li>内存：2 GB (I/O优化)</li>\n<li>带宽：1Mbps</li>\n</ul>\n</li>\n<li>测试结果：<ul>\n<li>500人：100%正确</li>\n<li>1000人：40%出错率</li>\n</ul>\n</li>\n<li>测试截图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-4c41c64c40130ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.15.49.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-c2c542dbf0ce9e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.14.10.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f5e4ace67f22ddac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-08 at 16.13.49.png\"></p>\n<h2 id=\"电影网站的其他截图\"><a href=\"#电影网站的其他截图\" class=\"headerlink\" title=\"电影网站的其他截图\"></a>电影网站的其他截图</h2><p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985569003-fireshot-capture-9-%E9%A6%96%E9%A1%B5-http___127.0.0.1_8000_movie_display_.png\" alt=\"list\"><br><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985586166-fireshot-capture-10-%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85-http___127.0.0.1_8000_movie_id_1291545_.png\" alt=\"detail\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://my.oschina.net/u/1447352/blog/1499428/\" target=\"_blank\" rel=\"noopener\">Locust 简介以及使用</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Feb 27 2018 14:41:59 GMT+0800 (China Standard Time)","title":"Django2.0.1搭建电影网站","path":"2018/02/27/Django2-0-1搭建电影网站/","eyeCatchImage":null,"excerpt":"<p><img src=\"https://school.thoughtworks.cn/bbs/assets/uploads/files/1517985555955-fireshot-capture-8-cinema-http___127.0.0.1_8000_.png\" alt=\"首页\"></p>\n<p>本项目已经部署到服务器，可以通过该IP查看<br><a href=\"http://59.110.221.56/\" target=\"_blank\" rel=\"noopener\">http://59.110.221.56/</a><br><a href=\"https://github.com/ByiProX/ThoughtWorks-Cinema\" target=\"_blank\" rel=\"noopener\">GitHub源代码</a><br>","date":"2018-02-27T05:48:44.000Z","pv":0,"totalPV":0,"categories":"Django","tags":["Python3","Django"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"DROP、DELETE和TRUNCATE区别","date":"2018-09-26T05:20:40.000Z","_content":"\n|  Diffs   | DELETE    |TRUNCATE   | Drop |\n| :-----: | :-----:  | :-----:   |  :-----:|\n| 执行速度      | 慢  | 较快  |       快       |\n| 可执行条件    | 可以  | 不可以  |   不可以       |\n| 语句分类    | DML  | DDL  |        DDL       |\n| 可以回滚事务    | 可以  | 不可以  |     不可以      |\n| 删除操作记录日志    | 记录  | 不记录  |     不记录     |\n\n- drop：drop table 表名\n删除内容和定义，并释放空间。执行drop语句，将使此表的结构一起删除。\n- truncate (清空表中的数据)：truncate table 表名\n删除内容、释放空间但不删除定义(也就是保留表的数据结构)。与drop不同的是,只是清空表数据而已。\ntruncate不能删除行数据，虽然只删除数据，但是比delete彻底，它只删除表数据。\n- delete：delete from 表名 （where 列名 = 值）\n与truncate类似，delete也只删除内容、释放空间但不删除定义；但是delete即可以对行数据进行删除，也可以对整表数据进行删除。\n\n---------------------\n\n<!-- more -->\n\n#### 相同点：\n\n - truncate 和不带 where 子句的 delete，以及 drop 都会删除表内的数据\n\n#### 不同点:\n\n1. `truncate 和 delete 只删除数据不删除表的结构(定义)`\ndrop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index);依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n2. `delete 语句是数据库操作语言(dml)，这操作会放到rollback segement 中，事务提交之后才生效;如果有相应的 trigger，执行的时候将被触发。`\n`truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。`\n\n3. delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动\n　　显然 drop 语句将表所占用的空间全部释放。\n　　truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage;truncate 会将高水线复位(回到最开始)。\n\n4. 速度，一般来说: drop> truncate > delete\n\n5. 安全性：小心使用 drop 和 truncate，尤其没有备份的时候.否则哭都来不及\n\n6. 使用上: 想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大.想删除表,当然用 drop;\n`想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。`\n如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。\n\n#### 语法\n```SQL\nDelete from Tablename where 条件\nTruncate table Tablename\nDrop table Tablename\n```\n\n\n#### Mysql的truncate和delete的区别\ntruncate table table_name 和delete from table_name 都是删除表中所有记录。\n\n区别：\n\ntruncate能够快速清空一个表。并且重置auto_increment的值。而delete只能一行一行的删除。\n\n但对于不同的类型存储引擎需要注意的地方是：\n\nA. 对于myisam\n\n>truncate会重置auto_increment的值为1。而delete后表仍然保持auto_increment。\n\nB. 对于innodb\n\n>truncate会重置auto_increment的值为1。delete后表仍然保持auto_increment。但是在做delete整个表之后重启MySQL的话，则`重启后`的auto_increment会被置为1。\n\n也就是说，innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始。实质上`重启`后的auto_increment会从 SELECT 1+MAX(ai_col) FROM t 开始。\n\n-----------\n","source":"_posts/DROP、DELETE和TRUNCATE区别.md","raw":"---\ntitle: DROP、DELETE和TRUNCATE区别\ndate: 2018-09-26 13:20:40\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n|  Diffs   | DELETE    |TRUNCATE   | Drop |\n| :-----: | :-----:  | :-----:   |  :-----:|\n| 执行速度      | 慢  | 较快  |       快       |\n| 可执行条件    | 可以  | 不可以  |   不可以       |\n| 语句分类    | DML  | DDL  |        DDL       |\n| 可以回滚事务    | 可以  | 不可以  |     不可以      |\n| 删除操作记录日志    | 记录  | 不记录  |     不记录     |\n\n- drop：drop table 表名\n删除内容和定义，并释放空间。执行drop语句，将使此表的结构一起删除。\n- truncate (清空表中的数据)：truncate table 表名\n删除内容、释放空间但不删除定义(也就是保留表的数据结构)。与drop不同的是,只是清空表数据而已。\ntruncate不能删除行数据，虽然只删除数据，但是比delete彻底，它只删除表数据。\n- delete：delete from 表名 （where 列名 = 值）\n与truncate类似，delete也只删除内容、释放空间但不删除定义；但是delete即可以对行数据进行删除，也可以对整表数据进行删除。\n\n---------------------\n\n<!-- more -->\n\n#### 相同点：\n\n - truncate 和不带 where 子句的 delete，以及 drop 都会删除表内的数据\n\n#### 不同点:\n\n1. `truncate 和 delete 只删除数据不删除表的结构(定义)`\ndrop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index);依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n2. `delete 语句是数据库操作语言(dml)，这操作会放到rollback segement 中，事务提交之后才生效;如果有相应的 trigger，执行的时候将被触发。`\n`truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。`\n\n3. delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动\n　　显然 drop 语句将表所占用的空间全部释放。\n　　truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage;truncate 会将高水线复位(回到最开始)。\n\n4. 速度，一般来说: drop> truncate > delete\n\n5. 安全性：小心使用 drop 和 truncate，尤其没有备份的时候.否则哭都来不及\n\n6. 使用上: 想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大.想删除表,当然用 drop;\n`想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。`\n如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。\n\n#### 语法\n```SQL\nDelete from Tablename where 条件\nTruncate table Tablename\nDrop table Tablename\n```\n\n\n#### Mysql的truncate和delete的区别\ntruncate table table_name 和delete from table_name 都是删除表中所有记录。\n\n区别：\n\ntruncate能够快速清空一个表。并且重置auto_increment的值。而delete只能一行一行的删除。\n\n但对于不同的类型存储引擎需要注意的地方是：\n\nA. 对于myisam\n\n>truncate会重置auto_increment的值为1。而delete后表仍然保持auto_increment。\n\nB. 对于innodb\n\n>truncate会重置auto_increment的值为1。delete后表仍然保持auto_increment。但是在做delete整个表之后重启MySQL的话，则`重启后`的auto_increment会被置为1。\n\n也就是说，innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始。实质上`重启`后的auto_increment会从 SELECT 1+MAX(ai_col) FROM t 开始。\n\n-----------\n","slug":"DROP、DELETE和TRUNCATE区别","published":1,"updated":"2018-09-26T08:32:50.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x0n000dexot7ukvf8ln","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Diffs</th>\n<th style=\"text-align:center\">DELETE</th>\n<th style=\"text-align:center\">TRUNCATE</th>\n<th style=\"text-align:center\">Drop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">执行速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">较快</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可执行条件</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语句分类</td>\n<td style=\"text-align:center\">DML</td>\n<td style=\"text-align:center\">DDL</td>\n<td style=\"text-align:center\">DDL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以回滚事务</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除操作记录日志</td>\n<td style=\"text-align:center\">记录</td>\n<td style=\"text-align:center\">不记录</td>\n<td style=\"text-align:center\">不记录</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>drop：drop table 表名<br>删除内容和定义，并释放空间。执行drop语句，将使此表的结构一起删除。</li>\n<li>truncate (清空表中的数据)：truncate table 表名<br>删除内容、释放空间但不删除定义(也就是保留表的数据结构)。与drop不同的是,只是清空表数据而已。<br>truncate不能删除行数据，虽然只删除数据，但是比delete彻底，它只删除表数据。</li>\n<li>delete：delete from 表名 （where 列名 = 值）<br>与truncate类似，delete也只删除内容、释放空间但不删除定义；但是delete即可以对行数据进行删除，也可以对整表数据进行删除。</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"相同点：\"><a href=\"#相同点：\" class=\"headerlink\" title=\"相同点：\"></a>相同点：</h4><ul>\n<li>truncate 和不带 where 子句的 delete，以及 drop 都会删除表内的数据</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点:\"></a>不同点:</h4><ol>\n<li><p><code>truncate 和 delete 只删除数据不删除表的结构(定义)</code><br>drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index);依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li><p><code>delete 语句是数据库操作语言(dml)，这操作会放到rollback segement 中，事务提交之后才生效;如果有相应的 trigger，执行的时候将被触发。</code><br><code>truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。</code></p>\n</li>\n<li><p>delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动<br>　　显然 drop 语句将表所占用的空间全部释放。<br>　　truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage;truncate 会将高水线复位(回到最开始)。</p>\n</li>\n<li><p>速度，一般来说: drop&gt; truncate &gt; delete</p>\n</li>\n<li><p>安全性：小心使用 drop 和 truncate，尤其没有备份的时候.否则哭都来不及</p>\n</li>\n<li><p>使用上: 想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大.想删除表,当然用 drop;<br><code>想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。</code><br>如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</p>\n</li>\n</ol>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Delete</span> <span class=\"keyword\">from</span> Tablename <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> Tablename</span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> Tablename</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mysql的truncate和delete的区别\"><a href=\"#Mysql的truncate和delete的区别\" class=\"headerlink\" title=\"Mysql的truncate和delete的区别\"></a>Mysql的truncate和delete的区别</h4><p>truncate table table_name 和delete from table_name 都是删除表中所有记录。</p>\n<p>区别：</p>\n<p>truncate能够快速清空一个表。并且重置auto_increment的值。而delete只能一行一行的删除。</p>\n<p>但对于不同的类型存储引擎需要注意的地方是：</p>\n<p>A. 对于myisam</p>\n<blockquote>\n<p>truncate会重置auto_increment的值为1。而delete后表仍然保持auto_increment。</p>\n</blockquote>\n<p>B. 对于innodb</p>\n<blockquote>\n<p>truncate会重置auto_increment的值为1。delete后表仍然保持auto_increment。但是在做delete整个表之后重启MySQL的话，则<code>重启后</code>的auto_increment会被置为1。</p>\n</blockquote>\n<p>也就是说，innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始。实质上<code>重启</code>后的auto_increment会从 SELECT 1+MAX(ai_col) FROM t 开始。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Diffs</th>\n<th style=\"text-align:center\">DELETE</th>\n<th style=\"text-align:center\">TRUNCATE</th>\n<th style=\"text-align:center\">Drop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">执行速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">较快</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可执行条件</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语句分类</td>\n<td style=\"text-align:center\">DML</td>\n<td style=\"text-align:center\">DDL</td>\n<td style=\"text-align:center\">DDL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以回滚事务</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除操作记录日志</td>\n<td style=\"text-align:center\">记录</td>\n<td style=\"text-align:center\">不记录</td>\n<td style=\"text-align:center\">不记录</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>drop：drop table 表名<br>删除内容和定义，并释放空间。执行drop语句，将使此表的结构一起删除。</li>\n<li>truncate (清空表中的数据)：truncate table 表名<br>删除内容、释放空间但不删除定义(也就是保留表的数据结构)。与drop不同的是,只是清空表数据而已。<br>truncate不能删除行数据，虽然只删除数据，但是比delete彻底，它只删除表数据。</li>\n<li>delete：delete from 表名 （where 列名 = 值）<br>与truncate类似，delete也只删除内容、释放空间但不删除定义；但是delete即可以对行数据进行删除，也可以对整表数据进行删除。</li>\n</ul>\n<hr>","more":"<h4 id=\"相同点：\"><a href=\"#相同点：\" class=\"headerlink\" title=\"相同点：\"></a>相同点：</h4><ul>\n<li>truncate 和不带 where 子句的 delete，以及 drop 都会删除表内的数据</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点:\"></a>不同点:</h4><ol>\n<li><p><code>truncate 和 delete 只删除数据不删除表的结构(定义)</code><br>drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index);依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li><p><code>delete 语句是数据库操作语言(dml)，这操作会放到rollback segement 中，事务提交之后才生效;如果有相应的 trigger，执行的时候将被触发。</code><br><code>truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。</code></p>\n</li>\n<li><p>delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动<br>　　显然 drop 语句将表所占用的空间全部释放。<br>　　truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage;truncate 会将高水线复位(回到最开始)。</p>\n</li>\n<li><p>速度，一般来说: drop&gt; truncate &gt; delete</p>\n</li>\n<li><p>安全性：小心使用 drop 和 truncate，尤其没有备份的时候.否则哭都来不及</p>\n</li>\n<li><p>使用上: 想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大.想删除表,当然用 drop;<br><code>想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。</code><br>如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</p>\n</li>\n</ol>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Delete</span> <span class=\"keyword\">from</span> Tablename <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> Tablename</span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> Tablename</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mysql的truncate和delete的区别\"><a href=\"#Mysql的truncate和delete的区别\" class=\"headerlink\" title=\"Mysql的truncate和delete的区别\"></a>Mysql的truncate和delete的区别</h4><p>truncate table table_name 和delete from table_name 都是删除表中所有记录。</p>\n<p>区别：</p>\n<p>truncate能够快速清空一个表。并且重置auto_increment的值。而delete只能一行一行的删除。</p>\n<p>但对于不同的类型存储引擎需要注意的地方是：</p>\n<p>A. 对于myisam</p>\n<blockquote>\n<p>truncate会重置auto_increment的值为1。而delete后表仍然保持auto_increment。</p>\n</blockquote>\n<p>B. 对于innodb</p>\n<blockquote>\n<p>truncate会重置auto_increment的值为1。delete后表仍然保持auto_increment。但是在做delete整个表之后重启MySQL的话，则<code>重启后</code>的auto_increment会被置为1。</p>\n</blockquote>\n<p>也就是说，innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始。实质上<code>重启</code>后的auto_increment会从 SELECT 1+MAX(ai_col) FROM t 开始。</p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 16:32:50 GMT+0800 (China Standard Time)","title":"DROP、DELETE和TRUNCATE区别","path":"2018/09/26/DROP、DELETE和TRUNCATE区别/","eyeCatchImage":null,"excerpt":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Diffs</th>\n<th style=\"text-align:center\">DELETE</th>\n<th style=\"text-align:center\">TRUNCATE</th>\n<th style=\"text-align:center\">Drop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">执行速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">较快</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可执行条件</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语句分类</td>\n<td style=\"text-align:center\">DML</td>\n<td style=\"text-align:center\">DDL</td>\n<td style=\"text-align:center\">DDL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以回滚事务</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除操作记录日志</td>\n<td style=\"text-align:center\">记录</td>\n<td style=\"text-align:center\">不记录</td>\n<td style=\"text-align:center\">不记录</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>drop：drop table 表名<br>删除内容和定义，并释放空间。执行drop语句，将使此表的结构一起删除。</li>\n<li>truncate (清空表中的数据)：truncate table 表名<br>删除内容、释放空间但不删除定义(也就是保留表的数据结构)。与drop不同的是,只是清空表数据而已。<br>truncate不能删除行数据，虽然只删除数据，但是比delete彻底，它只删除表数据。</li>\n<li>delete：delete from 表名 （where 列名 = 值）<br>与truncate类似，delete也只删除内容、释放空间但不删除定义；但是delete即可以对行数据进行删除，也可以对整表数据进行删除。</li>\n</ul>\n<hr>","date":"2018-09-26T05:20:40.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Django运行方式以及处理流程简介(转载)","date":"2018-03-07T11:07:58.000Z","_content":"\n## Django的运行方式\n运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到`runserver`方法，使用Django自己的web server(WSGI Server)；另外一种就是使用`fastcgi，uWSGIt`等协议运行Django项目。\n\n<!-- more -->\n### runserver方法\nrunserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：\n```Python\nUsage: manage.py runserver [options] [optional port number, or ipaddr:port]\n# python manager.py runserver    # default port is 8000\n# python manager.py runserver 8080\n# python manager.py runserver 127.0.0.1:9090\n```\n看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。\n\n看了源码之后，可以发现runserver命令主要做了两件事情：\n\n    1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;\n\n    2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求\n\nget_internal_wsgi_application的源码如下：\n```python\ndef get_internal_wsgi_application():\n    \"\"\"\n    Loads and returns the WSGI application as configured by the user in\n    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\n    this will be the ``application`` object in ``projectname/wsgi.py``.\n\n    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful\n    for Django's internal servers (runserver, runfcgi); external WSGI servers\n    should just be configured to point to the correct application object\n    directly.\n\n    If settings.WSGI_APPLICATION is not set (is ``None``), we just return\n    whatever ``django.core.wsgi.get_wsgi_application`` returns.\n\n    \"\"\"\n    from django.conf import settings\n    app_path = getattr(settings, 'WSGI_APPLICATION')\n    if app_path is None:\n        return get_wsgi_application()\n\n    return import_by_path(\n        app_path,\n        error_prefix=\"WSGI application '%s' could not be loaded; \" % app_path\n    )\n\n```\n\n通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。\n\n## uWSGI方法\nuWSGI + Nginx的方法是现在最常见的在生产环境中运行Django的方法，要了解这种方法，首先要了解一下WSGI和uWSGI协议。\n\nWSGI，全称`Web Server Gateway Interface`，或者`Python Web Server Gateway Interface`，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口，基于现存的`CGI标准`而设计的。WSGI其实就是一个网关(Gateway)，其作用就是在协议之间进行转换。(PS: 这里只对WSGI做简单介绍，想要了解更多的内容可自行搜索)\n\n`uWSGI是一个Web服务器`，它实现了WSGI协议、uwsgi、http等协议。`注意!`uwsgi是一种通信协议，而uWSGI是实现uwsgi协议和WSGI协议的Web服务器。uWSGI具有超快的性能、低内存占用和多app管理等优点。以我的博客为例，uWSGI的xml配置如下：\n\n```xml\n<uwsgi>\n    <!-- 端口 -->\n    <socket>:7600</socket>\n    <stats>:40000</stats>\n    <!-- 系统环境变量 -->\n    <env>DJANGO_SETTINGS_MODULE=geek_blog.settings</env>\n    <!-- 指定的python WSGI模块 -->\n    <module>django.core.handlers.wsgi:WSGIHandler()</module>\n    <processes>6</processes>\n    <master />\n    <master-as-root />\n    <!-- 超时设置 -->\n    <harakiri>60</harakiri>\n    <harakiri-verbose/>\n    <daemonize>/var/app/log/blog/uwsgi.log</daemonize>\n    <!-- socket的监听队列大小 -->\n    <listen>32768</listen>\n    <!-- 内部超时时间 -->\n    <socket-timeout>60</socket-timeout>\n</uwsgi>\n\n```\nuWSGI和Nginx一起使用的配置方法就不在这里说明了，网上教程很多，需要的可以自行搜索。\n\n\n## HTTP请求处理流程\nDjango和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下图所示：\n\n**1. 加载project settings**\n\n在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：\n```Python\nfrom django.conf import settings\n```\n上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。\n\n**2. 创建WSGIServer**\n\n不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法，创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：\n```python\ndef run(addr, port, wsgi_handler, ipv6=False, threading=False):\n    server_address = (addr, port)\n    if threading:\n        httpd_cls = type(str('WSGIServer'), (socketserver.ThreadingMixIn, WSGIServer), {})\n    else:\n        httpd_cls = WSGIServer\n    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)\n    # Sets the callable application as the WSGI application that will receive requests\n    httpd.set_app(wsgi_handler)\n    httpd.serve_forever()\n\n```\n\n如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。\n\n其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到[wsgiref](https://pypi.python.org/pypi/wsgiref)参看，这里不再细说.\n\n**3. 处理Request**\n\n第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来\n\n\n**4. 返回Response**\n\n上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。\n\n在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户。\n\n## Django处理Request的详细流程\n\n上述的第三步和第四步逻辑只是大致说了一下处理过程，Django在处理request的时候其实做了很多事情，下面我们详细的过一下。首先给大家分享两个网上看到的Django流程图：\n![django.png](http://upload-images.jianshu.io/upload_images/2952111-5e684abfea788d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![django_flow.png](http://upload-images.jianshu.io/upload_images/2952111-f72ffe64a49bd4d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：\n\n    1. 用户通过浏览器请求一个页面\n\n    2. 请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求\n\n    3. URLConf通过urls.py文件和请求的URL找到相应的View\n\n    4. View Middlewares被访问，它同样可以对request做一些处理或者直接返回response\n\n    5. 调用View中的函数\n\n    6. View中的方法可以选择性的通过Models访问底层的数据\n\n    7. 所有的Model-to-DB的交互都是通过manager完成的\n\n    8. 如果需要，Views可以使用一个特殊的Context\n\n    9. Context被传给Template用来生成页面\n\n    a. Template使用Filters和Tags去渲染输出\n\n    b. 输出被返回到View\n\n    c. HTTPResponse被发送到Response Middlewares\n\n    d. 任何Response Middlewares都可以丰富response或者返回一个完全不同的response\n\n    e. Response返回到浏览器，呈现给用户\n\n上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。\n\n**1. Middleware(中间件)**\n\nMiddleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个或多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。\n\nMiddleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：\n```\n    _request_middleware：process_request方法的列表\n\n    _view_middleware：process_view方法的列表\n\n    _response_middleware：process_response方法的列表\n\n    _exception_middleware：process_exception方法的列表\n```\nDjango的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如GeekBlog项目的配置：\n\n```python\nMIDDLEWARE_CLASSES = (\n    'django.middleware.cache.UpdateCacheMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'geek_blog.middlewares.MobileDetectionMiddleware',    # 自定义的Middleware\n)\n```\nDjango项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。\n\n以下两张图可以更好地帮助你理解：\n\n![Django Middleware流程1](http://xianglong.qiniudn.com/django_middleware_flow.png)\n\n![Django Middleware流程图2](http://xianglong.qiniudn.com/django_middleware_flow2.png)\n\n**2. URLConf(URL映射)**\n\n如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录\"/\"，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。\n\n其他有关URLConf的内容，这里不再具体介绍，大家可以看[DjangoBook](http://djangobook.py3k.cn/2.0/chapter03/)了解。\n\n\n**3. Template(模板)**\n\n大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。\n\n## 参考文章：\n\n1. [uWSGI Web服务器介绍](http://www.nowamagic.net/academy/detail/1330328)  \n2. [wsgiref源码分析](http://blog.csdn.net/on_1y/article/details/18818081)  \n3. [用Python写一个简单的Web框架](http://www.tuicool.com/articles/aYBRBz)  \n4. [Django 结构及处理流程分析](http://my.oschina.net/tenking/blog/29439)\n5. [Django运行方式及处理流程总结](http://blog.csdn.net/yongche_shi/article/details/49513431) \n\nPS: 以上代码和内容都是基于Django 1.6.5版本，其他版本可能与其不同，请参考阅读。\n","source":"_posts/Django运行方式以及处理流程简介-转载.md","raw":"---\ntitle: Django运行方式以及处理流程简介(转载)\ndate: 2018-03-07 19:07:58\ntags:\n  - Django\n  - Python3\ncategories:\n  - Django\n---\n\n## Django的运行方式\n运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到`runserver`方法，使用Django自己的web server(WSGI Server)；另外一种就是使用`fastcgi，uWSGIt`等协议运行Django项目。\n\n<!-- more -->\n### runserver方法\nrunserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：\n```Python\nUsage: manage.py runserver [options] [optional port number, or ipaddr:port]\n# python manager.py runserver    # default port is 8000\n# python manager.py runserver 8080\n# python manager.py runserver 127.0.0.1:9090\n```\n看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。\n\n看了源码之后，可以发现runserver命令主要做了两件事情：\n\n    1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;\n\n    2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求\n\nget_internal_wsgi_application的源码如下：\n```python\ndef get_internal_wsgi_application():\n    \"\"\"\n    Loads and returns the WSGI application as configured by the user in\n    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\n    this will be the ``application`` object in ``projectname/wsgi.py``.\n\n    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful\n    for Django's internal servers (runserver, runfcgi); external WSGI servers\n    should just be configured to point to the correct application object\n    directly.\n\n    If settings.WSGI_APPLICATION is not set (is ``None``), we just return\n    whatever ``django.core.wsgi.get_wsgi_application`` returns.\n\n    \"\"\"\n    from django.conf import settings\n    app_path = getattr(settings, 'WSGI_APPLICATION')\n    if app_path is None:\n        return get_wsgi_application()\n\n    return import_by_path(\n        app_path,\n        error_prefix=\"WSGI application '%s' could not be loaded; \" % app_path\n    )\n\n```\n\n通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。\n\n## uWSGI方法\nuWSGI + Nginx的方法是现在最常见的在生产环境中运行Django的方法，要了解这种方法，首先要了解一下WSGI和uWSGI协议。\n\nWSGI，全称`Web Server Gateway Interface`，或者`Python Web Server Gateway Interface`，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口，基于现存的`CGI标准`而设计的。WSGI其实就是一个网关(Gateway)，其作用就是在协议之间进行转换。(PS: 这里只对WSGI做简单介绍，想要了解更多的内容可自行搜索)\n\n`uWSGI是一个Web服务器`，它实现了WSGI协议、uwsgi、http等协议。`注意!`uwsgi是一种通信协议，而uWSGI是实现uwsgi协议和WSGI协议的Web服务器。uWSGI具有超快的性能、低内存占用和多app管理等优点。以我的博客为例，uWSGI的xml配置如下：\n\n```xml\n<uwsgi>\n    <!-- 端口 -->\n    <socket>:7600</socket>\n    <stats>:40000</stats>\n    <!-- 系统环境变量 -->\n    <env>DJANGO_SETTINGS_MODULE=geek_blog.settings</env>\n    <!-- 指定的python WSGI模块 -->\n    <module>django.core.handlers.wsgi:WSGIHandler()</module>\n    <processes>6</processes>\n    <master />\n    <master-as-root />\n    <!-- 超时设置 -->\n    <harakiri>60</harakiri>\n    <harakiri-verbose/>\n    <daemonize>/var/app/log/blog/uwsgi.log</daemonize>\n    <!-- socket的监听队列大小 -->\n    <listen>32768</listen>\n    <!-- 内部超时时间 -->\n    <socket-timeout>60</socket-timeout>\n</uwsgi>\n\n```\nuWSGI和Nginx一起使用的配置方法就不在这里说明了，网上教程很多，需要的可以自行搜索。\n\n\n## HTTP请求处理流程\nDjango和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下图所示：\n\n**1. 加载project settings**\n\n在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：\n```Python\nfrom django.conf import settings\n```\n上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。\n\n**2. 创建WSGIServer**\n\n不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法，创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：\n```python\ndef run(addr, port, wsgi_handler, ipv6=False, threading=False):\n    server_address = (addr, port)\n    if threading:\n        httpd_cls = type(str('WSGIServer'), (socketserver.ThreadingMixIn, WSGIServer), {})\n    else:\n        httpd_cls = WSGIServer\n    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)\n    # Sets the callable application as the WSGI application that will receive requests\n    httpd.set_app(wsgi_handler)\n    httpd.serve_forever()\n\n```\n\n如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。\n\n其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到[wsgiref](https://pypi.python.org/pypi/wsgiref)参看，这里不再细说.\n\n**3. 处理Request**\n\n第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来\n\n\n**4. 返回Response**\n\n上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。\n\n在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户。\n\n## Django处理Request的详细流程\n\n上述的第三步和第四步逻辑只是大致说了一下处理过程，Django在处理request的时候其实做了很多事情，下面我们详细的过一下。首先给大家分享两个网上看到的Django流程图：\n![django.png](http://upload-images.jianshu.io/upload_images/2952111-5e684abfea788d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![django_flow.png](http://upload-images.jianshu.io/upload_images/2952111-f72ffe64a49bd4d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：\n\n    1. 用户通过浏览器请求一个页面\n\n    2. 请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求\n\n    3. URLConf通过urls.py文件和请求的URL找到相应的View\n\n    4. View Middlewares被访问，它同样可以对request做一些处理或者直接返回response\n\n    5. 调用View中的函数\n\n    6. View中的方法可以选择性的通过Models访问底层的数据\n\n    7. 所有的Model-to-DB的交互都是通过manager完成的\n\n    8. 如果需要，Views可以使用一个特殊的Context\n\n    9. Context被传给Template用来生成页面\n\n    a. Template使用Filters和Tags去渲染输出\n\n    b. 输出被返回到View\n\n    c. HTTPResponse被发送到Response Middlewares\n\n    d. 任何Response Middlewares都可以丰富response或者返回一个完全不同的response\n\n    e. Response返回到浏览器，呈现给用户\n\n上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。\n\n**1. Middleware(中间件)**\n\nMiddleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个或多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。\n\nMiddleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：\n```\n    _request_middleware：process_request方法的列表\n\n    _view_middleware：process_view方法的列表\n\n    _response_middleware：process_response方法的列表\n\n    _exception_middleware：process_exception方法的列表\n```\nDjango的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如GeekBlog项目的配置：\n\n```python\nMIDDLEWARE_CLASSES = (\n    'django.middleware.cache.UpdateCacheMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'geek_blog.middlewares.MobileDetectionMiddleware',    # 自定义的Middleware\n)\n```\nDjango项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。\n\n以下两张图可以更好地帮助你理解：\n\n![Django Middleware流程1](http://xianglong.qiniudn.com/django_middleware_flow.png)\n\n![Django Middleware流程图2](http://xianglong.qiniudn.com/django_middleware_flow2.png)\n\n**2. URLConf(URL映射)**\n\n如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录\"/\"，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。\n\n其他有关URLConf的内容，这里不再具体介绍，大家可以看[DjangoBook](http://djangobook.py3k.cn/2.0/chapter03/)了解。\n\n\n**3. Template(模板)**\n\n大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。\n\n## 参考文章：\n\n1. [uWSGI Web服务器介绍](http://www.nowamagic.net/academy/detail/1330328)  \n2. [wsgiref源码分析](http://blog.csdn.net/on_1y/article/details/18818081)  \n3. [用Python写一个简单的Web框架](http://www.tuicool.com/articles/aYBRBz)  \n4. [Django 结构及处理流程分析](http://my.oschina.net/tenking/blog/29439)\n5. [Django运行方式及处理流程总结](http://blog.csdn.net/yongche_shi/article/details/49513431) \n\nPS: 以上代码和内容都是基于Django 1.6.5版本，其他版本可能与其不同，请参考阅读。\n","slug":"Django运行方式以及处理流程简介-转载","published":1,"updated":"2018-03-07T12:09:44.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x0y000eexottkxzi445","content":"<h2 id=\"Django的运行方式\"><a href=\"#Django的运行方式\" class=\"headerlink\" title=\"Django的运行方式\"></a>Django的运行方式</h2><p>运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到<code>runserver</code>方法，使用Django自己的web server(WSGI Server)；另外一种就是使用<code>fastcgi，uWSGIt</code>等协议运行Django项目。</p>\n<a id=\"more\"></a>\n<h3 id=\"runserver方法\"><a href=\"#runserver方法\" class=\"headerlink\" title=\"runserver方法\"></a>runserver方法</h3><p>runserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: manage.py runserver [options] [optional port number, <span class=\"keyword\">or</span> ipaddr:port]</span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver    # default port is 8000</span></span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver 8080</span></span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver 127.0.0.1:9090</span></span><br></pre></td></tr></table></figure></p>\n<p>看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。</p>\n<p>看了源码之后，可以发现runserver命令主要做了两件事情：</p>\n<pre><code>1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;\n\n2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求\n</code></pre><p>get_internal_wsgi_application的源码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_internal_wsgi_application</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Loads and returns the WSGI application as configured by the user in</span></span><br><span class=\"line\"><span class=\"string\">    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,</span></span><br><span class=\"line\"><span class=\"string\">    this will be the ``application`` object in ``projectname/wsgi.py``.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful</span></span><br><span class=\"line\"><span class=\"string\">    for Django's internal servers (runserver, runfcgi); external WSGI servers</span></span><br><span class=\"line\"><span class=\"string\">    should just be configured to point to the correct application object</span></span><br><span class=\"line\"><span class=\"string\">    directly.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    If settings.WSGI_APPLICATION is not set (is ``None``), we just return</span></span><br><span class=\"line\"><span class=\"string\">    whatever ``django.core.wsgi.get_wsgi_application`` returns.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\">    app_path = getattr(settings, <span class=\"string\">'WSGI_APPLICATION'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> app_path <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get_wsgi_application()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> import_by_path(</span><br><span class=\"line\">        app_path,</span><br><span class=\"line\">        error_prefix=<span class=\"string\">\"WSGI application '%s' could not be loaded; \"</span> % app_path</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。</p>\n<h2 id=\"uWSGI方法\"><a href=\"#uWSGI方法\" class=\"headerlink\" title=\"uWSGI方法\"></a>uWSGI方法</h2><p>uWSGI + Nginx的方法是现在最常见的在生产环境中运行Django的方法，要了解这种方法，首先要了解一下WSGI和uWSGI协议。</p>\n<p>WSGI，全称<code>Web Server Gateway Interface</code>，或者<code>Python Web Server Gateway Interface</code>，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口，基于现存的<code>CGI标准</code>而设计的。WSGI其实就是一个网关(Gateway)，其作用就是在协议之间进行转换。(PS: 这里只对WSGI做简单介绍，想要了解更多的内容可自行搜索)</p>\n<p><code>uWSGI是一个Web服务器</code>，它实现了WSGI协议、uwsgi、http等协议。<code>注意!</code>uwsgi是一种通信协议，而uWSGI是实现uwsgi协议和WSGI协议的Web服务器。uWSGI具有超快的性能、低内存占用和多app管理等优点。以我的博客为例，uWSGI的xml配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uwsgi</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">socket</span>&gt;</span>:7600<span class=\"tag\">&lt;/<span class=\"name\">socket</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stats</span>&gt;</span>:40000<span class=\"tag\">&lt;/<span class=\"name\">stats</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 系统环境变量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">env</span>&gt;</span>DJANGO_SETTINGS_MODULE=geek_blog.settings<span class=\"tag\">&lt;/<span class=\"name\">env</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定的python WSGI模块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>django.core.handlers.wsgi:WSGIHandler()<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processes</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">processes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">master</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">master-as-root</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 超时设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">harakiri</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">harakiri</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">harakiri-verbose</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">daemonize</span>&gt;</span>/var/app/log/blog/uwsgi.log<span class=\"tag\">&lt;/<span class=\"name\">daemonize</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- socket的监听队列大小 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listen</span>&gt;</span>32768<span class=\"tag\">&lt;/<span class=\"name\">listen</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 内部超时时间 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">socket-timeout</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">socket-timeout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uwsgi</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>uWSGI和Nginx一起使用的配置方法就不在这里说明了，网上教程很多，需要的可以自行搜索。</p>\n<h2 id=\"HTTP请求处理流程\"><a href=\"#HTTP请求处理流程\" class=\"headerlink\" title=\"HTTP请求处理流程\"></a>HTTP请求处理流程</h2><p>Django和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下图所示：</p>\n<p><strong>1. 加载project settings</strong></p>\n<p>在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure></p>\n<p>上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。</p>\n<p><strong>2. 创建WSGIServer</strong></p>\n<p>不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法，创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(addr, port, wsgi_handler, ipv6=False, threading=False)</span>:</span></span><br><span class=\"line\">    server_address = (addr, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> threading:</span><br><span class=\"line\">        httpd_cls = type(str(<span class=\"string\">'WSGIServer'</span>), (socketserver.ThreadingMixIn, WSGIServer), &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        httpd_cls = WSGIServer</span><br><span class=\"line\">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class=\"line\">    <span class=\"comment\"># Sets the callable application as the WSGI application that will receive requests</span></span><br><span class=\"line\">    httpd.set_app(wsgi_handler)</span><br><span class=\"line\">    httpd.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p>如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。</p>\n<p>其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到<a href=\"https://pypi.python.org/pypi/wsgiref\" target=\"_blank\" rel=\"noopener\">wsgiref</a>参看，这里不再细说.</p>\n<p><strong>3. 处理Request</strong></p>\n<p>第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来</p>\n<p><strong>4. 返回Response</strong></p>\n<p>上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。</p>\n<p>在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户。</p>\n<h2 id=\"Django处理Request的详细流程\"><a href=\"#Django处理Request的详细流程\" class=\"headerlink\" title=\"Django处理Request的详细流程\"></a>Django处理Request的详细流程</h2><p>上述的第三步和第四步逻辑只是大致说了一下处理过程，Django在处理request的时候其实做了很多事情，下面我们详细的过一下。首先给大家分享两个网上看到的Django流程图：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e684abfea788d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"django.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f72ffe64a49bd4d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"django_flow.png\"></p>\n<p>上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：</p>\n<pre><code>1. 用户通过浏览器请求一个页面\n\n2. 请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求\n\n3. URLConf通过urls.py文件和请求的URL找到相应的View\n\n4. View Middlewares被访问，它同样可以对request做一些处理或者直接返回response\n\n5. 调用View中的函数\n\n6. View中的方法可以选择性的通过Models访问底层的数据\n\n7. 所有的Model-to-DB的交互都是通过manager完成的\n\n8. 如果需要，Views可以使用一个特殊的Context\n\n9. Context被传给Template用来生成页面\n\na. Template使用Filters和Tags去渲染输出\n\nb. 输出被返回到View\n\nc. HTTPResponse被发送到Response Middlewares\n\nd. 任何Response Middlewares都可以丰富response或者返回一个完全不同的response\n\ne. Response返回到浏览器，呈现给用户\n</code></pre><p>上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。</p>\n<p><strong>1. Middleware(中间件)</strong></p>\n<p>Middleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个或多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。</p>\n<p>Middleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_request_middleware：process_request方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_view_middleware：process_view方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_response_middleware：process_response方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_exception_middleware：process_exception方法的列表</span><br></pre></td></tr></table></figure></p>\n<p>Django的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如GeekBlog项目的配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'geek_blog.middlewares.MobileDetectionMiddleware'</span>,    <span class=\"comment\"># 自定义的Middleware</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Django项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。</p>\n<p>以下两张图可以更好地帮助你理解：</p>\n<p><img src=\"http://xianglong.qiniudn.com/django_middleware_flow.png\" alt=\"Django Middleware流程1\"></p>\n<p><img src=\"http://xianglong.qiniudn.com/django_middleware_flow2.png\" alt=\"Django Middleware流程图2\"></p>\n<p><strong>2. URLConf(URL映射)</strong></p>\n<p>如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录”/“，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。</p>\n<p>其他有关URLConf的内容，这里不再具体介绍，大家可以看<a href=\"http://djangobook.py3k.cn/2.0/chapter03/\" target=\"_blank\" rel=\"noopener\">DjangoBook</a>了解。</p>\n<p><strong>3. Template(模板)</strong></p>\n<p>大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ol>\n<li><a href=\"http://www.nowamagic.net/academy/detail/1330328\" target=\"_blank\" rel=\"noopener\">uWSGI Web服务器介绍</a>  </li>\n<li><a href=\"http://blog.csdn.net/on_1y/article/details/18818081\" target=\"_blank\" rel=\"noopener\">wsgiref源码分析</a>  </li>\n<li><a href=\"http://www.tuicool.com/articles/aYBRBz\" target=\"_blank\" rel=\"noopener\">用Python写一个简单的Web框架</a>  </li>\n<li><a href=\"http://my.oschina.net/tenking/blog/29439\" target=\"_blank\" rel=\"noopener\">Django 结构及处理流程分析</a></li>\n<li><a href=\"http://blog.csdn.net/yongche_shi/article/details/49513431\" target=\"_blank\" rel=\"noopener\">Django运行方式及处理流程总结</a> </li>\n</ol>\n<p>PS: 以上代码和内容都是基于Django 1.6.5版本，其他版本可能与其不同，请参考阅读。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Django的运行方式\"><a href=\"#Django的运行方式\" class=\"headerlink\" title=\"Django的运行方式\"></a>Django的运行方式</h2><p>运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到<code>runserver</code>方法，使用Django自己的web server(WSGI Server)；另外一种就是使用<code>fastcgi，uWSGIt</code>等协议运行Django项目。</p>","more":"<h3 id=\"runserver方法\"><a href=\"#runserver方法\" class=\"headerlink\" title=\"runserver方法\"></a>runserver方法</h3><p>runserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: manage.py runserver [options] [optional port number, <span class=\"keyword\">or</span> ipaddr:port]</span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver    # default port is 8000</span></span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver 8080</span></span><br><span class=\"line\"><span class=\"comment\"># python manager.py runserver 127.0.0.1:9090</span></span><br></pre></td></tr></table></figure></p>\n<p>看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。</p>\n<p>看了源码之后，可以发现runserver命令主要做了两件事情：</p>\n<pre><code>1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;\n\n2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求\n</code></pre><p>get_internal_wsgi_application的源码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_internal_wsgi_application</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Loads and returns the WSGI application as configured by the user in</span></span><br><span class=\"line\"><span class=\"string\">    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,</span></span><br><span class=\"line\"><span class=\"string\">    this will be the ``application`` object in ``projectname/wsgi.py``.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful</span></span><br><span class=\"line\"><span class=\"string\">    for Django's internal servers (runserver, runfcgi); external WSGI servers</span></span><br><span class=\"line\"><span class=\"string\">    should just be configured to point to the correct application object</span></span><br><span class=\"line\"><span class=\"string\">    directly.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    If settings.WSGI_APPLICATION is not set (is ``None``), we just return</span></span><br><span class=\"line\"><span class=\"string\">    whatever ``django.core.wsgi.get_wsgi_application`` returns.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\">    app_path = getattr(settings, <span class=\"string\">'WSGI_APPLICATION'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> app_path <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get_wsgi_application()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> import_by_path(</span><br><span class=\"line\">        app_path,</span><br><span class=\"line\">        error_prefix=<span class=\"string\">\"WSGI application '%s' could not be loaded; \"</span> % app_path</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。</p>\n<h2 id=\"uWSGI方法\"><a href=\"#uWSGI方法\" class=\"headerlink\" title=\"uWSGI方法\"></a>uWSGI方法</h2><p>uWSGI + Nginx的方法是现在最常见的在生产环境中运行Django的方法，要了解这种方法，首先要了解一下WSGI和uWSGI协议。</p>\n<p>WSGI，全称<code>Web Server Gateway Interface</code>，或者<code>Python Web Server Gateway Interface</code>，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口，基于现存的<code>CGI标准</code>而设计的。WSGI其实就是一个网关(Gateway)，其作用就是在协议之间进行转换。(PS: 这里只对WSGI做简单介绍，想要了解更多的内容可自行搜索)</p>\n<p><code>uWSGI是一个Web服务器</code>，它实现了WSGI协议、uwsgi、http等协议。<code>注意!</code>uwsgi是一种通信协议，而uWSGI是实现uwsgi协议和WSGI协议的Web服务器。uWSGI具有超快的性能、低内存占用和多app管理等优点。以我的博客为例，uWSGI的xml配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uwsgi</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 端口 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">socket</span>&gt;</span>:7600<span class=\"tag\">&lt;/<span class=\"name\">socket</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stats</span>&gt;</span>:40000<span class=\"tag\">&lt;/<span class=\"name\">stats</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 系统环境变量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">env</span>&gt;</span>DJANGO_SETTINGS_MODULE=geek_blog.settings<span class=\"tag\">&lt;/<span class=\"name\">env</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定的python WSGI模块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>django.core.handlers.wsgi:WSGIHandler()<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processes</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">processes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">master</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">master-as-root</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 超时设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">harakiri</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">harakiri</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">harakiri-verbose</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">daemonize</span>&gt;</span>/var/app/log/blog/uwsgi.log<span class=\"tag\">&lt;/<span class=\"name\">daemonize</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- socket的监听队列大小 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listen</span>&gt;</span>32768<span class=\"tag\">&lt;/<span class=\"name\">listen</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 内部超时时间 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">socket-timeout</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">socket-timeout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uwsgi</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>uWSGI和Nginx一起使用的配置方法就不在这里说明了，网上教程很多，需要的可以自行搜索。</p>\n<h2 id=\"HTTP请求处理流程\"><a href=\"#HTTP请求处理流程\" class=\"headerlink\" title=\"HTTP请求处理流程\"></a>HTTP请求处理流程</h2><p>Django和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下图所示：</p>\n<p><strong>1. 加载project settings</strong></p>\n<p>在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure></p>\n<p>上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。</p>\n<p><strong>2. 创建WSGIServer</strong></p>\n<p>不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法，创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(addr, port, wsgi_handler, ipv6=False, threading=False)</span>:</span></span><br><span class=\"line\">    server_address = (addr, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> threading:</span><br><span class=\"line\">        httpd_cls = type(str(<span class=\"string\">'WSGIServer'</span>), (socketserver.ThreadingMixIn, WSGIServer), &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        httpd_cls = WSGIServer</span><br><span class=\"line\">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class=\"line\">    <span class=\"comment\"># Sets the callable application as the WSGI application that will receive requests</span></span><br><span class=\"line\">    httpd.set_app(wsgi_handler)</span><br><span class=\"line\">    httpd.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p>如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。</p>\n<p>其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到<a href=\"https://pypi.python.org/pypi/wsgiref\" target=\"_blank\" rel=\"noopener\">wsgiref</a>参看，这里不再细说.</p>\n<p><strong>3. 处理Request</strong></p>\n<p>第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来</p>\n<p><strong>4. 返回Response</strong></p>\n<p>上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。</p>\n<p>在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户。</p>\n<h2 id=\"Django处理Request的详细流程\"><a href=\"#Django处理Request的详细流程\" class=\"headerlink\" title=\"Django处理Request的详细流程\"></a>Django处理Request的详细流程</h2><p>上述的第三步和第四步逻辑只是大致说了一下处理过程，Django在处理request的时候其实做了很多事情，下面我们详细的过一下。首先给大家分享两个网上看到的Django流程图：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e684abfea788d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"django.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f72ffe64a49bd4d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"django_flow.png\"></p>\n<p>上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：</p>\n<pre><code>1. 用户通过浏览器请求一个页面\n\n2. 请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求\n\n3. URLConf通过urls.py文件和请求的URL找到相应的View\n\n4. View Middlewares被访问，它同样可以对request做一些处理或者直接返回response\n\n5. 调用View中的函数\n\n6. View中的方法可以选择性的通过Models访问底层的数据\n\n7. 所有的Model-to-DB的交互都是通过manager完成的\n\n8. 如果需要，Views可以使用一个特殊的Context\n\n9. Context被传给Template用来生成页面\n\na. Template使用Filters和Tags去渲染输出\n\nb. 输出被返回到View\n\nc. HTTPResponse被发送到Response Middlewares\n\nd. 任何Response Middlewares都可以丰富response或者返回一个完全不同的response\n\ne. Response返回到浏览器，呈现给用户\n</code></pre><p>上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。</p>\n<p><strong>1. Middleware(中间件)</strong></p>\n<p>Middleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个或多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。</p>\n<p>Middleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_request_middleware：process_request方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_view_middleware：process_view方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_response_middleware：process_response方法的列表</span><br><span class=\"line\"></span><br><span class=\"line\">_exception_middleware：process_exception方法的列表</span><br></pre></td></tr></table></figure></p>\n<p>Django的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如GeekBlog项目的配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'geek_blog.middlewares.MobileDetectionMiddleware'</span>,    <span class=\"comment\"># 自定义的Middleware</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Django项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。</p>\n<p>以下两张图可以更好地帮助你理解：</p>\n<p><img src=\"http://xianglong.qiniudn.com/django_middleware_flow.png\" alt=\"Django Middleware流程1\"></p>\n<p><img src=\"http://xianglong.qiniudn.com/django_middleware_flow2.png\" alt=\"Django Middleware流程图2\"></p>\n<p><strong>2. URLConf(URL映射)</strong></p>\n<p>如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录”/“，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。</p>\n<p>其他有关URLConf的内容，这里不再具体介绍，大家可以看<a href=\"http://djangobook.py3k.cn/2.0/chapter03/\" target=\"_blank\" rel=\"noopener\">DjangoBook</a>了解。</p>\n<p><strong>3. Template(模板)</strong></p>\n<p>大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。</p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ol>\n<li><a href=\"http://www.nowamagic.net/academy/detail/1330328\" target=\"_blank\" rel=\"noopener\">uWSGI Web服务器介绍</a>  </li>\n<li><a href=\"http://blog.csdn.net/on_1y/article/details/18818081\" target=\"_blank\" rel=\"noopener\">wsgiref源码分析</a>  </li>\n<li><a href=\"http://www.tuicool.com/articles/aYBRBz\" target=\"_blank\" rel=\"noopener\">用Python写一个简单的Web框架</a>  </li>\n<li><a href=\"http://my.oschina.net/tenking/blog/29439\" target=\"_blank\" rel=\"noopener\">Django 结构及处理流程分析</a></li>\n<li><a href=\"http://blog.csdn.net/yongche_shi/article/details/49513431\" target=\"_blank\" rel=\"noopener\">Django运行方式及处理流程总结</a> </li>\n</ol>\n<p>PS: 以上代码和内容都是基于Django 1.6.5版本，其他版本可能与其不同，请参考阅读。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 20:09:44 GMT+0800 (China Standard Time)","title":"Django运行方式以及处理流程简介(转载)","path":"2018/03/07/Django运行方式以及处理流程简介-转载/","eyeCatchImage":null,"excerpt":"<h2 id=\"Django的运行方式\"><a href=\"#Django的运行方式\" class=\"headerlink\" title=\"Django的运行方式\"></a>Django的运行方式</h2><p>运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到<code>runserver</code>方法，使用Django自己的web server(WSGI Server)；另外一种就是使用<code>fastcgi，uWSGIt</code>等协议运行Django项目。</p>","date":"2018-03-07T11:07:58.000Z","pv":0,"totalPV":0,"categories":"Django","tags":["Python3","Django"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Github多分支管理Hexo-Blog项目","date":"2018-02-26T16:23:41.000Z","_content":"\nHexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。\n\n<!--more-->\n\n备份之前，需要了解博客根目录下面的文件以及文件夹作用：\n```python\n.deploy_git/        网站静态文件(git)\nnode_modules/       插件\npublic/             网站静态文件\nscaffolds/          文章模板\nsource/             博文等\nthemes/             主题\n_config.yml         网站配置文件\npackage.json        Hexo信息\ndb.json             数据文件\n```\n## 备份的思路\n`master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。`实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个**.gitignore**文件来建立“黑名单”，禁止备份。\n\n## 编辑**.gitignore**过滤文件\n文件内容如下：\n```python\n.DS_Store\npublic/\n.deploy*/\n```\n## 关于备份\n终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：\n```Bash\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\t\t\n# username为博客项目的名称，也就是git的用户名\n$ git add .\n$ git commit -m \"ready for backup of the project\"\n$ git push origin master:Hexo-Blog\n```\n\n执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。\n以后，开始写博文时，即终端运行\n```Bash\n$ hexo new [layout] <title>\n```\n完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备\n```Bash\n    $ git add .\n    $ git commit -m \"add one article\"\n    $ git push origin master:Hexo-Blog\n```\n\n## 部署\n运行一下命令进行仓库master分支静态文件部署\n```Bash\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n以上完成项目源文件以及静态文件的Git管理\n\n## 参考文献及进阶\n[Hexo+github搭建个人博客并实现多终端管理](https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[如何在github上面备份Hexo](https://blog.zaihua.me/post/blog_github_backup.html)\n[Hexo的版本控制与持续集成](https://formulahendry.github.io/2016/12/04/hexo-ci/)\n[使用hexo，如果换了电脑怎么更新博客](https://www.zhihu.com/question/21193762)\n","source":"_posts/Github多分支管理Hexo-Blog项目.md","raw":"---\ntitle: Github多分支管理Hexo-Blog项目\ndate: 2018-02-27 00:23:41\ntags:\n  - Hexo\n  - Git\ncategories:\n  - Hexo\n---\n\nHexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。\n\n<!--more-->\n\n备份之前，需要了解博客根目录下面的文件以及文件夹作用：\n```python\n.deploy_git/        网站静态文件(git)\nnode_modules/       插件\npublic/             网站静态文件\nscaffolds/          文章模板\nsource/             博文等\nthemes/             主题\n_config.yml         网站配置文件\npackage.json        Hexo信息\ndb.json             数据文件\n```\n## 备份的思路\n`master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。`实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个**.gitignore**文件来建立“黑名单”，禁止备份。\n\n## 编辑**.gitignore**过滤文件\n文件内容如下：\n```python\n.DS_Store\npublic/\n.deploy*/\n```\n## 关于备份\n终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：\n```Bash\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\t\t\n# username为博客项目的名称，也就是git的用户名\n$ git add .\n$ git commit -m \"ready for backup of the project\"\n$ git push origin master:Hexo-Blog\n```\n\n执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。\n以后，开始写博文时，即终端运行\n```Bash\n$ hexo new [layout] <title>\n```\n完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备\n```Bash\n    $ git add .\n    $ git commit -m \"add one article\"\n    $ git push origin master:Hexo-Blog\n```\n\n## 部署\n运行一下命令进行仓库master分支静态文件部署\n```Bash\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n以上完成项目源文件以及静态文件的Git管理\n\n## 参考文献及进阶\n[Hexo+github搭建个人博客并实现多终端管理](https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[如何在github上面备份Hexo](https://blog.zaihua.me/post/blog_github_backup.html)\n[Hexo的版本控制与持续集成](https://formulahendry.github.io/2016/12/04/hexo-ci/)\n[使用hexo，如果换了电脑怎么更新博客](https://www.zhihu.com/question/21193762)\n","slug":"Github多分支管理Hexo-Blog项目","published":1,"updated":"2018-02-27T06:40:56.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x11000iexotmpzbjc4f","content":"<p>Hexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。</p>\n<a id=\"more\"></a>\n<p>备份之前，需要了解博客根目录下面的文件以及文件夹作用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.deploy_git/        网站静态文件(git)</span><br><span class=\"line\">node_modules/       插件</span><br><span class=\"line\">public/             网站静态文件</span><br><span class=\"line\">scaffolds/          文章模板</span><br><span class=\"line\">source/             博文等</span><br><span class=\"line\">themes/             主题</span><br><span class=\"line\">_config.yml         网站配置文件</span><br><span class=\"line\">package.json        Hexo信息</span><br><span class=\"line\">db.json             数据文件</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份的思路\"><a href=\"#备份的思路\" class=\"headerlink\" title=\"备份的思路\"></a>备份的思路</h2><p><code>master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。</code>实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个<strong>.gitignore</strong>文件来建立“黑名单”，禁止备份。</p>\n<h2 id=\"编辑-gitignore过滤文件\"><a href=\"#编辑-gitignore过滤文件\" class=\"headerlink\" title=\"编辑.gitignore过滤文件\"></a>编辑<strong>.gitignore</strong>过滤文件</h2><p>文件内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于备份\"><a href=\"#关于备份\" class=\"headerlink\" title=\"关于备份\"></a>关于备份</h2><p>终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username/username.github.io.git\t\t</span><br><span class=\"line\"><span class=\"comment\"># username为博客项目的名称，也就是git的用户名</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"ready for backup of the project\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<p>执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。<br>以后，开始写博文时，即终端运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add one article\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>运行一下命令进行仓库master分支静态文件部署<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>以上完成项目源文件以及静态文件的Git管理</p>\n<h2 id=\"参考文献及进阶\"><a href=\"#参考文献及进阶\" class=\"headerlink\" title=\"参考文献及进阶\"></a>参考文献及进阶</h2><p><a href=\"https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">Hexo+github搭建个人博客并实现多终端管理</a><br><a href=\"https://blog.zaihua.me/post/blog_github_backup.html\" target=\"_blank\" rel=\"noopener\">如何在github上面备份Hexo</a><br><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/\" target=\"_blank\" rel=\"noopener\">Hexo的版本控制与持续集成</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客</a></p>\n","site":{"data":{}},"excerpt":"<p>Hexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。</p>","more":"<p>备份之前，需要了解博客根目录下面的文件以及文件夹作用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.deploy_git/        网站静态文件(git)</span><br><span class=\"line\">node_modules/       插件</span><br><span class=\"line\">public/             网站静态文件</span><br><span class=\"line\">scaffolds/          文章模板</span><br><span class=\"line\">source/             博文等</span><br><span class=\"line\">themes/             主题</span><br><span class=\"line\">_config.yml         网站配置文件</span><br><span class=\"line\">package.json        Hexo信息</span><br><span class=\"line\">db.json             数据文件</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份的思路\"><a href=\"#备份的思路\" class=\"headerlink\" title=\"备份的思路\"></a>备份的思路</h2><p><code>master分支存放部署生成的静态文件，Hexo-Bog分支存放我们要备份项目源文件。</code>实际备份中，.deploy_git、public文件夹和我们的master分支内容重复，所以略过。因此，我们在根目录下面建一个<strong>.gitignore</strong>文件来建立“黑名单”，禁止备份。</p>\n<h2 id=\"编辑-gitignore过滤文件\"><a href=\"#编辑-gitignore过滤文件\" class=\"headerlink\" title=\"编辑.gitignore过滤文件\"></a>编辑<strong>.gitignore</strong>过滤文件</h2><p>文件内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于备份\"><a href=\"#关于备份\" class=\"headerlink\" title=\"关于备份\"></a>关于备份</h2><p>终端中在项目的根目录下执行，对于作者自己的项目，命令执行的路径为ByiProX/下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username/username.github.io.git\t\t</span><br><span class=\"line\"><span class=\"comment\"># username为博客项目的名称，也就是git的用户名</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"ready for backup of the project\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<p>执行完毕后会发现github博客仓库已经有了一个新分支Hexo-Blog，于是备份工作完成。<br>以后，开始写博文时，即终端运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<p>完成文章后,对编辑后的文章进行备份保存，即终端运行,为下面的部署做准备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add one article\"</span></span><br><span class=\"line\">$ git push origin master:Hexo-Blog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>运行一下命令进行仓库master分支静态文件部署<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>以上完成项目源文件以及静态文件的Git管理</p>\n<h2 id=\"参考文献及进阶\"><a href=\"#参考文献及进阶\" class=\"headerlink\" title=\"参考文献及进阶\"></a>参考文献及进阶</h2><p><a href=\"https://mrlrf.github.io/2017/05/05/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">Hexo+github搭建个人博客并实现多终端管理</a><br><a href=\"https://blog.zaihua.me/post/blog_github_backup.html\" target=\"_blank\" rel=\"noopener\">如何在github上面备份Hexo</a><br><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/\" target=\"_blank\" rel=\"noopener\">Hexo的版本控制与持续集成</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Feb 27 2018 14:40:56 GMT+0800 (China Standard Time)","title":"Github多分支管理Hexo-Blog项目","path":"2018/02/27/Github多分支管理Hexo-Blog项目/","eyeCatchImage":null,"excerpt":"<p>Hexo在部署之后在github的仓库中我们只能找到生成的静态文件。然而博客的源文件：主题、文章、配置等文件都还在本地，并没有备份。对于多台终端设备的用户不够友好，而且存在一定的风险，万一那天电脑坏了或者是出现一些其他问题，就得从头再来。为了解决上述问题，我们可以利用github的分支思想来备份我们的源文件。</p>","date":"2018-02-26T16:23:41.000Z","pv":0,"totalPV":0,"categories":"Hexo","tags":["Hexo","Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Git分支管理策略及简单操作","date":"2019-10-10T05:59:05.000Z","_content":"\n前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。\n\n当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。\n\n\n|分支 |\t\t命名\t|\t说明|\n| :-----: | :-----:  | :-----:  |\n|主分支\t|master\t\t |主分支，所有提供给用户使用的正式版本，都在这个主分支上发布|\n|开发分支\t|develop    |开发分支，永远是功能最新最全的分支|\n|功能分支\t|feature-*\t|新功能分支，某个功能点正在开发阶段|\n|发布版本\t|release-*\t|发布定期要上线的功能|\n|修复分支\t|hotfix-*\t|修复线上代码的 bug|\n\n<!-- more -->\n\n### 1. 主分支master\n\n首先，代码库应该有且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。团队成员从主分支(master)获得的都是处于可发布状态的代码。\n\n### 2. 开发分支develop\n日常开发应该在另一条分支上完成。我们把开发用的分支，叫做develop分支。开发分支(develop)应该总能够获得最新开发进展的代码。如果想正式对外发布，就在master分支上，对develop分支进行merge。下面介绍常用的几个命令：\n\n```bash\n# 在master分支上创建develop分支\ngit checkout -b develop master\n\n# 切换到master分支\ngit checkout master\n\n# 对develop分支合并到当前master分支\ngit merge --no-ff develop\n```\n\n### 3. 临时分支\n\n除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：\n- 功能（feature）分支\n- 预发布（release）分支\n- 修补bug（bugfix）分支\n\n这三种分支都属于临时性需要，使用完以后，最好删除，使得代码库的常设分支始终只有master和develop。\n\n#### 功能分支\nfeature分支是为了开发某种特定功能，从develop分支上面分出来的。开发完成后，要再并入develop。功能分支的名字，可以采用feature-xxx的形式命名。\n```bash\n# 从develop创建一个功能分支\ngit checkout -b feature-x develop\n\n# 开发完成后，将功能分支合并到develop分支：\ngit checkout develop\ngit merge --no-ff feature-x\n\n# 删除feature分支\ngit branch -d feature-x\n\n```\n\n\n#### 预发布分支\nrelease分支是指发布正式版本之前（即合并到master分支之前），我们可能需要有一个预发布的版本进行测试而创建的分支。\n```bash\n# 创建一个预发布分支\ngit checkout -b release-x develop\n\n# 确认没有问题后，合并到master分支\ngit checkout master\ngit merge --no-ff release-x\n\n# 对合并生成的新节点，做一个标签\ngit tag -a 1.2\n\n# 再合并到develop分支\ngit checkout develop\ngit merge --no-ff release-x\n\n# 最后，删除预发布分支\ngit branch -d release-x\n```\n\n#### bug修补分支\n软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。\n\n修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进master和develop分支。它的命名，可以采用hotfix-x的形式。\n\n\n```bash\n# 创建一个修补bug分支\ngit checkout -b hotfix-x master\n\n# 修补结束后，合并到master分支\ngit checkout master\ngit merge --no-ff hotfix-x\ngit tag -a 0.1\n\n# 再合并到develop分支\ngit checkout develop\ngit merge --no-ff hotfix-x\n\n# 删除\"修补bug分支\"\ngit branch -d hotfix-x\n\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191010172919306.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n### 总结\n\n上面许多指令使用的--no-ff的意思是no-fast-farward的缩写，使用该命令可以保持更多的版本演进的细节。如果不使用该参数，默认使用了fast-farword进行merge。两者的区别如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101017424529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n最后分享一下整体的分支管理策略图示:\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191010174810996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n参考：\n> [A successful Git branching model](https://nvie.com/posts/a-successful-git->branching-model/)\n---from [Vincent Driessen](https://nvie.com/about/)\n\n--------\n","source":"_posts/Git分支管理策略及简单操作.md","raw":"---\ntitle: Git分支管理策略及简单操作\ndate: 2019-10-10 13:59:05\ntags:\n  - Git\ncategories:\n  - Git\n---\n\n前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。\n\n当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。\n\n\n|分支 |\t\t命名\t|\t说明|\n| :-----: | :-----:  | :-----:  |\n|主分支\t|master\t\t |主分支，所有提供给用户使用的正式版本，都在这个主分支上发布|\n|开发分支\t|develop    |开发分支，永远是功能最新最全的分支|\n|功能分支\t|feature-*\t|新功能分支，某个功能点正在开发阶段|\n|发布版本\t|release-*\t|发布定期要上线的功能|\n|修复分支\t|hotfix-*\t|修复线上代码的 bug|\n\n<!-- more -->\n\n### 1. 主分支master\n\n首先，代码库应该有且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。团队成员从主分支(master)获得的都是处于可发布状态的代码。\n\n### 2. 开发分支develop\n日常开发应该在另一条分支上完成。我们把开发用的分支，叫做develop分支。开发分支(develop)应该总能够获得最新开发进展的代码。如果想正式对外发布，就在master分支上，对develop分支进行merge。下面介绍常用的几个命令：\n\n```bash\n# 在master分支上创建develop分支\ngit checkout -b develop master\n\n# 切换到master分支\ngit checkout master\n\n# 对develop分支合并到当前master分支\ngit merge --no-ff develop\n```\n\n### 3. 临时分支\n\n除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：\n- 功能（feature）分支\n- 预发布（release）分支\n- 修补bug（bugfix）分支\n\n这三种分支都属于临时性需要，使用完以后，最好删除，使得代码库的常设分支始终只有master和develop。\n\n#### 功能分支\nfeature分支是为了开发某种特定功能，从develop分支上面分出来的。开发完成后，要再并入develop。功能分支的名字，可以采用feature-xxx的形式命名。\n```bash\n# 从develop创建一个功能分支\ngit checkout -b feature-x develop\n\n# 开发完成后，将功能分支合并到develop分支：\ngit checkout develop\ngit merge --no-ff feature-x\n\n# 删除feature分支\ngit branch -d feature-x\n\n```\n\n\n#### 预发布分支\nrelease分支是指发布正式版本之前（即合并到master分支之前），我们可能需要有一个预发布的版本进行测试而创建的分支。\n```bash\n# 创建一个预发布分支\ngit checkout -b release-x develop\n\n# 确认没有问题后，合并到master分支\ngit checkout master\ngit merge --no-ff release-x\n\n# 对合并生成的新节点，做一个标签\ngit tag -a 1.2\n\n# 再合并到develop分支\ngit checkout develop\ngit merge --no-ff release-x\n\n# 最后，删除预发布分支\ngit branch -d release-x\n```\n\n#### bug修补分支\n软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。\n\n修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进master和develop分支。它的命名，可以采用hotfix-x的形式。\n\n\n```bash\n# 创建一个修补bug分支\ngit checkout -b hotfix-x master\n\n# 修补结束后，合并到master分支\ngit checkout master\ngit merge --no-ff hotfix-x\ngit tag -a 0.1\n\n# 再合并到develop分支\ngit checkout develop\ngit merge --no-ff hotfix-x\n\n# 删除\"修补bug分支\"\ngit branch -d hotfix-x\n\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191010172919306.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n### 总结\n\n上面许多指令使用的--no-ff的意思是no-fast-farward的缩写，使用该命令可以保持更多的版本演进的细节。如果不使用该参数，默认使用了fast-farword进行merge。两者的区别如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101017424529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n最后分享一下整体的分支管理策略图示:\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191010174810996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n参考：\n> [A successful Git branching model](https://nvie.com/posts/a-successful-git->branching-model/)\n---from [Vincent Driessen](https://nvie.com/about/)\n\n--------\n","slug":"Git分支管理策略及简单操作","published":1,"updated":"2019-10-10T09:53:47.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x14000kexot8r8hoeds","content":"<p>前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。</p>\n<p>当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分支</th>\n<th style=\"text-align:center\">命名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">主分支</td>\n<td style=\"text-align:center\">master</td>\n<td style=\"text-align:center\">主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开发分支</td>\n<td style=\"text-align:center\">develop</td>\n<td style=\"text-align:center\">开发分支，永远是功能最新最全的分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">功能分支</td>\n<td style=\"text-align:center\">feature-*</td>\n<td style=\"text-align:center\">新功能分支，某个功能点正在开发阶段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">发布版本</td>\n<td style=\"text-align:center\">release-*</td>\n<td style=\"text-align:center\">发布定期要上线的功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">修复分支</td>\n<td style=\"text-align:center\">hotfix-*</td>\n<td style=\"text-align:center\">修复线上代码的 bug</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h3 id=\"1-主分支master\"><a href=\"#1-主分支master\" class=\"headerlink\" title=\"1. 主分支master\"></a>1. 主分支master</h3><p>首先，代码库应该有且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。团队成员从主分支(master)获得的都是处于可发布状态的代码。</p>\n<h3 id=\"2-开发分支develop\"><a href=\"#2-开发分支develop\" class=\"headerlink\" title=\"2. 开发分支develop\"></a>2. 开发分支develop</h3><p>日常开发应该在另一条分支上完成。我们把开发用的分支，叫做develop分支。开发分支(develop)应该总能够获得最新开发进展的代码。如果想正式对外发布，就在master分支上，对develop分支进行merge。下面介绍常用的几个命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在master分支上创建develop分支</span></span><br><span class=\"line\">git checkout -b develop master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对develop分支合并到当前master分支</span></span><br><span class=\"line\">git merge --no-ff develop</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-临时分支\"><a href=\"#3-临时分支\" class=\"headerlink\" title=\"3. 临时分支\"></a>3. 临时分支</h3><p>除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>\n<ul>\n<li>功能（feature）分支</li>\n<li>预发布（release）分支</li>\n<li>修补bug（bugfix）分支</li>\n</ul>\n<p>这三种分支都属于临时性需要，使用完以后，最好删除，使得代码库的常设分支始终只有master和develop。</p>\n<h4 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h4><p>feature分支是为了开发某种特定功能，从develop分支上面分出来的。开发完成后，要再并入develop。功能分支的名字，可以采用feature-xxx的形式命名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从develop创建一个功能分支</span></span><br><span class=\"line\">git checkout -b feature-x develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开发完成后，将功能分支合并到develop分支：</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff feature-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除feature分支</span></span><br><span class=\"line\">git branch -d feature-x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"预发布分支\"><a href=\"#预发布分支\" class=\"headerlink\" title=\"预发布分支\"></a>预发布分支</h4><p>release分支是指发布正式版本之前（即合并到master分支之前），我们可能需要有一个预发布的版本进行测试而创建的分支。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个预发布分支</span></span><br><span class=\"line\">git checkout -b release-x develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认没有问题后，合并到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对合并生成的新节点，做一个标签</span></span><br><span class=\"line\">git tag -a 1.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后，删除预发布分支</span></span><br><span class=\"line\">git branch -d release-x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bug修补分支\"><a href=\"#bug修补分支\" class=\"headerlink\" title=\"bug修补分支\"></a>bug修补分支</h4><p>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>\n<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进master和develop分支。它的命名，可以采用hotfix-x的形式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个修补bug分支</span></span><br><span class=\"line\">git checkout -b hotfix-x master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修补结束后，合并到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff hotfix-x</span><br><span class=\"line\">git tag -a 0.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff hotfix-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除\"修补bug分支\"</span></span><br><span class=\"line\">git branch -d hotfix-x</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20191010172919306.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面许多指令使用的–no-ff的意思是no-fast-farward的缩写，使用该命令可以保持更多的版本演进的细节。如果不使用该参数，默认使用了fast-farword进行merge。两者的区别如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/2019101017424529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>最后分享一下整体的分支管理策略图示:<br><img src=\"https://img-blog.csdnimg.cn/20191010174810996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://nvie.com/posts/a-successful-git-&gt;branching-model/\" target=\"_blank\" rel=\"noopener\">A successful Git branching model</a><br>—from <a href=\"https://nvie.com/about/\" target=\"_blank\" rel=\"noopener\">Vincent Driessen</a></p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<p>前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。</p>\n<p>当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分支</th>\n<th style=\"text-align:center\">命名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">主分支</td>\n<td style=\"text-align:center\">master</td>\n<td style=\"text-align:center\">主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开发分支</td>\n<td style=\"text-align:center\">develop</td>\n<td style=\"text-align:center\">开发分支，永远是功能最新最全的分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">功能分支</td>\n<td style=\"text-align:center\">feature-*</td>\n<td style=\"text-align:center\">新功能分支，某个功能点正在开发阶段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">发布版本</td>\n<td style=\"text-align:center\">release-*</td>\n<td style=\"text-align:center\">发布定期要上线的功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">修复分支</td>\n<td style=\"text-align:center\">hotfix-*</td>\n<td style=\"text-align:center\">修复线上代码的 bug</td>\n</tr>\n</tbody>\n</table>","more":"<h3 id=\"1-主分支master\"><a href=\"#1-主分支master\" class=\"headerlink\" title=\"1. 主分支master\"></a>1. 主分支master</h3><p>首先，代码库应该有且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。团队成员从主分支(master)获得的都是处于可发布状态的代码。</p>\n<h3 id=\"2-开发分支develop\"><a href=\"#2-开发分支develop\" class=\"headerlink\" title=\"2. 开发分支develop\"></a>2. 开发分支develop</h3><p>日常开发应该在另一条分支上完成。我们把开发用的分支，叫做develop分支。开发分支(develop)应该总能够获得最新开发进展的代码。如果想正式对外发布，就在master分支上，对develop分支进行merge。下面介绍常用的几个命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在master分支上创建develop分支</span></span><br><span class=\"line\">git checkout -b develop master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对develop分支合并到当前master分支</span></span><br><span class=\"line\">git merge --no-ff develop</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-临时分支\"><a href=\"#3-临时分支\" class=\"headerlink\" title=\"3. 临时分支\"></a>3. 临时分支</h3><p>除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>\n<ul>\n<li>功能（feature）分支</li>\n<li>预发布（release）分支</li>\n<li>修补bug（bugfix）分支</li>\n</ul>\n<p>这三种分支都属于临时性需要，使用完以后，最好删除，使得代码库的常设分支始终只有master和develop。</p>\n<h4 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h4><p>feature分支是为了开发某种特定功能，从develop分支上面分出来的。开发完成后，要再并入develop。功能分支的名字，可以采用feature-xxx的形式命名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从develop创建一个功能分支</span></span><br><span class=\"line\">git checkout -b feature-x develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开发完成后，将功能分支合并到develop分支：</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff feature-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除feature分支</span></span><br><span class=\"line\">git branch -d feature-x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"预发布分支\"><a href=\"#预发布分支\" class=\"headerlink\" title=\"预发布分支\"></a>预发布分支</h4><p>release分支是指发布正式版本之前（即合并到master分支之前），我们可能需要有一个预发布的版本进行测试而创建的分支。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个预发布分支</span></span><br><span class=\"line\">git checkout -b release-x develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认没有问题后，合并到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对合并生成的新节点，做一个标签</span></span><br><span class=\"line\">git tag -a 1.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后，删除预发布分支</span></span><br><span class=\"line\">git branch -d release-x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bug修补分支\"><a href=\"#bug修补分支\" class=\"headerlink\" title=\"bug修补分支\"></a>bug修补分支</h4><p>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>\n<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进master和develop分支。它的命名，可以采用hotfix-x的形式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个修补bug分支</span></span><br><span class=\"line\">git checkout -b hotfix-x master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修补结束后，合并到master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff hotfix-x</span><br><span class=\"line\">git tag -a 0.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff hotfix-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除\"修补bug分支\"</span></span><br><span class=\"line\">git branch -d hotfix-x</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20191010172919306.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面许多指令使用的–no-ff的意思是no-fast-farward的缩写，使用该命令可以保持更多的版本演进的细节。如果不使用该参数，默认使用了fast-farword进行merge。两者的区别如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/2019101017424529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>最后分享一下整体的分支管理策略图示:<br><img src=\"https://img-blog.csdnimg.cn/20191010174810996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://nvie.com/posts/a-successful-git-&gt;branching-model/\" target=\"_blank\" rel=\"noopener\">A successful Git branching model</a><br>—from <a href=\"https://nvie.com/about/\" target=\"_blank\" rel=\"noopener\">Vincent Driessen</a></p>\n</blockquote>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Oct 10 2019 17:53:47 GMT+0800 (China Standard Time)","title":"Git分支管理策略及简单操作","path":"2019/10/10/Git分支管理策略及简单操作/","eyeCatchImage":null,"excerpt":"<p>前几天整理了一下之前项目的开发代码，当时使用了Git来进行代码管理。虽然本人熟悉常用的Git操作，但是对分支的管理经验非常欠缺。拿这个项目来说，在项目中有不下20个分支，每个分支间的继承关系相当之混乱，非常不利于代码的安全管理。因此，通过在网络上的学习，总结了一下关于Git分支管理的策略方法，供后续回顾学习。</p>\n<p>当然必须承认，代码分支管理策略有很多种，不局限于以下介绍。但是下面介绍的这个分支管理策略非常具有工程借鉴意义，几乎适用于所有开发场景。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分支</th>\n<th style=\"text-align:center\">命名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">主分支</td>\n<td style=\"text-align:center\">master</td>\n<td style=\"text-align:center\">主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开发分支</td>\n<td style=\"text-align:center\">develop</td>\n<td style=\"text-align:center\">开发分支，永远是功能最新最全的分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">功能分支</td>\n<td style=\"text-align:center\">feature-*</td>\n<td style=\"text-align:center\">新功能分支，某个功能点正在开发阶段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">发布版本</td>\n<td style=\"text-align:center\">release-*</td>\n<td style=\"text-align:center\">发布定期要上线的功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">修复分支</td>\n<td style=\"text-align:center\">hotfix-*</td>\n<td style=\"text-align:center\">修复线上代码的 bug</td>\n</tr>\n</tbody>\n</table>","date":"2019-10-10T05:59:05.000Z","pv":0,"totalPV":0,"categories":"Git","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hexo博客Next主题添加Fork me on GitHub标签","date":"2018-02-28T10:09:26.000Z","_content":"\n给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。\n\n打开文件：**hexo博客根目录/themes/next/layout/_layout.swig** 找到如下代码块\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    [样式代码]\n...\n\n```\n<!-- more -->\n样式代码 [**看这里**](https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons) ，挑选自己喜欢的样式。\n\n然后将样式代码添加到上述 **_layout.swig** 代码块后面，比如选择黑色经典款，即：\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    # [样式代码]\n    <a href=\"https://github.com/you\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n\n...\n\n```\n\n\n重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。\n大家看我的，感觉很搭( ⊙ o ⊙ )！\n![fork me on github](http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Hexo博客Next主题添加Fork-me-on-GitHub标签.md","raw":"---\ntitle: Hexo博客Next主题添加Fork me on GitHub标签\ndate: 2018-02-28 18:09:26\ntags:\n  - Hexo\ncategories:\n  - Hexo\n---\n\n给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。\n\n打开文件：**hexo博客根目录/themes/next/layout/_layout.swig** 找到如下代码块\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    [样式代码]\n...\n\n```\n<!-- more -->\n样式代码 [**看这里**](https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons) ，挑选自己喜欢的样式。\n\n然后将样式代码添加到上述 **_layout.swig** 代码块后面，比如选择黑色经典款，即：\n```python\n...\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n    <div class=\"headband\"></div>\n    # [样式代码]\n    <a href=\"https://github.com/you\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n\n...\n\n```\n\n\n重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。\n大家看我的，感觉很搭( ⊙ o ⊙ )！\n![fork me on github](http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Hexo博客Next主题添加Fork-me-on-GitHub标签","published":1,"updated":"2018-02-28T10:35:15.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1g000oexotwdcsq8jo","content":"<p>给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。</p>\n<p>打开文件：<strong>hexo博客根目录/themes/next/layout/_layout.swig</strong> 找到如下代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    [样式代码]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>样式代码 <a href=\"https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\"><strong>看这里</strong></a> ，挑选自己喜欢的样式。</p>\n<p>然后将样式代码添加到上述 <strong>_layout.swig</strong> 代码块后面，比如选择黑色经典款，即：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"comment\"># [样式代码]</span></span><br><span class=\"line\">    &lt;a href=\"https://github.com/you\"&gt;&lt;img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。<br>大家看我的，感觉很搭( ⊙ o ⊙ )！<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fork me on github\"></p>\n","site":{"data":{}},"excerpt":"<p>给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。</p>\n<p>打开文件：<strong>hexo博客根目录/themes/next/layout/_layout.swig</strong> 找到如下代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    [样式代码]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>","more":"<p>样式代码 <a href=\"https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\"><strong>看这里</strong></a> ，挑选自己喜欢的样式。</p>\n<p>然后将样式代码添加到上述 <strong>_layout.swig</strong> 代码块后面，比如选择黑色经典款，即：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"comment\"># [样式代码]</span></span><br><span class=\"line\">    &lt;a href=\"https://github.com/you\"&gt;&lt;img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"&gt;&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>重新部署一下就可以查看了，如果显示不出来，需要清理浏览器的cookie,多刷新几次就OK了。<br>大家看我的，感觉很搭( ⊙ o ⊙ )！<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-13a15afaa9450272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fork me on github\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 18:35:15 GMT+0800 (China Standard Time)","title":"Hexo博客Next主题添加Fork me on GitHub标签","path":"2018/02/28/Hexo博客Next主题添加Fork-me-on-GitHub标签/","eyeCatchImage":null,"excerpt":"<p>给自己的个人博客添加Fork me on GitHub标签感觉很专业很逼格，添加的方法也很简单，介绍如下。</p>\n<p>打开文件：<strong>hexo博客根目录/themes/next/layout/_layout.swig</strong> 找到如下代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div class=\"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; \"&gt;</span><br><span class=\"line\">    &lt;div class=\"headband\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    [样式代码]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>","date":"2018-02-28T10:09:26.000Z","pv":0,"totalPV":0,"categories":"Hexo","tags":["Hexo"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hexo部署的网站项目(.deploy_git)中添加README.md","date":"2018-02-28T06:05:20.000Z","_content":"终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。\n<!-- more -->\n需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。\n\n配置截图如下：\n\n![](http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Hexo部署的网站项目-deploy-git-中添加README-md.md","raw":"---\ntitle: Hexo部署的网站项目(.deploy_git)中添加README.md\ndate: 2018-02-28 14:05:20\ntags:\n  - Hexo\ncategories:\n  - Hexo\n---\n终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。\n<!-- more -->\n需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。\n\n配置截图如下：\n\n![](http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Hexo部署的网站项目-deploy-git-中添加README-md","published":1,"updated":"2018-02-28T06:29:24.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1i000qexot5hyzqzaj","content":"<p>终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。<br><a id=\"more\"></a><br>需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。</p>\n<p>配置截图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。<br>","more":"<br>需要注意的是，我们要防止此.md文件被渲染为.html文件，因此，需要在站点配置文件_config.yml中设置skip_render: README.md，这样部署完成后我们就可以在配置的.deploy_git中看到README.md了。</p>\n<p>配置截图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1ce4c1b9e78bee3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 14:29:24 GMT+0800 (China Standard Time)","title":"Hexo部署的网站项目(.deploy_git)中添加README.md","path":"2018/02/28/Hexo部署的网站项目-deploy-git-中添加README-md/","eyeCatchImage":null,"excerpt":"<p>终端中执行hexo generate时，会将source文件夹中的.md文件渲染为.html文件到public文件夹中，所以我们可以将README.md文件放到source文件夹中，这样在执行hexo deploy时，生成的.deploy_git文件夹中就会有README文件。但此时并不是我们想要的README.md。<br>","date":"2018-02-28T06:05:20.000Z","pv":0,"totalPV":0,"categories":"Hexo","tags":["Hexo"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IO密集型任务、计算密集型任务，以及多线程、多进程","date":"2018-03-05T02:41:27.000Z","_content":"## IO密集型任务 vs 计算密集型任务\n\n  * 所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  \n\n  * 所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n<!-- more -->\n计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。\n\n计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。\n\n第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。\n\nIO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。\n\n\n## 多线程 VS 多进程\n### 多线程\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![](https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg)\n\n所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。\n\nPython提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。\n\n多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。\n\n在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。\n\n### 多进程\n由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。\n\n![](https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg)\n\nPython中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。\n\n多进程模式最大的`优点`就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。\n\n多进程模式的`缺点`是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。\n\n## 举个栗子\n**实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务**\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：\n\n```Python\nimport multiprocessing\n\n# 定义全局变量Queue\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        print(g_queue.get())\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据\n\n```python\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\ng_search_list = list(range(10000))\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3*2, 3*2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n```\n\n准备完上述代码之后，进行试验：\n```python\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行cpu密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n```\n\n结果说明：\n\n**对于IO密集型任务：**\n\n  * 直接执行用时：10.0333秒\n  * 多线程执行用时：4.0156秒\n  * 多进程执行用时：5.0182秒\n\n说明多线程适合IO密集型任务。\n\n**对于计算密集型任务**  \n\n\n* 直接执行用时：10.0273秒\n* 多线程执行用时：13.247秒\n* 多进程执行用时：6.8377秒\n\n说明多进程适合计算密集型任务\n\n\n## 参考\n\n1. https://zhuanlan.zhihu.com/p/24283040\n","source":"_posts/IO密集型任务、计算密集型任务，以及多线程、多进程.md","raw":"---\ntitle: IO密集型任务、计算密集型任务，以及多线程、多进程\ndate: 2018-03-05 10:41:27\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n## IO密集型任务 vs 计算密集型任务\n\n  * 所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  \n\n  * 所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n<!-- more -->\n计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。\n\n计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。\n\n第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。\n\nIO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。\n\n\n## 多线程 VS 多进程\n### 多线程\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![](https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg)\n\n所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。\n\nPython提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。\n\n多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。\n\n在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。\n\n### 多进程\n由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。\n\n![](https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg)\n\nPython中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。\n\n多进程模式最大的`优点`就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。\n\n多进程模式的`缺点`是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。\n\n## 举个栗子\n**实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务**\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：\n\n```Python\nimport multiprocessing\n\n# 定义全局变量Queue\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        print(g_queue.get())\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据\n\n```python\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\ng_search_list = list(range(10000))\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3*2, 3*2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n```\n\n准备完上述代码之后，进行试验：\n```python\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行CPU密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(5)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行cpu密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n```\n\n结果说明：\n\n**对于IO密集型任务：**\n\n  * 直接执行用时：10.0333秒\n  * 多线程执行用时：4.0156秒\n  * 多进程执行用时：5.0182秒\n\n说明多线程适合IO密集型任务。\n\n**对于计算密集型任务**  \n\n\n* 直接执行用时：10.0273秒\n* 多线程执行用时：13.247秒\n* 多进程执行用时：6.8377秒\n\n说明多进程适合计算密集型任务\n\n\n## 参考\n\n1. https://zhuanlan.zhihu.com/p/24283040\n","slug":"IO密集型任务、计算密集型任务，以及多线程、多进程","published":1,"updated":"2018-03-05T15:54:17.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1k000uexotkwq8nh45","content":"<h2 id=\"IO密集型任务-vs-计算密集型任务\"><a href=\"#IO密集型任务-vs-计算密集型任务\" class=\"headerlink\" title=\"IO密集型任务 vs 计算密集型任务\"></a>IO密集型任务 vs 计算密集型任务</h2><ul>\n<li><p>所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  </p>\n</li>\n<li><p>所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p>\n<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>\n<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>\n<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>\n<h2 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h2><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg\" alt=\"\"></p>\n<p>所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。</p>\n<p>Python提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。</p>\n<p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p>\n<p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>\n<h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><p>由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg\" alt=\"\"></p>\n<p>Python中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。</p>\n<p>多进程模式最大的<code>优点</code>就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p>\n<p>多进程模式的<code>缺点</code>是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p><strong>实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务</strong></p>\n<p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义全局变量Queue</span></span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_queue</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue start\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        print(g_queue.get())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _index <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue end\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个IO密集型任务：利用time.sleep()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_io</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_cpu</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">            count += pow(<span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>) <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> g_search_list <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"cpu count:\"</span>, multiprocessing.cpu_count(), <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行cpu密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果说明：</p>\n<p><strong>对于IO密集型任务：</strong></p>\n<ul>\n<li>直接执行用时：10.0333秒</li>\n<li>多线程执行用时：4.0156秒</li>\n<li>多进程执行用时：5.0182秒</li>\n</ul>\n<p>说明多线程适合IO密集型任务。</p>\n<p><strong>对于计算密集型任务</strong>  </p>\n<ul>\n<li>直接执行用时：10.0273秒</li>\n<li>多线程执行用时：13.247秒</li>\n<li>多进程执行用时：6.8377秒</li>\n</ul>\n<p>说明多进程适合计算密集型任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24283040</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"IO密集型任务-vs-计算密集型任务\"><a href=\"#IO密集型任务-vs-计算密集型任务\" class=\"headerlink\" title=\"IO密集型任务 vs 计算密集型任务\"></a>IO密集型任务 vs 计算密集型任务</h2><ul>\n<li><p>所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  </p>\n</li>\n<li><p>所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n</li>\n</ul>","more":"<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p>\n<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>\n<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>\n<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>\n<h2 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h2><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-dfad6468a9ddd7edd2494971296a00d0_hd.jpg\" alt=\"\"></p>\n<p>所以Python中的多线程适合IO密集型任务，而不适合计算密集型任务。</p>\n<p>Python提供两组多线程接口，一是thread模块_thread，提供低等级接口。二是threading模块，提供更容易使用的基于对象的接口，可以继承Thread对象来实现线程，此外其还提供了其它线程相关的对象，例如Timer，Lock等。</p>\n<p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p>\n<p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>\n<h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><p>由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f1cdf422f5aef9a23f714a399e8e7016_hd.jpg\" alt=\"\"></p>\n<p>Python中的进程模块为mutliprocess模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python还提供了进程池Pool对象，可以方便的管理和控制线程。</p>\n<p>多进程模式最大的<code>优点</code>就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p>\n<p>多进程模式的<code>缺点</code>是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p><strong>实例讲解Python中的多线程、多进程如何应对IO密集型任务、计算密集型任务</strong></p>\n<p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义全局变量Queue</span></span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_queue</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue start\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        print(g_queue.get())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _index <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(<span class=\"string\">\"init g_queue end\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>定义IO密集型任务和计算密集型任务，分别从队列中获取任务数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个IO密集型任务：利用time.sleep()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_io</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"IOTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"IOTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task_cpu</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] start\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> g_queue.empty():</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">            count += pow(<span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>) <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> g_search_list <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = g_queue.get(block=<span class=\"keyword\">True</span>, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] get data: %s\"</span> % (task_id, data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> excep:</span><br><span class=\"line\">            print(<span class=\"string\">\"CPUTask[%s] error: %s\"</span> % (task_id, str(excep)))</span><br><span class=\"line\">    print(<span class=\"string\">\"CPUTask[%s] end\"</span> % task_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"cpu count:\"</span>, multiprocessing.cpu_count(), <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行IO密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 直接执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(<span class=\"number\">0</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多线程执行CPU密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"========== 多进程执行cpu密集型任务 ==========\"</span>)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> process_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"结束：\"</span>, time.time() - time_0, <span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果说明：</p>\n<p><strong>对于IO密集型任务：</strong></p>\n<ul>\n<li>直接执行用时：10.0333秒</li>\n<li>多线程执行用时：4.0156秒</li>\n<li>多进程执行用时：5.0182秒</li>\n</ul>\n<p>说明多线程适合IO密集型任务。</p>\n<p><strong>对于计算密集型任务</strong>  </p>\n<ul>\n<li>直接执行用时：10.0273秒</li>\n<li>多线程执行用时：13.247秒</li>\n<li>多进程执行用时：6.8377秒</li>\n</ul>\n<p>说明多进程适合计算密集型任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24283040</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 05 2018 23:54:17 GMT+0800 (China Standard Time)","title":"IO密集型任务、计算密集型任务，以及多线程、多进程","path":"2018/03/05/IO密集型任务、计算密集型任务，以及多线程、多进程/","eyeCatchImage":null,"excerpt":"<h2 id=\"IO密集型任务-vs-计算密集型任务\"><a href=\"#IO密集型任务-vs-计算密集型任务\" class=\"headerlink\" title=\"IO密集型任务 vs 计算密集型任务\"></a>IO密集型任务 vs 计算密集型任务</h2><ul>\n<li><p>所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。  </p>\n</li>\n<li><p>所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n</li>\n</ul>","date":"2018-03-05T02:41:27.000Z","pv":0,"totalPV":0,"categories":"操作系统 > 多任务处理","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"HTML里引入CSS的四种方式","date":"2018-04-09T14:42:46.000Z","_content":"1. 行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；\n\n2. 嵌入式：将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中；\n\n3. 链接式：跟第4个的导入式都称外部式或者外联式，使用link引用外部CSS文件；\n\n4. 导入式：使用@import引用外部CSS文件；\n","source":"_posts/HTML里引入CSS的四种方式.md","raw":"---\ntitle: HTML里引入CSS的四种方式\ndate: 2018-04-09 22:42:46\ntags:\n  - Frontend\ncategories:\n  - Frontend\n---\n1. 行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；\n\n2. 嵌入式：将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中；\n\n3. 链接式：跟第4个的导入式都称外部式或者外联式，使用link引用外部CSS文件；\n\n4. 导入式：使用@import引用外部CSS文件；\n","slug":"HTML里引入CSS的四种方式","published":1,"updated":"2018-04-21T03:34:43.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1m000wexotvcnblfyj","content":"<ol>\n<li><p>行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；</p>\n</li>\n<li><p>嵌入式：将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中；</p>\n</li>\n<li><p>链接式：跟第4个的导入式都称外部式或者外联式，使用link引用外部CSS文件；</p>\n</li>\n<li><p>导入式：使用@import引用外部CSS文件；</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>行内式：也称内联式，在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势；</p>\n</li>\n<li><p>嵌入式：将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中；</p>\n</li>\n<li><p>链接式：跟第4个的导入式都称外部式或者外联式，使用link引用外部CSS文件；</p>\n</li>\n<li><p>导入式：使用@import引用外部CSS文件；</p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Apr 21 2018 11:34:43 GMT+0800 (China Standard Time)","title":"HTML里引入CSS的四种方式","path":"2018/04/09/HTML里引入CSS的四种方式/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-09T14:42:46.000Z","pv":0,"totalPV":0,"categories":"Frontend","tags":["Frontend"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JSP相关概念","date":"2018-09-28T02:49:49.000Z","_content":"\n#### JSP内置对象：\n\n1. `request`：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest\n\n2. `response`:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse\n\n3. `session`:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession\n\n4. `out`: 负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter\n\n5. `application`:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext\n\n6. `config`:表示ServletConfig，对应类型：javax.servlet.servletconfig\n\n7. `exception`:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception\n\n8. `pagecontext`:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext\n\n9. `page`:表示当前JSP页面本身。\n\n<!-- more -->\n\n#### JSP的四种作用域\n\n1. `page`是代表一个页面相关的对象和属性。一个页面由一个编译好的java servlet类（可以带有include指令，但不可以带有include动作）表示。这既包括servlet又包括编译成servlet的jsp页面。\n\n2. `request`是代表与web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个web组件（由于`forward`指令和`include`动作的关系）\n\n3. `session`是代表与用于某个web客户机的一个用户体验相关的对象和属性。一个web回话也可以经常跨域多个客户机请求。\n\n4. `application`是代表与整个web应用程序相关的对象和属性。这实质上是跨域整个web应用程序，包括多个页面、请求和回话的一个全局作用域\n","source":"_posts/JSP相关概念.md","raw":"---\ntitle: JSP相关概念\ndate: 2018-09-28 10:49:49\ntags:\n---\n\n#### JSP内置对象：\n\n1. `request`：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest\n\n2. `response`:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse\n\n3. `session`:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession\n\n4. `out`: 负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter\n\n5. `application`:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext\n\n6. `config`:表示ServletConfig，对应类型：javax.servlet.servletconfig\n\n7. `exception`:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception\n\n8. `pagecontext`:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext\n\n9. `page`:表示当前JSP页面本身。\n\n<!-- more -->\n\n#### JSP的四种作用域\n\n1. `page`是代表一个页面相关的对象和属性。一个页面由一个编译好的java servlet类（可以带有include指令，但不可以带有include动作）表示。这既包括servlet又包括编译成servlet的jsp页面。\n\n2. `request`是代表与web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个web组件（由于`forward`指令和`include`动作的关系）\n\n3. `session`是代表与用于某个web客户机的一个用户体验相关的对象和属性。一个web回话也可以经常跨域多个客户机请求。\n\n4. `application`是代表与整个web应用程序相关的对象和属性。这实质上是跨域整个web应用程序，包括多个页面、请求和回话的一个全局作用域\n","slug":"JSP相关概念","published":1,"updated":"2018-09-28T04:38:37.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1o000yexotf2ejbvww","content":"<h4 id=\"JSP内置对象：\"><a href=\"#JSP内置对象：\" class=\"headerlink\" title=\"JSP内置对象：\"></a>JSP内置对象：</h4><ol>\n<li><p><code>request</code>：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest</p>\n</li>\n<li><p><code>response</code>:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse</p>\n</li>\n<li><p><code>session</code>:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession</p>\n</li>\n<li><p><code>out</code>: 负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter</p>\n</li>\n<li><p><code>application</code>:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext</p>\n</li>\n<li><p><code>config</code>:表示ServletConfig，对应类型：javax.servlet.servletconfig</p>\n</li>\n<li><p><code>exception</code>:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception</p>\n</li>\n<li><p><code>pagecontext</code>:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext</p>\n</li>\n<li><p><code>page</code>:表示当前JSP页面本身。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"JSP的四种作用域\"><a href=\"#JSP的四种作用域\" class=\"headerlink\" title=\"JSP的四种作用域\"></a>JSP的四种作用域</h4><ol>\n<li><p><code>page</code>是代表一个页面相关的对象和属性。一个页面由一个编译好的java servlet类（可以带有include指令，但不可以带有include动作）表示。这既包括servlet又包括编译成servlet的jsp页面。</p>\n</li>\n<li><p><code>request</code>是代表与web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个web组件（由于<code>forward</code>指令和<code>include</code>动作的关系）</p>\n</li>\n<li><p><code>session</code>是代表与用于某个web客户机的一个用户体验相关的对象和属性。一个web回话也可以经常跨域多个客户机请求。</p>\n</li>\n<li><p><code>application</code>是代表与整个web应用程序相关的对象和属性。这实质上是跨域整个web应用程序，包括多个页面、请求和回话的一个全局作用域</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"JSP内置对象：\"><a href=\"#JSP内置对象：\" class=\"headerlink\" title=\"JSP内置对象：\"></a>JSP内置对象：</h4><ol>\n<li><p><code>request</code>：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest</p>\n</li>\n<li><p><code>response</code>:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse</p>\n</li>\n<li><p><code>session</code>:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession</p>\n</li>\n<li><p><code>out</code>: 负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter</p>\n</li>\n<li><p><code>application</code>:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext</p>\n</li>\n<li><p><code>config</code>:表示ServletConfig，对应类型：javax.servlet.servletconfig</p>\n</li>\n<li><p><code>exception</code>:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception</p>\n</li>\n<li><p><code>pagecontext</code>:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext</p>\n</li>\n<li><p><code>page</code>:表示当前JSP页面本身。</p>\n</li>\n</ol>","more":"<h4 id=\"JSP的四种作用域\"><a href=\"#JSP的四种作用域\" class=\"headerlink\" title=\"JSP的四种作用域\"></a>JSP的四种作用域</h4><ol>\n<li><p><code>page</code>是代表一个页面相关的对象和属性。一个页面由一个编译好的java servlet类（可以带有include指令，但不可以带有include动作）表示。这既包括servlet又包括编译成servlet的jsp页面。</p>\n</li>\n<li><p><code>request</code>是代表与web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个web组件（由于<code>forward</code>指令和<code>include</code>动作的关系）</p>\n</li>\n<li><p><code>session</code>是代表与用于某个web客户机的一个用户体验相关的对象和属性。一个web回话也可以经常跨域多个客户机请求。</p>\n</li>\n<li><p><code>application</code>是代表与整个web应用程序相关的对象和属性。这实质上是跨域整个web应用程序，包括多个页面、请求和回话的一个全局作用域</p>\n</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Sep 28 2018 12:38:37 GMT+0800 (China Standard Time)","title":"JSP相关概念","path":"2018/09/28/JSP相关概念/","eyeCatchImage":null,"excerpt":"<h4 id=\"JSP内置对象：\"><a href=\"#JSP内置对象：\" class=\"headerlink\" title=\"JSP内置对象：\"></a>JSP内置对象：</h4><ol>\n<li><p><code>request</code>：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest</p>\n</li>\n<li><p><code>response</code>:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse</p>\n</li>\n<li><p><code>session</code>:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession</p>\n</li>\n<li><p><code>out</code>: 负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter</p>\n</li>\n<li><p><code>application</code>:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext</p>\n</li>\n<li><p><code>config</code>:表示ServletConfig，对应类型：javax.servlet.servletconfig</p>\n</li>\n<li><p><code>exception</code>:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception</p>\n</li>\n<li><p><code>pagecontext</code>:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext</p>\n</li>\n<li><p><code>page</code>:表示当前JSP页面本身。</p>\n</li>\n</ol>","date":"2018-09-28T02:49:49.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java 方法设置默认参数","date":"2018-09-09T10:59:52.000Z","_content":"Java本身不支持设置默认值，需要用重载间接实现。\n\n因为“默认参数”和“方法重载”同时支持的话有二义性的问题，Java可能为了简单就不要“默认参数”了。使用“方法重载”可以间接实现”默认参数“的效果，而且避免了代码过于hack（乱）。\n\n```Java\npublic class A{\n   public void doA(int a){\n   }\n   public void doA(){\n       this.doA(0);//这里默认传入0，可以近似与通过这个方法重载，实现了默认值\n   }\n}\n\n```\n","source":"_posts/Java-方法设置默认参数.md","raw":"---\ntitle: Java 方法设置默认参数\ndate: 2018-09-09 18:59:52\ntags:\n  - Java\ncategories:\n  - Java\n---\nJava本身不支持设置默认值，需要用重载间接实现。\n\n因为“默认参数”和“方法重载”同时支持的话有二义性的问题，Java可能为了简单就不要“默认参数”了。使用“方法重载”可以间接实现”默认参数“的效果，而且避免了代码过于hack（乱）。\n\n```Java\npublic class A{\n   public void doA(int a){\n   }\n   public void doA(){\n       this.doA(0);//这里默认传入0，可以近似与通过这个方法重载，实现了默认值\n   }\n}\n\n```\n","slug":"Java-方法设置默认参数","published":1,"updated":"2018-09-09T11:01:22.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x1z0011exothf898hqy","content":"<p>Java本身不支持设置默认值，需要用重载间接实现。</p>\n<p>因为“默认参数”和“方法重载”同时支持的话有二义性的问题，Java可能为了简单就不要“默认参数”了。使用“方法重载”可以间接实现”默认参数“的效果，而且避免了代码过于hack（乱）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.doA(<span class=\"number\">0</span>);<span class=\"comment\">//这里默认传入0，可以近似与通过这个方法重载，实现了默认值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Java本身不支持设置默认值，需要用重载间接实现。</p>\n<p>因为“默认参数”和“方法重载”同时支持的话有二义性的问题，Java可能为了简单就不要“默认参数”了。使用“方法重载”可以间接实现”默认参数“的效果，而且避免了代码过于hack（乱）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.doA(<span class=\"number\">0</span>);<span class=\"comment\">//这里默认传入0，可以近似与通过这个方法重载，实现了默认值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Sep 09 2018 19:01:22 GMT+0800 (China Standard Time)","title":"Java 方法设置默认参数","path":"2018/09/09/Java-方法设置默认参数/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-09T10:59:52.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java 关键字this和super","date":"2018-09-07T02:32:12.000Z","_content":"关键字this有两个用途：\n1. 引用隐式参数\n2. 调用该类其他的构造器\n\n关键字super也有两个用途：\n1. 调用超类的方法\n2. 调用超类的构造器\n","source":"_posts/Java-关键字this和super.md","raw":"---\ntitle: Java 关键字this和super\ndate: 2018-09-07 10:32:12\ntags:\n  - Java\ncategories:\n  - Java\n---\n关键字this有两个用途：\n1. 引用隐式参数\n2. 调用该类其他的构造器\n\n关键字super也有两个用途：\n1. 调用超类的方法\n2. 调用超类的构造器\n","slug":"Java-关键字this和super","published":1,"updated":"2018-09-07T02:40:51.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x210012exotmh8ucoqp","content":"<p>关键字this有两个用途：</p>\n<ol>\n<li>引用隐式参数</li>\n<li>调用该类其他的构造器</li>\n</ol>\n<p>关键字super也有两个用途：</p>\n<ol>\n<li>调用超类的方法</li>\n<li>调用超类的构造器</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>关键字this有两个用途：</p>\n<ol>\n<li>引用隐式参数</li>\n<li>调用该类其他的构造器</li>\n</ol>\n<p>关键字super也有两个用途：</p>\n<ol>\n<li>调用超类的方法</li>\n<li>调用超类的构造器</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Sep 07 2018 10:40:51 GMT+0800 (China Standard Time)","title":"Java 关键字this和super","path":"2018/09/07/Java-关键字this和super/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-07T02:32:12.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java中的+=赋值运算","date":"2018-10-24T07:22:03.000Z","_content":"\n```Java\n\nint a = 10;\na += 5;\nSystem.out.println(a); //15\n\nshort s = 30;\ns = s + 5;//编译报错\n//Error:(23, 15) java: incompatible types: possible lossy conversion from int to short\n\nshort s = 30;\ns += 5;//等价于 s = short(s+5),该表达式自带隐式类型转换\n```\n\n上述代码中，变量s为short类型，`s+5`的结果为int类型，int类型赋值给short类型，编译报错。\n错误信息为如下：\n`Error:(23, 15) java: incompatible types: possible lossy conversion from int to short`\n\n关于`自动类型转换`，也称为`隐式类型转换`\n当把`小数据范围类型的数值或变量`赋值给另一个`大数据范围类型变量`时，系统可以自动完成类型转换。\nboolean类型是不可以转换为其他数据类型。\n\n`强制类型转换`，也称为`显示类型转换`\n当把`大范围类型的数值或变量`赋值给另一个`小范围类型变量`时，此时系统不能自动完成转换，需要加上强制转换符，但这样的操作可能在成数据精度的降低或溢出，使用时需要格外注意。\n","source":"_posts/Java中的-赋值运算.md","raw":"---\ntitle: Java中的+=赋值运算\ndate: 2018-10-24 15:22:03\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n```Java\n\nint a = 10;\na += 5;\nSystem.out.println(a); //15\n\nshort s = 30;\ns = s + 5;//编译报错\n//Error:(23, 15) java: incompatible types: possible lossy conversion from int to short\n\nshort s = 30;\ns += 5;//等价于 s = short(s+5),该表达式自带隐式类型转换\n```\n\n上述代码中，变量s为short类型，`s+5`的结果为int类型，int类型赋值给short类型，编译报错。\n错误信息为如下：\n`Error:(23, 15) java: incompatible types: possible lossy conversion from int to short`\n\n关于`自动类型转换`，也称为`隐式类型转换`\n当把`小数据范围类型的数值或变量`赋值给另一个`大数据范围类型变量`时，系统可以自动完成类型转换。\nboolean类型是不可以转换为其他数据类型。\n\n`强制类型转换`，也称为`显示类型转换`\n当把`大范围类型的数值或变量`赋值给另一个`小范围类型变量`时，此时系统不能自动完成转换，需要加上强制转换符，但这样的操作可能在成数据精度的降低或溢出，使用时需要格外注意。\n","slug":"Java中的-赋值运算","published":1,"updated":"2018-10-24T07:38:47.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x250017exot2metwbh6","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a += <span class=\"number\">5</span>;</span><br><span class=\"line\">System.out.println(a); <span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">30</span>;</span><br><span class=\"line\">s = s + <span class=\"number\">5</span>;<span class=\"comment\">//编译报错</span></span><br><span class=\"line\"><span class=\"comment\">//Error:(23, 15) java: incompatible types: possible lossy conversion from int to short</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">30</span>;</span><br><span class=\"line\">s += <span class=\"number\">5</span>;<span class=\"comment\">//等价于 s = short(s+5),该表达式自带隐式类型转换</span></span><br></pre></td></tr></table></figure>\n<p>上述代码中，变量s为short类型，<code>s+5</code>的结果为int类型，int类型赋值给short类型，编译报错。<br>错误信息为如下：<br><code>Error:(23, 15) java: incompatible types: possible lossy conversion from int to short</code></p>\n<p>关于<code>自动类型转换</code>，也称为<code>隐式类型转换</code><br>当把<code>小数据范围类型的数值或变量</code>赋值给另一个<code>大数据范围类型变量</code>时，系统可以自动完成类型转换。<br>boolean类型是不可以转换为其他数据类型。</p>\n<p><code>强制类型转换</code>，也称为<code>显示类型转换</code><br>当把<code>大范围类型的数值或变量</code>赋值给另一个<code>小范围类型变量</code>时，此时系统不能自动完成转换，需要加上强制转换符，但这样的操作可能在成数据精度的降低或溢出，使用时需要格外注意。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a += <span class=\"number\">5</span>;</span><br><span class=\"line\">System.out.println(a); <span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">30</span>;</span><br><span class=\"line\">s = s + <span class=\"number\">5</span>;<span class=\"comment\">//编译报错</span></span><br><span class=\"line\"><span class=\"comment\">//Error:(23, 15) java: incompatible types: possible lossy conversion from int to short</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">30</span>;</span><br><span class=\"line\">s += <span class=\"number\">5</span>;<span class=\"comment\">//等价于 s = short(s+5),该表达式自带隐式类型转换</span></span><br></pre></td></tr></table></figure>\n<p>上述代码中，变量s为short类型，<code>s+5</code>的结果为int类型，int类型赋值给short类型，编译报错。<br>错误信息为如下：<br><code>Error:(23, 15) java: incompatible types: possible lossy conversion from int to short</code></p>\n<p>关于<code>自动类型转换</code>，也称为<code>隐式类型转换</code><br>当把<code>小数据范围类型的数值或变量</code>赋值给另一个<code>大数据范围类型变量</code>时，系统可以自动完成类型转换。<br>boolean类型是不可以转换为其他数据类型。</p>\n<p><code>强制类型转换</code>，也称为<code>显示类型转换</code><br>当把<code>大范围类型的数值或变量</code>赋值给另一个<code>小范围类型变量</code>时，此时系统不能自动完成转换，需要加上强制转换符，但这样的操作可能在成数据精度的降低或溢出，使用时需要格外注意。</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Oct 24 2018 15:38:47 GMT+0800 (China Standard Time)","title":"Java中的+=赋值运算","path":"2018/10/24/Java中的-赋值运算/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-24T07:22:03.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java中的单例模式","date":"2018-10-30T04:00:22.000Z","_content":"#### 1. 饿汉模式\n```Java\npublic class SingletonDemo {\n    public static void main(String[] args) {\n        ArrayUtil.getInstance().sort(null);\n    }\n\n}\n\nclass ArrayUtil {\n    //1. 在该类中，实例化一个实例\n    private static final ArrayUtil instance = new ArrayUtil();\n\n    //2. 私有化自身的构造器，防止外界通过构造器new对象\n    private ArrayUtil() {\n    }\n\n    //3. 对外开放一个静态公共方法，用于获取对象\n    public static ArrayUtil getInstance(){\n        return instance;\n    }\n\n    public void sort(int[] array) {\n        //此处编写排序代码\n        System.out.println(\"I'm sorting \" + array);\n    }\n\n\n}\n```\n","source":"_posts/Java中的单例模式.md","raw":"---\ntitle: Java中的单例模式\ndate: 2018-10-30 12:00:22\ntags:\n  - Java\ncategories:\n  - Java\n---\n#### 1. 饿汉模式\n```Java\npublic class SingletonDemo {\n    public static void main(String[] args) {\n        ArrayUtil.getInstance().sort(null);\n    }\n\n}\n\nclass ArrayUtil {\n    //1. 在该类中，实例化一个实例\n    private static final ArrayUtil instance = new ArrayUtil();\n\n    //2. 私有化自身的构造器，防止外界通过构造器new对象\n    private ArrayUtil() {\n    }\n\n    //3. 对外开放一个静态公共方法，用于获取对象\n    public static ArrayUtil getInstance(){\n        return instance;\n    }\n\n    public void sort(int[] array) {\n        //此处编写排序代码\n        System.out.println(\"I'm sorting \" + array);\n    }\n\n\n}\n```\n","slug":"Java中的单例模式","published":1,"updated":"2018-10-30T04:04:25.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x27001aexotmbrsar5s","content":"<h4 id=\"1-饿汉模式\"><a href=\"#1-饿汉模式\" class=\"headerlink\" title=\"1. 饿汉模式\"></a>1. 饿汉模式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayUtil.getInstance().sort(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 在该类中，实例化一个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ArrayUtil instance = <span class=\"keyword\">new</span> ArrayUtil();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 私有化自身的构造器，防止外界通过构造器new对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ArrayUtil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 对外开放一个静态公共方法，用于获取对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayUtil <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处编写排序代码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm sorting \"</span> + array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-饿汉模式\"><a href=\"#1-饿汉模式\" class=\"headerlink\" title=\"1. 饿汉模式\"></a>1. 饿汉模式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayUtil.getInstance().sort(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 在该类中，实例化一个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ArrayUtil instance = <span class=\"keyword\">new</span> ArrayUtil();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 私有化自身的构造器，防止外界通过构造器new对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ArrayUtil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 对外开放一个静态公共方法，用于获取对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayUtil <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处编写排序代码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm sorting \"</span> + array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Oct 30 2018 12:04:25 GMT+0800 (China Standard Time)","title":"Java中的单例模式","path":"2018/10/30/Java中的单例模式/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-30T04:00:22.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java中的代码块","date":"2018-10-30T01:24:49.000Z","_content":"\n\n> 什么是代码块：在类或者方法中，直接使用`{}`括起来的一段代码，表示一块带啊区域。\n\n代码在块中属于局部变量，只在自己所在的花括号区域内有效。\n根据代码块所定义的位置不同，代码块分为三种形式\n\n1. `局部代码块`：直接定义在`方法内部`的代码块。\n一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。\n\n2. `初始化代码块(构造代码块)`：直接定义在`类`中。\n每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。`PS`:`通过反编译，可以看到，初始化代码也作为构造器最初的语句。`一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。\n\n3. `静态代码块：使用static修饰的初始化代码块。`\n静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。`一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。`\n\n<!-- more -->\n```Java\nclass CodeBlockDemo{\n  {\n    System.out.println(\"初始化代码块\");\n  }\n  CodeBlockDemo(){\n    System.out.println(\"构造器。。。\");\n  }\n\n  static{\n    System.out.println(\"静态代码块\");\n  }\n\n  public static void main(String[] args){\n    System.out.println(\"进入main方法\");\n    //创建三个匿名对象\n    new CodeBlockDemo();\n    new CodeBlockDemo();\n    new CodeBlockDemo();\n  }\n\n}\n\n/*执行结果如下\n静态代码块\n进入main方法\n初始化代码块\n构造器。。。\n初始化代码块\n构造器。。。\n初始化代码块\n构造器。。。\n*/\n```\n一道Java面试题\n```Java\npublic class App {\n    private static App d = new App();\n    private SuperClass t = new SubClass(); //先确定依赖，由此开始作为入口\n\n    static{\n        System.out.println(4);\n    }\n\n    App(){\n        System.out.println(3);\n    }\n\n    public static void main(String[] args){\n        System.out.println(\"Hello\");\n    }\n\n}\n\nclass SuperClass{\n    SuperClass(){\n        System.out.println(\"构造SuperClass\");\n    }\n}\n\n\nclass SubClass extends SuperClass{\n    static {\n        System.out.println(1);\n    }\n\n    SubClass(){\n        //super();\n        System.out.println(2);\n    }\n}\n\n\n//执行结果\n1\n构造SuperClass\n2\n3\n4\nHello\n\n```\n\n`分析：`\n\n1. 首先在执行子类subclass构造器的时候先执行隐藏的`super();`来执行父类的构造器，也就是构造`SuperClass`在`2`之前打印.\n2. 为什么不先打印4而是先打印子类的1？原因是class App依赖于依赖于subclass，会优先编译subclass，也就是说会优先编译被依赖的优先存在的类。所以首先把subclass加载到虚拟机，因此首先打印1.`编译的时候首先确定依赖!!!`\n\n3. 非static字段的初始化都在构造器中执行，也就是说App类反编译后如下。可以看出，打印`1`后,在APP构造器中实例化subclass，此时，先打印父类构造器中的`构造SuperClass`,然后打印子类的`2`。紧接着继续执行APP构造器的代码块，打印app构造器中的`3`。\n\n```Java\npublic class App {\n    private static App d = new App();\n    private SuperClass t = null; //先确定依赖，由此开始作为入口\n\n    static{\n        System.out.println(4);\n    }\n\n    App(){\n        t = new SubClass(); //非static字段的初始化都在构造器中执行\n        System.out.println(3);\n    }\n\n    public static void main(String[] args){\n        System.out.println(\"Hello\");\n    }\n\n}\n```\n\n4. 以上依赖关系确认完毕，然后开始将App加载进虚拟机，执行由于静态代码块优先于main，静态代码块执行，打印4，最后执行main方法，打印hello.\n","source":"_posts/Java中的代码块.md","raw":"---\ntitle: Java中的代码块\ndate: 2018-10-30 09:24:49\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n\n> 什么是代码块：在类或者方法中，直接使用`{}`括起来的一段代码，表示一块带啊区域。\n\n代码在块中属于局部变量，只在自己所在的花括号区域内有效。\n根据代码块所定义的位置不同，代码块分为三种形式\n\n1. `局部代码块`：直接定义在`方法内部`的代码块。\n一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。\n\n2. `初始化代码块(构造代码块)`：直接定义在`类`中。\n每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。`PS`:`通过反编译，可以看到，初始化代码也作为构造器最初的语句。`一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。\n\n3. `静态代码块：使用static修饰的初始化代码块。`\n静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。`一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。`\n\n<!-- more -->\n```Java\nclass CodeBlockDemo{\n  {\n    System.out.println(\"初始化代码块\");\n  }\n  CodeBlockDemo(){\n    System.out.println(\"构造器。。。\");\n  }\n\n  static{\n    System.out.println(\"静态代码块\");\n  }\n\n  public static void main(String[] args){\n    System.out.println(\"进入main方法\");\n    //创建三个匿名对象\n    new CodeBlockDemo();\n    new CodeBlockDemo();\n    new CodeBlockDemo();\n  }\n\n}\n\n/*执行结果如下\n静态代码块\n进入main方法\n初始化代码块\n构造器。。。\n初始化代码块\n构造器。。。\n初始化代码块\n构造器。。。\n*/\n```\n一道Java面试题\n```Java\npublic class App {\n    private static App d = new App();\n    private SuperClass t = new SubClass(); //先确定依赖，由此开始作为入口\n\n    static{\n        System.out.println(4);\n    }\n\n    App(){\n        System.out.println(3);\n    }\n\n    public static void main(String[] args){\n        System.out.println(\"Hello\");\n    }\n\n}\n\nclass SuperClass{\n    SuperClass(){\n        System.out.println(\"构造SuperClass\");\n    }\n}\n\n\nclass SubClass extends SuperClass{\n    static {\n        System.out.println(1);\n    }\n\n    SubClass(){\n        //super();\n        System.out.println(2);\n    }\n}\n\n\n//执行结果\n1\n构造SuperClass\n2\n3\n4\nHello\n\n```\n\n`分析：`\n\n1. 首先在执行子类subclass构造器的时候先执行隐藏的`super();`来执行父类的构造器，也就是构造`SuperClass`在`2`之前打印.\n2. 为什么不先打印4而是先打印子类的1？原因是class App依赖于依赖于subclass，会优先编译subclass，也就是说会优先编译被依赖的优先存在的类。所以首先把subclass加载到虚拟机，因此首先打印1.`编译的时候首先确定依赖!!!`\n\n3. 非static字段的初始化都在构造器中执行，也就是说App类反编译后如下。可以看出，打印`1`后,在APP构造器中实例化subclass，此时，先打印父类构造器中的`构造SuperClass`,然后打印子类的`2`。紧接着继续执行APP构造器的代码块，打印app构造器中的`3`。\n\n```Java\npublic class App {\n    private static App d = new App();\n    private SuperClass t = null; //先确定依赖，由此开始作为入口\n\n    static{\n        System.out.println(4);\n    }\n\n    App(){\n        t = new SubClass(); //非static字段的初始化都在构造器中执行\n        System.out.println(3);\n    }\n\n    public static void main(String[] args){\n        System.out.println(\"Hello\");\n    }\n\n}\n```\n\n4. 以上依赖关系确认完毕，然后开始将App加载进虚拟机，执行由于静态代码块优先于main，静态代码块执行，打印4，最后执行main方法，打印hello.\n","slug":"Java中的代码块","published":1,"updated":"2018-10-30T02:43:22.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2c001eexott388q0xy","content":"<blockquote>\n<p>什么是代码块：在类或者方法中，直接使用<code>{}</code>括起来的一段代码，表示一块带啊区域。</p>\n</blockquote>\n<p>代码在块中属于局部变量，只在自己所在的花括号区域内有效。<br>根据代码块所定义的位置不同，代码块分为三种形式</p>\n<ol>\n<li><p><code>局部代码块</code>：直接定义在<code>方法内部</code>的代码块。<br>一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。</p>\n</li>\n<li><p><code>初始化代码块(构造代码块)</code>：直接定义在<code>类</code>中。<br>每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。<code>PS</code>:<code>通过反编译，可以看到，初始化代码也作为构造器最初的语句。</code>一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。</p>\n</li>\n<li><p><code>静态代码块：使用static修饰的初始化代码块。</code><br>静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。<code>一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。</code></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeBlockDemo</span></span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"初始化代码块\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  CodeBlockDemo()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"构造器。。。\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"静态代码块\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进入main方法\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建三个匿名对象</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*执行结果如下</span></span><br><span class=\"line\"><span class=\"comment\">静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">进入main方法</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>一道Java面试题<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App d = <span class=\"keyword\">new</span> App();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SuperClass t = <span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//先确定依赖，由此开始作为入口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    App()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">    SuperClass()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"构造SuperClass\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SubClass()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//super();</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">构造SuperClass</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">Hello</span><br></pre></td></tr></table></figure></p>\n<p><code>分析：</code></p>\n<ol>\n<li>首先在执行子类subclass构造器的时候先执行隐藏的<code>super();</code>来执行父类的构造器，也就是构造<code>SuperClass</code>在<code>2</code>之前打印.</li>\n<li><p>为什么不先打印4而是先打印子类的1？原因是class App依赖于依赖于subclass，会优先编译subclass，也就是说会优先编译被依赖的优先存在的类。所以首先把subclass加载到虚拟机，因此首先打印1.<code>编译的时候首先确定依赖!!!</code></p>\n</li>\n<li><p>非static字段的初始化都在构造器中执行，也就是说App类反编译后如下。可以看出，打印<code>1</code>后,在APP构造器中实例化subclass，此时，先打印父类构造器中的<code>构造SuperClass</code>,然后打印子类的<code>2</code>。紧接着继续执行APP构造器的代码块，打印app构造器中的<code>3</code>。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App d = <span class=\"keyword\">new</span> App();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SuperClass t = <span class=\"keyword\">null</span>; <span class=\"comment\">//先确定依赖，由此开始作为入口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    App()&#123;</span><br><span class=\"line\">        t = <span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//非static字段的初始化都在构造器中执行</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>以上依赖关系确认完毕，然后开始将App加载进虚拟机，执行由于静态代码块优先于main，静态代码块执行，打印4，最后执行main方法，打印hello.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>什么是代码块：在类或者方法中，直接使用<code>{}</code>括起来的一段代码，表示一块带啊区域。</p>\n</blockquote>\n<p>代码在块中属于局部变量，只在自己所在的花括号区域内有效。<br>根据代码块所定义的位置不同，代码块分为三种形式</p>\n<ol>\n<li><p><code>局部代码块</code>：直接定义在<code>方法内部</code>的代码块。<br>一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。</p>\n</li>\n<li><p><code>初始化代码块(构造代码块)</code>：直接定义在<code>类</code>中。<br>每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。<code>PS</code>:<code>通过反编译，可以看到，初始化代码也作为构造器最初的语句。</code>一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。</p>\n</li>\n<li><p><code>静态代码块：使用static修饰的初始化代码块。</code><br>静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。<code>一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。</code></p>\n</li>\n</ol>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeBlockDemo</span></span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"初始化代码块\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  CodeBlockDemo()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"构造器。。。\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"静态代码块\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进入main方法\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建三个匿名对象</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CodeBlockDemo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*执行结果如下</span></span><br><span class=\"line\"><span class=\"comment\">静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">进入main方法</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">初始化代码块</span></span><br><span class=\"line\"><span class=\"comment\">构造器。。。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>一道Java面试题<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App d = <span class=\"keyword\">new</span> App();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SuperClass t = <span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//先确定依赖，由此开始作为入口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    App()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">    SuperClass()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"构造SuperClass\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SubClass()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//super();</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">构造SuperClass</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">Hello</span><br></pre></td></tr></table></figure></p>\n<p><code>分析：</code></p>\n<ol>\n<li>首先在执行子类subclass构造器的时候先执行隐藏的<code>super();</code>来执行父类的构造器，也就是构造<code>SuperClass</code>在<code>2</code>之前打印.</li>\n<li><p>为什么不先打印4而是先打印子类的1？原因是class App依赖于依赖于subclass，会优先编译subclass，也就是说会优先编译被依赖的优先存在的类。所以首先把subclass加载到虚拟机，因此首先打印1.<code>编译的时候首先确定依赖!!!</code></p>\n</li>\n<li><p>非static字段的初始化都在构造器中执行，也就是说App类反编译后如下。可以看出，打印<code>1</code>后,在APP构造器中实例化subclass，此时，先打印父类构造器中的<code>构造SuperClass</code>,然后打印子类的<code>2</code>。紧接着继续执行APP构造器的代码块，打印app构造器中的<code>3</code>。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App d = <span class=\"keyword\">new</span> App();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SuperClass t = <span class=\"keyword\">null</span>; <span class=\"comment\">//先确定依赖，由此开始作为入口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    App()&#123;</span><br><span class=\"line\">        t = <span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//非static字段的初始化都在构造器中执行</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>以上依赖关系确认完毕，然后开始将App加载进虚拟机，执行由于静态代码块优先于main，静态代码块执行，打印4，最后执行main方法，打印hello.</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Oct 30 2018 10:43:22 GMT+0800 (China Standard Time)","title":"Java中的代码块","path":"2018/10/30/Java中的代码块/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>什么是代码块：在类或者方法中，直接使用<code>{}</code>括起来的一段代码，表示一块带啊区域。</p>\n</blockquote>\n<p>代码在块中属于局部变量，只在自己所在的花括号区域内有效。<br>根据代码块所定义的位置不同，代码块分为三种形式</p>\n<ol>\n<li><p><code>局部代码块</code>：直接定义在<code>方法内部</code>的代码块。<br>一般的，不会直接使用局部代码块，只不过会结合if、while等关键字，表示一块代码区域。</p>\n</li>\n<li><p><code>初始化代码块(构造代码块)</code>：直接定义在<code>类</code>中。<br>每次创建对象的时候都会执行初始化代码块：每次创建对象的时候都会调用构造器，在调用构造器之前，会先执行本类中的初始化代码块。<code>PS</code>:<code>通过反编译，可以看到，初始化代码也作为构造器最初的语句。</code>一般不使用这种用法，因为不够优雅美观。即使要初始化操作，一般在构造器中进行初始化即可。或者专门定义一个方法做初始化操作，方法哦构造器中进行调用。</p>\n</li>\n<li><p><code>静态代码块：使用static修饰的初始化代码块。</code><br>静态代码块在主方法执行之前进行调用，而且只会执行一次。main方法是程序的入口，静态代码块由于main方法执行。静态成员随着字节码的加载也加载进JVM,此时main还没执行，因为方法需要JVM调用，先把字节码加载进JVM，然后JVM再调用main方法。<code>一般的，我们使用静态代码块来做初始化操作，加载资源，加载配置文件等。</code></p>\n</li>\n</ol>","date":"2018-10-30T01:24:49.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java内部类","date":"2018-11-05T04:59:24.000Z","_content":"\n类中的定义成员有三种，分别是\n1. 字段\n2. 方法\n3. 内部类\n\n内部类：定义在类结构中的另一个类\n\n`为什么要使用内部类？`\n1. 增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类\n2. 内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。\n3. 内部类可以直接访问外部类的成员\n\n<!-- more -->\n内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:\n1. 实例内部类\n2. 静态内部类\n3. 局部内部类\n4. 匿名内部类（仅适合于一次使用的类）\n\n\n\n\n|        | 实例内部类      |静态内部类 |局部内部类     |\n| ------------| -----------|---------- |----------|\n| 主要特征     | 内部类的实例引用特定的外部类的实例  |内部类的实例不与外部类的任何实例关联 |可见范围是所在的方法|\n| 可用修饰符   |访问控制修饰符，abstract，final| 访问控制修饰符，static，abstract，final| abstract，final|\n| 可以访问外部类的哪些成员 |可以直接访问外部类的所有成员|只能直接访问外部类的静态成员 | 可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数 |\n| 拥有成员类型    | 只能拥有实例成员|可以拥有静态成员和实例成员 | 只能拥有实例成员|\n| 外部类如何访问内部类的成员    | 必须通过内部类的实例来访问|对于静态成员，可以通过内部类的完整类名来访问| 必须通过内部类的实例来访问 |\n","source":"_posts/Java内部类.md","raw":"---\ntitle: Java内部类\ndate: 2018-11-05 12:59:24\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n类中的定义成员有三种，分别是\n1. 字段\n2. 方法\n3. 内部类\n\n内部类：定义在类结构中的另一个类\n\n`为什么要使用内部类？`\n1. 增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类\n2. 内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。\n3. 内部类可以直接访问外部类的成员\n\n<!-- more -->\n内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:\n1. 实例内部类\n2. 静态内部类\n3. 局部内部类\n4. 匿名内部类（仅适合于一次使用的类）\n\n\n\n\n|        | 实例内部类      |静态内部类 |局部内部类     |\n| ------------| -----------|---------- |----------|\n| 主要特征     | 内部类的实例引用特定的外部类的实例  |内部类的实例不与外部类的任何实例关联 |可见范围是所在的方法|\n| 可用修饰符   |访问控制修饰符，abstract，final| 访问控制修饰符，static，abstract，final| abstract，final|\n| 可以访问外部类的哪些成员 |可以直接访问外部类的所有成员|只能直接访问外部类的静态成员 | 可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数 |\n| 拥有成员类型    | 只能拥有实例成员|可以拥有静态成员和实例成员 | 只能拥有实例成员|\n| 外部类如何访问内部类的成员    | 必须通过内部类的实例来访问|对于静态成员，可以通过内部类的完整类名来访问| 必须通过内部类的实例来访问 |\n","slug":"Java内部类","published":1,"updated":"2018-11-05T05:23:13.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2f001gexoto0x8s6tc","content":"<p>类中的定义成员有三种，分别是</p>\n<ol>\n<li>字段</li>\n<li>方法</li>\n<li>内部类</li>\n</ol>\n<p>内部类：定义在类结构中的另一个类</p>\n<p><code>为什么要使用内部类？</code></p>\n<ol>\n<li>增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类</li>\n<li>内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。</li>\n<li>内部类可以直接访问外部类的成员</li>\n</ol>\n<a id=\"more\"></a>\n<p>内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:</p>\n<ol>\n<li>实例内部类</li>\n<li>静态内部类</li>\n<li>局部内部类</li>\n<li>匿名内部类（仅适合于一次使用的类）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>实例内部类</th>\n<th>静态内部类</th>\n<th>局部内部类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主要特征</td>\n<td>内部类的实例引用特定的外部类的实例</td>\n<td>内部类的实例不与外部类的任何实例关联</td>\n<td>可见范围是所在的方法</td>\n</tr>\n<tr>\n<td>可用修饰符</td>\n<td>访问控制修饰符，abstract，final</td>\n<td>访问控制修饰符，static，abstract，final</td>\n<td>abstract，final</td>\n</tr>\n<tr>\n<td>可以访问外部类的哪些成员</td>\n<td>可以直接访问外部类的所有成员</td>\n<td>只能直接访问外部类的静态成员</td>\n<td>可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数</td>\n</tr>\n<tr>\n<td>拥有成员类型</td>\n<td>只能拥有实例成员</td>\n<td>可以拥有静态成员和实例成员</td>\n<td>只能拥有实例成员</td>\n</tr>\n<tr>\n<td>外部类如何访问内部类的成员</td>\n<td>必须通过内部类的实例来访问</td>\n<td>对于静态成员，可以通过内部类的完整类名来访问</td>\n<td>必须通过内部类的实例来访问</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>类中的定义成员有三种，分别是</p>\n<ol>\n<li>字段</li>\n<li>方法</li>\n<li>内部类</li>\n</ol>\n<p>内部类：定义在类结构中的另一个类</p>\n<p><code>为什么要使用内部类？</code></p>\n<ol>\n<li>增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类</li>\n<li>内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。</li>\n<li>内部类可以直接访问外部类的成员</li>\n</ol>","more":"<p>内部类根据使用不同的修饰符或者存在的位置不同，可以分为四种:</p>\n<ol>\n<li>实例内部类</li>\n<li>静态内部类</li>\n<li>局部内部类</li>\n<li>匿名内部类（仅适合于一次使用的类）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>实例内部类</th>\n<th>静态内部类</th>\n<th>局部内部类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主要特征</td>\n<td>内部类的实例引用特定的外部类的实例</td>\n<td>内部类的实例不与外部类的任何实例关联</td>\n<td>可见范围是所在的方法</td>\n</tr>\n<tr>\n<td>可用修饰符</td>\n<td>访问控制修饰符，abstract，final</td>\n<td>访问控制修饰符，static，abstract，final</td>\n<td>abstract，final</td>\n</tr>\n<tr>\n<td>可以访问外部类的哪些成员</td>\n<td>可以直接访问外部类的所有成员</td>\n<td>只能直接访问外部类的静态成员</td>\n<td>可以直接访问外部类的所有成员，并且能访问所在方法的final类型的变量和参数</td>\n</tr>\n<tr>\n<td>拥有成员类型</td>\n<td>只能拥有实例成员</td>\n<td>可以拥有静态成员和实例成员</td>\n<td>只能拥有实例成员</td>\n</tr>\n<tr>\n<td>外部类如何访问内部类的成员</td>\n<td>必须通过内部类的实例来访问</td>\n<td>对于静态成员，可以通过内部类的完整类名来访问</td>\n<td>必须通过内部类的实例来访问</td>\n</tr>\n</tbody>\n</table>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Nov 05 2018 13:23:13 GMT+0800 (China Standard Time)","title":"Java内部类","path":"2018/11/05/Java内部类/","eyeCatchImage":null,"excerpt":"<p>类中的定义成员有三种，分别是</p>\n<ol>\n<li>字段</li>\n<li>方法</li>\n<li>内部类</li>\n</ol>\n<p>内部类：定义在类结构中的另一个类</p>\n<p><code>为什么要使用内部类？</code></p>\n<ol>\n<li>增强封装，把内部类隐藏在外部类之内，不允许其他类访问该类</li>\n<li>内部类能提高代码的可读性和可维护性，把小型类嵌入到外部类中结构上代码会更清晰。</li>\n<li>内部类可以直接访问外部类的成员</li>\n</ol>","date":"2018-11-05T04:59:24.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java之Object根类","date":"2018-10-29T03:48:41.000Z","_content":"\nObject本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。\n\n`引用数据类型：类/接口/数组`，`引用类型又称为对象类`，`所谓的数组变量名称应该指代数组对象`。\nObject类常用方法：\n\n1. `protected void finalize()`:当垃圾回收器确定不存在对该对象的更多引用时，由对象回收期调用此方法。垃圾回收器在回收某一个对象之前会调用该方法，做扫尾操作。\n\n2. `Class getClass`:返回当前对象的真实类型。\n\n3. `int hashCode()`:返回该对象的哈希值，hashCode决定了对象在哈希表中的存储位置，不同对象的hashCode是不一样的。\n\n4. `boolean equals(Object obj)`: 拿当前对象(this)和参数obj比较。在Object类中的equals方法，本身和'=='符号相同，都是比较的内存地址。官方建议：每个类都应该赋写equals方法，不要比较内存地址，而是比较我们关心的数据。\n\n5. `String toString()`:表示把一个对象转换为字符串表示。在调用打印时，其实打印的就是对象的toString方法。`System.out.println(obj);`等价于`System.out.println(obj.toString);`(决堤可以查看Java源代码)。默认情况下打印对象，打印的是对象的十六进制hashCode,但我们更关心对象中的真实存储数据。官方建议：每个类最好赋写toString方法，返回我们关心的数据。\n\n\n![Screen Shot 2018-10-29 at 12.08.42.png](https://upload-images.jianshu.io/upload_images/2952111-d5a996ebf97c420b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Java之Object根类.md","raw":"---\ntitle: Java之Object根类\ndate: 2018-10-29 11:48:41\ntags:\n  - Java\ncategories:\n  - Java\n---\n\nObject本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。\n\n`引用数据类型：类/接口/数组`，`引用类型又称为对象类`，`所谓的数组变量名称应该指代数组对象`。\nObject类常用方法：\n\n1. `protected void finalize()`:当垃圾回收器确定不存在对该对象的更多引用时，由对象回收期调用此方法。垃圾回收器在回收某一个对象之前会调用该方法，做扫尾操作。\n\n2. `Class getClass`:返回当前对象的真实类型。\n\n3. `int hashCode()`:返回该对象的哈希值，hashCode决定了对象在哈希表中的存储位置，不同对象的hashCode是不一样的。\n\n4. `boolean equals(Object obj)`: 拿当前对象(this)和参数obj比较。在Object类中的equals方法，本身和'=='符号相同，都是比较的内存地址。官方建议：每个类都应该赋写equals方法，不要比较内存地址，而是比较我们关心的数据。\n\n5. `String toString()`:表示把一个对象转换为字符串表示。在调用打印时，其实打印的就是对象的toString方法。`System.out.println(obj);`等价于`System.out.println(obj.toString);`(决堤可以查看Java源代码)。默认情况下打印对象，打印的是对象的十六进制hashCode,但我们更关心对象中的真实存储数据。官方建议：每个类最好赋写toString方法，返回我们关心的数据。\n\n\n![Screen Shot 2018-10-29 at 12.08.42.png](https://upload-images.jianshu.io/upload_images/2952111-d5a996ebf97c420b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Java之Object根类","published":1,"updated":"2018-10-29T05:11:33.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2o001lexotlejp6fzx","content":"<p>Object本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。</p>\n<p><code>引用数据类型：类/接口/数组</code>，<code>引用类型又称为对象类</code>，<code>所谓的数组变量名称应该指代数组对象</code>。<br>Object类常用方法：</p>\n<ol>\n<li><p><code>protected void finalize()</code>:当垃圾回收器确定不存在对该对象的更多引用时，由对象回收期调用此方法。垃圾回收器在回收某一个对象之前会调用该方法，做扫尾操作。</p>\n</li>\n<li><p><code>Class getClass</code>:返回当前对象的真实类型。</p>\n</li>\n<li><p><code>int hashCode()</code>:返回该对象的哈希值，hashCode决定了对象在哈希表中的存储位置，不同对象的hashCode是不一样的。</p>\n</li>\n<li><p><code>boolean equals(Object obj)</code>: 拿当前对象(this)和参数obj比较。在Object类中的equals方法，本身和’==’符号相同，都是比较的内存地址。官方建议：每个类都应该赋写equals方法，不要比较内存地址，而是比较我们关心的数据。</p>\n</li>\n<li><p><code>String toString()</code>:表示把一个对象转换为字符串表示。在调用打印时，其实打印的就是对象的toString方法。<code>System.out.println(obj);</code>等价于<code>System.out.println(obj.toString);</code>(决堤可以查看Java源代码)。默认情况下打印对象，打印的是对象的十六进制hashCode,但我们更关心对象中的真实存储数据。官方建议：每个类最好赋写toString方法，返回我们关心的数据。</p>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d5a996ebf97c420b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-29 at 12.08.42.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Object本身就是指对象的意思。开发时发现对象具有一些共通的行为，因此抽象出一个类：Object，来表示对象类，其他都会继承于Object类，也就是Object中的方法。</p>\n<p><code>引用数据类型：类/接口/数组</code>，<code>引用类型又称为对象类</code>，<code>所谓的数组变量名称应该指代数组对象</code>。<br>Object类常用方法：</p>\n<ol>\n<li><p><code>protected void finalize()</code>:当垃圾回收器确定不存在对该对象的更多引用时，由对象回收期调用此方法。垃圾回收器在回收某一个对象之前会调用该方法，做扫尾操作。</p>\n</li>\n<li><p><code>Class getClass</code>:返回当前对象的真实类型。</p>\n</li>\n<li><p><code>int hashCode()</code>:返回该对象的哈希值，hashCode决定了对象在哈希表中的存储位置，不同对象的hashCode是不一样的。</p>\n</li>\n<li><p><code>boolean equals(Object obj)</code>: 拿当前对象(this)和参数obj比较。在Object类中的equals方法，本身和’==’符号相同，都是比较的内存地址。官方建议：每个类都应该赋写equals方法，不要比较内存地址，而是比较我们关心的数据。</p>\n</li>\n<li><p><code>String toString()</code>:表示把一个对象转换为字符串表示。在调用打印时，其实打印的就是对象的toString方法。<code>System.out.println(obj);</code>等价于<code>System.out.println(obj.toString);</code>(决堤可以查看Java源代码)。默认情况下打印对象，打印的是对象的十六进制hashCode,但我们更关心对象中的真实存储数据。官方建议：每个类最好赋写toString方法，返回我们关心的数据。</p>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d5a996ebf97c420b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-29 at 12.08.42.png\"></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Oct 29 2018 13:11:33 GMT+0800 (China Standard Time)","title":"Java之Object根类","path":"2018/10/29/Java之Object根类/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-29T03:48:41.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java之super和this","date":"2018-10-29T01:31:49.000Z","_content":"\nthis: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。\nsuper: 当前对象的父类方法或构造器。使用在继承关系中。\n\n#### super\n1. `当new一个子类对象的时候，会先创建一个父类对象`。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。\n\n2. 如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。\n\n3. 如果父类没有提供无参数的构造器，则此时子类必须显式的通过`super`语句去掉用父类带参数的构造器。\n\n4. 子类构建的所有的行为建立在第一条规则基础之上。\n\n\n<!-- more -->\n```Java\nclass Animal {\n    private String name;\n    private int    age;\n    Animal(String name, int age){\n        this.name = name;\n        this.age = age;\n        System.out.println(\"animal constructor\");\n    }\n    Animal(String color){\n        System.out.println(\"this is a \" + color +\" color\");\n    }\n    public void say(){\n        System.out.println(\"Animals Say sth...\");\n    }\n\n}\n\nclass Fish extends Animal\n{\n    private String color;\n    Fish(){\n       //构造器中的第一句必须为super，如果不写，则默认调用super()\n       super(\"RED\"); //子类没有提供无参数的构造器，必须显示super滴啊用，否则会编译失败\n       System.out.println(\"Fish Constructor\");\n    }\n}\n```\n一个简单的示意图如下：\n![Screen Shot 2018-10-28 at 22.12.48.png](https://upload-images.jianshu.io/upload_images/2952111-2db47a7c0f8a1ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### this\n\n##### 存在于位置\n1. 在构造器中，表示当前创建的对象\n2. 在方法中，哪一个对象调用this所在的方法，那么此时this就表示哪一个对象。\n\n![Screen Shot 2018-10-28 at 16.28.10.png](https://upload-images.jianshu.io/upload_images/2952111-bf1b724c2da63d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### this的使用\n1. 解决成员变量的参数（局部变量）之间的二义性，必须使用this区分\n2. 同类中实例方法互相调用时可以省略this关键字，但是不建议省略\n3. 将this作为参数传递给另外一个方法\n4. 将this作为方法的返回值（链式方法编程）\n5. 构造器函数的互相调用，this([参数])必须写在构造器内的第一行，与super类似。\n6. this、super不能static一起使用。原因是当字节码被加载进jvm时，static成员已经存在了，但是此时对象还没有被创建，没有对象，也就没有this。\n\n```Java\nUser(String name){\n  this.name = name;\n}\nUser(String name, int age){\n  this(name); //表示在调用参数为string类型的构造器\n  this.age = age;\n}\n\n//上述调用方式为多参数构造器调用少参数构造器，一般工程经验为少参数构造器调用多参数构造器\n//对于多余的参数，使用默认值赋值即可，如下\nUser(String name, int age){\n  this.name = name;\n  this.age = age;\n}\n\nUser(String name){\n  this(name, 0);//此处对int age赋值为0即可\n}\n\n```\n\n\n![Screen Shot 2018-10-28 at 16.41.16.png](https://upload-images.jianshu.io/upload_images/2952111-955c8e05df6fd8ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-10-28 at 16.58.54.png](https://upload-images.jianshu.io/upload_images/2952111-1d10520f4fc5a369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n是\n","source":"_posts/Java之super和this.md","raw":"---\ntitle: Java之super和this\ndate: 2018-10-29 09:31:49\ntags:\n  - Java\ncategories:\n  - Java\n---\n\nthis: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。\nsuper: 当前对象的父类方法或构造器。使用在继承关系中。\n\n#### super\n1. `当new一个子类对象的时候，会先创建一个父类对象`。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。\n\n2. 如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。\n\n3. 如果父类没有提供无参数的构造器，则此时子类必须显式的通过`super`语句去掉用父类带参数的构造器。\n\n4. 子类构建的所有的行为建立在第一条规则基础之上。\n\n\n<!-- more -->\n```Java\nclass Animal {\n    private String name;\n    private int    age;\n    Animal(String name, int age){\n        this.name = name;\n        this.age = age;\n        System.out.println(\"animal constructor\");\n    }\n    Animal(String color){\n        System.out.println(\"this is a \" + color +\" color\");\n    }\n    public void say(){\n        System.out.println(\"Animals Say sth...\");\n    }\n\n}\n\nclass Fish extends Animal\n{\n    private String color;\n    Fish(){\n       //构造器中的第一句必须为super，如果不写，则默认调用super()\n       super(\"RED\"); //子类没有提供无参数的构造器，必须显示super滴啊用，否则会编译失败\n       System.out.println(\"Fish Constructor\");\n    }\n}\n```\n一个简单的示意图如下：\n![Screen Shot 2018-10-28 at 22.12.48.png](https://upload-images.jianshu.io/upload_images/2952111-2db47a7c0f8a1ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### this\n\n##### 存在于位置\n1. 在构造器中，表示当前创建的对象\n2. 在方法中，哪一个对象调用this所在的方法，那么此时this就表示哪一个对象。\n\n![Screen Shot 2018-10-28 at 16.28.10.png](https://upload-images.jianshu.io/upload_images/2952111-bf1b724c2da63d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### this的使用\n1. 解决成员变量的参数（局部变量）之间的二义性，必须使用this区分\n2. 同类中实例方法互相调用时可以省略this关键字，但是不建议省略\n3. 将this作为参数传递给另外一个方法\n4. 将this作为方法的返回值（链式方法编程）\n5. 构造器函数的互相调用，this([参数])必须写在构造器内的第一行，与super类似。\n6. this、super不能static一起使用。原因是当字节码被加载进jvm时，static成员已经存在了，但是此时对象还没有被创建，没有对象，也就没有this。\n\n```Java\nUser(String name){\n  this.name = name;\n}\nUser(String name, int age){\n  this(name); //表示在调用参数为string类型的构造器\n  this.age = age;\n}\n\n//上述调用方式为多参数构造器调用少参数构造器，一般工程经验为少参数构造器调用多参数构造器\n//对于多余的参数，使用默认值赋值即可，如下\nUser(String name, int age){\n  this.name = name;\n  this.age = age;\n}\n\nUser(String name){\n  this(name, 0);//此处对int age赋值为0即可\n}\n\n```\n\n\n![Screen Shot 2018-10-28 at 16.41.16.png](https://upload-images.jianshu.io/upload_images/2952111-955c8e05df6fd8ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screen Shot 2018-10-28 at 16.58.54.png](https://upload-images.jianshu.io/upload_images/2952111-1d10520f4fc5a369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n是\n","slug":"Java之super和this","published":1,"updated":"2018-10-29T03:06:58.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2r001mexot3oqnw4q1","content":"<p>this: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。<br>super: 当前对象的父类方法或构造器。使用在继承关系中。</p>\n<h4 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h4><ol>\n<li><p><code>当new一个子类对象的时候，会先创建一个父类对象</code>。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。</p>\n</li>\n<li><p>如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。</p>\n</li>\n<li><p>如果父类没有提供无参数的构造器，则此时子类必须显式的通过<code>super</code>语句去掉用父类带参数的构造器。</p>\n</li>\n<li><p>子类构建的所有的行为建立在第一条规则基础之上。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>    age;</span><br><span class=\"line\">    Animal(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"animal constructor\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Animal(String color)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is a \"</span> + color +<span class=\"string\">\" color\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Animals Say sth...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fish</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">    Fish()&#123;</span><br><span class=\"line\">       <span class=\"comment\">//构造器中的第一句必须为super，如果不写，则默认调用super()</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(<span class=\"string\">\"RED\"</span>); <span class=\"comment\">//子类没有提供无参数的构造器，必须显示super滴啊用，否则会编译失败</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Fish Constructor\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个简单的示意图如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-2db47a7c0f8a1ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 22.12.48.png\"></p>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><h5 id=\"存在于位置\"><a href=\"#存在于位置\" class=\"headerlink\" title=\"存在于位置\"></a>存在于位置</h5><ol>\n<li>在构造器中，表示当前创建的对象</li>\n<li>在方法中，哪一个对象调用this所在的方法，那么此时this就表示哪一个对象。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-bf1b724c2da63d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.28.10.png\"></p>\n<h5 id=\"this的使用\"><a href=\"#this的使用\" class=\"headerlink\" title=\"this的使用\"></a>this的使用</h5><ol>\n<li>解决成员变量的参数（局部变量）之间的二义性，必须使用this区分</li>\n<li>同类中实例方法互相调用时可以省略this关键字，但是不建议省略</li>\n<li>将this作为参数传递给另外一个方法</li>\n<li>将this作为方法的返回值（链式方法编程）</li>\n<li>构造器函数的互相调用，this([参数])必须写在构造器内的第一行，与super类似。</li>\n<li>this、super不能static一起使用。原因是当字节码被加载进jvm时，static成员已经存在了，但是此时对象还没有被创建，没有对象，也就没有this。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(String name)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>(name); <span class=\"comment\">//表示在调用参数为string类型的构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上述调用方式为多参数构造器调用少参数构造器，一般工程经验为少参数构造器调用多参数构造器</span></span><br><span class=\"line\"><span class=\"comment\">//对于多余的参数，使用默认值赋值即可，如下</span></span><br><span class=\"line\">User(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User(String name)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>(name, <span class=\"number\">0</span>);<span class=\"comment\">//此处对int age赋值为0即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-955c8e05df6fd8ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.41.16.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-1d10520f4fc5a369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.58.54.png\"></p>\n<p>是</p>\n","site":{"data":{}},"excerpt":"<p>this: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。<br>super: 当前对象的父类方法或构造器。使用在继承关系中。</p>\n<h4 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h4><ol>\n<li><p><code>当new一个子类对象的时候，会先创建一个父类对象</code>。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。</p>\n</li>\n<li><p>如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。</p>\n</li>\n<li><p>如果父类没有提供无参数的构造器，则此时子类必须显式的通过<code>super</code>语句去掉用父类带参数的构造器。</p>\n</li>\n<li><p>子类构建的所有的行为建立在第一条规则基础之上。</p>\n</li>\n</ol>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>    age;</span><br><span class=\"line\">    Animal(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"animal constructor\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Animal(String color)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is a \"</span> + color +<span class=\"string\">\" color\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Animals Say sth...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fish</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">    Fish()&#123;</span><br><span class=\"line\">       <span class=\"comment\">//构造器中的第一句必须为super，如果不写，则默认调用super()</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(<span class=\"string\">\"RED\"</span>); <span class=\"comment\">//子类没有提供无参数的构造器，必须显示super滴啊用，否则会编译失败</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Fish Constructor\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个简单的示意图如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-2db47a7c0f8a1ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 22.12.48.png\"></p>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><h5 id=\"存在于位置\"><a href=\"#存在于位置\" class=\"headerlink\" title=\"存在于位置\"></a>存在于位置</h5><ol>\n<li>在构造器中，表示当前创建的对象</li>\n<li>在方法中，哪一个对象调用this所在的方法，那么此时this就表示哪一个对象。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-bf1b724c2da63d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.28.10.png\"></p>\n<h5 id=\"this的使用\"><a href=\"#this的使用\" class=\"headerlink\" title=\"this的使用\"></a>this的使用</h5><ol>\n<li>解决成员变量的参数（局部变量）之间的二义性，必须使用this区分</li>\n<li>同类中实例方法互相调用时可以省略this关键字，但是不建议省略</li>\n<li>将this作为参数传递给另外一个方法</li>\n<li>将this作为方法的返回值（链式方法编程）</li>\n<li>构造器函数的互相调用，this([参数])必须写在构造器内的第一行，与super类似。</li>\n<li>this、super不能static一起使用。原因是当字节码被加载进jvm时，static成员已经存在了，但是此时对象还没有被创建，没有对象，也就没有this。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(String name)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>(name); <span class=\"comment\">//表示在调用参数为string类型的构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上述调用方式为多参数构造器调用少参数构造器，一般工程经验为少参数构造器调用多参数构造器</span></span><br><span class=\"line\"><span class=\"comment\">//对于多余的参数，使用默认值赋值即可，如下</span></span><br><span class=\"line\">User(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User(String name)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>(name, <span class=\"number\">0</span>);<span class=\"comment\">//此处对int age赋值为0即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-955c8e05df6fd8ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.41.16.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-1d10520f4fc5a369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-10-28 at 16.58.54.png\"></p>\n<p>是</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Oct 29 2018 11:06:58 GMT+0800 (China Standard Time)","title":"Java之super和this","path":"2018/10/29/Java之super和this/","eyeCatchImage":null,"excerpt":"<p>this: 当前的对象，哪一个对象调用this，this就代指哪一个对象。使用在某一个对象中。<br>super: 当前对象的父类方法或构造器。使用在继承关系中。</p>\n<h4 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h4><ol>\n<li><p><code>当new一个子类对象的时候，会先创建一个父类对象</code>。可以认为，在调用子类构造器之前，在子类构造器中会先调用父类的构造器，默认调用的是父类无参数的构造器。调用父类构造器后悔创建一个父类的对象。</p>\n</li>\n<li><p>如果父类不存在可以被子类访问的构造器，则不能存在子类，即子类不会被创建成功。</p>\n</li>\n<li><p>如果父类没有提供无参数的构造器，则此时子类必须显式的通过<code>super</code>语句去掉用父类带参数的构造器。</p>\n</li>\n<li><p>子类构建的所有的行为建立在第一条规则基础之上。</p>\n</li>\n</ol>","date":"2018-10-29T01:31:49.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java包装类中的缓存设计","date":"2018-10-30T07:13:26.000Z","_content":"包装类中的`缓存设计`([享元模式-FlyWeight](https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin))，本质就是缓存设计。\n\n`Byte/Short/Integer/Long`:缓存[-128, 127]区间的数据；\n`Character`:缓存[0,127]区间的数据.\n<!-- more -->\n首先来看一个有意思的面试题\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        //case 1\n        Integer i1 = new Integer(123);\n        Integer i2 = new Integer(123);\n        System.out.println(i1 == i2); //false\n\n        //case 2\n        Integer i3 = Integer.valueOf(123);\n        Integer i4 = Integer.valueOf(123);\n        System.out.println(i3 == i4); //true\n\n        //case 3\n        Integer i5 = 123; //自动装箱操作，底层编译后代码为Integer.valueOf(123);    和case2相同\n        Integer i6 = 123;\n        System.out.println(i5 == i6); // true\n\n        System.out.println(\">>>>>>>>>>>>>>>>>>>\");\n\n        //case 4\n        Integer ii1 = new Integer(250);\n        Integer ii2 = new Integer(250);\n        System.out.println(ii1 == ii2); //false\n\n        //case 5\n        Integer ii3 = Integer.valueOf(250); // 250不在缓存区间内，就得new新对象\n        Integer ii4 = Integer.valueOf(250);\n        System.out.println(ii3 == ii4); // false\n\n        // case 6\n        Integer ii5 = 250;\n        Integer ii6 = 250;\n        System.out.println(ii5 == ii6); // false\n    }\n}\n```\n\n查看一下integer源码,如下所示。可以看到Integer的缓存空间在[-128, 127]之间。\n当传入的数值在此区间内时，之间调用缓存内的数据。反之，重新`return new Integer(i);`在堆空间返回一个新整形对象。\n\n那么我们应该如何比较两个对象的值得大小呢？\n正确的方法是使用`equals`来比较，equals方法来自于Object根对象，按照官方的建议，在构造子类对象时需要复写父类中的equals方法，来比较我们关心的数据，而不是内存地址（`==`比较的是内存地址）。现将Integer中的equals拿出来检查一下复写情况\n\n`((Integer)obj).intValue()`拆箱操作，`value == ((Integer)obj).intValue();`使用基本的数据类型进行比较。\n\n```Java\n\npublic boolean equals(Object obj) {\n    if (obj instanceof Integer) {\n        return value == ((Integer)obj).intValue(); // 拆箱操作，比较基本数据类型\n    }\n    return false;\n}\n\npublic static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static { // 初始化操作\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n\n        private IntegerCache() {}\n    }\n```\n","source":"_posts/Java包装类中的缓存设计.md","raw":"---\ntitle: Java包装类中的缓存设计\ndate: 2018-10-30 15:13:26\ntags:\n  - Java\ncategories:\n  - Java\n---\n包装类中的`缓存设计`([享元模式-FlyWeight](https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin))，本质就是缓存设计。\n\n`Byte/Short/Integer/Long`:缓存[-128, 127]区间的数据；\n`Character`:缓存[0,127]区间的数据.\n<!-- more -->\n首先来看一个有意思的面试题\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        //case 1\n        Integer i1 = new Integer(123);\n        Integer i2 = new Integer(123);\n        System.out.println(i1 == i2); //false\n\n        //case 2\n        Integer i3 = Integer.valueOf(123);\n        Integer i4 = Integer.valueOf(123);\n        System.out.println(i3 == i4); //true\n\n        //case 3\n        Integer i5 = 123; //自动装箱操作，底层编译后代码为Integer.valueOf(123);    和case2相同\n        Integer i6 = 123;\n        System.out.println(i5 == i6); // true\n\n        System.out.println(\">>>>>>>>>>>>>>>>>>>\");\n\n        //case 4\n        Integer ii1 = new Integer(250);\n        Integer ii2 = new Integer(250);\n        System.out.println(ii1 == ii2); //false\n\n        //case 5\n        Integer ii3 = Integer.valueOf(250); // 250不在缓存区间内，就得new新对象\n        Integer ii4 = Integer.valueOf(250);\n        System.out.println(ii3 == ii4); // false\n\n        // case 6\n        Integer ii5 = 250;\n        Integer ii6 = 250;\n        System.out.println(ii5 == ii6); // false\n    }\n}\n```\n\n查看一下integer源码,如下所示。可以看到Integer的缓存空间在[-128, 127]之间。\n当传入的数值在此区间内时，之间调用缓存内的数据。反之，重新`return new Integer(i);`在堆空间返回一个新整形对象。\n\n那么我们应该如何比较两个对象的值得大小呢？\n正确的方法是使用`equals`来比较，equals方法来自于Object根对象，按照官方的建议，在构造子类对象时需要复写父类中的equals方法，来比较我们关心的数据，而不是内存地址（`==`比较的是内存地址）。现将Integer中的equals拿出来检查一下复写情况\n\n`((Integer)obj).intValue()`拆箱操作，`value == ((Integer)obj).intValue();`使用基本的数据类型进行比较。\n\n```Java\n\npublic boolean equals(Object obj) {\n    if (obj instanceof Integer) {\n        return value == ((Integer)obj).intValue(); // 拆箱操作，比较基本数据类型\n    }\n    return false;\n}\n\npublic static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static { // 初始化操作\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n\n        private IntegerCache() {}\n    }\n```\n","slug":"Java包装类中的缓存设计","published":1,"updated":"2018-10-30T07:50:02.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2u001qexotev9z3zd7","content":"<p>包装类中的<code>缓存设计</code>(<a href=\"https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin\" target=\"_blank\" rel=\"noopener\">享元模式-FlyWeight</a>)，本质就是缓存设计。</p>\n<p><code>Byte/Short/Integer/Long</code>:缓存[-128, 127]区间的数据；<br><code>Character</code>:缓存[0,127]区间的数据.<br><a id=\"more\"></a><br>首先来看一个有意思的面试题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//case 1</span></span><br><span class=\"line\">        Integer i1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\">        Integer i2 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(i1 == i2); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 2</span></span><br><span class=\"line\">        Integer i3 = Integer.valueOf(<span class=\"number\">123</span>);</span><br><span class=\"line\">        Integer i4 = Integer.valueOf(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(i3 == i4); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 3</span></span><br><span class=\"line\">        Integer i5 = <span class=\"number\">123</span>; <span class=\"comment\">//自动装箱操作，底层编译后代码为Integer.valueOf(123);    和case2相同</span></span><br><span class=\"line\">        Integer i6 = <span class=\"number\">123</span>;</span><br><span class=\"line\">        System.out.println(i5 == i6); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 4</span></span><br><span class=\"line\">        Integer ii1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">250</span>);</span><br><span class=\"line\">        Integer ii2 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">250</span>);</span><br><span class=\"line\">        System.out.println(ii1 == ii2); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 5</span></span><br><span class=\"line\">        Integer ii3 = Integer.valueOf(<span class=\"number\">250</span>); <span class=\"comment\">// 250不在缓存区间内，就得new新对象</span></span><br><span class=\"line\">        Integer ii4 = Integer.valueOf(<span class=\"number\">250</span>);</span><br><span class=\"line\">        System.out.println(ii3 == ii4); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// case 6</span></span><br><span class=\"line\">        Integer ii5 = <span class=\"number\">250</span>;</span><br><span class=\"line\">        Integer ii6 = <span class=\"number\">250</span>;</span><br><span class=\"line\">        System.out.println(ii5 == ii6); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看一下integer源码,如下所示。可以看到Integer的缓存空间在[-128, 127]之间。<br>当传入的数值在此区间内时，之间调用缓存内的数据。反之，重新<code>return new Integer(i);</code>在堆空间返回一个新整形对象。</p>\n<p>那么我们应该如何比较两个对象的值得大小呢？<br>正确的方法是使用<code>equals</code>来比较，equals方法来自于Object根对象，按照官方的建议，在构造子类对象时需要复写父类中的equals方法，来比较我们关心的数据，而不是内存地址（<code>==</code>比较的是内存地址）。现将Integer中的equals拿出来检查一下复写情况</p>\n<p><code>((Integer)obj).intValue()</code>拆箱操作，<code>value == ((Integer)obj).intValue();</code>使用基本的数据类型进行比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> Integer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == ((Integer)obj).intValue(); <span class=\"comment\">// 拆箱操作，比较基本数据类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123; <span class=\"comment\">// 初始化操作</span></span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</span><br><span class=\"line\">            String integerCacheHighPropValue =</span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\"></span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>包装类中的<code>缓存设计</code>(<a href=\"https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin\" target=\"_blank\" rel=\"noopener\">享元模式-FlyWeight</a>)，本质就是缓存设计。</p>\n<p><code>Byte/Short/Integer/Long</code>:缓存[-128, 127]区间的数据；<br><code>Character</code>:缓存[0,127]区间的数据.<br>","more":"<br>首先来看一个有意思的面试题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//case 1</span></span><br><span class=\"line\">        Integer i1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\">        Integer i2 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(i1 == i2); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 2</span></span><br><span class=\"line\">        Integer i3 = Integer.valueOf(<span class=\"number\">123</span>);</span><br><span class=\"line\">        Integer i4 = Integer.valueOf(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(i3 == i4); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 3</span></span><br><span class=\"line\">        Integer i5 = <span class=\"number\">123</span>; <span class=\"comment\">//自动装箱操作，底层编译后代码为Integer.valueOf(123);    和case2相同</span></span><br><span class=\"line\">        Integer i6 = <span class=\"number\">123</span>;</span><br><span class=\"line\">        System.out.println(i5 == i6); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 4</span></span><br><span class=\"line\">        Integer ii1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">250</span>);</span><br><span class=\"line\">        Integer ii2 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">250</span>);</span><br><span class=\"line\">        System.out.println(ii1 == ii2); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//case 5</span></span><br><span class=\"line\">        Integer ii3 = Integer.valueOf(<span class=\"number\">250</span>); <span class=\"comment\">// 250不在缓存区间内，就得new新对象</span></span><br><span class=\"line\">        Integer ii4 = Integer.valueOf(<span class=\"number\">250</span>);</span><br><span class=\"line\">        System.out.println(ii3 == ii4); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// case 6</span></span><br><span class=\"line\">        Integer ii5 = <span class=\"number\">250</span>;</span><br><span class=\"line\">        Integer ii6 = <span class=\"number\">250</span>;</span><br><span class=\"line\">        System.out.println(ii5 == ii6); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看一下integer源码,如下所示。可以看到Integer的缓存空间在[-128, 127]之间。<br>当传入的数值在此区间内时，之间调用缓存内的数据。反之，重新<code>return new Integer(i);</code>在堆空间返回一个新整形对象。</p>\n<p>那么我们应该如何比较两个对象的值得大小呢？<br>正确的方法是使用<code>equals</code>来比较，equals方法来自于Object根对象，按照官方的建议，在构造子类对象时需要复写父类中的equals方法，来比较我们关心的数据，而不是内存地址（<code>==</code>比较的是内存地址）。现将Integer中的equals拿出来检查一下复写情况</p>\n<p><code>((Integer)obj).intValue()</code>拆箱操作，<code>value == ((Integer)obj).intValue();</code>使用基本的数据类型进行比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> Integer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == ((Integer)obj).intValue(); <span class=\"comment\">// 拆箱操作，比较基本数据类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123; <span class=\"comment\">// 初始化操作</span></span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</span><br><span class=\"line\">            String integerCacheHighPropValue =</span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\"></span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Oct 30 2018 15:50:02 GMT+0800 (China Standard Time)","title":"Java包装类中的缓存设计","path":"2018/10/30/Java包装类中的缓存设计/","eyeCatchImage":null,"excerpt":"<p>包装类中的<code>缓存设计</code>(<a href=\"https://baike.baidu.com/item/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/10541959?fr=aladdin\" target=\"_blank\" rel=\"noopener\">享元模式-FlyWeight</a>)，本质就是缓存设计。</p>\n<p><code>Byte/Short/Integer/Long</code>:缓存[-128, 127]区间的数据；<br><code>Character</code>:缓存[0,127]区间的数据.<br>","date":"2018-10-30T07:13:26.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java中的接口和抽象类","date":"2018-11-04T14:20:35.000Z","_content":"\n相同点：\n- 都位于继承的顶端，用于被其他实现或继承\n- 都不能实例化\n- 都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。\n\n不同点：\n- 接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。\n- 抽象类可包含骗人通方法和抽象方法，`接口只能包含抽象方法（java8之前）`\n- 一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）\n- 成员变量：接口里默认是public static final，抽象类默认包权限\n- 方法：接口里默认public abstract,抽象类默认包访问权限\n- 内部类：接口里默认public static，抽象类默认包访问权限\n\n如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。\n\n设计模式：接口和抽象类集合使用的（适配器模式）\n\n`面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程`\n\n<!-- more -->\n```java\npackage com.wkx.jedis;\n\n\ninterface IUSB{\n    void swapData();\n}\n\nclass Mouse implements IUSB{\n    public void swapData(){\n        System.out.println(\"i am moving...\");\n    }\n}\n\nclass Printer implements IUSB{\n    public void swapData(){\n        System.out.println(\"i am printing, dididi...\");\n    }\n}\n\nclass MotherBoard{\n    private static IUSB[] usbs = new IUSB[6];\n    private static int num = 0;\n\n    public static void pluginIn(IUSB usb){\n\n        if (usbs.length == num) return;\n        usbs[num] = usb;\n        num ++;\n\n    }\n    public static void doWork(){\n        for (IUSB usb : usbs){\n            if(usb != null) usb.swapData();\n        }\n    }\n}\n\npublic class IUSBDemo {\n    public static void main(String[] args){\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.doWork();\n    }\n\n}\n\n```\n","source":"_posts/Java中的接口和抽象类.md","raw":"---\ntitle: Java中的接口和抽象类\ndate: 2018-11-04 22:20:35\ntags:\n  - Java\n  - 面试\ncategories:\n  - Java\n---\n\n相同点：\n- 都位于继承的顶端，用于被其他实现或继承\n- 都不能实例化\n- 都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。\n\n不同点：\n- 接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。\n- 抽象类可包含骗人通方法和抽象方法，`接口只能包含抽象方法（java8之前）`\n- 一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）\n- 成员变量：接口里默认是public static final，抽象类默认包权限\n- 方法：接口里默认public abstract,抽象类默认包访问权限\n- 内部类：接口里默认public static，抽象类默认包访问权限\n\n如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。\n\n设计模式：接口和抽象类集合使用的（适配器模式）\n\n`面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程`\n\n<!-- more -->\n```java\npackage com.wkx.jedis;\n\n\ninterface IUSB{\n    void swapData();\n}\n\nclass Mouse implements IUSB{\n    public void swapData(){\n        System.out.println(\"i am moving...\");\n    }\n}\n\nclass Printer implements IUSB{\n    public void swapData(){\n        System.out.println(\"i am printing, dididi...\");\n    }\n}\n\nclass MotherBoard{\n    private static IUSB[] usbs = new IUSB[6];\n    private static int num = 0;\n\n    public static void pluginIn(IUSB usb){\n\n        if (usbs.length == num) return;\n        usbs[num] = usb;\n        num ++;\n\n    }\n    public static void doWork(){\n        for (IUSB usb : usbs){\n            if(usb != null) usb.swapData();\n        }\n    }\n}\n\npublic class IUSBDemo {\n    public static void main(String[] args){\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Mouse());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.pluginIn(new Printer());\n        MotherBoard.doWork();\n    }\n\n}\n\n```\n","slug":"Java中的接口和抽象类","published":1,"updated":"2018-11-05T04:38:52.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x2w001sexotal1yp94x","content":"<p>相同点：</p>\n<ul>\n<li>都位于继承的顶端，用于被其他实现或继承</li>\n<li>都不能实例化</li>\n<li>都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。</li>\n<li>抽象类可包含骗人通方法和抽象方法，<code>接口只能包含抽象方法（java8之前）</code></li>\n<li>一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）</li>\n<li>成员变量：接口里默认是public static final，抽象类默认包权限</li>\n<li>方法：接口里默认public abstract,抽象类默认包访问权限</li>\n<li>内部类：接口里默认public static，抽象类默认包访问权限</li>\n</ul>\n<p>如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。</p>\n<p>设计模式：接口和抽象类集合使用的（适配器模式）</p>\n<p><code>面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程</code></p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wkx.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"i am moving...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"i am printing, dididi...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotherBoard</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IUSB[] usbs = <span class=\"keyword\">new</span> IUSB[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pluginIn</span><span class=\"params\">(IUSB usb)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (usbs.length == num) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        usbs[num] = usb;</span><br><span class=\"line\">        num ++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IUSB usb : usbs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usb != <span class=\"keyword\">null</span>) usb.swapData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IUSBDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.doWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>相同点：</p>\n<ul>\n<li>都位于继承的顶端，用于被其他实现或继承</li>\n<li>都不能实例化</li>\n<li>都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。</li>\n<li>抽象类可包含骗人通方法和抽象方法，<code>接口只能包含抽象方法（java8之前）</code></li>\n<li>一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）</li>\n<li>成员变量：接口里默认是public static final，抽象类默认包权限</li>\n<li>方法：接口里默认public abstract,抽象类默认包访问权限</li>\n<li>内部类：接口里默认public static，抽象类默认包访问权限</li>\n</ul>\n<p>如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。</p>\n<p>设计模式：接口和抽象类集合使用的（适配器模式）</p>\n<p><code>面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程</code></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wkx.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"i am moving...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUSB</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"i am printing, dididi...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotherBoard</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IUSB[] usbs = <span class=\"keyword\">new</span> IUSB[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pluginIn</span><span class=\"params\">(IUSB usb)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (usbs.length == num) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        usbs[num] = usb;</span><br><span class=\"line\">        num ++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IUSB usb : usbs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usb != <span class=\"keyword\">null</span>) usb.swapData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IUSBDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Mouse());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.pluginIn(<span class=\"keyword\">new</span> Printer());</span><br><span class=\"line\">        MotherBoard.doWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Nov 05 2018 12:38:52 GMT+0800 (China Standard Time)","title":"Java中的接口和抽象类","path":"2018/11/04/Java中的接口和抽象类/","eyeCatchImage":null,"excerpt":"<p>相同点：</p>\n<ul>\n<li>都位于继承的顶端，用于被其他实现或继承</li>\n<li>都不能实例化</li>\n<li>都可以定义抽象方法，其子类/实现类都必须复写这些抽象方法。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>接口没有构造方法，抽象类有构造方法。这是因为子类继承抽象类后，在实例化一个子类时，需要检查父类的是否有构造方法。</li>\n<li>抽象类可包含骗人通方法和抽象方法，<code>接口只能包含抽象方法（java8之前）</code></li>\n<li>一个类只能继承一个直接父类（可能是抽象类），接口是多继承并且支持一个类实现多个接口（弥补了Java的单继承）</li>\n<li>成员变量：接口里默认是public static final，抽象类默认包权限</li>\n<li>方法：接口里默认public abstract,抽象类默认包访问权限</li>\n<li>内部类：接口里默认public static，抽象类默认包访问权限</li>\n</ul>\n<p>如果接口和实现类可以完成与其他方法实现的其他功能，尽量使用接口，面向接口编程。</p>\n<p>设计模式：接口和抽象类集合使用的（适配器模式）</p>\n<p><code>面向接口编程：多态的好处：把实现类对象付给接口类型变量，屏蔽了不同实现类之间的差异，从而可以做到通用编程</code></p>","date":"2018-11-04T14:20:35.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["面试","Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java方法的值传递机制","date":"2018-10-26T02:48:38.000Z","_content":"\n- 对于基本数据类型(八种基本数据类型)来说，方法形参传递的是`值的副本`;\n- 对于引用数据类型，方法的形参传递的是`引用的地址值的副本`;\n\n对于引用数据类型，JVM中的存储图如下：\n\n![IMG_0013.PNG](https://upload-images.jianshu.io/upload_images/2952111-24d050aa031dd985.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Java方法的值传递机制.md","raw":"---\ntitle: Java方法的值传递机制\ndate: 2018-10-26 10:48:38\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n- 对于基本数据类型(八种基本数据类型)来说，方法形参传递的是`值的副本`;\n- 对于引用数据类型，方法的形参传递的是`引用的地址值的副本`;\n\n对于引用数据类型，JVM中的存储图如下：\n\n![IMG_0013.PNG](https://upload-images.jianshu.io/upload_images/2952111-24d050aa031dd985.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Java方法的值传递机制","published":1,"updated":"2018-10-26T07:08:13.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x31001xexotrvymsbaz","content":"<ul>\n<li>对于基本数据类型(八种基本数据类型)来说，方法形参传递的是<code>值的副本</code>;</li>\n<li>对于引用数据类型，方法的形参传递的是<code>引用的地址值的副本</code>;</li>\n</ul>\n<p>对于引用数据类型，JVM中的存储图如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-24d050aa031dd985.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0013.PNG\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>对于基本数据类型(八种基本数据类型)来说，方法形参传递的是<code>值的副本</code>;</li>\n<li>对于引用数据类型，方法的形参传递的是<code>引用的地址值的副本</code>;</li>\n</ul>\n<p>对于引用数据类型，JVM中的存储图如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-24d050aa031dd985.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0013.PNG\"></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Oct 26 2018 15:08:13 GMT+0800 (China Standard Time)","title":"Java方法的值传递机制","path":"2018/10/26/Java方法的值传递机制/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-26T02:48:38.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java类属性和方法的可见性","date":"2018-09-06T02:33:20.000Z","_content":"\n\n\n\n| 作用域       | 当前类      |同一package |子孙类     |其他package |\n| ------------| -----------|---------- |----------|----------|\n| public      | Y          |Y          |Y         |Y           |\n| protected   | Y          |        Y  | Y         |  N         |\n| friendly(default)    | Y          | Y         | N         | N          |\n| private     | Y         |N         | N         |   N         |\n\n\n不写时默认为`friendly`\n","source":"_posts/Java类属性和方法的可见性.md","raw":"---\ntitle: Java类属性和方法的可见性\ndate: 2018-09-06 10:33:20\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n\n\n\n| 作用域       | 当前类      |同一package |子孙类     |其他package |\n| ------------| -----------|---------- |----------|----------|\n| public      | Y          |Y          |Y         |Y           |\n| protected   | Y          |        Y  | Y         |  N         |\n| friendly(default)    | Y          | Y         | N         | N          |\n| private     | Y         |N         | N         |   N         |\n\n\n不写时默认为`friendly`\n","slug":"Java类属性和方法的可见性","published":1,"updated":"2018-09-19T12:11:57.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x33001yexoto95uwu0i","content":"<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>当前类</th>\n<th>同一package</th>\n<th>子孙类</th>\n<th>其他package</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>friendly(default)</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>private</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>不写时默认为<code>friendly</code></p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>当前类</th>\n<th>同一package</th>\n<th>子孙类</th>\n<th>其他package</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>friendly(default)</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>private</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>不写时默认为<code>friendly</code></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 19 2018 20:11:57 GMT+0800 (China Standard Time)","title":"Java类属性和方法的可见性","path":"2018/09/06/Java类属性和方法的可见性/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-06T02:33:20.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java实时读取log日志文件示例代码","date":"2019-05-21T06:28:14.000Z","_content":"\n`需求`：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。\n\n`运用的技术`：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。\n\n`思想`：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式-----将日志mock.log直接删除即可。\n\n`原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile`\n\n\n模拟写日志的类\n因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。\n<!-- more -->\n\n```Java\npackage com.inveno.file;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LogSvr {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(LogSvr.class);\n\n\tprivate SimpleDateFormat  dateFormat = new SimpleDateFormat(\"yyy-MM-dd HH:mm:ss\");\n\tprivate static ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);\n\n\tpublic void logMsg(File logFile,String msgInfo) throws IOException{\n\n\t\tif(!logFile.exists()) {\n\t\t\tlogFile.createNewFile();\n\t\t}\n\n\t\tWriter txtWriter = new FileWriter(logFile,true);\n\t\ttxtWriter.write(dateFormat.format(new Date()) + \"\\t\" + msgInfo + \"\\n\");\n\t\ttxtWriter.flush();\n\t\ttxtWriter.close();\n\t}\n\n\tpublic void stop(){\n\t\tif(exec != null){\n\t\t\texec.shutdown();\n\t\t\tlogger.info(\"file write stop ！\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tfinal LogSvr logSvr = new LogSvr();\n\t\tfinal File tmpLogFile = new File(\"pathtolog.log\");\n\t\tfinal String msgInfo = \"test !\";\n\n\t\t//启动一个线程每5秒向日志文件写一次数据\n\t\texec.scheduleWithFixedDelay(new Runnable(){\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlogSvr.logMsg(tmpLogFile, msgInfo);\n\t\t\t\t\t//Thread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"file write error ！\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t}, 0, 5, TimeUnit.SECONDS);\n\n\t}\n\n}\n\n\n```java\n\nimport org.apache.log4j.Logger;\n\nimport java.io.File;\nimport java.io.RandomAccessFile;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class LogView {\n    private static Logger logger = Logger.getLogger(Start.class.getName());\n\n    private long pointer = 0; // 文件指针位置\n    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyy-MM-dd HH:mm:ss\");\n\n    private ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);\n\n    public void realtimeShowLog(final File logFile) throws Exception {\n\n        if (logFile == null) {\n            throw new IllegalStateException(\"logFile can not be null\");\n        }\n\n        //启动一个线程每2秒读取新增的日志信息\n        exec.scheduleWithFixedDelay(new Runnable() {\n\n            public void run() {\n\n                //获得变化部分\n                try {\n\n                    long len = logFile.length();\n                    if (len < pointer) {\n                        logger.info(\"Log file was reset. Restarting logging from start of file.\");\n                        pointer = 0;\n                    } else {\n\n                        //指定文件可读可写\n                        RandomAccessFile randomFile = new RandomAccessFile(logFile, \"rw\");\n\n                        //获取RandomAccessFile对象文件指针的位置，初始位置是0\n                        logger.info(\"RandomAccessFile文件指针的初始位置:\" + pointer);\n\n                        randomFile.seek(pointer);//移动到文件指针位置\n\n                        String tmp;\n                        while ((tmp = randomFile.readLine()) != null) {\n                            System.out.println(\"info : \" + new String(tmp.getBytes(\"utf-8\")));\n                            pointer = randomFile.getFilePointer();\n                        }\n\n                        randomFile.close();\n                    }\n\n                } catch (Exception e) {\n                    //实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充\n                    logger.error(dateFormat.format(new Date()) + \" File read error, pointer: \" + pointer);\n                } finally {\n                    //将pointer 落地以便下次启动的时候，直接从指定位置获取\n                }\n            }\n\n        }, 0, 10, TimeUnit.SECONDS);\n\n    }\n\n    public void stop() {\n        if (exec != null) {\n            exec.shutdown();\n            logger.info(\"file read stop ！\");\n        }\n    }\n\n\n    public static void main(String[] args) throws Exception {\n\n        LogView view = new LogView();\n        File tmpLogFile = new File(\"pathtolog.log\");\n        System.out.println(tmpLogFile.getAbsolutePath());\n        view.pointer = 0;\n        view.realtimeShowLog(tmpLogFile);\n\n    }\n}\n```\n\n```Java\npackage com.travelsky.arch.utils;  /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * <p>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.util.Arrays;\n\n/**\n * A <code>BufferedRandomAccessFile</code> is like a\n * <code>RandomAccessFile</code>, but it uses a private buffer so that most\n * operations do not require a disk access.\n * <p>\n * <p>\n * Note: The operations on this class are unmonitored. Also, the correct\n * functioning of the <code>RandomAccessFile</code> methods that are not\n * overridden here relies on the implementation of those methods in the\n * superclass.\n * <p>\n * To describe the above fields, we introduce the following abstractions for\n * the file \"f\":\n * <p>\n * len(f) the length of the file curr(f) the current position in the file\n * c(f) the abstract contents of the file disk(f) the contents of f's\n * backing disk file closed(f) true iff the file is closed\n * <p>\n * \"curr(f)\" is an index in the closed interval [0, len(f)]. \"c(f)\" is a\n * character sequence of length \"len(f)\". \"c(f)\" and \"disk(f)\" may differ if\n * \"c(f)\" contains unflushed writes not reflected in \"disk(f)\". The flush\n * operation has the effect of making \"disk(f)\" identical to \"c(f)\".\n * <p>\n * A file is said to be *valid* if the following conditions hold:\n * <p>\n * V1. The \"closed\" and \"curr\" fields are correct:\n * <p>\n * f.closed == closed(f) f.curr == curr(f)\n * <p>\n * V2. The current position is either contained in the buffer, or just past\n * the buffer:\n * <p>\n * f.lo <= f.curr <= f.hi\n * <p>\n * V3. Any (possibly) un-flushed characters are stored in \"f.buff\":\n * <p>\n * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])\n * <p>\n * V4. For all characters not covered by V3, c(f) and disk(f) agree:\n * <p>\n * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) => c(f)[i] ==\n * disk(f)[i])\n * <p>\n * V5. \"f.dirty\" is true iff the buffer contains bytes that should be\n * flushed to the file; by V3 and V4, only part of the buffer can be dirty.\n * <p>\n * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])\n * <p>\n * V6. this.maxHi == this.lo + this.buff.length\n * <p>\n * Note that \"f.buff\" can be \"null\" in a valid file, since the range of\n * characters in V3 is empty when \"f.lo == f.curr\".\n * <p>\n * A file is said to be *ready* if the buffer contains the current position,\n * i.e., when:\n * <p>\n * R1. !f.closed && f.buff != null && f.lo <= f.curr && f.curr < f.hi\n * <p>\n * When a file is ready, reading or writing a single byte can be performed\n * by reading or writing the in-memory buffer without performing a disk\n * operation.\n * <p>\n * <p>\n * !!!This class come from network ,I just adjust code style!!!\n *\n * @author zhaofeng\n * @date 2018 -05-02\n */\npublic final class BufferedRandomAccessFile extends RandomAccessFile {\n    /**\n     * 64K buffer\n     */\n    private static final int LOG_BUFF_SZ = 16;\n    private static final int BUFF_SZ = (1 << LOG_BUFF_SZ);\n    private static final long BUFF_MASK = ~(((long) BUFF_SZ) - 1L);\n    private String path_;\n\n    /**\n     * This implementation is based on the buffer implementation in Modula-3's\n     * \"Rd\", \"Wr\", \"RdClass\", and \"WrClass\" interfaces.\n     * <p>\n     * true iff un-flushed bytes exist\n     */\n    private boolean dirty_;\n    /**\n     * dirty_ can be cleared by e.g. seek, so track sync separately\n     */\n    private boolean syncNeeded_;\n    /**\n     * current position in file\n     */\n    private long curr_;\n    /**\n     * bounds on characters in \"buff\"\n     */\n    private long lo_, hi_;\n    /**\n     * local buffer\n     */\n    private byte[] buff_;\n    /**\n     * this.lo + this.buff.length\n     */\n    private long maxHi_;\n    /**\n     * buffer contains last file block?\n     */\n    private boolean hitEOF_;\n    /**\n     * disk position\n     */\n    private long diskPos_;\n\n    /**\n     * Open a new <code>BufferedRandomAccessFile</code> on <code>file</code>\n     * in mode <code>mode</code>, which should be \"r\" for reading only, or\n     * \"rw\" for reading and writing.\n     *\n     * @param file the file\n     * @param mode the mode\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(File file, String mode) throws IOException {\n        this(file, mode, 0);\n    }\n\n    /**\n     * Instantiates a new Buffered random access file.\n     *\n     * @param file the file\n     * @param mode the mode\n     * @param size the size\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(File file, String mode, int size) throws IOException {\n        super(file, mode);\n        path_ = file.getAbsolutePath();\n        this.init(size);\n    }\n\n    /**\n     * Open a new <code>BufferedRandomAccessFile</code> on the file named\n     * <code>name</code> in mode <code>mode</code>, which should be \"r\" for\n     * reading only, or \"rw\" for reading and writing.\n     *\n     * @param name the name\n     * @param mode the mode\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(String name, String mode) throws IOException {\n        this(name, mode, 0);\n    }\n\n    /**\n     * Instantiates a new Buffered random access file.\n     *\n     * @param name the name\n     * @param mode the mode\n     * @param size the size\n     * @throws FileNotFoundException the file not found exception\n     */\n    public BufferedRandomAccessFile(String name, String mode, int size) throws FileNotFoundException {\n        super(name, mode);\n        path_ = name;\n        this.init(size);\n    }\n\n    private void init(int size) {\n        this.dirty_ = false;\n        this.lo_ = this.curr_ = this.hi_ = 0;\n        this.buff_ = (size > BUFF_SZ) ? new byte[size] : new byte[BUFF_SZ];\n        this.maxHi_ = (long) BUFF_SZ;\n        this.hitEOF_ = false;\n        this.diskPos_ = 0L;\n    }\n\n    /**\n     * Gets path.\n     *\n     * @return the path\n     */\n    public String getPath() {\n        return path_;\n    }\n\n    /**\n     * Sync.\n     *\n     * @throws IOException the io exception\n     */\n    public void sync() throws IOException {\n        if (syncNeeded_) {\n            flush();\n            getChannel().force(true);\n            syncNeeded_ = false;\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.flush();\n        this.buff_ = null;\n        super.close();\n    }\n\n    /**\n     * Flush any bytes in the file's buffer that have not yet been written to\n     * disk. If the file was created read-only, this method is a no-op.\n     *\n     * @throws IOException the io exception\n     */\n    public void flush() throws IOException {\n        this.flushBuffer();\n    }\n\n    /**\n     * Flush any dirty bytes in the buffer to disk.\n     */\n    private void flushBuffer() throws IOException {\n        if (this.dirty_) {\n            if (this.diskPos_ != this.lo_) {\n                super.seek(this.lo_);\n            }\n            int len = (int) (this.curr_ - this.lo_);\n            super.write(this.buff_, 0, len);\n            this.diskPos_ = this.curr_;\n            this.dirty_ = false;\n        }\n    }\n\n    /**\n     * Read at most \"this.buff.length\" bytes into \"this.buff\", returning the\n     * number of bytes read. If the return result is less than\n     * \"this.buff.length\", then EOF was read.\n     */\n    private int fillBuffer() throws IOException {\n        int cnt = 0;\n        int rem = this.buff_.length;\n        while (rem > 0) {\n            int n = super.read(this.buff_, cnt, rem);\n            if (n < 0) {\n                break;\n            }\n            cnt += n;\n            rem -= n;\n        }\n        if ((cnt < 0) && (this.hitEOF_ = (cnt < this.buff_.length))) {\n            // make sure buffer that wasn't read is initialized with -1\n            Arrays.fill(this.buff_, cnt, this.buff_.length, (byte) 0xff);\n        }\n        this.diskPos_ += cnt;\n        return cnt;\n    }\n\n    /**\n     * This method positions <code>this.curr</code> at position <code>pos</code>.\n     * If <code>pos</code> does not fall in the current buffer, it flushes the\n     * current buffer and loads the correct one.<p>\n     * <p>\n     * On exit from this routine <code>this.curr == this.hi</code> iff <code>pos</code>\n     * is at or past the end-of-file, which can only happen if the file was\n     * opened in read-only mode.\n     */\n    @Override\n    public void seek(long pos) throws IOException {\n        if (pos >= this.hi_ || pos < this.lo_) {\n            // seeking outside of current buffer -- flush and read\n            this.flushBuffer();\n            this.lo_ = pos & BUFF_MASK; // start at BuffSz boundary\n            this.maxHi_ = this.lo_ + (long) this.buff_.length;\n            if (this.diskPos_ != this.lo_) {\n                super.seek(this.lo_);\n                this.diskPos_ = this.lo_;\n            }\n            int n = this.fillBuffer();\n            this.hi_ = this.lo_ + (long) n;\n        } else {\n            // seeking inside current buffer -- no read required\n            if (pos < this.curr_) {\n                // if seeking backwards, we must flush to maintain V4\n                this.flushBuffer();\n            }\n        }\n        this.curr_ = pos;\n    }\n\n    @Override\n    public long getFilePointer() {\n        return this.curr_;\n    }\n\n    /**\n     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer\n     *\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public long length() throws IOException {\n        return Math.max(this.curr_, super.length());\n    }\n\n    @Override\n    public int read() throws IOException {\n        if (readEnd()) {\n            return -1;\n        }\n        byte res = this.buff_[(int) (this.curr_ - this.lo_)];\n        this.curr_++;\n        return ((int) res) & 0xFF; // convert byte -> int\n    }\n\n    @Override\n    public int read(byte[] b) throws IOException {\n        return this.read(b, 0, b.length);\n    }\n\n    @Override\n    public int read(byte[] b, int off, int len) throws IOException {\n        if (readEnd()) {\n            return -1;\n        }\n        len = Math.min(len, (int) (this.hi_ - this.curr_));\n        int buffOff = (int) (this.curr_ - this.lo_);\n        System.arraycopy(this.buff_, buffOff, b, off, len);\n        this.curr_ += len;\n        return len;\n    }\n\n\n    private boolean readEnd() throws IOException {\n        if (this.curr_ >= this.hi_) {\n            // test for EOF\n            // if (this.hi < this.maxHi) return -1;\n            if (this.hitEOF_) {\n                return true;\n            }\n            // slow path -- read another buffer\n            this.seek(this.curr_);\n            if (this.curr_ == this.hi_) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        if (this.curr_ >= this.hi_) {\n            if (this.hitEOF_ && this.hi_ < this.maxHi_) {\n                // at EOF -- bump \"hi\"\n                this.hi_++;\n            } else {\n                // slow path -- write current buffer; read next one\n                this.seek(this.curr_);\n                if (this.curr_ == this.hi_) {\n                    // appending to EOF -- bump \"hi\"\n                    this.hi_++;\n                }\n            }\n        }\n        this.buff_[(int) (this.curr_ - this.lo_)] = (byte) b;\n        this.curr_++;\n        this.dirty_ = true;\n        syncNeeded_ = true;\n    }\n\n    @Override\n    public void write(byte[] b) throws IOException {\n        this.write(b, 0, b.length);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        while (len > 0) {\n            int n = this.writeAtMost(b, off, len);\n            off += n;\n            len -= n;\n            this.dirty_ = true;\n            syncNeeded_ = true;\n        }\n    }\n\n    /**\n     * Write at most \"len\" bytes to \"b\" starting at position \"off\", and return\n     * the number of bytes written.\n     */\n    private int writeAtMost(byte[] b, int off, int len) throws IOException {\n        if (this.curr_ >= this.hi_) {\n            if (this.hitEOF_ && this.hi_ < this.maxHi_) {\n                // at EOF -- bump \"hi\"\n                this.hi_ = this.maxHi_;\n            } else {\n                // slow path -- write current buffer; read next one\n                this.seek(this.curr_);\n                if (this.curr_ == this.hi_) {\n                    // appending to EOF -- bump \"hi\"\n                    this.hi_ = this.maxHi_;\n                }\n            }\n        }\n        len = Math.min(len, (int) (this.hi_ - this.curr_));\n        int buffOff = (int) (this.curr_ - this.lo_);\n        System.arraycopy(b, off, this.buff_, buffOff, len);\n        this.curr_ += len;\n        return len;\n    }\n}\n```\n","source":"_posts/Java实时读取log日志文件示例代码.md","raw":"---\ntitle: Java实时读取log日志文件示例代码\ndate: 2019-05-21 14:28:14\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n`需求`：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。\n\n`运用的技术`：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。\n\n`思想`：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式-----将日志mock.log直接删除即可。\n\n`原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile`\n\n\n模拟写日志的类\n因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。\n<!-- more -->\n\n```Java\npackage com.inveno.file;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LogSvr {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(LogSvr.class);\n\n\tprivate SimpleDateFormat  dateFormat = new SimpleDateFormat(\"yyy-MM-dd HH:mm:ss\");\n\tprivate static ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);\n\n\tpublic void logMsg(File logFile,String msgInfo) throws IOException{\n\n\t\tif(!logFile.exists()) {\n\t\t\tlogFile.createNewFile();\n\t\t}\n\n\t\tWriter txtWriter = new FileWriter(logFile,true);\n\t\ttxtWriter.write(dateFormat.format(new Date()) + \"\\t\" + msgInfo + \"\\n\");\n\t\ttxtWriter.flush();\n\t\ttxtWriter.close();\n\t}\n\n\tpublic void stop(){\n\t\tif(exec != null){\n\t\t\texec.shutdown();\n\t\t\tlogger.info(\"file write stop ！\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tfinal LogSvr logSvr = new LogSvr();\n\t\tfinal File tmpLogFile = new File(\"pathtolog.log\");\n\t\tfinal String msgInfo = \"test !\";\n\n\t\t//启动一个线程每5秒向日志文件写一次数据\n\t\texec.scheduleWithFixedDelay(new Runnable(){\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlogSvr.logMsg(tmpLogFile, msgInfo);\n\t\t\t\t\t//Thread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"file write error ！\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t}, 0, 5, TimeUnit.SECONDS);\n\n\t}\n\n}\n\n\n```java\n\nimport org.apache.log4j.Logger;\n\nimport java.io.File;\nimport java.io.RandomAccessFile;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class LogView {\n    private static Logger logger = Logger.getLogger(Start.class.getName());\n\n    private long pointer = 0; // 文件指针位置\n    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyy-MM-dd HH:mm:ss\");\n\n    private ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);\n\n    public void realtimeShowLog(final File logFile) throws Exception {\n\n        if (logFile == null) {\n            throw new IllegalStateException(\"logFile can not be null\");\n        }\n\n        //启动一个线程每2秒读取新增的日志信息\n        exec.scheduleWithFixedDelay(new Runnable() {\n\n            public void run() {\n\n                //获得变化部分\n                try {\n\n                    long len = logFile.length();\n                    if (len < pointer) {\n                        logger.info(\"Log file was reset. Restarting logging from start of file.\");\n                        pointer = 0;\n                    } else {\n\n                        //指定文件可读可写\n                        RandomAccessFile randomFile = new RandomAccessFile(logFile, \"rw\");\n\n                        //获取RandomAccessFile对象文件指针的位置，初始位置是0\n                        logger.info(\"RandomAccessFile文件指针的初始位置:\" + pointer);\n\n                        randomFile.seek(pointer);//移动到文件指针位置\n\n                        String tmp;\n                        while ((tmp = randomFile.readLine()) != null) {\n                            System.out.println(\"info : \" + new String(tmp.getBytes(\"utf-8\")));\n                            pointer = randomFile.getFilePointer();\n                        }\n\n                        randomFile.close();\n                    }\n\n                } catch (Exception e) {\n                    //实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充\n                    logger.error(dateFormat.format(new Date()) + \" File read error, pointer: \" + pointer);\n                } finally {\n                    //将pointer 落地以便下次启动的时候，直接从指定位置获取\n                }\n            }\n\n        }, 0, 10, TimeUnit.SECONDS);\n\n    }\n\n    public void stop() {\n        if (exec != null) {\n            exec.shutdown();\n            logger.info(\"file read stop ！\");\n        }\n    }\n\n\n    public static void main(String[] args) throws Exception {\n\n        LogView view = new LogView();\n        File tmpLogFile = new File(\"pathtolog.log\");\n        System.out.println(tmpLogFile.getAbsolutePath());\n        view.pointer = 0;\n        view.realtimeShowLog(tmpLogFile);\n\n    }\n}\n```\n\n```Java\npackage com.travelsky.arch.utils;  /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * <p>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.util.Arrays;\n\n/**\n * A <code>BufferedRandomAccessFile</code> is like a\n * <code>RandomAccessFile</code>, but it uses a private buffer so that most\n * operations do not require a disk access.\n * <p>\n * <p>\n * Note: The operations on this class are unmonitored. Also, the correct\n * functioning of the <code>RandomAccessFile</code> methods that are not\n * overridden here relies on the implementation of those methods in the\n * superclass.\n * <p>\n * To describe the above fields, we introduce the following abstractions for\n * the file \"f\":\n * <p>\n * len(f) the length of the file curr(f) the current position in the file\n * c(f) the abstract contents of the file disk(f) the contents of f's\n * backing disk file closed(f) true iff the file is closed\n * <p>\n * \"curr(f)\" is an index in the closed interval [0, len(f)]. \"c(f)\" is a\n * character sequence of length \"len(f)\". \"c(f)\" and \"disk(f)\" may differ if\n * \"c(f)\" contains unflushed writes not reflected in \"disk(f)\". The flush\n * operation has the effect of making \"disk(f)\" identical to \"c(f)\".\n * <p>\n * A file is said to be *valid* if the following conditions hold:\n * <p>\n * V1. The \"closed\" and \"curr\" fields are correct:\n * <p>\n * f.closed == closed(f) f.curr == curr(f)\n * <p>\n * V2. The current position is either contained in the buffer, or just past\n * the buffer:\n * <p>\n * f.lo <= f.curr <= f.hi\n * <p>\n * V3. Any (possibly) un-flushed characters are stored in \"f.buff\":\n * <p>\n * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])\n * <p>\n * V4. For all characters not covered by V3, c(f) and disk(f) agree:\n * <p>\n * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) => c(f)[i] ==\n * disk(f)[i])\n * <p>\n * V5. \"f.dirty\" is true iff the buffer contains bytes that should be\n * flushed to the file; by V3 and V4, only part of the buffer can be dirty.\n * <p>\n * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])\n * <p>\n * V6. this.maxHi == this.lo + this.buff.length\n * <p>\n * Note that \"f.buff\" can be \"null\" in a valid file, since the range of\n * characters in V3 is empty when \"f.lo == f.curr\".\n * <p>\n * A file is said to be *ready* if the buffer contains the current position,\n * i.e., when:\n * <p>\n * R1. !f.closed && f.buff != null && f.lo <= f.curr && f.curr < f.hi\n * <p>\n * When a file is ready, reading or writing a single byte can be performed\n * by reading or writing the in-memory buffer without performing a disk\n * operation.\n * <p>\n * <p>\n * !!!This class come from network ,I just adjust code style!!!\n *\n * @author zhaofeng\n * @date 2018 -05-02\n */\npublic final class BufferedRandomAccessFile extends RandomAccessFile {\n    /**\n     * 64K buffer\n     */\n    private static final int LOG_BUFF_SZ = 16;\n    private static final int BUFF_SZ = (1 << LOG_BUFF_SZ);\n    private static final long BUFF_MASK = ~(((long) BUFF_SZ) - 1L);\n    private String path_;\n\n    /**\n     * This implementation is based on the buffer implementation in Modula-3's\n     * \"Rd\", \"Wr\", \"RdClass\", and \"WrClass\" interfaces.\n     * <p>\n     * true iff un-flushed bytes exist\n     */\n    private boolean dirty_;\n    /**\n     * dirty_ can be cleared by e.g. seek, so track sync separately\n     */\n    private boolean syncNeeded_;\n    /**\n     * current position in file\n     */\n    private long curr_;\n    /**\n     * bounds on characters in \"buff\"\n     */\n    private long lo_, hi_;\n    /**\n     * local buffer\n     */\n    private byte[] buff_;\n    /**\n     * this.lo + this.buff.length\n     */\n    private long maxHi_;\n    /**\n     * buffer contains last file block?\n     */\n    private boolean hitEOF_;\n    /**\n     * disk position\n     */\n    private long diskPos_;\n\n    /**\n     * Open a new <code>BufferedRandomAccessFile</code> on <code>file</code>\n     * in mode <code>mode</code>, which should be \"r\" for reading only, or\n     * \"rw\" for reading and writing.\n     *\n     * @param file the file\n     * @param mode the mode\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(File file, String mode) throws IOException {\n        this(file, mode, 0);\n    }\n\n    /**\n     * Instantiates a new Buffered random access file.\n     *\n     * @param file the file\n     * @param mode the mode\n     * @param size the size\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(File file, String mode, int size) throws IOException {\n        super(file, mode);\n        path_ = file.getAbsolutePath();\n        this.init(size);\n    }\n\n    /**\n     * Open a new <code>BufferedRandomAccessFile</code> on the file named\n     * <code>name</code> in mode <code>mode</code>, which should be \"r\" for\n     * reading only, or \"rw\" for reading and writing.\n     *\n     * @param name the name\n     * @param mode the mode\n     * @throws IOException the io exception\n     */\n    public BufferedRandomAccessFile(String name, String mode) throws IOException {\n        this(name, mode, 0);\n    }\n\n    /**\n     * Instantiates a new Buffered random access file.\n     *\n     * @param name the name\n     * @param mode the mode\n     * @param size the size\n     * @throws FileNotFoundException the file not found exception\n     */\n    public BufferedRandomAccessFile(String name, String mode, int size) throws FileNotFoundException {\n        super(name, mode);\n        path_ = name;\n        this.init(size);\n    }\n\n    private void init(int size) {\n        this.dirty_ = false;\n        this.lo_ = this.curr_ = this.hi_ = 0;\n        this.buff_ = (size > BUFF_SZ) ? new byte[size] : new byte[BUFF_SZ];\n        this.maxHi_ = (long) BUFF_SZ;\n        this.hitEOF_ = false;\n        this.diskPos_ = 0L;\n    }\n\n    /**\n     * Gets path.\n     *\n     * @return the path\n     */\n    public String getPath() {\n        return path_;\n    }\n\n    /**\n     * Sync.\n     *\n     * @throws IOException the io exception\n     */\n    public void sync() throws IOException {\n        if (syncNeeded_) {\n            flush();\n            getChannel().force(true);\n            syncNeeded_ = false;\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.flush();\n        this.buff_ = null;\n        super.close();\n    }\n\n    /**\n     * Flush any bytes in the file's buffer that have not yet been written to\n     * disk. If the file was created read-only, this method is a no-op.\n     *\n     * @throws IOException the io exception\n     */\n    public void flush() throws IOException {\n        this.flushBuffer();\n    }\n\n    /**\n     * Flush any dirty bytes in the buffer to disk.\n     */\n    private void flushBuffer() throws IOException {\n        if (this.dirty_) {\n            if (this.diskPos_ != this.lo_) {\n                super.seek(this.lo_);\n            }\n            int len = (int) (this.curr_ - this.lo_);\n            super.write(this.buff_, 0, len);\n            this.diskPos_ = this.curr_;\n            this.dirty_ = false;\n        }\n    }\n\n    /**\n     * Read at most \"this.buff.length\" bytes into \"this.buff\", returning the\n     * number of bytes read. If the return result is less than\n     * \"this.buff.length\", then EOF was read.\n     */\n    private int fillBuffer() throws IOException {\n        int cnt = 0;\n        int rem = this.buff_.length;\n        while (rem > 0) {\n            int n = super.read(this.buff_, cnt, rem);\n            if (n < 0) {\n                break;\n            }\n            cnt += n;\n            rem -= n;\n        }\n        if ((cnt < 0) && (this.hitEOF_ = (cnt < this.buff_.length))) {\n            // make sure buffer that wasn't read is initialized with -1\n            Arrays.fill(this.buff_, cnt, this.buff_.length, (byte) 0xff);\n        }\n        this.diskPos_ += cnt;\n        return cnt;\n    }\n\n    /**\n     * This method positions <code>this.curr</code> at position <code>pos</code>.\n     * If <code>pos</code> does not fall in the current buffer, it flushes the\n     * current buffer and loads the correct one.<p>\n     * <p>\n     * On exit from this routine <code>this.curr == this.hi</code> iff <code>pos</code>\n     * is at or past the end-of-file, which can only happen if the file was\n     * opened in read-only mode.\n     */\n    @Override\n    public void seek(long pos) throws IOException {\n        if (pos >= this.hi_ || pos < this.lo_) {\n            // seeking outside of current buffer -- flush and read\n            this.flushBuffer();\n            this.lo_ = pos & BUFF_MASK; // start at BuffSz boundary\n            this.maxHi_ = this.lo_ + (long) this.buff_.length;\n            if (this.diskPos_ != this.lo_) {\n                super.seek(this.lo_);\n                this.diskPos_ = this.lo_;\n            }\n            int n = this.fillBuffer();\n            this.hi_ = this.lo_ + (long) n;\n        } else {\n            // seeking inside current buffer -- no read required\n            if (pos < this.curr_) {\n                // if seeking backwards, we must flush to maintain V4\n                this.flushBuffer();\n            }\n        }\n        this.curr_ = pos;\n    }\n\n    @Override\n    public long getFilePointer() {\n        return this.curr_;\n    }\n\n    /**\n     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer\n     *\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public long length() throws IOException {\n        return Math.max(this.curr_, super.length());\n    }\n\n    @Override\n    public int read() throws IOException {\n        if (readEnd()) {\n            return -1;\n        }\n        byte res = this.buff_[(int) (this.curr_ - this.lo_)];\n        this.curr_++;\n        return ((int) res) & 0xFF; // convert byte -> int\n    }\n\n    @Override\n    public int read(byte[] b) throws IOException {\n        return this.read(b, 0, b.length);\n    }\n\n    @Override\n    public int read(byte[] b, int off, int len) throws IOException {\n        if (readEnd()) {\n            return -1;\n        }\n        len = Math.min(len, (int) (this.hi_ - this.curr_));\n        int buffOff = (int) (this.curr_ - this.lo_);\n        System.arraycopy(this.buff_, buffOff, b, off, len);\n        this.curr_ += len;\n        return len;\n    }\n\n\n    private boolean readEnd() throws IOException {\n        if (this.curr_ >= this.hi_) {\n            // test for EOF\n            // if (this.hi < this.maxHi) return -1;\n            if (this.hitEOF_) {\n                return true;\n            }\n            // slow path -- read another buffer\n            this.seek(this.curr_);\n            if (this.curr_ == this.hi_) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        if (this.curr_ >= this.hi_) {\n            if (this.hitEOF_ && this.hi_ < this.maxHi_) {\n                // at EOF -- bump \"hi\"\n                this.hi_++;\n            } else {\n                // slow path -- write current buffer; read next one\n                this.seek(this.curr_);\n                if (this.curr_ == this.hi_) {\n                    // appending to EOF -- bump \"hi\"\n                    this.hi_++;\n                }\n            }\n        }\n        this.buff_[(int) (this.curr_ - this.lo_)] = (byte) b;\n        this.curr_++;\n        this.dirty_ = true;\n        syncNeeded_ = true;\n    }\n\n    @Override\n    public void write(byte[] b) throws IOException {\n        this.write(b, 0, b.length);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        while (len > 0) {\n            int n = this.writeAtMost(b, off, len);\n            off += n;\n            len -= n;\n            this.dirty_ = true;\n            syncNeeded_ = true;\n        }\n    }\n\n    /**\n     * Write at most \"len\" bytes to \"b\" starting at position \"off\", and return\n     * the number of bytes written.\n     */\n    private int writeAtMost(byte[] b, int off, int len) throws IOException {\n        if (this.curr_ >= this.hi_) {\n            if (this.hitEOF_ && this.hi_ < this.maxHi_) {\n                // at EOF -- bump \"hi\"\n                this.hi_ = this.maxHi_;\n            } else {\n                // slow path -- write current buffer; read next one\n                this.seek(this.curr_);\n                if (this.curr_ == this.hi_) {\n                    // appending to EOF -- bump \"hi\"\n                    this.hi_ = this.maxHi_;\n                }\n            }\n        }\n        len = Math.min(len, (int) (this.hi_ - this.curr_));\n        int buffOff = (int) (this.curr_ - this.lo_);\n        System.arraycopy(b, off, this.buff_, buffOff, len);\n        this.curr_ += len;\n        return len;\n    }\n}\n```\n","slug":"Java实时读取log日志文件示例代码","published":1,"updated":"2019-05-23T16:05:06.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x370022exotmulvvwru","content":"<p><code>需求</code>：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。</p>\n<p><code>运用的技术</code>：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。</p>\n<p><code>思想</code>：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。</p>\n<p><code>原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile</code></p>\n<p>模拟写日志的类<br>因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.inveno.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogSvr</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(LogSvr.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SimpleDateFormat  dateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logMsg</span><span class=\"params\">(File logFile,String msgInfo)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!logFile.exists()) &#123;</span><br><span class=\"line\">\t\t\tlogFile.createNewFile();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWriter txtWriter = <span class=\"keyword\">new</span> FileWriter(logFile,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\ttxtWriter.write(dateFormat.format(<span class=\"keyword\">new</span> Date()) + <span class=\"string\">\"\\t\"</span> + msgInfo + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\ttxtWriter.flush();</span><br><span class=\"line\">\t\ttxtWriter.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(exec != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\texec.shutdown();</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">\"file write stop ！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> LogSvr logSvr = <span class=\"keyword\">new</span> LogSvr();</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> File tmpLogFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pathtolog.log\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String msgInfo = <span class=\"string\">\"test !\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//启动一个线程每5秒向日志文件写一次数据</span></span><br><span class=\"line\">\t\texec.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tlogSvr.logMsg(tmpLogFile, msgInfo);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//Thread.sleep(1000);</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.error(<span class=\"string\">\"file write error ！\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">0</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = Logger.getLogger(Start.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> pointer = <span class=\"number\">0</span>; <span class=\"comment\">// 文件指针位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleDateFormat dateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">realtimeShowLog</span><span class=\"params\">(<span class=\"keyword\">final</span> File logFile)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"logFile can not be null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动一个线程每2秒读取新增的日志信息</span></span><br><span class=\"line\">        exec.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//获得变化部分</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> len = logFile.length();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (len &lt; pointer) &#123;</span><br><span class=\"line\">                        logger.info(<span class=\"string\">\"Log file was reset. Restarting logging from start of file.\"</span>);</span><br><span class=\"line\">                        pointer = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//指定文件可读可写</span></span><br><span class=\"line\">                        RandomAccessFile randomFile = <span class=\"keyword\">new</span> RandomAccessFile(logFile, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class=\"line\">                        logger.info(<span class=\"string\">\"RandomAccessFile文件指针的初始位置:\"</span> + pointer);</span><br><span class=\"line\"></span><br><span class=\"line\">                        randomFile.seek(pointer);<span class=\"comment\">//移动到文件指针位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        String tmp;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span> ((tmp = randomFile.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"info : \"</span> + <span class=\"keyword\">new</span> String(tmp.getBytes(<span class=\"string\">\"utf-8\"</span>)));</span><br><span class=\"line\">                            pointer = randomFile.getFilePointer();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        randomFile.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充</span></span><br><span class=\"line\">                    logger.error(dateFormat.format(<span class=\"keyword\">new</span> Date()) + <span class=\"string\">\" File read error, pointer: \"</span> + pointer);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将pointer 落地以便下次启动的时候，直接从指定位置获取</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exec != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            exec.shutdown();</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"file read stop ！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        LogView view = <span class=\"keyword\">new</span> LogView();</span><br><span class=\"line\">        File tmpLogFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pathtolog.log\"</span>);</span><br><span class=\"line\">        System.out.println(tmpLogFile.getAbsolutePath());</span><br><span class=\"line\">        view.pointer = <span class=\"number\">0</span>;</span><br><span class=\"line\">        view.realtimeShowLog(tmpLogFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.travelsky.arch.utils;  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * \"License\"); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; is like a</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;RandomAccessFile&lt;/code&gt;, but it uses a private buffer so that most</span></span><br><span class=\"line\"><span class=\"comment\"> * operations do not require a disk access.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: The operations on this class are unmonitored. Also, the correct</span></span><br><span class=\"line\"><span class=\"comment\"> * functioning of the &lt;code&gt;RandomAccessFile&lt;/code&gt; methods that are not</span></span><br><span class=\"line\"><span class=\"comment\"> * overridden here relies on the implementation of those methods in the</span></span><br><span class=\"line\"><span class=\"comment\"> * superclass.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * To describe the above fields, we introduce the following abstractions for</span></span><br><span class=\"line\"><span class=\"comment\"> * the file \"f\":</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * len(f) the length of the file curr(f) the current position in the file</span></span><br><span class=\"line\"><span class=\"comment\"> * c(f) the abstract contents of the file disk(f) the contents of f's</span></span><br><span class=\"line\"><span class=\"comment\"> * backing disk file closed(f) true iff the file is closed</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * \"curr(f)\" is an index in the closed interval [0, len(f)]. \"c(f)\" is a</span></span><br><span class=\"line\"><span class=\"comment\"> * character sequence of length \"len(f)\". \"c(f)\" and \"disk(f)\" may differ if</span></span><br><span class=\"line\"><span class=\"comment\"> * \"c(f)\" contains unflushed writes not reflected in \"disk(f)\". The flush</span></span><br><span class=\"line\"><span class=\"comment\"> * operation has the effect of making \"disk(f)\" identical to \"c(f)\".</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * A file is said to be *valid* if the following conditions hold:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V1. The \"closed\" and \"curr\" fields are correct:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.closed == closed(f) f.curr == curr(f)</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V2. The current position is either contained in the buffer, or just past</span></span><br><span class=\"line\"><span class=\"comment\"> * the buffer:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.lo &lt;= f.curr &lt;= f.hi</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V3. Any (possibly) un-flushed characters are stored in \"f.buff\":</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V4. For all characters not covered by V3, c(f) and disk(f) agree:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) =&gt; c(f)[i] ==</span></span><br><span class=\"line\"><span class=\"comment\"> * disk(f)[i])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V5. \"f.dirty\" is true iff the buffer contains bytes that should be</span></span><br><span class=\"line\"><span class=\"comment\"> * flushed to the file; by V3 and V4, only part of the buffer can be dirty.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V6. this.maxHi == this.lo + this.buff.length</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that \"f.buff\" can be \"null\" in a valid file, since the range of</span></span><br><span class=\"line\"><span class=\"comment\"> * characters in V3 is empty when \"f.lo == f.curr\".</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * A file is said to be *ready* if the buffer contains the current position,</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e., when:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * R1. !f.closed &amp;&amp; f.buff != null &amp;&amp; f.lo &lt;= f.curr &amp;&amp; f.curr &lt; f.hi</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * When a file is ready, reading or writing a single byte can be performed</span></span><br><span class=\"line\"><span class=\"comment\"> * by reading or writing the in-memory buffer without performing a disk</span></span><br><span class=\"line\"><span class=\"comment\"> * operation.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * !!!This class come from network ,I just adjust code style!!!</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaofeng</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018 -05-02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BufferedRandomAccessFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">RandomAccessFile</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 64K buffer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LOG_BUFF_SZ = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFF_SZ = (<span class=\"number\">1</span> &lt;&lt; LOG_BUFF_SZ);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> BUFF_MASK = ~(((<span class=\"keyword\">long</span>) BUFF_SZ) - <span class=\"number\">1L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String path_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This implementation is based on the buffer implementation in Modula-3's</span></span><br><span class=\"line\"><span class=\"comment\">     * \"Rd\", \"Wr\", \"RdClass\", and \"WrClass\" interfaces.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * true iff un-flushed bytes exist</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> dirty_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * dirty_ can be cleared by e.g. seek, so track sync separately</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> syncNeeded_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * current position in file</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> curr_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * bounds on characters in \"buff\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lo_, hi_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * local buffer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] buff_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * this.lo + this.buff.length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxHi_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * buffer contains last file block?</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hitEOF_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * disk position</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> diskPos_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on &lt;code&gt;file&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * in mode &lt;code&gt;mode&lt;/code&gt;, which should be \"r\" for reading only, or</span></span><br><span class=\"line\"><span class=\"comment\">     * \"rw\" for reading and writing.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(File file, String mode)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(file, mode, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Instantiates a new Buffered random access file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size the size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(File file, String mode, <span class=\"keyword\">int</span> size)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(file, mode);</span><br><span class=\"line\">        path_ = file.getAbsolutePath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on the file named</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;name&lt;/code&gt; in mode &lt;code&gt;mode&lt;/code&gt;, which should be \"r\" for</span></span><br><span class=\"line\"><span class=\"comment\">     * reading only, or \"rw\" for reading and writing.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name the name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(String name, String mode)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(name, mode, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Instantiates a new Buffered random access file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name the name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size the size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> FileNotFoundException the file not found exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(String name, String mode, <span class=\"keyword\">int</span> size)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, mode);</span><br><span class=\"line\">        path_ = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lo_ = <span class=\"keyword\">this</span>.curr_ = <span class=\"keyword\">this</span>.hi_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_ = (size &gt; BUFF_SZ) ? <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[size] : <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[BUFF_SZ];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxHi_ = (<span class=\"keyword\">long</span>) BUFF_SZ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hitEOF_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diskPos_ = <span class=\"number\">0L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Gets path.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the path</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> path_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sync.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (syncNeeded_) &#123;</span><br><span class=\"line\">            flush();</span><br><span class=\"line\">            getChannel().force(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            syncNeeded_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flush();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_ = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush any bytes in the file's buffer that have not yet been written to</span></span><br><span class=\"line\"><span class=\"comment\">     * disk. If the file was created read-only, this method is a no-op.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush any dirty bytes in the buffer to disk.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flushBuffer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dirty_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.diskPos_ != <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.seek(<span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.write(<span class=\"keyword\">this</span>.buff_, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.diskPos_ = <span class=\"keyword\">this</span>.curr_;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read at most \"this.buff.length\" bytes into \"this.buff\", returning the</span></span><br><span class=\"line\"><span class=\"comment\">     * number of bytes read. If the return result is less than</span></span><br><span class=\"line\"><span class=\"comment\">     * \"this.buff.length\", then EOF was read.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">fillBuffer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rem = <span class=\"keyword\">this</span>.buff_.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rem &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">super</span>.read(<span class=\"keyword\">this</span>.buff_, cnt, rem);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt += n;</span><br><span class=\"line\">            rem -= n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((cnt &lt; <span class=\"number\">0</span>) &amp;&amp; (<span class=\"keyword\">this</span>.hitEOF_ = (cnt &lt; <span class=\"keyword\">this</span>.buff_.length))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// make sure buffer that wasn't read is initialized with -1</span></span><br><span class=\"line\">            Arrays.fill(<span class=\"keyword\">this</span>.buff_, cnt, <span class=\"keyword\">this</span>.buff_.length, (<span class=\"keyword\">byte</span>) <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diskPos_ += cnt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method positions &lt;code&gt;this.curr&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">     * If &lt;code&gt;pos&lt;/code&gt; does not fall in the current buffer, it flushes the</span></span><br><span class=\"line\"><span class=\"comment\">     * current buffer and loads the correct one.&lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * On exit from this routine &lt;code&gt;this.curr == this.hi&lt;/code&gt; iff &lt;code&gt;pos&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * is at or past the end-of-file, which can only happen if the file was</span></span><br><span class=\"line\"><span class=\"comment\">     * opened in read-only mode.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seek</span><span class=\"params\">(<span class=\"keyword\">long</span> pos)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &gt;= <span class=\"keyword\">this</span>.hi_ || pos &lt; <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// seeking outside of current buffer -- flush and read</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.lo_ = pos &amp; BUFF_MASK; <span class=\"comment\">// start at BuffSz boundary</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maxHi_ = <span class=\"keyword\">this</span>.lo_ + (<span class=\"keyword\">long</span>) <span class=\"keyword\">this</span>.buff_.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.diskPos_ != <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.seek(<span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.diskPos_ = <span class=\"keyword\">this</span>.lo_;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">this</span>.fillBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.lo_ + (<span class=\"keyword\">long</span>) n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// seeking inside current buffer -- no read required</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pos &lt; <span class=\"keyword\">this</span>.curr_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if seeking backwards, we must flush to maintain V4</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ = pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getFilePointer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.curr_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(<span class=\"keyword\">this</span>.curr_, <span class=\"keyword\">super</span>.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readEnd()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> res = <span class=\"keyword\">this</span>.buff_[(<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_)];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"keyword\">int</span>) res) &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// convert byte -&gt; int</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.read(b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readEnd()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len = Math.min(len, (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.hi_ - <span class=\"keyword\">this</span>.curr_));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> buffOff = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">        System.arraycopy(<span class=\"keyword\">this</span>.buff_, buffOff, b, off, len);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ += len;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// test for EOF</span></span><br><span class=\"line\">            <span class=\"comment\">// if (this.hi &lt; this.maxHi) return -1;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// slow path -- read another buffer</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_ &amp;&amp; <span class=\"keyword\">this</span>.hi_ &lt; <span class=\"keyword\">this</span>.maxHi_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// at EOF -- bump \"hi\"</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.hi_++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// slow path -- write current buffer; read next one</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// appending to EOF -- bump \"hi\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.hi_++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_[(<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_)] = (<span class=\"keyword\">byte</span>) b;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        syncNeeded_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.write(b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">this</span>.writeAtMost(b, off, len);</span><br><span class=\"line\">            off += n;</span><br><span class=\"line\">            len -= n;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            syncNeeded_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write at most \"len\" bytes to \"b\" starting at position \"off\", and return</span></span><br><span class=\"line\"><span class=\"comment\">     * the number of bytes written.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">writeAtMost</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_ &amp;&amp; <span class=\"keyword\">this</span>.hi_ &lt; <span class=\"keyword\">this</span>.maxHi_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// at EOF -- bump \"hi\"</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.maxHi_;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// slow path -- write current buffer; read next one</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// appending to EOF -- bump \"hi\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.maxHi_;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len = Math.min(len, (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.hi_ - <span class=\"keyword\">this</span>.curr_));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> buffOff = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">        System.arraycopy(b, off, <span class=\"keyword\">this</span>.buff_, buffOff, len);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ += len;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><code>需求</code>：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。</p>\n<p><code>运用的技术</code>：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。</p>\n<p><code>思想</code>：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。</p>\n<p><code>原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile</code></p>\n<p>模拟写日志的类<br>因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。<br>","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.inveno.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogSvr</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(LogSvr.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SimpleDateFormat  dateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logMsg</span><span class=\"params\">(File logFile,String msgInfo)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!logFile.exists()) &#123;</span><br><span class=\"line\">\t\t\tlogFile.createNewFile();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWriter txtWriter = <span class=\"keyword\">new</span> FileWriter(logFile,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\ttxtWriter.write(dateFormat.format(<span class=\"keyword\">new</span> Date()) + <span class=\"string\">\"\\t\"</span> + msgInfo + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\ttxtWriter.flush();</span><br><span class=\"line\">\t\ttxtWriter.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(exec != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\texec.shutdown();</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">\"file write stop ！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> LogSvr logSvr = <span class=\"keyword\">new</span> LogSvr();</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> File tmpLogFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pathtolog.log\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String msgInfo = <span class=\"string\">\"test !\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//启动一个线程每5秒向日志文件写一次数据</span></span><br><span class=\"line\">\t\texec.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tlogSvr.logMsg(tmpLogFile, msgInfo);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//Thread.sleep(1000);</span></span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.error(<span class=\"string\">\"file write error ！\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">0</span>, <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = Logger.getLogger(Start.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> pointer = <span class=\"number\">0</span>; <span class=\"comment\">// 文件指针位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleDateFormat dateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ScheduledExecutorService exec = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">realtimeShowLog</span><span class=\"params\">(<span class=\"keyword\">final</span> File logFile)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"logFile can not be null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动一个线程每2秒读取新增的日志信息</span></span><br><span class=\"line\">        exec.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//获得变化部分</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> len = logFile.length();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (len &lt; pointer) &#123;</span><br><span class=\"line\">                        logger.info(<span class=\"string\">\"Log file was reset. Restarting logging from start of file.\"</span>);</span><br><span class=\"line\">                        pointer = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//指定文件可读可写</span></span><br><span class=\"line\">                        RandomAccessFile randomFile = <span class=\"keyword\">new</span> RandomAccessFile(logFile, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class=\"line\">                        logger.info(<span class=\"string\">\"RandomAccessFile文件指针的初始位置:\"</span> + pointer);</span><br><span class=\"line\"></span><br><span class=\"line\">                        randomFile.seek(pointer);<span class=\"comment\">//移动到文件指针位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        String tmp;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span> ((tmp = randomFile.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"info : \"</span> + <span class=\"keyword\">new</span> String(tmp.getBytes(<span class=\"string\">\"utf-8\"</span>)));</span><br><span class=\"line\">                            pointer = randomFile.getFilePointer();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        randomFile.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//实时读取日志异常，需要记录时间和lastTimeFileSize 以便后期手动补充</span></span><br><span class=\"line\">                    logger.error(dateFormat.format(<span class=\"keyword\">new</span> Date()) + <span class=\"string\">\" File read error, pointer: \"</span> + pointer);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将pointer 落地以便下次启动的时候，直接从指定位置获取</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exec != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            exec.shutdown();</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"file read stop ！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        LogView view = <span class=\"keyword\">new</span> LogView();</span><br><span class=\"line\">        File tmpLogFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pathtolog.log\"</span>);</span><br><span class=\"line\">        System.out.println(tmpLogFile.getAbsolutePath());</span><br><span class=\"line\">        view.pointer = <span class=\"number\">0</span>;</span><br><span class=\"line\">        view.realtimeShowLog(tmpLogFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.travelsky.arch.utils;  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * \"License\"); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; is like a</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;RandomAccessFile&lt;/code&gt;, but it uses a private buffer so that most</span></span><br><span class=\"line\"><span class=\"comment\"> * operations do not require a disk access.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: The operations on this class are unmonitored. Also, the correct</span></span><br><span class=\"line\"><span class=\"comment\"> * functioning of the &lt;code&gt;RandomAccessFile&lt;/code&gt; methods that are not</span></span><br><span class=\"line\"><span class=\"comment\"> * overridden here relies on the implementation of those methods in the</span></span><br><span class=\"line\"><span class=\"comment\"> * superclass.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * To describe the above fields, we introduce the following abstractions for</span></span><br><span class=\"line\"><span class=\"comment\"> * the file \"f\":</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * len(f) the length of the file curr(f) the current position in the file</span></span><br><span class=\"line\"><span class=\"comment\"> * c(f) the abstract contents of the file disk(f) the contents of f's</span></span><br><span class=\"line\"><span class=\"comment\"> * backing disk file closed(f) true iff the file is closed</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * \"curr(f)\" is an index in the closed interval [0, len(f)]. \"c(f)\" is a</span></span><br><span class=\"line\"><span class=\"comment\"> * character sequence of length \"len(f)\". \"c(f)\" and \"disk(f)\" may differ if</span></span><br><span class=\"line\"><span class=\"comment\"> * \"c(f)\" contains unflushed writes not reflected in \"disk(f)\". The flush</span></span><br><span class=\"line\"><span class=\"comment\"> * operation has the effect of making \"disk(f)\" identical to \"c(f)\".</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * A file is said to be *valid* if the following conditions hold:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V1. The \"closed\" and \"curr\" fields are correct:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.closed == closed(f) f.curr == curr(f)</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V2. The current position is either contained in the buffer, or just past</span></span><br><span class=\"line\"><span class=\"comment\"> * the buffer:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.lo &lt;= f.curr &lt;= f.hi</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V3. Any (possibly) un-flushed characters are stored in \"f.buff\":</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * (forall i in [f.lo, f.curr): c(f)[i] == f.buff[i - f.lo])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V4. For all characters not covered by V3, c(f) and disk(f) agree:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * (forall i in [f.lo, len(f)): i not in [f.lo, f.curr) =&gt; c(f)[i] ==</span></span><br><span class=\"line\"><span class=\"comment\"> * disk(f)[i])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V5. \"f.dirty\" is true iff the buffer contains bytes that should be</span></span><br><span class=\"line\"><span class=\"comment\"> * flushed to the file; by V3 and V4, only part of the buffer can be dirty.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * f.dirty == (exists i in [f.lo, f.curr): c(f)[i] != f.buff[i - f.lo])</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * V6. this.maxHi == this.lo + this.buff.length</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that \"f.buff\" can be \"null\" in a valid file, since the range of</span></span><br><span class=\"line\"><span class=\"comment\"> * characters in V3 is empty when \"f.lo == f.curr\".</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * A file is said to be *ready* if the buffer contains the current position,</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e., when:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * R1. !f.closed &amp;&amp; f.buff != null &amp;&amp; f.lo &lt;= f.curr &amp;&amp; f.curr &lt; f.hi</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * When a file is ready, reading or writing a single byte can be performed</span></span><br><span class=\"line\"><span class=\"comment\"> * by reading or writing the in-memory buffer without performing a disk</span></span><br><span class=\"line\"><span class=\"comment\"> * operation.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * !!!This class come from network ,I just adjust code style!!!</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaofeng</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018 -05-02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BufferedRandomAccessFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">RandomAccessFile</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 64K buffer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LOG_BUFF_SZ = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUFF_SZ = (<span class=\"number\">1</span> &lt;&lt; LOG_BUFF_SZ);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> BUFF_MASK = ~(((<span class=\"keyword\">long</span>) BUFF_SZ) - <span class=\"number\">1L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String path_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This implementation is based on the buffer implementation in Modula-3's</span></span><br><span class=\"line\"><span class=\"comment\">     * \"Rd\", \"Wr\", \"RdClass\", and \"WrClass\" interfaces.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * true iff un-flushed bytes exist</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> dirty_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * dirty_ can be cleared by e.g. seek, so track sync separately</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> syncNeeded_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * current position in file</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> curr_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * bounds on characters in \"buff\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lo_, hi_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * local buffer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] buff_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * this.lo + this.buff.length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxHi_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * buffer contains last file block?</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hitEOF_;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * disk position</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> diskPos_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on &lt;code&gt;file&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * in mode &lt;code&gt;mode&lt;/code&gt;, which should be \"r\" for reading only, or</span></span><br><span class=\"line\"><span class=\"comment\">     * \"rw\" for reading and writing.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(File file, String mode)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(file, mode, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Instantiates a new Buffered random access file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size the size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(File file, String mode, <span class=\"keyword\">int</span> size)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(file, mode);</span><br><span class=\"line\">        path_ = file.getAbsolutePath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Open a new &lt;code&gt;BufferedRandomAccessFile&lt;/code&gt; on the file named</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;name&lt;/code&gt; in mode &lt;code&gt;mode&lt;/code&gt;, which should be \"r\" for</span></span><br><span class=\"line\"><span class=\"comment\">     * reading only, or \"rw\" for reading and writing.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name the name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(String name, String mode)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(name, mode, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Instantiates a new Buffered random access file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name the name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mode the mode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size the size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> FileNotFoundException the file not found exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BufferedRandomAccessFile</span><span class=\"params\">(String name, String mode, <span class=\"keyword\">int</span> size)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, mode);</span><br><span class=\"line\">        path_ = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lo_ = <span class=\"keyword\">this</span>.curr_ = <span class=\"keyword\">this</span>.hi_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_ = (size &gt; BUFF_SZ) ? <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[size] : <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[BUFF_SZ];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxHi_ = (<span class=\"keyword\">long</span>) BUFF_SZ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hitEOF_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diskPos_ = <span class=\"number\">0L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Gets path.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the path</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> path_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sync.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (syncNeeded_) &#123;</span><br><span class=\"line\">            flush();</span><br><span class=\"line\">            getChannel().force(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            syncNeeded_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flush();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_ = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush any bytes in the file's buffer that have not yet been written to</span></span><br><span class=\"line\"><span class=\"comment\">     * disk. If the file was created read-only, this method is a no-op.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flush any dirty bytes in the buffer to disk.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flushBuffer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dirty_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.diskPos_ != <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.seek(<span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.write(<span class=\"keyword\">this</span>.buff_, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.diskPos_ = <span class=\"keyword\">this</span>.curr_;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read at most \"this.buff.length\" bytes into \"this.buff\", returning the</span></span><br><span class=\"line\"><span class=\"comment\">     * number of bytes read. If the return result is less than</span></span><br><span class=\"line\"><span class=\"comment\">     * \"this.buff.length\", then EOF was read.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">fillBuffer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rem = <span class=\"keyword\">this</span>.buff_.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rem &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">super</span>.read(<span class=\"keyword\">this</span>.buff_, cnt, rem);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cnt += n;</span><br><span class=\"line\">            rem -= n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((cnt &lt; <span class=\"number\">0</span>) &amp;&amp; (<span class=\"keyword\">this</span>.hitEOF_ = (cnt &lt; <span class=\"keyword\">this</span>.buff_.length))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// make sure buffer that wasn't read is initialized with -1</span></span><br><span class=\"line\">            Arrays.fill(<span class=\"keyword\">this</span>.buff_, cnt, <span class=\"keyword\">this</span>.buff_.length, (<span class=\"keyword\">byte</span>) <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diskPos_ += cnt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method positions &lt;code&gt;this.curr&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">     * If &lt;code&gt;pos&lt;/code&gt; does not fall in the current buffer, it flushes the</span></span><br><span class=\"line\"><span class=\"comment\">     * current buffer and loads the correct one.&lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * On exit from this routine &lt;code&gt;this.curr == this.hi&lt;/code&gt; iff &lt;code&gt;pos&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * is at or past the end-of-file, which can only happen if the file was</span></span><br><span class=\"line\"><span class=\"comment\">     * opened in read-only mode.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seek</span><span class=\"params\">(<span class=\"keyword\">long</span> pos)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &gt;= <span class=\"keyword\">this</span>.hi_ || pos &lt; <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// seeking outside of current buffer -- flush and read</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.lo_ = pos &amp; BUFF_MASK; <span class=\"comment\">// start at BuffSz boundary</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maxHi_ = <span class=\"keyword\">this</span>.lo_ + (<span class=\"keyword\">long</span>) <span class=\"keyword\">this</span>.buff_.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.diskPos_ != <span class=\"keyword\">this</span>.lo_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.seek(<span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.diskPos_ = <span class=\"keyword\">this</span>.lo_;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">this</span>.fillBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.lo_ + (<span class=\"keyword\">long</span>) n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// seeking inside current buffer -- no read required</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pos &lt; <span class=\"keyword\">this</span>.curr_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if seeking backwards, we must flush to maintain V4</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.flushBuffer();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ = pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getFilePointer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.curr_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * max accounts for the case where we have written past the old file length, but not yet flushed our buffer</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(<span class=\"keyword\">this</span>.curr_, <span class=\"keyword\">super</span>.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readEnd()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> res = <span class=\"keyword\">this</span>.buff_[(<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_)];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"keyword\">int</span>) res) &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// convert byte -&gt; int</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.read(b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readEnd()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len = Math.min(len, (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.hi_ - <span class=\"keyword\">this</span>.curr_));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> buffOff = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">        System.arraycopy(<span class=\"keyword\">this</span>.buff_, buffOff, b, off, len);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ += len;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// test for EOF</span></span><br><span class=\"line\">            <span class=\"comment\">// if (this.hi &lt; this.maxHi) return -1;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// slow path -- read another buffer</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_ &amp;&amp; <span class=\"keyword\">this</span>.hi_ &lt; <span class=\"keyword\">this</span>.maxHi_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// at EOF -- bump \"hi\"</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.hi_++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// slow path -- write current buffer; read next one</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// appending to EOF -- bump \"hi\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.hi_++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buff_[(<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_)] = (<span class=\"keyword\">byte</span>) b;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        syncNeeded_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.write(b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"keyword\">this</span>.writeAtMost(b, off, len);</span><br><span class=\"line\">            off += n;</span><br><span class=\"line\">            len -= n;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dirty_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            syncNeeded_ = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write at most \"len\" bytes to \"b\" starting at position \"off\", and return</span></span><br><span class=\"line\"><span class=\"comment\">     * the number of bytes written.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">writeAtMost</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ &gt;= <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hitEOF_ &amp;&amp; <span class=\"keyword\">this</span>.hi_ &lt; <span class=\"keyword\">this</span>.maxHi_) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// at EOF -- bump \"hi\"</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.maxHi_;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// slow path -- write current buffer; read next one</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.seek(<span class=\"keyword\">this</span>.curr_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.curr_ == <span class=\"keyword\">this</span>.hi_) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// appending to EOF -- bump \"hi\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.hi_ = <span class=\"keyword\">this</span>.maxHi_;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len = Math.min(len, (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.hi_ - <span class=\"keyword\">this</span>.curr_));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> buffOff = (<span class=\"keyword\">int</span>) (<span class=\"keyword\">this</span>.curr_ - <span class=\"keyword\">this</span>.lo_);</span><br><span class=\"line\">        System.arraycopy(b, off, <span class=\"keyword\">this</span>.buff_, buffOff, len);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curr_ += len;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri May 24 2019 00:05:06 GMT+0800 (China Standard Time)","title":"Java实时读取log日志文件示例代码","path":"2019/05/21/Java实时读取log日志文件示例代码/","eyeCatchImage":null,"excerpt":"<p><code>需求</code>：正在开发一个监控系统，要求将多台日志信息实时采集出来，然后保存到Kafka中，后期对日志数据进行spark运算、大数据处理分析，日志按大小，时间切分。</p>\n<p><code>运用的技术</code>：RandomAccessFile类中seek方法可以从指定位置读取文件，可以用来实现文件实时读取，JDK文档有对RandomAccessFile的介绍。</p>\n<p><code>思想</code>：在每一次读取后，close一下就不会影响重命名操作了。因为日志是线上机器产生的，我们只需要写实时读取的方法即可，但是这里为了模拟实际情况，也把产生日志的方法出来，在测试的时候，可以手动改变日志的名称，更为方便的处理方式—–将日志mock.log直接删除即可。</p>\n<p><code>原生RandomAccessFile效率较低，后面附有BufferedRandomAccessFile</code></p>\n<p>模拟写日志的类<br>因为日志是按大小和时间切分的，在测试的时候，直接修改日志的名称，或者删除日志。<br>","date":"2019-05-21T06:28:14.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java编译类型和运行类型","date":"2018-10-29T14:00:41.000Z","_content":"\n\n```Java\n\nclass Animal{\n\n}\n\nclass Dog extends Animal{\n  public void eat(){}\n}\n\n----------\nAnimal a = new Dog();\na.eat()//编译报错\n((Dog) a).run()//编译通过\n\n```\n\n如上的简易代码，编译时会报错。\n编译类型：Animal a\n运行类型：new Dog()\n\n编译时，编译类型会根据a.eat()查找eat方法，找不到就会报错。\n使用强制类型转换可以解决该问题，即\n((Dog) a).run()\n","source":"_posts/Java编译类型和运行类型.md","raw":"---\ntitle: Java编译类型和运行类型\ndate: 2018-10-29 22:00:41\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n\n```Java\n\nclass Animal{\n\n}\n\nclass Dog extends Animal{\n  public void eat(){}\n}\n\n----------\nAnimal a = new Dog();\na.eat()//编译报错\n((Dog) a).run()//编译通过\n\n```\n\n如上的简易代码，编译时会报错。\n编译类型：Animal a\n运行类型：new Dog()\n\n编译时，编译类型会根据a.eat()查找eat方法，找不到就会报错。\n使用强制类型转换可以解决该问题，即\n((Dog) a).run()\n","slug":"Java编译类型和运行类型","published":1,"updated":"2018-10-29T14:18:16.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x3a0024exothapamcav","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------</span><br><span class=\"line\">Animal a = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">a.eat()<span class=\"comment\">//编译报错</span></span><br><span class=\"line\">((Dog) a).run()<span class=\"comment\">//编译通过</span></span><br></pre></td></tr></table></figure>\n<p>如上的简易代码，编译时会报错。<br>编译类型：Animal a<br>运行类型：new Dog()</p>\n<p>编译时，编译类型会根据a.eat()查找eat方法，找不到就会报错。<br>使用强制类型转换可以解决该问题，即<br>((Dog) a).run()</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------</span><br><span class=\"line\">Animal a = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">a.eat()<span class=\"comment\">//编译报错</span></span><br><span class=\"line\">((Dog) a).run()<span class=\"comment\">//编译通过</span></span><br></pre></td></tr></table></figure>\n<p>如上的简易代码，编译时会报错。<br>编译类型：Animal a<br>运行类型：new Dog()</p>\n<p>编译时，编译类型会根据a.eat()查找eat方法，找不到就会报错。<br>使用强制类型转换可以解决该问题，即<br>((Dog) a).run()</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Oct 29 2018 22:18:16 GMT+0800 (China Standard Time)","title":"Java编译类型和运行类型","path":"2018/10/29/Java编译类型和运行类型/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-29T14:00:41.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux Bash 默认的组合键汇总","date":"2018-09-05T05:44:51.000Z","_content":"| 案件组合           | 执行结果     |\n| :-----:           | :-----:     |\n|Ctrl + C           |终止目前命令   |\n|Ctrl + D           |     输入结束（EOF）,例如邮件结束的时候    |\n|Ctrl + M           | 就是Enter  |\n|Ctrl + S           |暂停屏幕的输出 |\n|Ctrl + Q           |恢复屏幕输出|\n|Ctrl + U           |在提示符下，将整行命令删除|\n|Ctrl + Z           |暂停目前的命令|\n","source":"_posts/Linux-Bash-默认的组合键汇总.md","raw":"---\ntitle: Linux Bash 默认的组合键汇总\ndate: 2018-09-05 13:44:51\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n| 案件组合           | 执行结果     |\n| :-----:           | :-----:     |\n|Ctrl + C           |终止目前命令   |\n|Ctrl + D           |     输入结束（EOF）,例如邮件结束的时候    |\n|Ctrl + M           | 就是Enter  |\n|Ctrl + S           |暂停屏幕的输出 |\n|Ctrl + Q           |恢复屏幕输出|\n|Ctrl + U           |在提示符下，将整行命令删除|\n|Ctrl + Z           |暂停目前的命令|\n","slug":"Linux-Bash-默认的组合键汇总","published":1,"updated":"2018-09-05T05:51:26.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x3n0027exothf5ne131","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">案件组合</th>\n<th style=\"text-align:center\">执行结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + C</td>\n<td style=\"text-align:center\">终止目前命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + D</td>\n<td style=\"text-align:center\">输入结束（EOF）,例如邮件结束的时候</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + M</td>\n<td style=\"text-align:center\">就是Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + S</td>\n<td style=\"text-align:center\">暂停屏幕的输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Q</td>\n<td style=\"text-align:center\">恢复屏幕输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + U</td>\n<td style=\"text-align:center\">在提示符下，将整行命令删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Z</td>\n<td style=\"text-align:center\">暂停目前的命令</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">案件组合</th>\n<th style=\"text-align:center\">执行结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + C</td>\n<td style=\"text-align:center\">终止目前命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + D</td>\n<td style=\"text-align:center\">输入结束（EOF）,例如邮件结束的时候</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + M</td>\n<td style=\"text-align:center\">就是Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + S</td>\n<td style=\"text-align:center\">暂停屏幕的输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Q</td>\n<td style=\"text-align:center\">恢复屏幕输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + U</td>\n<td style=\"text-align:center\">在提示符下，将整行命令删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Z</td>\n<td style=\"text-align:center\">暂停目前的命令</td>\n</tr>\n</tbody>\n</table>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 05 2018 13:51:26 GMT+0800 (China Standard Time)","title":"Linux Bash 默认的组合键汇总","path":"2018/09/05/Linux-Bash-默认的组合键汇总/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-05T05:44:51.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Jet Brains(IDE)常用快捷键","date":"2018-09-02T04:32:47.000Z","_content":"#### Mac键盘符号和修饰键说明\n\n- ⌘ Command\n- ⇧ Shift\n- ⌥ Option\n- ⌃ Control\n- ↩︎ Return/Enter\n- ⌫ Delete\n- ⌦ 向前删除键（Fn+Delete）\n- ↑ 上箭头\n- ↓ 下箭头\n- ← 左箭头\n- → 右箭头\n- ⇞ Page Up（Fn+↑）\n- ⇟ Page Down（Fn+↓）\n- Home Fn + ←\n- End Fn + →\n- ⇥ 右制表符（Tab键）\n- ⇤ 左制表符（Shift+Tab）\n- ⎋ Escape (Esc)\n\n#### iTerm中的快捷键\n小知识点，补充到这里\n\n- ⌘ + T : 新Tab窗口\n- ⌘ + D : 新建窗口，横向切屏 \n\n\n<!-- more -->\n\n#### Editing（编辑）\n\n- ⌘⌥ + ← 或 → 光标跳到上一个文件编辑处，很重要！！！！！！！！！！！\n- ⌃Space 基本的代码补全（补全任何类、方法、变量）\n- ⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）\n- ⌘⇧↩ 自动结束代码，行末自动添加分号\n- ⌘P 显示方法的参数信息\n- ⌃J, Mid. button click 快速查看文档\n- ⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n- ⌘+鼠标放在代码上 显示代码简要信息\n- ⌘F1 在错误或警告处显示具体描述信息\n- ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n- ⌃O 覆盖方法（重写父类方法）\n- ⌃I 实现方法（实现接口中的方法）\n- ⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n- ⌘/ 注释/取消注释与行注释\n- ⌘⌥/ 注释/取消注释与块注释\n- ⌥↑ 连续选中代码块\n- ⌥↓ 减少当前选中的代码块\n- ⌃⇧Q 显示上下文信息\n- ⌥↩ 显示意向动作和快速修复代码\n- ⌘⌥L 格式化代码\n- ⌃⌥O 优化import\n- ⌃⌥I 自动缩进线\n- ⇥ / ⇧⇥ 缩进代码 / 反缩进代码\n- ⌘X 剪切当前行或选定的块到剪贴板\n- ⌘C 复制当前行或选定的块到剪贴板\n- ⌘V 从剪贴板粘贴\n- ⌘⇧V 从最近的缓冲区粘贴\n- ⌘D 复制当前行或选定的块\n- ⌘⌫ 删除当前行或选定的块的行\n- ⌃⇧J 智能的将代码拼接成一行\n- ⌘↩ 智能的拆分拼接的行\n- ⇧↩ 开始新的一行\n- ⌘⇧U 大小写切换\n- ⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始\n- ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n- ⌥⌫ 删除到单词的开头\n- ⌘+ / ⌘- 展开 / 折叠代码块\n- ⌘⇧+ 展开所以代码块\n- ⌘⇧- 折叠所有代码块\n- ⌘W 关闭活动的编辑器选项卡\n\n#### Search/Replace（查询/替换）\n\n- Double ⇧ 查询任何东西\n- ⌘F 文件内查找\n- ⌘G 查找模式下，向下查找\n- ⌘⇧G 查找模式下，向上查找\n- ⌘R 文件内替换\n- ⌘⇧F 全局查找（根据路径）\n- ⌘⇧R 全局替换（根据路径）\n- ⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n- ⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n\n#### Usage Search（使用查询）\n\n- ⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法\n- ⌘⇧F7 在文件中突出显示的用法\n- ⌘⌥F7 显示用法\n\n#### Compile and Run（编译和运行）\n\n- ⌘F9 编译Project\n- ⌘⇧F9 编译选择的文件、包或模块\n- ⌃⌥R 弹出 Run 的可选择菜单\n- ⌃⌥D 弹出 Debug 的可选择菜单\n- ⌃R 运行\n- ⌃D 调试\n- ⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置\n\n#### Debugging（调试）\n\n- F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\n- F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n- ⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n- ⇧F8 跳出\n- ⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点\n- ⌥F8 计算表达式（可以更改变量值使其生效）\n- ⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n- ⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n- ⌘⇧F8 查看断点信息\n\n#### Navigation（导航）\n\n- ⌘O 查找类文件\n- ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n- ⌘⌥O 前往指定的变量 / 方法\n- ⌃← / ⌃→ 左右切换打开的编辑tab页\n- F12 返回到前一个工具窗口\n- ⎋ 从工具窗口进入代码文件窗口\n- ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n- ⌘⇧F4 关闭活动run/messages/find/… tab\n- ⌘L 在当前文件跳转到某一行的指定处\n- ⌘E 显示最近打开的文件记录列表\n- ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n- ⌘⇧⌫ 跳转到最后一个编辑的地方\n- ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n- ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n- ⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n- ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n- ⌃⇧B 跳转到类型声明处\n- ⌘U 前往当前光标所在方法的父类的方法 / 接口定义\n- ⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置\n- ⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置\n- ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n- ⌃H 显示当前类的层次结构\n- ⌘⇧H 显示方法层次结构\n- ⌃⌥H 显示调用层次结构\n- F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置\n- F4 / ⌘↓ 编辑/查看代码源\n- ⌥ Home 显示到当前文件的导航条\n- F3选中文件/文件夹/代码行，添加/取消书签\n- ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n- ⌃0...⌃9 定位到对应数值的书签位置\n- ⌘F3 显示所有书签\n\n#### Refactoring（重构）\n\n- F5 复制文件到指定目录\n- F6 移动文件到指定目录\n- ⌘⌫ 在文件上为安全删除文件，弹出确认框\n- ⇧F6 重命名文件\n- ⌘F6 更改签名\n- ⌘⌥N 一致性\n- ⌘⌥M 将选中的代码提取为方法\n- ⌘⌥V 提取变量\n- ⌘⌥F 提取字段\n- ⌘⌥C 提取常量\n- ⌘⌥P 提取参数\n\n#### VCS/Local History（版本控制/本地历史记录）\n\n- ⌘K 提交代码到版本控制器\n- ⌘T 从版本控制器更新代码\n- ⌥⇧C 查看最近的变更记录\n- ⌃C 快速弹出版本控制器操作面板\n\n#### Live Templates（动态代码模板）\n\n- ⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住\n- ⌘J 插入自定义动态代码模板\n\n#### General（通用）\n- ⌘1...⌘9 打开相应编号的工具窗口\n- ⌘S 保存所有\n- ⌘⌥Y 同步、刷新\n- ⌃⌘F 切换全屏模式\n- ⌘⇧F12 切换最大化编辑器\n- ⌥⇧F 添加到收藏夹\n- ⌥⇧I 检查当前文件与当前的配置文件\n- ⌘, 打开IDEA系统设置\n- ⌘; 打开项目结构对话框\n- ⇧⌘A 查找动作（可设置相关选项）\n- ⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n\nOther（一些官方文档上没有体现的快捷键）\n\n- ⌘⇧8 竖编辑模式\n\n导航\n\n- ⌘O 查找类文件 Ctrl + N\n- ⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N\n- ⌃← / ⌃→ 左右切换打开的编辑tab页Alt←/Alt→\n- ⎋ 从工具窗口进入代码文件窗口 ESC\n- ⌘L 在当前文件跳转到某一行的指定处 Ctrl + G\n- ⌘E 显示最近打开的文件记录列表 Ctrl + E\n- ⌘⌥←/ ⌘⌥→退回 / 前进到上一个操作的地方 Ctrl + Alt + ←/Ctrl + Alt + →\n- ⌘⇧⌫ 跳转到最后一个编辑的地方\n- ⌃H 显示当前类的层次结构Ctrl + H\n- ⌘⇧H 显示方法层次结构\n- ⌃⌥H 显示调用层次结构\n- F4 /⌘↓ 编辑/查看代码源\n- ⌘⌥U 显示类UML图\n- ⌃J 查看注释\n\n编辑\n\n- ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n- ⌥⌫ 删除到单词的开头\n- ⌘+ /⌘- 展开 / 折叠代码块\n- ⌘F1 在错误或警告处显示具体描述信息\n- ⌘⌥L 格式化代码\n- ⌃⌥O 优化import\n- ⇧↩ 开始新的一行\n- ⌘⇧↩ 自动结束代码，行末自动添加分号\n- ⌃I 实现方法（实现接口中的方法）\n- ⇧F6 重命名文件或者变量\n- ⌘N,⌃↩,⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n- ⌘P 显示方法的参数信息\n\n查找\n\n- Double⇧ 查找任何东西\n- ⌘⇧F 全局查找（根据路径）\n- ⌘F 文件内查找\n- ⌘G 查找模式下，向下查找\n- ⌘⇧G 查找模式下，向上查找\n\n导航\n\n- ⌘⌥B 跳转到接口的实现\n- ⌘U 查看接口定义\n- ⌘⌥← /⌘⌥→ 退回 / 前进到上一个操作的地方\n- ⌘B /⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n- ⌃⇧B 跳转到类型声明处\n- ⌥ Space,⌘Y 快速打开光标所在方法、类的定义\n- ⌘O 查找类文件\n- ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n- F12 返回到前一个工具窗口\n- ⎋ 从工具窗口进入代码文件窗口\n- ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n- F3选中文件/文件夹/代码行，添加/取消书签\n- ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n- ⌃0…⌃9 定位到对应数值的书签位置\n- ⌘F3 显示所有书签\n- ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n- ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n通用\n\n- ⌃⌘F 切换全屏模式\n\n自动代码\n\n⚠注：⌘+J可以调出所有提供的代码补全↩即可，下面仅列举常用的几个\n\n原文地址：https://linmi.cc/836\n","source":"_posts/Jet-Brains-IDE-常用快捷键.md","raw":"---\ntitle: Jet Brains(IDE)常用快捷键\ndate: 2018-09-02 12:32:47\ntags:\n  - IDE\ncategories:\n  - IDE\n---\n#### Mac键盘符号和修饰键说明\n\n- ⌘ Command\n- ⇧ Shift\n- ⌥ Option\n- ⌃ Control\n- ↩︎ Return/Enter\n- ⌫ Delete\n- ⌦ 向前删除键（Fn+Delete）\n- ↑ 上箭头\n- ↓ 下箭头\n- ← 左箭头\n- → 右箭头\n- ⇞ Page Up（Fn+↑）\n- ⇟ Page Down（Fn+↓）\n- Home Fn + ←\n- End Fn + →\n- ⇥ 右制表符（Tab键）\n- ⇤ 左制表符（Shift+Tab）\n- ⎋ Escape (Esc)\n\n#### iTerm中的快捷键\n小知识点，补充到这里\n\n- ⌘ + T : 新Tab窗口\n- ⌘ + D : 新建窗口，横向切屏 \n\n\n<!-- more -->\n\n#### Editing（编辑）\n\n- ⌘⌥ + ← 或 → 光标跳到上一个文件编辑处，很重要！！！！！！！！！！！\n- ⌃Space 基本的代码补全（补全任何类、方法、变量）\n- ⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）\n- ⌘⇧↩ 自动结束代码，行末自动添加分号\n- ⌘P 显示方法的参数信息\n- ⌃J, Mid. button click 快速查看文档\n- ⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n- ⌘+鼠标放在代码上 显示代码简要信息\n- ⌘F1 在错误或警告处显示具体描述信息\n- ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n- ⌃O 覆盖方法（重写父类方法）\n- ⌃I 实现方法（实现接口中的方法）\n- ⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n- ⌘/ 注释/取消注释与行注释\n- ⌘⌥/ 注释/取消注释与块注释\n- ⌥↑ 连续选中代码块\n- ⌥↓ 减少当前选中的代码块\n- ⌃⇧Q 显示上下文信息\n- ⌥↩ 显示意向动作和快速修复代码\n- ⌘⌥L 格式化代码\n- ⌃⌥O 优化import\n- ⌃⌥I 自动缩进线\n- ⇥ / ⇧⇥ 缩进代码 / 反缩进代码\n- ⌘X 剪切当前行或选定的块到剪贴板\n- ⌘C 复制当前行或选定的块到剪贴板\n- ⌘V 从剪贴板粘贴\n- ⌘⇧V 从最近的缓冲区粘贴\n- ⌘D 复制当前行或选定的块\n- ⌘⌫ 删除当前行或选定的块的行\n- ⌃⇧J 智能的将代码拼接成一行\n- ⌘↩ 智能的拆分拼接的行\n- ⇧↩ 开始新的一行\n- ⌘⇧U 大小写切换\n- ⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始\n- ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n- ⌥⌫ 删除到单词的开头\n- ⌘+ / ⌘- 展开 / 折叠代码块\n- ⌘⇧+ 展开所以代码块\n- ⌘⇧- 折叠所有代码块\n- ⌘W 关闭活动的编辑器选项卡\n\n#### Search/Replace（查询/替换）\n\n- Double ⇧ 查询任何东西\n- ⌘F 文件内查找\n- ⌘G 查找模式下，向下查找\n- ⌘⇧G 查找模式下，向上查找\n- ⌘R 文件内替换\n- ⌘⇧F 全局查找（根据路径）\n- ⌘⇧R 全局替换（根据路径）\n- ⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n- ⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n\n#### Usage Search（使用查询）\n\n- ⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法\n- ⌘⇧F7 在文件中突出显示的用法\n- ⌘⌥F7 显示用法\n\n#### Compile and Run（编译和运行）\n\n- ⌘F9 编译Project\n- ⌘⇧F9 编译选择的文件、包或模块\n- ⌃⌥R 弹出 Run 的可选择菜单\n- ⌃⌥D 弹出 Debug 的可选择菜单\n- ⌃R 运行\n- ⌃D 调试\n- ⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置\n\n#### Debugging（调试）\n\n- F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\n- F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n- ⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n- ⇧F8 跳出\n- ⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点\n- ⌥F8 计算表达式（可以更改变量值使其生效）\n- ⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n- ⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n- ⌘⇧F8 查看断点信息\n\n#### Navigation（导航）\n\n- ⌘O 查找类文件\n- ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n- ⌘⌥O 前往指定的变量 / 方法\n- ⌃← / ⌃→ 左右切换打开的编辑tab页\n- F12 返回到前一个工具窗口\n- ⎋ 从工具窗口进入代码文件窗口\n- ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n- ⌘⇧F4 关闭活动run/messages/find/… tab\n- ⌘L 在当前文件跳转到某一行的指定处\n- ⌘E 显示最近打开的文件记录列表\n- ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n- ⌘⇧⌫ 跳转到最后一个编辑的地方\n- ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n- ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n- ⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n- ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n- ⌃⇧B 跳转到类型声明处\n- ⌘U 前往当前光标所在方法的父类的方法 / 接口定义\n- ⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置\n- ⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置\n- ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n- ⌃H 显示当前类的层次结构\n- ⌘⇧H 显示方法层次结构\n- ⌃⌥H 显示调用层次结构\n- F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置\n- F4 / ⌘↓ 编辑/查看代码源\n- ⌥ Home 显示到当前文件的导航条\n- F3选中文件/文件夹/代码行，添加/取消书签\n- ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n- ⌃0...⌃9 定位到对应数值的书签位置\n- ⌘F3 显示所有书签\n\n#### Refactoring（重构）\n\n- F5 复制文件到指定目录\n- F6 移动文件到指定目录\n- ⌘⌫ 在文件上为安全删除文件，弹出确认框\n- ⇧F6 重命名文件\n- ⌘F6 更改签名\n- ⌘⌥N 一致性\n- ⌘⌥M 将选中的代码提取为方法\n- ⌘⌥V 提取变量\n- ⌘⌥F 提取字段\n- ⌘⌥C 提取常量\n- ⌘⌥P 提取参数\n\n#### VCS/Local History（版本控制/本地历史记录）\n\n- ⌘K 提交代码到版本控制器\n- ⌘T 从版本控制器更新代码\n- ⌥⇧C 查看最近的变更记录\n- ⌃C 快速弹出版本控制器操作面板\n\n#### Live Templates（动态代码模板）\n\n- ⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住\n- ⌘J 插入自定义动态代码模板\n\n#### General（通用）\n- ⌘1...⌘9 打开相应编号的工具窗口\n- ⌘S 保存所有\n- ⌘⌥Y 同步、刷新\n- ⌃⌘F 切换全屏模式\n- ⌘⇧F12 切换最大化编辑器\n- ⌥⇧F 添加到收藏夹\n- ⌥⇧I 检查当前文件与当前的配置文件\n- ⌘, 打开IDEA系统设置\n- ⌘; 打开项目结构对话框\n- ⇧⌘A 查找动作（可设置相关选项）\n- ⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n\nOther（一些官方文档上没有体现的快捷键）\n\n- ⌘⇧8 竖编辑模式\n\n导航\n\n- ⌘O 查找类文件 Ctrl + N\n- ⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N\n- ⌃← / ⌃→ 左右切换打开的编辑tab页Alt←/Alt→\n- ⎋ 从工具窗口进入代码文件窗口 ESC\n- ⌘L 在当前文件跳转到某一行的指定处 Ctrl + G\n- ⌘E 显示最近打开的文件记录列表 Ctrl + E\n- ⌘⌥←/ ⌘⌥→退回 / 前进到上一个操作的地方 Ctrl + Alt + ←/Ctrl + Alt + →\n- ⌘⇧⌫ 跳转到最后一个编辑的地方\n- ⌃H 显示当前类的层次结构Ctrl + H\n- ⌘⇧H 显示方法层次结构\n- ⌃⌥H 显示调用层次结构\n- F4 /⌘↓ 编辑/查看代码源\n- ⌘⌥U 显示类UML图\n- ⌃J 查看注释\n\n编辑\n\n- ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n- ⌥⌫ 删除到单词的开头\n- ⌘+ /⌘- 展开 / 折叠代码块\n- ⌘F1 在错误或警告处显示具体描述信息\n- ⌘⌥L 格式化代码\n- ⌃⌥O 优化import\n- ⇧↩ 开始新的一行\n- ⌘⇧↩ 自动结束代码，行末自动添加分号\n- ⌃I 实现方法（实现接口中的方法）\n- ⇧F6 重命名文件或者变量\n- ⌘N,⌃↩,⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n- ⌘P 显示方法的参数信息\n\n查找\n\n- Double⇧ 查找任何东西\n- ⌘⇧F 全局查找（根据路径）\n- ⌘F 文件内查找\n- ⌘G 查找模式下，向下查找\n- ⌘⇧G 查找模式下，向上查找\n\n导航\n\n- ⌘⌥B 跳转到接口的实现\n- ⌘U 查看接口定义\n- ⌘⌥← /⌘⌥→ 退回 / 前进到上一个操作的地方\n- ⌘B /⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n- ⌃⇧B 跳转到类型声明处\n- ⌥ Space,⌘Y 快速打开光标所在方法、类的定义\n- ⌘O 查找类文件\n- ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n- F12 返回到前一个工具窗口\n- ⎋ 从工具窗口进入代码文件窗口\n- ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n- F3选中文件/文件夹/代码行，添加/取消书签\n- ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n- ⌃0…⌃9 定位到对应数值的书签位置\n- ⌘F3 显示所有书签\n- ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n- ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n通用\n\n- ⌃⌘F 切换全屏模式\n\n自动代码\n\n⚠注：⌘+J可以调出所有提供的代码补全↩即可，下面仅列举常用的几个\n\n原文地址：https://linmi.cc/836\n","slug":"Jet-Brains-IDE-常用快捷键","published":1,"updated":"2018-11-02T07:47:41.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x40002aexot2omfdmec","content":"<h4 id=\"Mac键盘符号和修饰键说明\"><a href=\"#Mac键盘符号和修饰键说明\" class=\"headerlink\" title=\"Mac键盘符号和修饰键说明\"></a>Mac键盘符号和修饰键说明</h4><ul>\n<li>⌘ Command</li>\n<li>⇧ Shift</li>\n<li>⌥ Option</li>\n<li>⌃ Control</li>\n<li>↩︎ Return/Enter</li>\n<li>⌫ Delete</li>\n<li>⌦ 向前删除键（Fn+Delete）</li>\n<li>↑ 上箭头</li>\n<li>↓ 下箭头</li>\n<li>← 左箭头</li>\n<li>→ 右箭头</li>\n<li>⇞ Page Up（Fn+↑）</li>\n<li>⇟ Page Down（Fn+↓）</li>\n<li>Home Fn + ←</li>\n<li>End Fn + →</li>\n<li>⇥ 右制表符（Tab键）</li>\n<li>⇤ 左制表符（Shift+Tab）</li>\n<li>⎋ Escape (Esc)</li>\n</ul>\n<h4 id=\"iTerm中的快捷键\"><a href=\"#iTerm中的快捷键\" class=\"headerlink\" title=\"iTerm中的快捷键\"></a>iTerm中的快捷键</h4><p>小知识点，补充到这里</p>\n<ul>\n<li>⌘ + T : 新Tab窗口</li>\n<li>⌘ + D : 新建窗口，横向切屏 </li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h4><ul>\n<li>⌘⌥ + ← 或 → 光标跳到上一个文件编辑处，很重要！！！！！！！！！！！</li>\n<li>⌃Space 基本的代码补全（补全任何类、方法、变量）</li>\n<li>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）</li>\n<li>⌘⇧↩ 自动结束代码，行末自动添加分号</li>\n<li>⌘P 显示方法的参数信息</li>\n<li>⌃J, Mid. button click 快速查看文档</li>\n<li>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>\n<li>⌘+鼠标放在代码上 显示代码简要信息</li>\n<li>⌘F1 在错误或警告处显示具体描述信息</li>\n<li>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li>⌃O 覆盖方法（重写父类方法）</li>\n<li>⌃I 实现方法（实现接口中的方法）</li>\n<li>⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>\n<li>⌘/ 注释/取消注释与行注释</li>\n<li>⌘⌥/ 注释/取消注释与块注释</li>\n<li>⌥↑ 连续选中代码块</li>\n<li>⌥↓ 减少当前选中的代码块</li>\n<li>⌃⇧Q 显示上下文信息</li>\n<li>⌥↩ 显示意向动作和快速修复代码</li>\n<li>⌘⌥L 格式化代码</li>\n<li>⌃⌥O 优化import</li>\n<li>⌃⌥I 自动缩进线</li>\n<li>⇥ / ⇧⇥ 缩进代码 / 反缩进代码</li>\n<li>⌘X 剪切当前行或选定的块到剪贴板</li>\n<li>⌘C 复制当前行或选定的块到剪贴板</li>\n<li>⌘V 从剪贴板粘贴</li>\n<li>⌘⇧V 从最近的缓冲区粘贴</li>\n<li>⌘D 复制当前行或选定的块</li>\n<li>⌘⌫ 删除当前行或选定的块的行</li>\n<li>⌃⇧J 智能的将代码拼接成一行</li>\n<li>⌘↩ 智能的拆分拼接的行</li>\n<li>⇧↩ 开始新的一行</li>\n<li>⌘⇧U 大小写切换</li>\n<li>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始</li>\n<li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li>⌥⌫ 删除到单词的开头</li>\n<li>⌘+ / ⌘- 展开 / 折叠代码块</li>\n<li>⌘⇧+ 展开所以代码块</li>\n<li>⌘⇧- 折叠所有代码块</li>\n<li>⌘W 关闭活动的编辑器选项卡</li>\n</ul>\n<h4 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h4><ul>\n<li>Double ⇧ 查询任何东西</li>\n<li>⌘F 文件内查找</li>\n<li>⌘G 查找模式下，向下查找</li>\n<li>⌘⇧G 查找模式下，向上查找</li>\n<li>⌘R 文件内替换</li>\n<li>⌘⇧F 全局查找（根据路径）</li>\n<li>⌘⇧R 全局替换（根据路径）</li>\n<li>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n<li>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n</ul>\n<h4 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h4><ul>\n<li>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法</li>\n<li>⌘⇧F7 在文件中突出显示的用法</li>\n<li>⌘⌥F7 显示用法</li>\n</ul>\n<h4 id=\"Compile-and-Run（编译和运行）\"><a href=\"#Compile-and-Run（编译和运行）\" class=\"headerlink\" title=\"Compile and Run（编译和运行）\"></a>Compile and Run（编译和运行）</h4><ul>\n<li>⌘F9 编译Project</li>\n<li>⌘⇧F9 编译选择的文件、包或模块</li>\n<li>⌃⌥R 弹出 Run 的可选择菜单</li>\n<li>⌃⌥D 弹出 Debug 的可选择菜单</li>\n<li>⌃R 运行</li>\n<li>⌃D 调试</li>\n<li>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</li>\n</ul>\n<h4 id=\"Debugging（调试）\"><a href=\"#Debugging（调试）\" class=\"headerlink\" title=\"Debugging（调试）\"></a>Debugging（调试）</h4><ul>\n<li>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>\n<li>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>\n<li>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>\n<li>⇧F8 跳出</li>\n<li>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点</li>\n<li>⌥F8 计算表达式（可以更改变量值使其生效）</li>\n<li>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>\n<li>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>\n<li>⌘⇧F8 查看断点信息</li>\n</ul>\n<h4 id=\"Navigation（导航）\"><a href=\"#Navigation（导航）\" class=\"headerlink\" title=\"Navigation（导航）\"></a>Navigation（导航）</h4><ul>\n<li>⌘O 查找类文件</li>\n<li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li>⌘⌥O 前往指定的变量 / 方法</li>\n<li>⌃← / ⌃→ 左右切换打开的编辑tab页</li>\n<li>F12 返回到前一个工具窗口</li>\n<li>⎋ 从工具窗口进入代码文件窗口</li>\n<li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li>⌘⇧F4 关闭活动run/messages/find/… tab</li>\n<li>⌘L 在当前文件跳转到某一行的指定处</li>\n<li>⌘E 显示最近打开的文件记录列表</li>\n<li>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</li>\n<li>⌘⇧⌫ 跳转到最后一个编辑的地方</li>\n<li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li>\n<li>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>\n<li>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</li>\n<li>⌃⇧B 跳转到类型声明处</li>\n<li>⌘U 前往当前光标所在方法的父类的方法 / 接口定义</li>\n<li>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置</li>\n<li>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置</li>\n<li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n<li>⌃H 显示当前类的层次结构</li>\n<li>⌘⇧H 显示方法层次结构</li>\n<li>⌃⌥H 显示调用层次结构</li>\n<li>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置</li>\n<li>F4 / ⌘↓ 编辑/查看代码源</li>\n<li>⌥ Home 显示到当前文件的导航条</li>\n<li>F3选中文件/文件夹/代码行，添加/取消书签</li>\n<li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li>⌃0…⌃9 定位到对应数值的书签位置</li>\n<li>⌘F3 显示所有书签</li>\n</ul>\n<h4 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h4><ul>\n<li>F5 复制文件到指定目录</li>\n<li>F6 移动文件到指定目录</li>\n<li>⌘⌫ 在文件上为安全删除文件，弹出确认框</li>\n<li>⇧F6 重命名文件</li>\n<li>⌘F6 更改签名</li>\n<li>⌘⌥N 一致性</li>\n<li>⌘⌥M 将选中的代码提取为方法</li>\n<li>⌘⌥V 提取变量</li>\n<li>⌘⌥F 提取字段</li>\n<li>⌘⌥C 提取常量</li>\n<li>⌘⌥P 提取参数</li>\n</ul>\n<h4 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h4><ul>\n<li>⌘K 提交代码到版本控制器</li>\n<li>⌘T 从版本控制器更新代码</li>\n<li>⌥⇧C 查看最近的变更记录</li>\n<li>⌃C 快速弹出版本控制器操作面板</li>\n</ul>\n<h4 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h4><ul>\n<li>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住</li>\n<li>⌘J 插入自定义动态代码模板</li>\n</ul>\n<h4 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h4><ul>\n<li>⌘1…⌘9 打开相应编号的工具窗口</li>\n<li>⌘S 保存所有</li>\n<li>⌘⌥Y 同步、刷新</li>\n<li>⌃⌘F 切换全屏模式</li>\n<li>⌘⇧F12 切换最大化编辑器</li>\n<li>⌥⇧F 添加到收藏夹</li>\n<li>⌥⇧I 检查当前文件与当前的配置文件</li>\n<li>⌘, 打开IDEA系统设置</li>\n<li>⌘; 打开项目结构对话框</li>\n<li>⇧⌘A 查找动作（可设置相关选项）</li>\n<li>⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>\n</ul>\n<p>Other（一些官方文档上没有体现的快捷键）</p>\n<ul>\n<li>⌘⇧8 竖编辑模式</li>\n</ul>\n<p>导航</p>\n<ul>\n<li>⌘O 查找类文件 Ctrl + N</li>\n<li>⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N</li>\n<li>⌃← / ⌃→ 左右切换打开的编辑tab页Alt←/Alt→</li>\n<li>⎋ 从工具窗口进入代码文件窗口 ESC</li>\n<li>⌘L 在当前文件跳转到某一行的指定处 Ctrl + G</li>\n<li>⌘E 显示最近打开的文件记录列表 Ctrl + E</li>\n<li>⌘⌥←/ ⌘⌥→退回 / 前进到上一个操作的地方 Ctrl + Alt + ←/Ctrl + Alt + →</li>\n<li>⌘⇧⌫ 跳转到最后一个编辑的地方</li>\n<li>⌃H 显示当前类的层次结构Ctrl + H</li>\n<li>⌘⇧H 显示方法层次结构</li>\n<li>⌃⌥H 显示调用层次结构</li>\n<li>F4 /⌘↓ 编辑/查看代码源</li>\n<li>⌘⌥U 显示类UML图</li>\n<li>⌃J 查看注释</li>\n</ul>\n<p>编辑</p>\n<ul>\n<li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li>⌥⌫ 删除到单词的开头</li>\n<li>⌘+ /⌘- 展开 / 折叠代码块</li>\n<li>⌘F1 在错误或警告处显示具体描述信息</li>\n<li>⌘⌥L 格式化代码</li>\n<li>⌃⌥O 优化import</li>\n<li>⇧↩ 开始新的一行</li>\n<li>⌘⇧↩ 自动结束代码，行末自动添加分号</li>\n<li>⌃I 实现方法（实现接口中的方法）</li>\n<li>⇧F6 重命名文件或者变量</li>\n<li>⌘N,⌃↩,⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li>⌘P 显示方法的参数信息</li>\n</ul>\n<p>查找</p>\n<ul>\n<li>Double⇧ 查找任何东西</li>\n<li>⌘⇧F 全局查找（根据路径）</li>\n<li>⌘F 文件内查找</li>\n<li>⌘G 查找模式下，向下查找</li>\n<li>⌘⇧G 查找模式下，向上查找</li>\n</ul>\n<p>导航</p>\n<ul>\n<li>⌘⌥B 跳转到接口的实现</li>\n<li>⌘U 查看接口定义</li>\n<li>⌘⌥← /⌘⌥→ 退回 / 前进到上一个操作的地方</li>\n<li>⌘B /⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li>\n<li>⌃⇧B 跳转到类型声明处</li>\n<li>⌥ Space,⌘Y 快速打开光标所在方法、类的定义</li>\n<li>⌘O 查找类文件</li>\n<li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li>F12 返回到前一个工具窗口</li>\n<li>⎋ 从工具窗口进入代码文件窗口</li>\n<li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li>F3选中文件/文件夹/代码行，添加/取消书签</li>\n<li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li>⌃0…⌃9 定位到对应数值的书签位置</li>\n<li>⌘F3 显示所有书签</li>\n<li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n</ul>\n<p>通用</p>\n<ul>\n<li>⌃⌘F 切换全屏模式</li>\n</ul>\n<p>自动代码</p>\n<p>⚠注：⌘+J可以调出所有提供的代码补全↩即可，下面仅列举常用的几个</p>\n<p>原文地址：<a href=\"https://linmi.cc/836\" target=\"_blank\" rel=\"noopener\">https://linmi.cc/836</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"Mac键盘符号和修饰键说明\"><a href=\"#Mac键盘符号和修饰键说明\" class=\"headerlink\" title=\"Mac键盘符号和修饰键说明\"></a>Mac键盘符号和修饰键说明</h4><ul>\n<li>⌘ Command</li>\n<li>⇧ Shift</li>\n<li>⌥ Option</li>\n<li>⌃ Control</li>\n<li>↩︎ Return/Enter</li>\n<li>⌫ Delete</li>\n<li>⌦ 向前删除键（Fn+Delete）</li>\n<li>↑ 上箭头</li>\n<li>↓ 下箭头</li>\n<li>← 左箭头</li>\n<li>→ 右箭头</li>\n<li>⇞ Page Up（Fn+↑）</li>\n<li>⇟ Page Down（Fn+↓）</li>\n<li>Home Fn + ←</li>\n<li>End Fn + →</li>\n<li>⇥ 右制表符（Tab键）</li>\n<li>⇤ 左制表符（Shift+Tab）</li>\n<li>⎋ Escape (Esc)</li>\n</ul>\n<h4 id=\"iTerm中的快捷键\"><a href=\"#iTerm中的快捷键\" class=\"headerlink\" title=\"iTerm中的快捷键\"></a>iTerm中的快捷键</h4><p>小知识点，补充到这里</p>\n<ul>\n<li>⌘ + T : 新Tab窗口</li>\n<li>⌘ + D : 新建窗口，横向切屏 </li>\n</ul>","more":"<h4 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h4><ul>\n<li>⌘⌥ + ← 或 → 光标跳到上一个文件编辑处，很重要！！！！！！！！！！！</li>\n<li>⌃Space 基本的代码补全（补全任何类、方法、变量）</li>\n<li>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）</li>\n<li>⌘⇧↩ 自动结束代码，行末自动添加分号</li>\n<li>⌘P 显示方法的参数信息</li>\n<li>⌃J, Mid. button click 快速查看文档</li>\n<li>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>\n<li>⌘+鼠标放在代码上 显示代码简要信息</li>\n<li>⌘F1 在错误或警告处显示具体描述信息</li>\n<li>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li>⌃O 覆盖方法（重写父类方法）</li>\n<li>⌃I 实现方法（实现接口中的方法）</li>\n<li>⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>\n<li>⌘/ 注释/取消注释与行注释</li>\n<li>⌘⌥/ 注释/取消注释与块注释</li>\n<li>⌥↑ 连续选中代码块</li>\n<li>⌥↓ 减少当前选中的代码块</li>\n<li>⌃⇧Q 显示上下文信息</li>\n<li>⌥↩ 显示意向动作和快速修复代码</li>\n<li>⌘⌥L 格式化代码</li>\n<li>⌃⌥O 优化import</li>\n<li>⌃⌥I 自动缩进线</li>\n<li>⇥ / ⇧⇥ 缩进代码 / 反缩进代码</li>\n<li>⌘X 剪切当前行或选定的块到剪贴板</li>\n<li>⌘C 复制当前行或选定的块到剪贴板</li>\n<li>⌘V 从剪贴板粘贴</li>\n<li>⌘⇧V 从最近的缓冲区粘贴</li>\n<li>⌘D 复制当前行或选定的块</li>\n<li>⌘⌫ 删除当前行或选定的块的行</li>\n<li>⌃⇧J 智能的将代码拼接成一行</li>\n<li>⌘↩ 智能的拆分拼接的行</li>\n<li>⇧↩ 开始新的一行</li>\n<li>⌘⇧U 大小写切换</li>\n<li>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始</li>\n<li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li>⌥⌫ 删除到单词的开头</li>\n<li>⌘+ / ⌘- 展开 / 折叠代码块</li>\n<li>⌘⇧+ 展开所以代码块</li>\n<li>⌘⇧- 折叠所有代码块</li>\n<li>⌘W 关闭活动的编辑器选项卡</li>\n</ul>\n<h4 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h4><ul>\n<li>Double ⇧ 查询任何东西</li>\n<li>⌘F 文件内查找</li>\n<li>⌘G 查找模式下，向下查找</li>\n<li>⌘⇧G 查找模式下，向上查找</li>\n<li>⌘R 文件内替换</li>\n<li>⌘⇧F 全局查找（根据路径）</li>\n<li>⌘⇧R 全局替换（根据路径）</li>\n<li>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n<li>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n</ul>\n<h4 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h4><ul>\n<li>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法</li>\n<li>⌘⇧F7 在文件中突出显示的用法</li>\n<li>⌘⌥F7 显示用法</li>\n</ul>\n<h4 id=\"Compile-and-Run（编译和运行）\"><a href=\"#Compile-and-Run（编译和运行）\" class=\"headerlink\" title=\"Compile and Run（编译和运行）\"></a>Compile and Run（编译和运行）</h4><ul>\n<li>⌘F9 编译Project</li>\n<li>⌘⇧F9 编译选择的文件、包或模块</li>\n<li>⌃⌥R 弹出 Run 的可选择菜单</li>\n<li>⌃⌥D 弹出 Debug 的可选择菜单</li>\n<li>⌃R 运行</li>\n<li>⌃D 调试</li>\n<li>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</li>\n</ul>\n<h4 id=\"Debugging（调试）\"><a href=\"#Debugging（调试）\" class=\"headerlink\" title=\"Debugging（调试）\"></a>Debugging（调试）</h4><ul>\n<li>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>\n<li>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>\n<li>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>\n<li>⇧F8 跳出</li>\n<li>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点</li>\n<li>⌥F8 计算表达式（可以更改变量值使其生效）</li>\n<li>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>\n<li>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>\n<li>⌘⇧F8 查看断点信息</li>\n</ul>\n<h4 id=\"Navigation（导航）\"><a href=\"#Navigation（导航）\" class=\"headerlink\" title=\"Navigation（导航）\"></a>Navigation（导航）</h4><ul>\n<li>⌘O 查找类文件</li>\n<li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li>⌘⌥O 前往指定的变量 / 方法</li>\n<li>⌃← / ⌃→ 左右切换打开的编辑tab页</li>\n<li>F12 返回到前一个工具窗口</li>\n<li>⎋ 从工具窗口进入代码文件窗口</li>\n<li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li>⌘⇧F4 关闭活动run/messages/find/… tab</li>\n<li>⌘L 在当前文件跳转到某一行的指定处</li>\n<li>⌘E 显示最近打开的文件记录列表</li>\n<li>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</li>\n<li>⌘⇧⌫ 跳转到最后一个编辑的地方</li>\n<li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li>\n<li>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>\n<li>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</li>\n<li>⌃⇧B 跳转到类型声明处</li>\n<li>⌘U 前往当前光标所在方法的父类的方法 / 接口定义</li>\n<li>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置</li>\n<li>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置</li>\n<li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n<li>⌃H 显示当前类的层次结构</li>\n<li>⌘⇧H 显示方法层次结构</li>\n<li>⌃⌥H 显示调用层次结构</li>\n<li>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置</li>\n<li>F4 / ⌘↓ 编辑/查看代码源</li>\n<li>⌥ Home 显示到当前文件的导航条</li>\n<li>F3选中文件/文件夹/代码行，添加/取消书签</li>\n<li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li>⌃0…⌃9 定位到对应数值的书签位置</li>\n<li>⌘F3 显示所有书签</li>\n</ul>\n<h4 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h4><ul>\n<li>F5 复制文件到指定目录</li>\n<li>F6 移动文件到指定目录</li>\n<li>⌘⌫ 在文件上为安全删除文件，弹出确认框</li>\n<li>⇧F6 重命名文件</li>\n<li>⌘F6 更改签名</li>\n<li>⌘⌥N 一致性</li>\n<li>⌘⌥M 将选中的代码提取为方法</li>\n<li>⌘⌥V 提取变量</li>\n<li>⌘⌥F 提取字段</li>\n<li>⌘⌥C 提取常量</li>\n<li>⌘⌥P 提取参数</li>\n</ul>\n<h4 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h4><ul>\n<li>⌘K 提交代码到版本控制器</li>\n<li>⌘T 从版本控制器更新代码</li>\n<li>⌥⇧C 查看最近的变更记录</li>\n<li>⌃C 快速弹出版本控制器操作面板</li>\n</ul>\n<h4 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h4><ul>\n<li>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住</li>\n<li>⌘J 插入自定义动态代码模板</li>\n</ul>\n<h4 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h4><ul>\n<li>⌘1…⌘9 打开相应编号的工具窗口</li>\n<li>⌘S 保存所有</li>\n<li>⌘⌥Y 同步、刷新</li>\n<li>⌃⌘F 切换全屏模式</li>\n<li>⌘⇧F12 切换最大化编辑器</li>\n<li>⌥⇧F 添加到收藏夹</li>\n<li>⌥⇧I 检查当前文件与当前的配置文件</li>\n<li>⌘, 打开IDEA系统设置</li>\n<li>⌘; 打开项目结构对话框</li>\n<li>⇧⌘A 查找动作（可设置相关选项）</li>\n<li>⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>\n</ul>\n<p>Other（一些官方文档上没有体现的快捷键）</p>\n<ul>\n<li>⌘⇧8 竖编辑模式</li>\n</ul>\n<p>导航</p>\n<ul>\n<li>⌘O 查找类文件 Ctrl + N</li>\n<li>⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N</li>\n<li>⌃← / ⌃→ 左右切换打开的编辑tab页Alt←/Alt→</li>\n<li>⎋ 从工具窗口进入代码文件窗口 ESC</li>\n<li>⌘L 在当前文件跳转到某一行的指定处 Ctrl + G</li>\n<li>⌘E 显示最近打开的文件记录列表 Ctrl + E</li>\n<li>⌘⌥←/ ⌘⌥→退回 / 前进到上一个操作的地方 Ctrl + Alt + ←/Ctrl + Alt + →</li>\n<li>⌘⇧⌫ 跳转到最后一个编辑的地方</li>\n<li>⌃H 显示当前类的层次结构Ctrl + H</li>\n<li>⌘⇧H 显示方法层次结构</li>\n<li>⌃⌥H 显示调用层次结构</li>\n<li>F4 /⌘↓ 编辑/查看代码源</li>\n<li>⌘⌥U 显示类UML图</li>\n<li>⌃J 查看注释</li>\n</ul>\n<p>编辑</p>\n<ul>\n<li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li>⌥⌫ 删除到单词的开头</li>\n<li>⌘+ /⌘- 展开 / 折叠代码块</li>\n<li>⌘F1 在错误或警告处显示具体描述信息</li>\n<li>⌘⌥L 格式化代码</li>\n<li>⌃⌥O 优化import</li>\n<li>⇧↩ 开始新的一行</li>\n<li>⌘⇧↩ 自动结束代码，行末自动添加分号</li>\n<li>⌃I 实现方法（实现接口中的方法）</li>\n<li>⇧F6 重命名文件或者变量</li>\n<li>⌘N,⌃↩,⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li>⌘P 显示方法的参数信息</li>\n</ul>\n<p>查找</p>\n<ul>\n<li>Double⇧ 查找任何东西</li>\n<li>⌘⇧F 全局查找（根据路径）</li>\n<li>⌘F 文件内查找</li>\n<li>⌘G 查找模式下，向下查找</li>\n<li>⌘⇧G 查找模式下，向上查找</li>\n</ul>\n<p>导航</p>\n<ul>\n<li>⌘⌥B 跳转到接口的实现</li>\n<li>⌘U 查看接口定义</li>\n<li>⌘⌥← /⌘⌥→ 退回 / 前进到上一个操作的地方</li>\n<li>⌘B /⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li>\n<li>⌃⇧B 跳转到类型声明处</li>\n<li>⌥ Space,⌘Y 快速打开光标所在方法、类的定义</li>\n<li>⌘O 查找类文件</li>\n<li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li>F12 返回到前一个工具窗口</li>\n<li>⎋ 从工具窗口进入代码文件窗口</li>\n<li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li>F3选中文件/文件夹/代码行，添加/取消书签</li>\n<li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li>⌃0…⌃9 定位到对应数值的书签位置</li>\n<li>⌘F3 显示所有书签</li>\n<li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n</ul>\n<p>通用</p>\n<ul>\n<li>⌃⌘F 切换全屏模式</li>\n</ul>\n<p>自动代码</p>\n<p>⚠注：⌘+J可以调出所有提供的代码补全↩即可，下面仅列举常用的几个</p>\n<p>原文地址：<a href=\"https://linmi.cc/836\" target=\"_blank\" rel=\"noopener\">https://linmi.cc/836</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Nov 02 2018 15:47:41 GMT+0800 (China Standard Time)","title":"Jet Brains(IDE)常用快捷键","path":"2018/09/02/Jet-Brains-IDE-常用快捷键/","eyeCatchImage":null,"excerpt":"<h4 id=\"Mac键盘符号和修饰键说明\"><a href=\"#Mac键盘符号和修饰键说明\" class=\"headerlink\" title=\"Mac键盘符号和修饰键说明\"></a>Mac键盘符号和修饰键说明</h4><ul>\n<li>⌘ Command</li>\n<li>⇧ Shift</li>\n<li>⌥ Option</li>\n<li>⌃ Control</li>\n<li>↩︎ Return/Enter</li>\n<li>⌫ Delete</li>\n<li>⌦ 向前删除键（Fn+Delete）</li>\n<li>↑ 上箭头</li>\n<li>↓ 下箭头</li>\n<li>← 左箭头</li>\n<li>→ 右箭头</li>\n<li>⇞ Page Up（Fn+↑）</li>\n<li>⇟ Page Down（Fn+↓）</li>\n<li>Home Fn + ←</li>\n<li>End Fn + →</li>\n<li>⇥ 右制表符（Tab键）</li>\n<li>⇤ 左制表符（Shift+Tab）</li>\n<li>⎋ Escape (Esc)</li>\n</ul>\n<h4 id=\"iTerm中的快捷键\"><a href=\"#iTerm中的快捷键\" class=\"headerlink\" title=\"iTerm中的快捷键\"></a>iTerm中的快捷键</h4><p>小知识点，补充到这里</p>\n<ul>\n<li>⌘ + T : 新Tab窗口</li>\n<li>⌘ + D : 新建窗口，横向切屏 </li>\n</ul>","date":"2018-09-02T04:32:47.000Z","pv":0,"totalPV":0,"categories":"IDE","tags":["IDE"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux 使用su和su -切换用户的区别","date":"2018-09-06T14:37:27.000Z","_content":"假设原来我们以`root`身份登录在终端，那么环境变量包含`/usr/sbin`。\n\n- 若使用`su -`切换到普通用户后，环境变量**不包含**`/usr/sbin`。\n- 若使用`su`切换到普通用户，环境变量**包含**`/usr/sbin`。\n\n简单总结为，\n- `su -`相当于重新登录，环境变量随用户的身份变为登录后用户的环境变量。登陆后的位置为用户home目录下。\n- `su`环境变量不随切换后的用户的环境变量而变化。而且登陆后所在位置与登录前一致，对于从root切换而言，当前目录为`/root`。\n","source":"_posts/Linux-使用su和su-切换用户的区别.md","raw":"---\ntitle: Linux 使用su和su -切换用户的区别\ndate: 2018-09-06 22:37:27\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n假设原来我们以`root`身份登录在终端，那么环境变量包含`/usr/sbin`。\n\n- 若使用`su -`切换到普通用户后，环境变量**不包含**`/usr/sbin`。\n- 若使用`su`切换到普通用户，环境变量**包含**`/usr/sbin`。\n\n简单总结为，\n- `su -`相当于重新登录，环境变量随用户的身份变为登录后用户的环境变量。登陆后的位置为用户home目录下。\n- `su`环境变量不随切换后的用户的环境变量而变化。而且登陆后所在位置与登录前一致，对于从root切换而言，当前目录为`/root`。\n","slug":"Linux-使用su和su-切换用户的区别","published":1,"updated":"2018-09-06T14:48:13.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x43002cexot6bx8wahu","content":"<p>假设原来我们以<code>root</code>身份登录在终端，那么环境变量包含<code>/usr/sbin</code>。</p>\n<ul>\n<li>若使用<code>su -</code>切换到普通用户后，环境变量<strong>不包含</strong><code>/usr/sbin</code>。</li>\n<li>若使用<code>su</code>切换到普通用户，环境变量<strong>包含</strong><code>/usr/sbin</code>。</li>\n</ul>\n<p>简单总结为，</p>\n<ul>\n<li><code>su -</code>相当于重新登录，环境变量随用户的身份变为登录后用户的环境变量。登陆后的位置为用户home目录下。</li>\n<li><code>su</code>环境变量不随切换后的用户的环境变量而变化。而且登陆后所在位置与登录前一致，对于从root切换而言，当前目录为<code>/root</code>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>假设原来我们以<code>root</code>身份登录在终端，那么环境变量包含<code>/usr/sbin</code>。</p>\n<ul>\n<li>若使用<code>su -</code>切换到普通用户后，环境变量<strong>不包含</strong><code>/usr/sbin</code>。</li>\n<li>若使用<code>su</code>切换到普通用户，环境变量<strong>包含</strong><code>/usr/sbin</code>。</li>\n</ul>\n<p>简单总结为，</p>\n<ul>\n<li><code>su -</code>相当于重新登录，环境变量随用户的身份变为登录后用户的环境变量。登陆后的位置为用户home目录下。</li>\n<li><code>su</code>环境变量不随切换后的用户的环境变量而变化。而且登陆后所在位置与登录前一致，对于从root切换而言，当前目录为<code>/root</code>。</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Sep 06 2018 22:48:13 GMT+0800 (China Standard Time)","title":"Linux 使用su和su -切换用户的区别","path":"2018/09/06/Linux-使用su和su-切换用户的区别/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-06T14:37:27.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java多线程读写HashMap遇到的坑","date":"2019-03-29T06:55:09.000Z","_content":"","source":"_posts/Java多线程读写HashMap遇到的坑.md","raw":"---\ntitle: Java多线程读写HashMap遇到的坑\ndate: 2019-03-29 14:55:09\ntags:\n---\n","slug":"Java多线程读写HashMap遇到的坑","published":1,"updated":"2019-03-29T06:55:09.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x48002gexotsf9bzzas","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 29 2019 14:55:09 GMT+0800 (China Standard Time)","title":"Java多线程读写HashMap遇到的坑","path":"2019/03/29/Java多线程读写HashMap遇到的坑/","eyeCatchImage":null,"excerpt":null,"date":"2019-03-29T06:55:09.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux 使用useradd命令时发生了什么","date":"2018-08-24T03:38:49.000Z","_content":"\n\n使用useradd命令创建用户时首先会参考\n- /etc/default/useradd\n- /etc/login.defs\n- /etc/skel/*\n\n命令执行后，接下来就会创建\n- /etc/passwd\n- /etc/shadow\n- /etc/group\n- /etc/gshadow\n- 主文件目录（如果配置有的话）\n\n所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。\n<!-- more -->\n","source":"_posts/Linux-使用useradd命令时发生了什么.md","raw":"---\ntitle: Linux 使用useradd命令时发生了什么\ndate: 2018-08-24 11:38:49\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n\n使用useradd命令创建用户时首先会参考\n- /etc/default/useradd\n- /etc/login.defs\n- /etc/skel/*\n\n命令执行后，接下来就会创建\n- /etc/passwd\n- /etc/shadow\n- /etc/group\n- /etc/gshadow\n- 主文件目录（如果配置有的话）\n\n所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。\n<!-- more -->\n","slug":"Linux-使用useradd命令时发生了什么","published":1,"updated":"2018-08-24T03:46:08.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4a002iexotjyu7kr2o","content":"<p>使用useradd命令创建用户时首先会参考</p>\n<ul>\n<li>/etc/default/useradd</li>\n<li>/etc/login.defs</li>\n<li>/etc/skel/*</li>\n</ul>\n<p>命令执行后，接下来就会创建</p>\n<ul>\n<li>/etc/passwd</li>\n<li>/etc/shadow</li>\n<li>/etc/group</li>\n<li>/etc/gshadow</li>\n<li>主文件目录（如果配置有的话）</li>\n</ul>\n<p>所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>使用useradd命令创建用户时首先会参考</p>\n<ul>\n<li>/etc/default/useradd</li>\n<li>/etc/login.defs</li>\n<li>/etc/skel/*</li>\n</ul>\n<p>命令执行后，接下来就会创建</p>\n<ul>\n<li>/etc/passwd</li>\n<li>/etc/shadow</li>\n<li>/etc/group</li>\n<li>/etc/gshadow</li>\n<li>主文件目录（如果配置有的话）</li>\n</ul>\n<p>所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。<br>","more":"</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Aug 24 2018 11:46:08 GMT+0800 (China Standard Time)","title":"Linux 使用useradd命令时发生了什么","path":"2018/08/24/Linux-使用useradd命令时发生了什么/","eyeCatchImage":null,"excerpt":"<p>使用useradd命令创建用户时首先会参考</p>\n<ul>\n<li>/etc/default/useradd</li>\n<li>/etc/login.defs</li>\n<li>/etc/skel/*</li>\n</ul>\n<p>命令执行后，接下来就会创建</p>\n<ul>\n<li>/etc/passwd</li>\n<li>/etc/shadow</li>\n<li>/etc/group</li>\n<li>/etc/gshadow</li>\n<li>主文件目录（如果配置有的话）</li>\n</ul>\n<p>所以，如果我们自己了解整个系统运行的状态，也是可以自己手动直接修改相关文件。<br>","date":"2018-08-24T03:38:49.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux 命令回传码与 && 或 ||","date":"2018-09-05T06:46:14.000Z","_content":"Linux中，若前一个命令执行的结果是正确的，那么在Linux中会回传一个`$?=0`,即 `echo $?` 显示为0。\n\n| 命令执行情况        | 说明     |\n| :-----:           | :-----:     |\n|`cmd1 && cmd2`       |若`cmd1`执行完毕且正确执行（`$?=0`）,则执行`cmd2`;  若`cmd1`执行完毕且为错误（`$?≠0`）,则`cmd2`不被执行 |\n|`cmd1 11 cmd2`      | 若`cmd1`执行完毕且正确执行（`$?=0`）,则`cmd2`不被执行;  若`cmd1`执行完毕且为错误（`$?≠0`）,则执行`cmd2` |\n\n<!-- more -->\n示例：以ls测试`/tmp/wkx`执行后，若存在则显示\"exits\",若不存在，则显示\"not exits\"。\n\n#### 错误答案\n```Bash\nls /tmp/vvv || echo \"not exits\" && echo \"exits\"\n```\n以上答案执行后的结果同时出现not exits和exits。具体问题可以尝试分析。\n#### 正确答案\n```Bash\nls /tmp/vvv && echo \"exits\" || echo \"not exits\"\n```\n\n通过该练习，了解到由于命令时一个接着一个去执行的，因此，如果真要使用判断，那么这个`&&和||`的顺序就不能搞错。一般来说，假设判断公式有三个，也就是：\n```Bash\ncmd1 && cmd2 || cmd3\n```\n而且顺序通常不会变。因为一般来讲，cmd2和cmd3会放置肯定可以执行成功的命令，因此依据上面的逻辑分析，我们就可以知道为什么要如此放置，这是很有用的，而且考试也很常考。\n","source":"_posts/Linux-命令回传码与-或.md","raw":"---\ntitle: Linux 命令回传码与 && 或 ||\ndate: 2018-09-05 14:46:14\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\nLinux中，若前一个命令执行的结果是正确的，那么在Linux中会回传一个`$?=0`,即 `echo $?` 显示为0。\n\n| 命令执行情况        | 说明     |\n| :-----:           | :-----:     |\n|`cmd1 && cmd2`       |若`cmd1`执行完毕且正确执行（`$?=0`）,则执行`cmd2`;  若`cmd1`执行完毕且为错误（`$?≠0`）,则`cmd2`不被执行 |\n|`cmd1 11 cmd2`      | 若`cmd1`执行完毕且正确执行（`$?=0`）,则`cmd2`不被执行;  若`cmd1`执行完毕且为错误（`$?≠0`）,则执行`cmd2` |\n\n<!-- more -->\n示例：以ls测试`/tmp/wkx`执行后，若存在则显示\"exits\",若不存在，则显示\"not exits\"。\n\n#### 错误答案\n```Bash\nls /tmp/vvv || echo \"not exits\" && echo \"exits\"\n```\n以上答案执行后的结果同时出现not exits和exits。具体问题可以尝试分析。\n#### 正确答案\n```Bash\nls /tmp/vvv && echo \"exits\" || echo \"not exits\"\n```\n\n通过该练习，了解到由于命令时一个接着一个去执行的，因此，如果真要使用判断，那么这个`&&和||`的顺序就不能搞错。一般来说，假设判断公式有三个，也就是：\n```Bash\ncmd1 && cmd2 || cmd3\n```\n而且顺序通常不会变。因为一般来讲，cmd2和cmd3会放置肯定可以执行成功的命令，因此依据上面的逻辑分析，我们就可以知道为什么要如此放置，这是很有用的，而且考试也很常考。\n","slug":"Linux-命令回传码与-或","published":1,"updated":"2018-09-05T07:12:41.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4d002mexotgiall2b7","content":"<p>Linux中，若前一个命令执行的结果是正确的，那么在Linux中会回传一个<code>$?=0</code>,即 <code>echo $?</code> 显示为0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令执行情况</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 &amp;&amp; cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则执行<code>cmd2</code>;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则<code>cmd2</code>不被执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 11 cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则<code>cmd2</code>不被执行;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则执行<code>cmd2</code></td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>示例：以ls测试<code>/tmp/wkx</code>执行后，若存在则显示”exits”,若不存在，则显示”not exits”。</p>\n<h4 id=\"错误答案\"><a href=\"#错误答案\" class=\"headerlink\" title=\"错误答案\"></a>错误答案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /tmp/vvv || <span class=\"built_in\">echo</span> <span class=\"string\">\"not exits\"</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"exits\"</span></span><br></pre></td></tr></table></figure>\n<p>以上答案执行后的结果同时出现not exits和exits。具体问题可以尝试分析。</p>\n<h4 id=\"正确答案\"><a href=\"#正确答案\" class=\"headerlink\" title=\"正确答案\"></a>正确答案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /tmp/vvv &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"exits\"</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"not exits\"</span></span><br></pre></td></tr></table></figure>\n<p>通过该练习，了解到由于命令时一个接着一个去执行的，因此，如果真要使用判断，那么这个<code>&amp;&amp;和||</code>的顺序就不能搞错。一般来说，假设判断公式有三个，也就是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd1 &amp;&amp; cmd2 || cmd3</span><br></pre></td></tr></table></figure></p>\n<p>而且顺序通常不会变。因为一般来讲，cmd2和cmd3会放置肯定可以执行成功的命令，因此依据上面的逻辑分析，我们就可以知道为什么要如此放置，这是很有用的，而且考试也很常考。</p>\n","site":{"data":{}},"excerpt":"<p>Linux中，若前一个命令执行的结果是正确的，那么在Linux中会回传一个<code>$?=0</code>,即 <code>echo $?</code> 显示为0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令执行情况</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 &amp;&amp; cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则执行<code>cmd2</code>;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则<code>cmd2</code>不被执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 11 cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则<code>cmd2</code>不被执行;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则执行<code>cmd2</code></td>\n</tr>\n</tbody>\n</table>","more":"<p>示例：以ls测试<code>/tmp/wkx</code>执行后，若存在则显示”exits”,若不存在，则显示”not exits”。</p>\n<h4 id=\"错误答案\"><a href=\"#错误答案\" class=\"headerlink\" title=\"错误答案\"></a>错误答案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /tmp/vvv || <span class=\"built_in\">echo</span> <span class=\"string\">\"not exits\"</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"exits\"</span></span><br></pre></td></tr></table></figure>\n<p>以上答案执行后的结果同时出现not exits和exits。具体问题可以尝试分析。</p>\n<h4 id=\"正确答案\"><a href=\"#正确答案\" class=\"headerlink\" title=\"正确答案\"></a>正确答案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /tmp/vvv &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"exits\"</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"not exits\"</span></span><br></pre></td></tr></table></figure>\n<p>通过该练习，了解到由于命令时一个接着一个去执行的，因此，如果真要使用判断，那么这个<code>&amp;&amp;和||</code>的顺序就不能搞错。一般来说，假设判断公式有三个，也就是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd1 &amp;&amp; cmd2 || cmd3</span><br></pre></td></tr></table></figure></p>\n<p>而且顺序通常不会变。因为一般来讲，cmd2和cmd3会放置肯定可以执行成功的命令，因此依据上面的逻辑分析，我们就可以知道为什么要如此放置，这是很有用的，而且考试也很常考。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 05 2018 15:12:41 GMT+0800 (China Standard Time)","title":"Linux 命令回传码与 && 或 ||","path":"2018/09/05/Linux-命令回传码与-或/","eyeCatchImage":null,"excerpt":"<p>Linux中，若前一个命令执行的结果是正确的，那么在Linux中会回传一个<code>$?=0</code>,即 <code>echo $?</code> 显示为0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令执行情况</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 &amp;&amp; cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则执行<code>cmd2</code>;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则<code>cmd2</code>不被执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>cmd1 11 cmd2</code></td>\n<td style=\"text-align:center\">若<code>cmd1</code>执行完毕且正确执行（<code>$?=0</code>）,则<code>cmd2</code>不被执行;  若<code>cmd1</code>执行完毕且为错误（<code>$?≠0</code>）,则执行<code>cmd2</code></td>\n</tr>\n</tbody>\n</table>","date":"2018-09-05T06:46:14.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux 文件特殊权限之SUID、GUID、SBIT","date":"2018-08-23T02:48:57.000Z","_content":"- 文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码\n- 目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同\n- 目录就有SBIT的特殊权限时，代表在该目录下用户创建的文件只有自己和root能够删除\n","source":"_posts/Linux-文件特殊权限之SUID、GUID、SBIT.md","raw":"---\ntitle: Linux 文件特殊权限之SUID、GUID、SBIT\ndate: 2018-08-23 10:48:57\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n- 文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码\n- 目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同\n- 目录就有SBIT的特殊权限时，代表在该目录下用户创建的文件只有自己和root能够删除\n","slug":"Linux-文件特殊权限之SUID、GUID、SBIT","published":1,"updated":"2018-08-23T06:15:54.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4f002nexot8gdcv5vc","content":"<ul>\n<li>文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码</li>\n<li>目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同</li>\n<li>目录就有SBIT的特殊权限时，代表在该目录下用户创建的文件只有自己和root能够删除</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中该用户会暂时具有程序所有者的权限。比如用户修改自己的用户密码</li>\n<li>目录具有SGID的特殊权限时，代表用户在这个目录下面新建的文件用户组都会与该目录的用户组名相同</li>\n<li>目录就有SBIT的特殊权限时，代表在该目录下用户创建的文件只有自己和root能够删除</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Aug 23 2018 14:15:54 GMT+0800 (China Standard Time)","title":"Linux 文件特殊权限之SUID、GUID、SBIT","path":"2018/08/23/Linux-文件特殊权限之SUID、GUID、SBIT/","eyeCatchImage":null,"excerpt":null,"date":"2018-08-23T02:48:57.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux切割命令split","date":"2018-09-05T10:06:09.000Z","_content":"\n如果文件太大，导致一些携带设备无法复制问题。利用`split`就可以了。它可以帮助我们将一个大文件依据文件大小或者行数来切割成小文件，快速而有效。\n\n<!-- more -->\n具体使用方法可以通过`man split`查看。\n\n范例1：一部复仇者联盟的电影，大小为1.7G,现将他们分割为每一份512M。\n```Bash\nsplit -b 512m Avengers.mp4 AvengerSplit\n\nll\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitaa\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitab\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitac\n-rw-r--r--  1 Dhyana  staff   171M Sep  5 18:19 AvengerSplitad\n```\n\n如果需要将文件合并，使用命令\n```Bash\ncat AvengerSplit* >> AvengerBack.mp4\n```\n即可。\n\n范例2：使用`ls -al /`输出的信息中，每10行记录成一个文件\n```Bash\nls -al / | split -l 10 - lsroot\n\nwc -l lsroot*\n10 lsrootaa\n10 lsrootab\n 7 lsrootac\n27 total\n\n```\n重点在那个`-`。一般来讲，如果需要stdin/stdout,但是没有相应的文件，此时`-`就代表了stdin/stdout。\n","source":"_posts/Linux切割命令split.md","raw":"---\ntitle: Linux切割命令split\ndate: 2018-09-05 18:06:09\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n如果文件太大，导致一些携带设备无法复制问题。利用`split`就可以了。它可以帮助我们将一个大文件依据文件大小或者行数来切割成小文件，快速而有效。\n\n<!-- more -->\n具体使用方法可以通过`man split`查看。\n\n范例1：一部复仇者联盟的电影，大小为1.7G,现将他们分割为每一份512M。\n```Bash\nsplit -b 512m Avengers.mp4 AvengerSplit\n\nll\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitaa\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitab\n-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitac\n-rw-r--r--  1 Dhyana  staff   171M Sep  5 18:19 AvengerSplitad\n```\n\n如果需要将文件合并，使用命令\n```Bash\ncat AvengerSplit* >> AvengerBack.mp4\n```\n即可。\n\n范例2：使用`ls -al /`输出的信息中，每10行记录成一个文件\n```Bash\nls -al / | split -l 10 - lsroot\n\nwc -l lsroot*\n10 lsrootaa\n10 lsrootab\n 7 lsrootac\n27 total\n\n```\n重点在那个`-`。一般来讲，如果需要stdin/stdout,但是没有相应的文件，此时`-`就代表了stdin/stdout。\n","slug":"Linux切割命令split","published":1,"updated":"2018-09-05T10:31:12.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4j002sexotxj0bctzu","content":"<p>如果文件太大，导致一些携带设备无法复制问题。利用<code>split</code>就可以了。它可以帮助我们将一个大文件依据文件大小或者行数来切割成小文件，快速而有效。</p>\n<a id=\"more\"></a>\n<p>具体使用方法可以通过<code>man split</code>查看。</p>\n<p>范例1：一部复仇者联盟的电影，大小为1.7G,现将他们分割为每一份512M。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -b 512m Avengers.mp4 AvengerSplit</span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitaa</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitab</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitac</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   171M Sep  5 18:19 AvengerSplitad</span><br></pre></td></tr></table></figure></p>\n<p>如果需要将文件合并，使用命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat AvengerSplit* &gt;&gt; AvengerBack.mp4</span><br></pre></td></tr></table></figure></p>\n<p>即可。</p>\n<p>范例2：使用<code>ls -al /</code>输出的信息中，每10行记录成一个文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al / | split -l 10 - lsroot</span><br><span class=\"line\"></span><br><span class=\"line\">wc -l lsroot*</span><br><span class=\"line\">10 lsrootaa</span><br><span class=\"line\">10 lsrootab</span><br><span class=\"line\"> 7 lsrootac</span><br><span class=\"line\">27 total</span><br></pre></td></tr></table></figure></p>\n<p>重点在那个<code>-</code>。一般来讲，如果需要stdin/stdout,但是没有相应的文件，此时<code>-</code>就代表了stdin/stdout。</p>\n","site":{"data":{}},"excerpt":"<p>如果文件太大，导致一些携带设备无法复制问题。利用<code>split</code>就可以了。它可以帮助我们将一个大文件依据文件大小或者行数来切割成小文件，快速而有效。</p>","more":"<p>具体使用方法可以通过<code>man split</code>查看。</p>\n<p>范例1：一部复仇者联盟的电影，大小为1.7G,现将他们分割为每一份512M。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -b 512m Avengers.mp4 AvengerSplit</span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitaa</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitab</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   512M Sep  5 18:19 AvengerSplitac</span><br><span class=\"line\">-rw-r--r--  1 Dhyana  staff   171M Sep  5 18:19 AvengerSplitad</span><br></pre></td></tr></table></figure></p>\n<p>如果需要将文件合并，使用命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat AvengerSplit* &gt;&gt; AvengerBack.mp4</span><br></pre></td></tr></table></figure></p>\n<p>即可。</p>\n<p>范例2：使用<code>ls -al /</code>输出的信息中，每10行记录成一个文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al / | split -l 10 - lsroot</span><br><span class=\"line\"></span><br><span class=\"line\">wc -l lsroot*</span><br><span class=\"line\">10 lsrootaa</span><br><span class=\"line\">10 lsrootab</span><br><span class=\"line\"> 7 lsrootac</span><br><span class=\"line\">27 total</span><br></pre></td></tr></table></figure></p>\n<p>重点在那个<code>-</code>。一般来讲，如果需要stdin/stdout,但是没有相应的文件，此时<code>-</code>就代表了stdin/stdout。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 05 2018 18:31:12 GMT+0800 (China Standard Time)","title":"Linux切割命令split","path":"2018/09/05/Linux切割命令split/","eyeCatchImage":null,"excerpt":"<p>如果文件太大，导致一些携带设备无法复制问题。利用<code>split</code>就可以了。它可以帮助我们将一个大文件依据文件大小或者行数来切割成小文件，快速而有效。</p>","date":"2018-09-05T10:06:09.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux数据流重定向","date":"2018-09-05T03:58:25.000Z","_content":"\n`标准输出(standard output)`指的是命令执行所回传的正确的信息，而`标准错误输出(standard error output)`可以理解为命令执行失败后，所回传的错误信息。\n一般情况下，不管正确还是错误信息数据默认的是输出到屏幕上，所以屏幕上是很混乱的。可以通过数据流重定向将stdout和stderr分别传送到其他的文件或者设备去，而分别传送所用的特殊字符如下所示：\n\n<!-- more -->\n\n1. 标准输入（stdin）：代码为`0`，使用`<`或者`<<`\n2. 标准输出（stdout）：代码为`1`，使用`>`或者`>>`\n3. 标准错误输出（stderr）：代码为`2`，使用`>`或者`>>`\n\n#### 标准输出和标准错误输出\n如果仅存在`>`，则代表默认代码为1。\n\n- `1>`:以`覆盖`的方法将`正确`的数据输出到指定的文件或者设备上\n- `1>>`:以`累加`的方法将`正确`的数据输出到指定的文件或者设备上\n- `2>`:以`覆盖`的方法将`错误`的数据输出到指定的文件或者设备上\n- `2>>`:以`累加`的方法将`错误`的数据输出到指定的文件或者设备上\n\n\n示例1：将stdout和stderr分别存到不同的文件中去。\n```bash\nfind /home -name .bashrc > list_right 2> list_error\n```\n\n示例2：将错误的数据丢弃，屏幕上显示正确的数据\n```bash\nfind /home -name .bashrc 2> /dev/null\n```\n/dev/null垃圾黑洞设备\n\n示例3：将正确和错误的数据全部写入一个文件\n```bash\nfind /home -name .bashrc >list 2>&1\n\n或者\n\nfind /home -name .bashrc &> list\n\n```\n\n#### 标准输入\n\n`<`意味着将原本需要由键盘输入的数据改由文件内容来替代。\n\n示例1：利用`cat`命令来创建一个文件的简单流程，了解一下什么是`键盘输入`\n```bash\ncat > catfile\n1\n2\n3\n<==此处按下ctrl+c或者ctrl+d来离开\n```\n示例2：利用`stdin`替代键盘的输入来创建新文件的流程\n```bash\ncat > catfile < ~/.bashrc\n--------------------------\nll catfile ~/.bashrc\n-rw-r--r--  1 root root 176 Sep  5 14:10 catfile\n-rw-r--r--. 1 root root 176 Dec 29  2013 /root/.bashrc\n# 注意到两个文件大小几一模一样，几乎是使用cp命令复制一份\n```\n理解了`<`后，再来看`<<`。`<<`：`代表的是结束输入的意思`。举例来讲，我要用cat直接将输入的信息输出到catfile中，且当由键盘输入eof时，本次输入就结束，可以按照如下方式进行：\n\n```Bash\ncat > catfile << \"eof\"\n>1\n>2\n>3\n>eof  <==输入该关键字后，立刻就结束输入而不需要输入ctrl + d/c\n```\n\n#### 双向重定向`tee`\n\ntee命令实现了手动跟踪命令的输出内容，同时又将输出的内容写入文件，确保之后可以用来参考。\n例如:\n```bash\nlast | tee last.list | cut -d ' ' -f1\n# last: View the last logged in users.\n# 该范例可以让我们将last的输出存一份到last.list文件中。\n\nls -l / | tee -a ~/homefile | more\n# tee 后直接接文件会被覆盖，如果加以 -a 这个参数则能将信息累加\n```\n\n总结，`tee`可以让standard output转存一份到文件内并将同样的数据继续送到屏幕上去处理显示。这样，除了可以让我们同时分析一份数据并记录下来之外，还可以作为处理一份数据的中间暂存盘记录只用。\n\n另：`tee`在很多认证考试中有考察。\n","source":"_posts/Linux数据流重定向.md","raw":"---\ntitle: Linux数据流重定向\ndate: 2018-09-05 11:58:25\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n`标准输出(standard output)`指的是命令执行所回传的正确的信息，而`标准错误输出(standard error output)`可以理解为命令执行失败后，所回传的错误信息。\n一般情况下，不管正确还是错误信息数据默认的是输出到屏幕上，所以屏幕上是很混乱的。可以通过数据流重定向将stdout和stderr分别传送到其他的文件或者设备去，而分别传送所用的特殊字符如下所示：\n\n<!-- more -->\n\n1. 标准输入（stdin）：代码为`0`，使用`<`或者`<<`\n2. 标准输出（stdout）：代码为`1`，使用`>`或者`>>`\n3. 标准错误输出（stderr）：代码为`2`，使用`>`或者`>>`\n\n#### 标准输出和标准错误输出\n如果仅存在`>`，则代表默认代码为1。\n\n- `1>`:以`覆盖`的方法将`正确`的数据输出到指定的文件或者设备上\n- `1>>`:以`累加`的方法将`正确`的数据输出到指定的文件或者设备上\n- `2>`:以`覆盖`的方法将`错误`的数据输出到指定的文件或者设备上\n- `2>>`:以`累加`的方法将`错误`的数据输出到指定的文件或者设备上\n\n\n示例1：将stdout和stderr分别存到不同的文件中去。\n```bash\nfind /home -name .bashrc > list_right 2> list_error\n```\n\n示例2：将错误的数据丢弃，屏幕上显示正确的数据\n```bash\nfind /home -name .bashrc 2> /dev/null\n```\n/dev/null垃圾黑洞设备\n\n示例3：将正确和错误的数据全部写入一个文件\n```bash\nfind /home -name .bashrc >list 2>&1\n\n或者\n\nfind /home -name .bashrc &> list\n\n```\n\n#### 标准输入\n\n`<`意味着将原本需要由键盘输入的数据改由文件内容来替代。\n\n示例1：利用`cat`命令来创建一个文件的简单流程，了解一下什么是`键盘输入`\n```bash\ncat > catfile\n1\n2\n3\n<==此处按下ctrl+c或者ctrl+d来离开\n```\n示例2：利用`stdin`替代键盘的输入来创建新文件的流程\n```bash\ncat > catfile < ~/.bashrc\n--------------------------\nll catfile ~/.bashrc\n-rw-r--r--  1 root root 176 Sep  5 14:10 catfile\n-rw-r--r--. 1 root root 176 Dec 29  2013 /root/.bashrc\n# 注意到两个文件大小几一模一样，几乎是使用cp命令复制一份\n```\n理解了`<`后，再来看`<<`。`<<`：`代表的是结束输入的意思`。举例来讲，我要用cat直接将输入的信息输出到catfile中，且当由键盘输入eof时，本次输入就结束，可以按照如下方式进行：\n\n```Bash\ncat > catfile << \"eof\"\n>1\n>2\n>3\n>eof  <==输入该关键字后，立刻就结束输入而不需要输入ctrl + d/c\n```\n\n#### 双向重定向`tee`\n\ntee命令实现了手动跟踪命令的输出内容，同时又将输出的内容写入文件，确保之后可以用来参考。\n例如:\n```bash\nlast | tee last.list | cut -d ' ' -f1\n# last: View the last logged in users.\n# 该范例可以让我们将last的输出存一份到last.list文件中。\n\nls -l / | tee -a ~/homefile | more\n# tee 后直接接文件会被覆盖，如果加以 -a 这个参数则能将信息累加\n```\n\n总结，`tee`可以让standard output转存一份到文件内并将同样的数据继续送到屏幕上去处理显示。这样，除了可以让我们同时分析一份数据并记录下来之外，还可以作为处理一份数据的中间暂存盘记录只用。\n\n另：`tee`在很多认证考试中有考察。\n","slug":"Linux数据流重定向","published":1,"updated":"2018-09-27T01:28:23.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4l002texotrhngqrie","content":"<p><code>标准输出(standard output)</code>指的是命令执行所回传的正确的信息，而<code>标准错误输出(standard error output)</code>可以理解为命令执行失败后，所回传的错误信息。<br>一般情况下，不管正确还是错误信息数据默认的是输出到屏幕上，所以屏幕上是很混乱的。可以通过数据流重定向将stdout和stderr分别传送到其他的文件或者设备去，而分别传送所用的特殊字符如下所示：</p>\n<a id=\"more\"></a>\n<ol>\n<li>标准输入（stdin）：代码为<code>0</code>，使用<code>&lt;</code>或者<code>&lt;&lt;</code></li>\n<li>标准输出（stdout）：代码为<code>1</code>，使用<code>&gt;</code>或者<code>&gt;&gt;</code></li>\n<li>标准错误输出（stderr）：代码为<code>2</code>，使用<code>&gt;</code>或者<code>&gt;&gt;</code></li>\n</ol>\n<h4 id=\"标准输出和标准错误输出\"><a href=\"#标准输出和标准错误输出\" class=\"headerlink\" title=\"标准输出和标准错误输出\"></a>标准输出和标准错误输出</h4><p>如果仅存在<code>&gt;</code>，则代表默认代码为1。</p>\n<ul>\n<li><code>1&gt;</code>:以<code>覆盖</code>的方法将<code>正确</code>的数据输出到指定的文件或者设备上</li>\n<li><code>1&gt;&gt;</code>:以<code>累加</code>的方法将<code>正确</code>的数据输出到指定的文件或者设备上</li>\n<li><code>2&gt;</code>:以<code>覆盖</code>的方法将<code>错误</code>的数据输出到指定的文件或者设备上</li>\n<li><code>2&gt;&gt;</code>:以<code>累加</code>的方法将<code>错误</code>的数据输出到指定的文件或者设备上</li>\n</ul>\n<p>示例1：将stdout和stderr分别存到不同的文件中去。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc &gt; list_right 2&gt; list_error</span><br></pre></td></tr></table></figure></p>\n<p>示例2：将错误的数据丢弃，屏幕上显示正确的数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc 2&gt; /dev/null</span><br></pre></td></tr></table></figure></p>\n<p>/dev/null垃圾黑洞设备</p>\n<p>示例3：将正确和错误的数据全部写入一个文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc &gt;list 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">find /home -name .bashrc &amp;&gt; list</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"标准输入\"><a href=\"#标准输入\" class=\"headerlink\" title=\"标准输入\"></a>标准输入</h4><p><code>&lt;</code>意味着将原本需要由键盘输入的数据改由文件内容来替代。</p>\n<p>示例1：利用<code>cat</code>命令来创建一个文件的简单流程，了解一下什么是<code>键盘输入</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">&lt;==此处按下ctrl+c或者ctrl+d来离开</span><br></pre></td></tr></table></figure></p>\n<p>示例2：利用<code>stdin</code>替代键盘的输入来创建新文件的流程<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile &lt; ~/.bashrc</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">ll catfile ~/.bashrc</span><br><span class=\"line\">-rw-r--r--  1 root root 176 Sep  5 14:10 catfile</span><br><span class=\"line\">-rw-r--r--. 1 root root 176 Dec 29  2013 /root/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 注意到两个文件大小几一模一样，几乎是使用cp命令复制一份</span></span><br></pre></td></tr></table></figure></p>\n<p>理解了<code>&lt;</code>后，再来看<code>&lt;&lt;</code>。<code>&lt;&lt;</code>：<code>代表的是结束输入的意思</code>。举例来讲，我要用cat直接将输入的信息输出到catfile中，且当由键盘输入eof时，本次输入就结束，可以按照如下方式进行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile &lt;&lt; <span class=\"string\">\"eof\"</span></span><br><span class=\"line\">&gt;1</span><br><span class=\"line\">&gt;2</span><br><span class=\"line\">&gt;3</span><br><span class=\"line\">&gt;eof  &lt;==输入该关键字后，立刻就结束输入而不需要输入ctrl + d/c</span><br></pre></td></tr></table></figure>\n<h4 id=\"双向重定向tee\"><a href=\"#双向重定向tee\" class=\"headerlink\" title=\"双向重定向tee\"></a>双向重定向<code>tee</code></h4><p>tee命令实现了手动跟踪命令的输出内容，同时又将输出的内容写入文件，确保之后可以用来参考。<br>例如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last | tee last.list | cut -d <span class=\"string\">' '</span> -f1</span><br><span class=\"line\"><span class=\"comment\"># last: View the last logged in users.</span></span><br><span class=\"line\"><span class=\"comment\"># 该范例可以让我们将last的输出存一份到last.list文件中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -l / | tee -a ~/homefile | more</span><br><span class=\"line\"><span class=\"comment\"># tee 后直接接文件会被覆盖，如果加以 -a 这个参数则能将信息累加</span></span><br></pre></td></tr></table></figure></p>\n<p>总结，<code>tee</code>可以让standard output转存一份到文件内并将同样的数据继续送到屏幕上去处理显示。这样，除了可以让我们同时分析一份数据并记录下来之外，还可以作为处理一份数据的中间暂存盘记录只用。</p>\n<p>另：<code>tee</code>在很多认证考试中有考察。</p>\n","site":{"data":{}},"excerpt":"<p><code>标准输出(standard output)</code>指的是命令执行所回传的正确的信息，而<code>标准错误输出(standard error output)</code>可以理解为命令执行失败后，所回传的错误信息。<br>一般情况下，不管正确还是错误信息数据默认的是输出到屏幕上，所以屏幕上是很混乱的。可以通过数据流重定向将stdout和stderr分别传送到其他的文件或者设备去，而分别传送所用的特殊字符如下所示：</p>","more":"<ol>\n<li>标准输入（stdin）：代码为<code>0</code>，使用<code>&lt;</code>或者<code>&lt;&lt;</code></li>\n<li>标准输出（stdout）：代码为<code>1</code>，使用<code>&gt;</code>或者<code>&gt;&gt;</code></li>\n<li>标准错误输出（stderr）：代码为<code>2</code>，使用<code>&gt;</code>或者<code>&gt;&gt;</code></li>\n</ol>\n<h4 id=\"标准输出和标准错误输出\"><a href=\"#标准输出和标准错误输出\" class=\"headerlink\" title=\"标准输出和标准错误输出\"></a>标准输出和标准错误输出</h4><p>如果仅存在<code>&gt;</code>，则代表默认代码为1。</p>\n<ul>\n<li><code>1&gt;</code>:以<code>覆盖</code>的方法将<code>正确</code>的数据输出到指定的文件或者设备上</li>\n<li><code>1&gt;&gt;</code>:以<code>累加</code>的方法将<code>正确</code>的数据输出到指定的文件或者设备上</li>\n<li><code>2&gt;</code>:以<code>覆盖</code>的方法将<code>错误</code>的数据输出到指定的文件或者设备上</li>\n<li><code>2&gt;&gt;</code>:以<code>累加</code>的方法将<code>错误</code>的数据输出到指定的文件或者设备上</li>\n</ul>\n<p>示例1：将stdout和stderr分别存到不同的文件中去。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc &gt; list_right 2&gt; list_error</span><br></pre></td></tr></table></figure></p>\n<p>示例2：将错误的数据丢弃，屏幕上显示正确的数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc 2&gt; /dev/null</span><br></pre></td></tr></table></figure></p>\n<p>/dev/null垃圾黑洞设备</p>\n<p>示例3：将正确和错误的数据全部写入一个文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name .bashrc &gt;list 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">find /home -name .bashrc &amp;&gt; list</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"标准输入\"><a href=\"#标准输入\" class=\"headerlink\" title=\"标准输入\"></a>标准输入</h4><p><code>&lt;</code>意味着将原本需要由键盘输入的数据改由文件内容来替代。</p>\n<p>示例1：利用<code>cat</code>命令来创建一个文件的简单流程，了解一下什么是<code>键盘输入</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">&lt;==此处按下ctrl+c或者ctrl+d来离开</span><br></pre></td></tr></table></figure></p>\n<p>示例2：利用<code>stdin</code>替代键盘的输入来创建新文件的流程<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile &lt; ~/.bashrc</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">ll catfile ~/.bashrc</span><br><span class=\"line\">-rw-r--r--  1 root root 176 Sep  5 14:10 catfile</span><br><span class=\"line\">-rw-r--r--. 1 root root 176 Dec 29  2013 /root/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 注意到两个文件大小几一模一样，几乎是使用cp命令复制一份</span></span><br></pre></td></tr></table></figure></p>\n<p>理解了<code>&lt;</code>后，再来看<code>&lt;&lt;</code>。<code>&lt;&lt;</code>：<code>代表的是结束输入的意思</code>。举例来讲，我要用cat直接将输入的信息输出到catfile中，且当由键盘输入eof时，本次输入就结束，可以按照如下方式进行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; catfile &lt;&lt; <span class=\"string\">\"eof\"</span></span><br><span class=\"line\">&gt;1</span><br><span class=\"line\">&gt;2</span><br><span class=\"line\">&gt;3</span><br><span class=\"line\">&gt;eof  &lt;==输入该关键字后，立刻就结束输入而不需要输入ctrl + d/c</span><br></pre></td></tr></table></figure>\n<h4 id=\"双向重定向tee\"><a href=\"#双向重定向tee\" class=\"headerlink\" title=\"双向重定向tee\"></a>双向重定向<code>tee</code></h4><p>tee命令实现了手动跟踪命令的输出内容，同时又将输出的内容写入文件，确保之后可以用来参考。<br>例如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last | tee last.list | cut -d <span class=\"string\">' '</span> -f1</span><br><span class=\"line\"><span class=\"comment\"># last: View the last logged in users.</span></span><br><span class=\"line\"><span class=\"comment\"># 该范例可以让我们将last的输出存一份到last.list文件中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -l / | tee -a ~/homefile | more</span><br><span class=\"line\"><span class=\"comment\"># tee 后直接接文件会被覆盖，如果加以 -a 这个参数则能将信息累加</span></span><br></pre></td></tr></table></figure></p>\n<p>总结，<code>tee</code>可以让standard output转存一份到文件内并将同样的数据继续送到屏幕上去处理显示。这样，除了可以让我们同时分析一份数据并记录下来之外，还可以作为处理一份数据的中间暂存盘记录只用。</p>\n<p>另：<code>tee</code>在很多认证考试中有考察。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Sep 27 2018 09:28:23 GMT+0800 (China Standard Time)","title":"Linux数据流重定向","path":"2018/09/05/Linux数据流重定向/","eyeCatchImage":null,"excerpt":"<p><code>标准输出(standard output)</code>指的是命令执行所回传的正确的信息，而<code>标准错误输出(standard error output)</code>可以理解为命令执行失败后，所回传的错误信息。<br>一般情况下，不管正确还是错误信息数据默认的是输出到屏幕上，所以屏幕上是很混乱的。可以通过数据流重定向将stdout和stderr分别传送到其他的文件或者设备去，而分别传送所用的特殊字符如下所示：</p>","date":"2018-09-05T03:58:25.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux文件名查找","date":"2018-09-05T11:43:59.000Z","_content":"通常情况下`find`不是很常用，因为速度较慢。一般都是先使用`whereis`或者是`locate`来检查，如果真找不到，才使用`find`来查找。因为`whereis`与`locate`是利用数据库来查找数据，所以速度相当快，而且并没有实际去查询硬盘，比较节省时间;`find`直接打查找硬盘，所以查询速度要慢。\n\n<!-- more -->\n\n#### whereis\n> whereis [-bmsu] 文件或者目录名\n\nLinux系统会将系统内的所有文件都记录在一个数据库文件里面，而当使用`whereis`或者下面的`locate`命令时，都会以此数据库文件内容为准。因此有时候还会发现使用这两个命令查找文件时，会找到已经删掉的文件。而且有可能找不到最新刚刚创建的文件。\n\n#### locate\n> locate [-ir] keyword\n\nlocate使用更简单，直接在后面输入`文件的部分名称`后就能得到结果。被搜索的数据库默认是每天执行一次，该数据库的位置为`/var/lib/mlocate/`。我们可以选择手动更新数据库，直接命令行输入`updatedb` 即可。\n\n#### find\n> find [path] [option] [option]\n\n示例1：将过去24小时内有改动的文件列出\n```Bash\nfind / -mtime 0\n\nfind / -mtime 3 <==表示三天前的24小时\n```\n\n示例2：寻找/etc下面的文件，如果文件日期比/etc/passwd新就列出\n```Bash\nfind /etc -newer /etc/passwd\n```\n示例3：查找/home下属于wkx的文件\n```Bash\nfind /home -user wkx\n```\n\n示例4：查找系统中不属于任何人的文件\n```Bash\nfind / -nouser\n```\n示例5：找出文件名为passwd的文件\n```Bash\nfind / -name passwd\n```\n示例6：找出/var目录下文件类型为socket的文件名有哪些\n```Bash\nfind /var -type s\n```\n\n示例7：找出含有SGID或者SUID或者SBIT的属性文件\n```Bash\nfind / -perm +7000\n# 文件权限只要含有s或者t就列出\n```\n\n- -perm  mode: 文件权限刚好等于mode的文件\n- -perm -mode: 文件权限`全部包括mode`的文件\n- -perm +mode: 文件权限`包含任意mode`的文件\n\n\n\n\n\n---------\n","source":"_posts/Linux文件名查找.md","raw":"---\ntitle: Linux文件名查找\ndate: 2018-09-05 19:43:59\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n通常情况下`find`不是很常用，因为速度较慢。一般都是先使用`whereis`或者是`locate`来检查，如果真找不到，才使用`find`来查找。因为`whereis`与`locate`是利用数据库来查找数据，所以速度相当快，而且并没有实际去查询硬盘，比较节省时间;`find`直接打查找硬盘，所以查询速度要慢。\n\n<!-- more -->\n\n#### whereis\n> whereis [-bmsu] 文件或者目录名\n\nLinux系统会将系统内的所有文件都记录在一个数据库文件里面，而当使用`whereis`或者下面的`locate`命令时，都会以此数据库文件内容为准。因此有时候还会发现使用这两个命令查找文件时，会找到已经删掉的文件。而且有可能找不到最新刚刚创建的文件。\n\n#### locate\n> locate [-ir] keyword\n\nlocate使用更简单，直接在后面输入`文件的部分名称`后就能得到结果。被搜索的数据库默认是每天执行一次，该数据库的位置为`/var/lib/mlocate/`。我们可以选择手动更新数据库，直接命令行输入`updatedb` 即可。\n\n#### find\n> find [path] [option] [option]\n\n示例1：将过去24小时内有改动的文件列出\n```Bash\nfind / -mtime 0\n\nfind / -mtime 3 <==表示三天前的24小时\n```\n\n示例2：寻找/etc下面的文件，如果文件日期比/etc/passwd新就列出\n```Bash\nfind /etc -newer /etc/passwd\n```\n示例3：查找/home下属于wkx的文件\n```Bash\nfind /home -user wkx\n```\n\n示例4：查找系统中不属于任何人的文件\n```Bash\nfind / -nouser\n```\n示例5：找出文件名为passwd的文件\n```Bash\nfind / -name passwd\n```\n示例6：找出/var目录下文件类型为socket的文件名有哪些\n```Bash\nfind /var -type s\n```\n\n示例7：找出含有SGID或者SUID或者SBIT的属性文件\n```Bash\nfind / -perm +7000\n# 文件权限只要含有s或者t就列出\n```\n\n- -perm  mode: 文件权限刚好等于mode的文件\n- -perm -mode: 文件权限`全部包括mode`的文件\n- -perm +mode: 文件权限`包含任意mode`的文件\n\n\n\n\n\n---------\n","slug":"Linux文件名查找","published":1,"updated":"2018-09-05T12:57:05.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4o002xexotdspxc6eh","content":"<p>通常情况下<code>find</code>不是很常用，因为速度较慢。一般都是先使用<code>whereis</code>或者是<code>locate</code>来检查，如果真找不到，才使用<code>find</code>来查找。因为<code>whereis</code>与<code>locate</code>是利用数据库来查找数据，所以速度相当快，而且并没有实际去查询硬盘，比较节省时间;<code>find</code>直接打查找硬盘，所以查询速度要慢。</p>\n<a id=\"more\"></a>\n<h4 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h4><blockquote>\n<p>whereis [-bmsu] 文件或者目录名</p>\n</blockquote>\n<p>Linux系统会将系统内的所有文件都记录在一个数据库文件里面，而当使用<code>whereis</code>或者下面的<code>locate</code>命令时，都会以此数据库文件内容为准。因此有时候还会发现使用这两个命令查找文件时，会找到已经删掉的文件。而且有可能找不到最新刚刚创建的文件。</p>\n<h4 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h4><blockquote>\n<p>locate [-ir] keyword</p>\n</blockquote>\n<p>locate使用更简单，直接在后面输入<code>文件的部分名称</code>后就能得到结果。被搜索的数据库默认是每天执行一次，该数据库的位置为<code>/var/lib/mlocate/</code>。我们可以选择手动更新数据库，直接命令行输入<code>updatedb</code> 即可。</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><blockquote>\n<p>find [path] [option] [option]</p>\n</blockquote>\n<p>示例1：将过去24小时内有改动的文件列出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -mtime 0</span><br><span class=\"line\"></span><br><span class=\"line\">find / -mtime 3 &lt;==表示三天前的24小时</span><br></pre></td></tr></table></figure></p>\n<p>示例2：寻找/etc下面的文件，如果文件日期比/etc/passwd新就列出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -newer /etc/passwd</span><br></pre></td></tr></table></figure></p>\n<p>示例3：查找/home下属于wkx的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -user wkx</span><br></pre></td></tr></table></figure></p>\n<p>示例4：查找系统中不属于任何人的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -nouser</span><br></pre></td></tr></table></figure></p>\n<p>示例5：找出文件名为passwd的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name passwd</span><br></pre></td></tr></table></figure></p>\n<p>示例6：找出/var目录下文件类型为socket的文件名有哪些<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /var -<span class=\"built_in\">type</span> s</span><br></pre></td></tr></table></figure></p>\n<p>示例7：找出含有SGID或者SUID或者SBIT的属性文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm +7000</span><br><span class=\"line\"><span class=\"comment\"># 文件权限只要含有s或者t就列出</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-perm  mode: 文件权限刚好等于mode的文件</li>\n<li>-perm -mode: 文件权限<code>全部包括mode</code>的文件</li>\n<li>-perm +mode: 文件权限<code>包含任意mode</code>的文件</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<p>通常情况下<code>find</code>不是很常用，因为速度较慢。一般都是先使用<code>whereis</code>或者是<code>locate</code>来检查，如果真找不到，才使用<code>find</code>来查找。因为<code>whereis</code>与<code>locate</code>是利用数据库来查找数据，所以速度相当快，而且并没有实际去查询硬盘，比较节省时间;<code>find</code>直接打查找硬盘，所以查询速度要慢。</p>","more":"<h4 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h4><blockquote>\n<p>whereis [-bmsu] 文件或者目录名</p>\n</blockquote>\n<p>Linux系统会将系统内的所有文件都记录在一个数据库文件里面，而当使用<code>whereis</code>或者下面的<code>locate</code>命令时，都会以此数据库文件内容为准。因此有时候还会发现使用这两个命令查找文件时，会找到已经删掉的文件。而且有可能找不到最新刚刚创建的文件。</p>\n<h4 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h4><blockquote>\n<p>locate [-ir] keyword</p>\n</blockquote>\n<p>locate使用更简单，直接在后面输入<code>文件的部分名称</code>后就能得到结果。被搜索的数据库默认是每天执行一次，该数据库的位置为<code>/var/lib/mlocate/</code>。我们可以选择手动更新数据库，直接命令行输入<code>updatedb</code> 即可。</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><blockquote>\n<p>find [path] [option] [option]</p>\n</blockquote>\n<p>示例1：将过去24小时内有改动的文件列出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -mtime 0</span><br><span class=\"line\"></span><br><span class=\"line\">find / -mtime 3 &lt;==表示三天前的24小时</span><br></pre></td></tr></table></figure></p>\n<p>示例2：寻找/etc下面的文件，如果文件日期比/etc/passwd新就列出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /etc -newer /etc/passwd</span><br></pre></td></tr></table></figure></p>\n<p>示例3：查找/home下属于wkx的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -user wkx</span><br></pre></td></tr></table></figure></p>\n<p>示例4：查找系统中不属于任何人的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -nouser</span><br></pre></td></tr></table></figure></p>\n<p>示例5：找出文件名为passwd的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name passwd</span><br></pre></td></tr></table></figure></p>\n<p>示例6：找出/var目录下文件类型为socket的文件名有哪些<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /var -<span class=\"built_in\">type</span> s</span><br></pre></td></tr></table></figure></p>\n<p>示例7：找出含有SGID或者SUID或者SBIT的属性文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm +7000</span><br><span class=\"line\"><span class=\"comment\"># 文件权限只要含有s或者t就列出</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-perm  mode: 文件权限刚好等于mode的文件</li>\n<li>-perm -mode: 文件权限<code>全部包括mode</code>的文件</li>\n<li>-perm +mode: 文件权限<code>包含任意mode</code>的文件</li>\n</ul>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 05 2018 20:57:05 GMT+0800 (China Standard Time)","title":"Linux文件名查找","path":"2018/09/05/Linux文件名查找/","eyeCatchImage":null,"excerpt":"<p>通常情况下<code>find</code>不是很常用，因为速度较慢。一般都是先使用<code>whereis</code>或者是<code>locate</code>来检查，如果真找不到，才使用<code>find</code>来查找。因为<code>whereis</code>与<code>locate</code>是利用数据库来查找数据，所以速度相当快，而且并没有实际去查询硬盘，比较节省时间;<code>find</code>直接打查找硬盘，所以查询速度要慢。</p>","date":"2018-09-05T11:43:59.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux命令英文缩写","date":"2018-08-30T01:35:47.000Z","_content":"## 命令缩写\n- nc: NetCat(网猫(Netcat)是用来进行TCP/UDP连接的工具，最早是由Hobbit先生在1995年为UNIX所写的程序)\n- ls: list(列出目录内容)\n- cd: Change Directory（改变目录）\n- su: switch user 切换用户\n- rpm: redhat package manager 红帽子打包管理器\n- pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径\n- ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf `ps auxf` 显示进程状态\n- df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。\n- rpm:  即RedHat Package Management，是RedHat的发明之一\n- rmdir: Remove Directory（删除目录）\n- rm: Remove（删除目录或文件）\n- cat:  concatenate连锁 `cat file1 file2 >> file3`把文件1和文件2的内容联合起来放到file3中\n- insmod:  install module,载入模块\n- ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式\n- mkdir: Make Directory\n- ps: Process Status\n- uname: Unix name\n- tar: Tape Archive\n- grep: General Regular Expression Print\n\n<!-- more -->\n\n## 目录名\n- /boot: 顾名思义\n- /root : 同上\n- /lost+found: 同上\n- /run: 同上\n- /home: 同上\n- /etc: ETCetera\n- /bin: BINaries\n- /dev: DEVices\n- /lib: LIBraries\n- /mnt: MouNT\n- /proc: PROCesses\n- /tmp: TeMPorary\n- /var: VARiable\n- /srv: SeRVices\n- /opt: OPTion\n- /sbin: Super BINaries（又作Superuser BINaries）\n- /sys: SYStem\n- /usr: 一鼓而作Unix System Resources，再而作Unix Software Resources,三而作Unix Shared Resources（这个很重要，很多人会认为这个是user）\n\n## 软件及软件包管理\n- man -- MANual\n- apt -- Advanced Packaging Tool\n- dpkg -- Debian PacKaGe\n- yum -- Yellow dog Updater, Modified\n- rpm -- RPM Package Manager（又作Redhat Package Manager，不过我比较喜欢前者，因为魔性）\n\n## 其他\n- SELinux -- Security Enhanced Linux, 安全强化的Linux\n- daemon -- Disk And Execution MONitor\n","source":"_posts/Linux命令英文缩写.md","raw":"---\ntitle: Linux命令英文缩写\ndate: 2018-08-30 09:35:47\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n## 命令缩写\n- nc: NetCat(网猫(Netcat)是用来进行TCP/UDP连接的工具，最早是由Hobbit先生在1995年为UNIX所写的程序)\n- ls: list(列出目录内容)\n- cd: Change Directory（改变目录）\n- su: switch user 切换用户\n- rpm: redhat package manager 红帽子打包管理器\n- pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径\n- ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf `ps auxf` 显示进程状态\n- df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。\n- rpm:  即RedHat Package Management，是RedHat的发明之一\n- rmdir: Remove Directory（删除目录）\n- rm: Remove（删除目录或文件）\n- cat:  concatenate连锁 `cat file1 file2 >> file3`把文件1和文件2的内容联合起来放到file3中\n- insmod:  install module,载入模块\n- ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式\n- mkdir: Make Directory\n- ps: Process Status\n- uname: Unix name\n- tar: Tape Archive\n- grep: General Regular Expression Print\n\n<!-- more -->\n\n## 目录名\n- /boot: 顾名思义\n- /root : 同上\n- /lost+found: 同上\n- /run: 同上\n- /home: 同上\n- /etc: ETCetera\n- /bin: BINaries\n- /dev: DEVices\n- /lib: LIBraries\n- /mnt: MouNT\n- /proc: PROCesses\n- /tmp: TeMPorary\n- /var: VARiable\n- /srv: SeRVices\n- /opt: OPTion\n- /sbin: Super BINaries（又作Superuser BINaries）\n- /sys: SYStem\n- /usr: 一鼓而作Unix System Resources，再而作Unix Software Resources,三而作Unix Shared Resources（这个很重要，很多人会认为这个是user）\n\n## 软件及软件包管理\n- man -- MANual\n- apt -- Advanced Packaging Tool\n- dpkg -- Debian PacKaGe\n- yum -- Yellow dog Updater, Modified\n- rpm -- RPM Package Manager（又作Redhat Package Manager，不过我比较喜欢前者，因为魔性）\n\n## 其他\n- SELinux -- Security Enhanced Linux, 安全强化的Linux\n- daemon -- Disk And Execution MONitor\n","slug":"Linux命令英文缩写","published":1,"updated":"2018-11-04T08:41:39.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4q002zexottb4m3geb","content":"<h2 id=\"命令缩写\"><a href=\"#命令缩写\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h2><ul>\n<li>nc: NetCat(网猫(Netcat)是用来进行TCP/UDP连接的工具，最早是由Hobbit先生在1995年为UNIX所写的程序)</li>\n<li>ls: list(列出目录内容)</li>\n<li>cd: Change Directory（改变目录）</li>\n<li>su: switch user 切换用户</li>\n<li>rpm: redhat package manager 红帽子打包管理器</li>\n<li>pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径</li>\n<li>ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf <code>ps auxf</code> 显示进程状态</li>\n<li>df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</li>\n<li>rpm:  即RedHat Package Management，是RedHat的发明之一</li>\n<li>rmdir: Remove Directory（删除目录）</li>\n<li>rm: Remove（删除目录或文件）</li>\n<li>cat:  concatenate连锁 <code>cat file1 file2 &gt;&gt; file3</code>把文件1和文件2的内容联合起来放到file3中</li>\n<li>insmod:  install module,载入模块</li>\n<li>ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式</li>\n<li>mkdir: Make Directory</li>\n<li>ps: Process Status</li>\n<li>uname: Unix name</li>\n<li>tar: Tape Archive</li>\n<li>grep: General Regular Expression Print</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"目录名\"><a href=\"#目录名\" class=\"headerlink\" title=\"目录名\"></a>目录名</h2><ul>\n<li>/boot: 顾名思义</li>\n<li>/root : 同上</li>\n<li>/lost+found: 同上</li>\n<li>/run: 同上</li>\n<li>/home: 同上</li>\n<li>/etc: ETCetera</li>\n<li>/bin: BINaries</li>\n<li>/dev: DEVices</li>\n<li>/lib: LIBraries</li>\n<li>/mnt: MouNT</li>\n<li>/proc: PROCesses</li>\n<li>/tmp: TeMPorary</li>\n<li>/var: VARiable</li>\n<li>/srv: SeRVices</li>\n<li>/opt: OPTion</li>\n<li>/sbin: Super BINaries（又作Superuser BINaries）</li>\n<li>/sys: SYStem</li>\n<li>/usr: 一鼓而作Unix System Resources，再而作Unix Software Resources,三而作Unix Shared Resources（这个很重要，很多人会认为这个是user）</li>\n</ul>\n<h2 id=\"软件及软件包管理\"><a href=\"#软件及软件包管理\" class=\"headerlink\" title=\"软件及软件包管理\"></a>软件及软件包管理</h2><ul>\n<li>man – MANual</li>\n<li>apt – Advanced Packaging Tool</li>\n<li>dpkg – Debian PacKaGe</li>\n<li>yum – Yellow dog Updater, Modified</li>\n<li>rpm – RPM Package Manager（又作Redhat Package Manager，不过我比较喜欢前者，因为魔性）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>SELinux – Security Enhanced Linux, 安全强化的Linux</li>\n<li>daemon – Disk And Execution MONitor</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"命令缩写\"><a href=\"#命令缩写\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h2><ul>\n<li>nc: NetCat(网猫(Netcat)是用来进行TCP/UDP连接的工具，最早是由Hobbit先生在1995年为UNIX所写的程序)</li>\n<li>ls: list(列出目录内容)</li>\n<li>cd: Change Directory（改变目录）</li>\n<li>su: switch user 切换用户</li>\n<li>rpm: redhat package manager 红帽子打包管理器</li>\n<li>pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径</li>\n<li>ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf <code>ps auxf</code> 显示进程状态</li>\n<li>df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</li>\n<li>rpm:  即RedHat Package Management，是RedHat的发明之一</li>\n<li>rmdir: Remove Directory（删除目录）</li>\n<li>rm: Remove（删除目录或文件）</li>\n<li>cat:  concatenate连锁 <code>cat file1 file2 &gt;&gt; file3</code>把文件1和文件2的内容联合起来放到file3中</li>\n<li>insmod:  install module,载入模块</li>\n<li>ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式</li>\n<li>mkdir: Make Directory</li>\n<li>ps: Process Status</li>\n<li>uname: Unix name</li>\n<li>tar: Tape Archive</li>\n<li>grep: General Regular Expression Print</li>\n</ul>","more":"<h2 id=\"目录名\"><a href=\"#目录名\" class=\"headerlink\" title=\"目录名\"></a>目录名</h2><ul>\n<li>/boot: 顾名思义</li>\n<li>/root : 同上</li>\n<li>/lost+found: 同上</li>\n<li>/run: 同上</li>\n<li>/home: 同上</li>\n<li>/etc: ETCetera</li>\n<li>/bin: BINaries</li>\n<li>/dev: DEVices</li>\n<li>/lib: LIBraries</li>\n<li>/mnt: MouNT</li>\n<li>/proc: PROCesses</li>\n<li>/tmp: TeMPorary</li>\n<li>/var: VARiable</li>\n<li>/srv: SeRVices</li>\n<li>/opt: OPTion</li>\n<li>/sbin: Super BINaries（又作Superuser BINaries）</li>\n<li>/sys: SYStem</li>\n<li>/usr: 一鼓而作Unix System Resources，再而作Unix Software Resources,三而作Unix Shared Resources（这个很重要，很多人会认为这个是user）</li>\n</ul>\n<h2 id=\"软件及软件包管理\"><a href=\"#软件及软件包管理\" class=\"headerlink\" title=\"软件及软件包管理\"></a>软件及软件包管理</h2><ul>\n<li>man – MANual</li>\n<li>apt – Advanced Packaging Tool</li>\n<li>dpkg – Debian PacKaGe</li>\n<li>yum – Yellow dog Updater, Modified</li>\n<li>rpm – RPM Package Manager（又作Redhat Package Manager，不过我比较喜欢前者，因为魔性）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>SELinux – Security Enhanced Linux, 安全强化的Linux</li>\n<li>daemon – Disk And Execution MONitor</li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Nov 04 2018 16:41:39 GMT+0800 (China Standard Time)","title":"Linux命令英文缩写","path":"2018/08/30/Linux命令英文缩写/","eyeCatchImage":null,"excerpt":"<h2 id=\"命令缩写\"><a href=\"#命令缩写\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h2><ul>\n<li>nc: NetCat(网猫(Netcat)是用来进行TCP/UDP连接的工具，最早是由Hobbit先生在1995年为UNIX所写的程序)</li>\n<li>ls: list(列出目录内容)</li>\n<li>cd: Change Directory（改变目录）</li>\n<li>su: switch user 切换用户</li>\n<li>rpm: redhat package manager 红帽子打包管理器</li>\n<li>pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径</li>\n<li>ps:  process status(进程状态，类似于windows的任务管理器) 常用参数: －auxf <code>ps auxf</code> 显示进程状态</li>\n<li>df:  disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</li>\n<li>rpm:  即RedHat Package Management，是RedHat的发明之一</li>\n<li>rmdir: Remove Directory（删除目录）</li>\n<li>rm: Remove（删除目录或文件）</li>\n<li>cat:  concatenate连锁 <code>cat file1 file2 &gt;&gt; file3</code>把文件1和文件2的内容联合起来放到file3中</li>\n<li>insmod:  install module,载入模块</li>\n<li>ln -s :  link -soft 创建一个软链接，相当于创建一个快捷方式</li>\n<li>mkdir: Make Directory</li>\n<li>ps: Process Status</li>\n<li>uname: Unix name</li>\n<li>tar: Tape Archive</li>\n<li>grep: General Regular Expression Print</li>\n</ul>","date":"2018-08-30T01:35:47.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux之crontab命令","date":"2018-05-05T15:24:12.000Z","_content":"## tldr 基本用法\n```bash\nSchedule cron jobs to run on a time interval for the current user.\nJob definition format: \"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\".\n\n- Edit the crontab file for the current user:\n    crontab -e\n\n- View a list of existing cron jobs for current user:\n    crontab -l\n\n- Remove all cron jobs for the current user:\n    crontab -r\n\n- Sample job which runs at 10:00 every day. * means any value:\n    0 10 * * * path/to/script.sh\n\n- Sample job which runs every minute on the 3rd of April:\n    * * 3 Apr * path/to/script.sh\n\n- Sample job which runs at 02:30 every Friday:\n    30 2 * * Fri path/to/script.sh\n```\n<!-- more -->\n## 时间格式\ncrontab通过固定的的时间设置格式设置任务的执行时间\n```python\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name command to be executed\n```\n第一个参数代表分，其次是小时，然后是日期，之后是月份，最后是所在周的周几。各个字段可以使用特殊字符来代表时间逻辑。\n\n```python\n星号（*）：        代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n逗号（a,b,c）： 可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n中杠（x-y）：    可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n正斜线（/）：    可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。\n组合（*/x）：    指定时间类型下，每x分钟或每小时执行一次\n组合(x-y/z)：    指定时间类型下，从x到y时间段内，每z分或每z秒执行一次\n```\n如果是当前用户设置自己的定时任务，可以直接通过crontab -e编辑任务，命令格式* * * * * command即可。\n编辑好任务需要重启crontab，注意需要以root身份执行。\n","source":"_posts/Linux之crontab命令.md","raw":"---\ntitle: Linux之crontab命令\ndate: 2018-05-05 23:24:12\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n## tldr 基本用法\n```bash\nSchedule cron jobs to run on a time interval for the current user.\nJob definition format: \"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\".\n\n- Edit the crontab file for the current user:\n    crontab -e\n\n- View a list of existing cron jobs for current user:\n    crontab -l\n\n- Remove all cron jobs for the current user:\n    crontab -r\n\n- Sample job which runs at 10:00 every day. * means any value:\n    0 10 * * * path/to/script.sh\n\n- Sample job which runs every minute on the 3rd of April:\n    * * 3 Apr * path/to/script.sh\n\n- Sample job which runs at 02:30 every Friday:\n    30 2 * * Fri path/to/script.sh\n```\n<!-- more -->\n## 时间格式\ncrontab通过固定的的时间设置格式设置任务的执行时间\n```python\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name command to be executed\n```\n第一个参数代表分，其次是小时，然后是日期，之后是月份，最后是所在周的周几。各个字段可以使用特殊字符来代表时间逻辑。\n\n```python\n星号（*）：        代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n逗号（a,b,c）： 可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n中杠（x-y）：    可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n正斜线（/）：    可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。\n组合（*/x）：    指定时间类型下，每x分钟或每小时执行一次\n组合(x-y/z)：    指定时间类型下，从x到y时间段内，每z分或每z秒执行一次\n```\n如果是当前用户设置自己的定时任务，可以直接通过crontab -e编辑任务，命令格式* * * * * command即可。\n编辑好任务需要重启crontab，注意需要以root身份执行。\n","slug":"Linux之crontab命令","published":1,"updated":"2018-05-08T10:14:10.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4t0033exotjr5oc53v","content":"<h2 id=\"tldr-基本用法\"><a href=\"#tldr-基本用法\" class=\"headerlink\" title=\"tldr 基本用法\"></a>tldr 基本用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schedule cron <span class=\"built_in\">jobs</span> to run on a time interval <span class=\"keyword\">for</span> the current user.</span><br><span class=\"line\">Job definition format: <span class=\"string\">\"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\"</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">- Edit the crontab file <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">- View a list of existing cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> current user:</span><br><span class=\"line\">    crontab -l</span><br><span class=\"line\"></span><br><span class=\"line\">- Remove all cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -r</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 10:00 every day. * means any value:</span><br><span class=\"line\">    0 10 * * * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs every minute on the 3rd of April:</span><br><span class=\"line\">    * * 3 Apr * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 02:30 every Friday:</span><br><span class=\"line\">    30 2 * * Fri path/to/script.sh</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h2><p>crontab通过固定的的时间设置格式设置任务的执行时间<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个参数代表分，其次是小时，然后是日期，之后是月份，最后是所在周的周几。各个字段可以使用特殊字符来代表时间逻辑。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">星号（*）：        代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class=\"line\">逗号（a,b,c）： 可以用逗号隔开的值指定一个列表范围，例如，“<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>”</span><br><span class=\"line\">中杠（x-y）：    可以用整数之间的中杠表示一个整数范围，例如“<span class=\"number\">2</span><span class=\"number\">-6</span>”表示“<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>”</span><br><span class=\"line\">正斜线（/）：    可以用正斜线指定时间的间隔频率，例如“<span class=\"number\">0</span><span class=\"number\">-23</span>/<span class=\"number\">2</span>”表示每两小时执行一次。</span><br><span class=\"line\">组合（*/x）：    指定时间类型下，每x分钟或每小时执行一次</span><br><span class=\"line\">组合(x-y/z)：    指定时间类型下，从x到y时间段内，每z分或每z秒执行一次</span><br></pre></td></tr></table></figure>\n<p>如果是当前用户设置自己的定时任务，可以直接通过crontab -e编辑任务，命令格式<em> </em> <em> </em> * command即可。<br>编辑好任务需要重启crontab，注意需要以root身份执行。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"tldr-基本用法\"><a href=\"#tldr-基本用法\" class=\"headerlink\" title=\"tldr 基本用法\"></a>tldr 基本用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schedule cron <span class=\"built_in\">jobs</span> to run on a time interval <span class=\"keyword\">for</span> the current user.</span><br><span class=\"line\">Job definition format: <span class=\"string\">\"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\"</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">- Edit the crontab file <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">- View a list of existing cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> current user:</span><br><span class=\"line\">    crontab -l</span><br><span class=\"line\"></span><br><span class=\"line\">- Remove all cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -r</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 10:00 every day. * means any value:</span><br><span class=\"line\">    0 10 * * * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs every minute on the 3rd of April:</span><br><span class=\"line\">    * * 3 Apr * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 02:30 every Friday:</span><br><span class=\"line\">    30 2 * * Fri path/to/script.sh</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h2><p>crontab通过固定的的时间设置格式设置任务的执行时间<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个参数代表分，其次是小时，然后是日期，之后是月份，最后是所在周的周几。各个字段可以使用特殊字符来代表时间逻辑。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">星号（*）：        代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class=\"line\">逗号（a,b,c）： 可以用逗号隔开的值指定一个列表范围，例如，“<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>”</span><br><span class=\"line\">中杠（x-y）：    可以用整数之间的中杠表示一个整数范围，例如“<span class=\"number\">2</span><span class=\"number\">-6</span>”表示“<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>”</span><br><span class=\"line\">正斜线（/）：    可以用正斜线指定时间的间隔频率，例如“<span class=\"number\">0</span><span class=\"number\">-23</span>/<span class=\"number\">2</span>”表示每两小时执行一次。</span><br><span class=\"line\">组合（*/x）：    指定时间类型下，每x分钟或每小时执行一次</span><br><span class=\"line\">组合(x-y/z)：    指定时间类型下，从x到y时间段内，每z分或每z秒执行一次</span><br></pre></td></tr></table></figure>\n<p>如果是当前用户设置自己的定时任务，可以直接通过crontab -e编辑任务，命令格式<em> </em> <em> </em> * command即可。<br>编辑好任务需要重启crontab，注意需要以root身份执行。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue May 08 2018 18:14:10 GMT+0800 (China Standard Time)","title":"Linux之crontab命令","path":"2018/05/05/Linux之crontab命令/","eyeCatchImage":null,"excerpt":"<h2 id=\"tldr-基本用法\"><a href=\"#tldr-基本用法\" class=\"headerlink\" title=\"tldr 基本用法\"></a>tldr 基本用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schedule cron <span class=\"built_in\">jobs</span> to run on a time interval <span class=\"keyword\">for</span> the current user.</span><br><span class=\"line\">Job definition format: <span class=\"string\">\"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\"</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">- Edit the crontab file <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">- View a list of existing cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> current user:</span><br><span class=\"line\">    crontab -l</span><br><span class=\"line\"></span><br><span class=\"line\">- Remove all cron <span class=\"built_in\">jobs</span> <span class=\"keyword\">for</span> the current user:</span><br><span class=\"line\">    crontab -r</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 10:00 every day. * means any value:</span><br><span class=\"line\">    0 10 * * * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs every minute on the 3rd of April:</span><br><span class=\"line\">    * * 3 Apr * path/to/script.sh</span><br><span class=\"line\"></span><br><span class=\"line\">- Sample job <span class=\"built_in\">which</span> runs at 02:30 every Friday:</span><br><span class=\"line\">    30 2 * * Fri path/to/script.sh</span><br></pre></td></tr></table></figure>","date":"2018-05-05T15:24:12.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux根目录下目录介绍及各项缩写全称","date":"2018-08-22T12:43:53.000Z","_content":"\n\n- bin  （binary） : 常见linux命令、系统所有用户命令目录文件\n- sbin （superuser binary） : root用户命令文件\n- dev  （device） : 设备驱动存储目录文件\n- sys   (system) : 关于系统总线和设备的额外底层信息。\n- proc （process）: 进程信息文件，`/proc`文件系统，它允许`用户模式`进程访问内核数据结构的内容。`/proc`文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。\n- usr  （UNIX Software Resource）: 与软件安装/执行相关\n- var  （variable）: 变量文件目录，与系统运作过程有关\n- etc  （etcetera）: 所有程序所需要的配置文件\n- lib  （library）: 系统默认库路径文件\n- mnt  （mount）: 挂载目录\n- tmp  （temporary）: 临时文件目录\n- opt  （option）: 可选目录（可以选择安装应用程序的目录）\n- boot  : 引导程序文件\n- home  : 家目录（用户目录）\n- root  : root根目录\n- media : 多媒体及挂载目录\n","source":"_posts/Linux根目录下目录介绍及各项缩写全称.md","raw":"---\ntitle: Linux根目录下目录介绍及各项缩写全称\ndate: 2018-08-22 20:43:53\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n\n- bin  （binary） : 常见linux命令、系统所有用户命令目录文件\n- sbin （superuser binary） : root用户命令文件\n- dev  （device） : 设备驱动存储目录文件\n- sys   (system) : 关于系统总线和设备的额外底层信息。\n- proc （process）: 进程信息文件，`/proc`文件系统，它允许`用户模式`进程访问内核数据结构的内容。`/proc`文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。\n- usr  （UNIX Software Resource）: 与软件安装/执行相关\n- var  （variable）: 变量文件目录，与系统运作过程有关\n- etc  （etcetera）: 所有程序所需要的配置文件\n- lib  （library）: 系统默认库路径文件\n- mnt  （mount）: 挂载目录\n- tmp  （temporary）: 临时文件目录\n- opt  （option）: 可选目录（可以选择安装应用程序的目录）\n- boot  : 引导程序文件\n- home  : 家目录（用户目录）\n- root  : root根目录\n- media : 多媒体及挂载目录\n","slug":"Linux根目录下目录介绍及各项缩写全称","published":1,"updated":"2019-02-20T13:43:27.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4v0035exots1zpwwcf","content":"<ul>\n<li>bin  （binary） : 常见linux命令、系统所有用户命令目录文件</li>\n<li>sbin （superuser binary） : root用户命令文件</li>\n<li>dev  （device） : 设备驱动存储目录文件</li>\n<li>sys   (system) : 关于系统总线和设备的额外底层信息。</li>\n<li>proc （process）: 进程信息文件，<code>/proc</code>文件系统，它允许<code>用户模式</code>进程访问内核数据结构的内容。<code>/proc</code>文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。</li>\n<li>usr  （UNIX Software Resource）: 与软件安装/执行相关</li>\n<li>var  （variable）: 变量文件目录，与系统运作过程有关</li>\n<li>etc  （etcetera）: 所有程序所需要的配置文件</li>\n<li>lib  （library）: 系统默认库路径文件</li>\n<li>mnt  （mount）: 挂载目录</li>\n<li>tmp  （temporary）: 临时文件目录</li>\n<li>opt  （option）: 可选目录（可以选择安装应用程序的目录）</li>\n<li>boot  : 引导程序文件</li>\n<li>home  : 家目录（用户目录）</li>\n<li>root  : root根目录</li>\n<li>media : 多媒体及挂载目录</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>bin  （binary） : 常见linux命令、系统所有用户命令目录文件</li>\n<li>sbin （superuser binary） : root用户命令文件</li>\n<li>dev  （device） : 设备驱动存储目录文件</li>\n<li>sys   (system) : 关于系统总线和设备的额外底层信息。</li>\n<li>proc （process）: 进程信息文件，<code>/proc</code>文件系统，它允许<code>用户模式</code>进程访问内核数据结构的内容。<code>/proc</code>文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。</li>\n<li>usr  （UNIX Software Resource）: 与软件安装/执行相关</li>\n<li>var  （variable）: 变量文件目录，与系统运作过程有关</li>\n<li>etc  （etcetera）: 所有程序所需要的配置文件</li>\n<li>lib  （library）: 系统默认库路径文件</li>\n<li>mnt  （mount）: 挂载目录</li>\n<li>tmp  （temporary）: 临时文件目录</li>\n<li>opt  （option）: 可选目录（可以选择安装应用程序的目录）</li>\n<li>boot  : 引导程序文件</li>\n<li>home  : 家目录（用户目录）</li>\n<li>root  : root根目录</li>\n<li>media : 多媒体及挂载目录</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 20 2019 21:43:27 GMT+0800 (China Standard Time)","title":"Linux根目录下目录介绍及各项缩写全称","path":"2018/08/22/Linux根目录下目录介绍及各项缩写全称/","eyeCatchImage":null,"excerpt":null,"date":"2018-08-22T12:43:53.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Linux查看端口占用情况","date":"2019-05-28T02:11:18.000Z","_content":"\n### lsof\n\n- lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。以root用户来执行lsof -i命令\n\n- lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22\n\n![Screen Shot 2019-05-28 at 13.50.08.png](https://upload-images.jianshu.io/upload_images/2952111-34cfaa89c8a414a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### netstat\n\nnetstat -tunlp用于显示tcp，udp的端口和进程等相关情况\n\n![Screen Shot 2019-05-28 at 13.51.26.png](https://upload-images.jianshu.io/upload_images/2952111-79a5c99ebc5ba5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Linux查看端口占用情况.md","raw":"---\ntitle: Linux查看端口占用情况\ndate: 2019-05-28 10:11:18\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n### lsof\n\n- lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。以root用户来执行lsof -i命令\n\n- lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22\n\n![Screen Shot 2019-05-28 at 13.50.08.png](https://upload-images.jianshu.io/upload_images/2952111-34cfaa89c8a414a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### netstat\n\nnetstat -tunlp用于显示tcp，udp的端口和进程等相关情况\n\n![Screen Shot 2019-05-28 at 13.51.26.png](https://upload-images.jianshu.io/upload_images/2952111-79a5c99ebc5ba5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Linux查看端口占用情况","published":1,"updated":"2019-05-28T05:53:41.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4x0039exotfu5p3z2q","content":"<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><ul>\n<li><p>lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。以root用户来执行lsof -i命令</p>\n</li>\n<li><p>lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-34cfaa89c8a414a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-05-28 at 13.50.08.png\"></p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>netstat -tunlp用于显示tcp，udp的端口和进程等相关情况</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-79a5c99ebc5ba5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-05-28 at 13.51.26.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><ul>\n<li><p>lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。以root用户来执行lsof -i命令</p>\n</li>\n<li><p>lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-34cfaa89c8a414a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-05-28 at 13.50.08.png\"></p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>netstat -tunlp用于显示tcp，udp的端口和进程等相关情况</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-79a5c99ebc5ba5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-05-28 at 13.51.26.png\"></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue May 28 2019 13:53:41 GMT+0800 (China Standard Time)","title":"Linux查看端口占用情况","path":"2019/05/28/Linux查看端口占用情况/","eyeCatchImage":null,"excerpt":null,"date":"2019-05-28T02:11:18.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Mac OS 命令之文件(夹)删除","date":"2018-03-03T05:40:34.000Z","_content":"`rmdir`删除空目录，不过一旦目录非空会提示\nDirectiry not empty\n\n使用`rm`既可以删除文件又可以删除文件夹\n删除文件夹（无论文件夹是否为空），使用 `-rf` 命令即可。\n即：\n```bash\n$ rm -rf 目录名字\n```\n`-r` 就是向下递归，不管有多少级目录，一并删除\n`-f` 就是直接强行删除，不作任何提示的意思\n<!-- more -->\n删除`文件夹`实例：\n```bash\n$ rm -rf  /User/Dhyana/desktop\n```\n将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹\n\n删除`文件`使用实例：\n```bash\n$ rm -f  /User/Dhyana/desktop/test.py\n```\n将会**强制删除**/User/Dhyana/desktop/test.py这个文件\n\n值得注意的是：\n使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入\n```bash\n$ rm -rf /.*\n# 千万不要输入此命令，否则清空整个操作系统，后果自负\n```\n","source":"_posts/Mac-OS-命令之文件-夹-删除.md","raw":"---\ntitle: Mac OS 命令之文件(夹)删除\ndate: 2018-03-03 13:40:34\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n`rmdir`删除空目录，不过一旦目录非空会提示\nDirectiry not empty\n\n使用`rm`既可以删除文件又可以删除文件夹\n删除文件夹（无论文件夹是否为空），使用 `-rf` 命令即可。\n即：\n```bash\n$ rm -rf 目录名字\n```\n`-r` 就是向下递归，不管有多少级目录，一并删除\n`-f` 就是直接强行删除，不作任何提示的意思\n<!-- more -->\n删除`文件夹`实例：\n```bash\n$ rm -rf  /User/Dhyana/desktop\n```\n将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹\n\n删除`文件`使用实例：\n```bash\n$ rm -f  /User/Dhyana/desktop/test.py\n```\n将会**强制删除**/User/Dhyana/desktop/test.py这个文件\n\n值得注意的是：\n使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入\n```bash\n$ rm -rf /.*\n# 千万不要输入此命令，否则清空整个操作系统，后果自负\n```\n","slug":"Mac-OS-命令之文件-夹-删除","published":1,"updated":"2018-05-05T15:31:00.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x4z003bexot3hvv4xse","content":"<p><code>rmdir</code>删除空目录，不过一旦目录非空会提示<br>Directiry not empty</p>\n<p>使用<code>rm</code>既可以删除文件又可以删除文件夹<br>删除文件夹（无论文件夹是否为空），使用 <code>-rf</code> 命令即可。<br>即：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf 目录名字</span><br></pre></td></tr></table></figure></p>\n<p><code>-r</code> 就是向下递归，不管有多少级目录，一并删除<br><code>-f</code> 就是直接强行删除，不作任何提示的意思<br><a id=\"more\"></a><br>删除<code>文件夹</code>实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf  /User/Dhyana/desktop</span><br></pre></td></tr></table></figure></p>\n<p>将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹</p>\n<p>删除<code>文件</code>使用实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f  /User/Dhyana/desktop/test.py</span><br></pre></td></tr></table></figure></p>\n<p>将会<strong>强制删除</strong>/User/Dhyana/desktop/test.py这个文件</p>\n<p>值得注意的是：<br>使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /.*</span><br><span class=\"line\"><span class=\"comment\"># 千万不要输入此命令，否则清空整个操作系统，后果自负</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><code>rmdir</code>删除空目录，不过一旦目录非空会提示<br>Directiry not empty</p>\n<p>使用<code>rm</code>既可以删除文件又可以删除文件夹<br>删除文件夹（无论文件夹是否为空），使用 <code>-rf</code> 命令即可。<br>即：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf 目录名字</span><br></pre></td></tr></table></figure></p>\n<p><code>-r</code> 就是向下递归，不管有多少级目录，一并删除<br><code>-f</code> 就是直接强行删除，不作任何提示的意思<br>","more":"<br>删除<code>文件夹</code>实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf  /User/Dhyana/desktop</span><br></pre></td></tr></table></figure></p>\n<p>将会删除 /User/Dhyana/desktop目录以及其下所有文件、文件夹</p>\n<p>删除<code>文件</code>使用实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f  /User/Dhyana/desktop/test.py</span><br></pre></td></tr></table></figure></p>\n<p>将会<strong>强制删除</strong>/User/Dhyana/desktop/test.py这个文件</p>\n<p>值得注意的是：<br>使用这个rm -rf的时候一定要格外小心，linux没有回收站的，删除之后再想找回就很难了。有一个非常好笑的笑话就是命令行中输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /.*</span><br><span class=\"line\"><span class=\"comment\"># 千万不要输入此命令，否则清空整个操作系统，后果自负</span></span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat May 05 2018 23:31:00 GMT+0800 (China Standard Time)","title":"Mac OS 命令之文件(夹)删除","path":"2018/03/03/Mac-OS-命令之文件-夹-删除/","eyeCatchImage":null,"excerpt":"<p><code>rmdir</code>删除空目录，不过一旦目录非空会提示<br>Directiry not empty</p>\n<p>使用<code>rm</code>既可以删除文件又可以删除文件夹<br>删除文件夹（无论文件夹是否为空），使用 <code>-rf</code> 命令即可。<br>即：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf 目录名字</span><br></pre></td></tr></table></figure></p>\n<p><code>-r</code> 就是向下递归，不管有多少级目录，一并删除<br><code>-f</code> 就是直接强行删除，不作任何提示的意思<br>","date":"2018-03-03T05:40:34.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Markdown小技巧之空格输入","date":"2018-03-03T05:06:47.000Z","_content":"在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。\n\n1. 手动输入空格 （**&nbsp；**）。**注意！此时的分号为英文分号**，但是不推荐使用此方法，太麻烦！\n\n2. 使用**全角空格**。即：在**全角**输入状态下直接使用空格键就ok了\n","source":"_posts/Markdown小技巧之空格输入.md","raw":"---\ntitle: Markdown小技巧之空格输入\ndate: 2018-03-03 13:06:47\ntags:\n  - Markdown\ncategories:\n  - Markdown\n---\n在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。\n\n1. 手动输入空格 （**&nbsp；**）。**注意！此时的分号为英文分号**，但是不推荐使用此方法，太麻烦！\n\n2. 使用**全角空格**。即：在**全角**输入状态下直接使用空格键就ok了\n","slug":"Markdown小技巧之空格输入","published":1,"updated":"2018-03-03T05:07:54.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x53003fexot0ri7zl4k","content":"<p>在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。</p>\n<ol>\n<li><p>手动输入空格 （<strong>&amp;nbsp；</strong>）。<strong>注意！此时的分号为英文分号</strong>，但是不推荐使用此方法，太麻烦！</p>\n</li>\n<li><p>使用<strong>全角空格</strong>。即：在<strong>全角</strong>输入状态下直接使用空格键就ok了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用Markdown的时候，有时候会与到这样的需求——为Markdown添加空格。跟word等其他编辑器不同，Markdown只能识别一个空格（在半角输入状态下）。通过搜寻资料找到了两个解决方案。</p>\n<ol>\n<li><p>手动输入空格 （<strong>&amp;nbsp；</strong>）。<strong>注意！此时的分号为英文分号</strong>，但是不推荐使用此方法，太麻烦！</p>\n</li>\n<li><p>使用<strong>全角空格</strong>。即：在<strong>全角</strong>输入状态下直接使用空格键就ok了</p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 13:07:54 GMT+0800 (China Standard Time)","title":"Markdown小技巧之空格输入","path":"2018/03/03/Markdown小技巧之空格输入/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-03T05:06:47.000Z","pv":0,"totalPV":0,"categories":"Markdown","tags":["Markdown"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Mac下打开swf文件","date":"2018-05-11T05:23:17.000Z","_content":"\n编辑一个HTML文件，写入如下代码：\n```HTML\n<html>\n    <body>\n        <embed src=\"your-file-name-of-swf.swf\" width=\"500\" height=\"500\"></embed>\n    </body>\n</html>\n```\n然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。\n<!-- more -->\n","source":"_posts/Mac下打开swf文件.md","raw":"---\ntitle: Mac下打开swf文件\ndate: 2018-05-11 13:23:17\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n编辑一个HTML文件，写入如下代码：\n```HTML\n<html>\n    <body>\n        <embed src=\"your-file-name-of-swf.swf\" width=\"500\" height=\"500\"></embed>\n    </body>\n</html>\n```\n然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。\n<!-- more -->\n","slug":"Mac下打开swf文件","published":1,"updated":"2018-05-11T05:30:19.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x55003hexotkchautmp","content":"<p>编辑一个HTML文件，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">\"your-file-name-of-swf.swf\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">embed</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>编辑一个HTML文件，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">\"your-file-name-of-swf.swf\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">embed</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。<br>","more":"</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri May 11 2018 13:30:19 GMT+0800 (China Standard Time)","title":"Mac下打开swf文件","path":"2018/05/11/Mac下打开swf文件/","eyeCatchImage":null,"excerpt":"<p>编辑一个HTML文件，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">\"your-file-name-of-swf.swf\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">embed</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用chrome打开即可，在chrome下使用打印功能，可以将swf文件保存为pdf格式。<br>","date":"2018-05-11T05:23:17.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Mac下profile文件","date":"2018-05-08T10:50:47.000Z","_content":"\n当你的home下面有`.bash_profile`或者`.bash_login`的时候,会忽略调`.profile`.   \n\n`.profile`主要有一下几种方式   \n/etc/profile    \n~/.bash_profile    \n~/.bash_login    \n~/.profile    \n~/.bashrc    \n~/.bash_logout   \n\n/etc/profile   \n`登录的时候`读入,默认的设定文件.   \n~/.bash_profile   \n`登录之后`在/etc/profile载入之后载入,十分重要的配置文件   \n~/.bash_login   \n`登录之后`如果~/.bash_profile不存在的话,载入这个文件   \n~/.profile   \n登录之后~/.bash_login不存在的话,才载入这个文件   \n~/.bashrc   \nbash shell打开的时候载入\n\n<!-- more -->\n`etc下的配置是针对系统,~下的主要是针对用户`\n\n参考：https://blog.csdn.net/xdonx/article/details/8312938\n","source":"_posts/Mac下profile文件.md","raw":"---\ntitle: Mac下profile文件\ndate: 2018-05-08 18:50:47\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n\n当你的home下面有`.bash_profile`或者`.bash_login`的时候,会忽略调`.profile`.   \n\n`.profile`主要有一下几种方式   \n/etc/profile    \n~/.bash_profile    \n~/.bash_login    \n~/.profile    \n~/.bashrc    \n~/.bash_logout   \n\n/etc/profile   \n`登录的时候`读入,默认的设定文件.   \n~/.bash_profile   \n`登录之后`在/etc/profile载入之后载入,十分重要的配置文件   \n~/.bash_login   \n`登录之后`如果~/.bash_profile不存在的话,载入这个文件   \n~/.profile   \n登录之后~/.bash_login不存在的话,才载入这个文件   \n~/.bashrc   \nbash shell打开的时候载入\n\n<!-- more -->\n`etc下的配置是针对系统,~下的主要是针对用户`\n\n参考：https://blog.csdn.net/xdonx/article/details/8312938\n","slug":"Mac下profile文件","published":1,"updated":"2018-05-11T06:11:47.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x59003lexotyvb7ccc7","content":"<p>当你的home下面有<code>.bash_profile</code>或者<code>.bash_login</code>的时候,会忽略调<code>.profile</code>.   </p>\n<p><code>.profile</code>主要有一下几种方式<br>/etc/profile<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc<br>~/.bash_logout   </p>\n<p>/etc/profile<br><code>登录的时候</code>读入,默认的设定文件.<br>~/.bash_profile<br><code>登录之后</code>在/etc/profile载入之后载入,十分重要的配置文件<br>~/.bash_login<br><code>登录之后</code>如果~/.bash_profile不存在的话,载入这个文件<br>~/.profile<br>登录之后~/.bash_login不存在的话,才载入这个文件<br>~/.bashrc<br>bash shell打开的时候载入</p>\n<a id=\"more\"></a>\n<p><code>etc下的配置是针对系统,~下的主要是针对用户</code></p>\n<p>参考：<a href=\"https://blog.csdn.net/xdonx/article/details/8312938\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xdonx/article/details/8312938</a></p>\n","site":{"data":{}},"excerpt":"<p>当你的home下面有<code>.bash_profile</code>或者<code>.bash_login</code>的时候,会忽略调<code>.profile</code>.   </p>\n<p><code>.profile</code>主要有一下几种方式<br>/etc/profile<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc<br>~/.bash_logout   </p>\n<p>/etc/profile<br><code>登录的时候</code>读入,默认的设定文件.<br>~/.bash_profile<br><code>登录之后</code>在/etc/profile载入之后载入,十分重要的配置文件<br>~/.bash_login<br><code>登录之后</code>如果~/.bash_profile不存在的话,载入这个文件<br>~/.profile<br>登录之后~/.bash_login不存在的话,才载入这个文件<br>~/.bashrc<br>bash shell打开的时候载入</p>","more":"<p><code>etc下的配置是针对系统,~下的主要是针对用户</code></p>\n<p>参考：<a href=\"https://blog.csdn.net/xdonx/article/details/8312938\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xdonx/article/details/8312938</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri May 11 2018 14:11:47 GMT+0800 (China Standard Time)","title":"Mac下profile文件","path":"2018/05/08/Mac下profile文件/","eyeCatchImage":null,"excerpt":"<p>当你的home下面有<code>.bash_profile</code>或者<code>.bash_login</code>的时候,会忽略调<code>.profile</code>.   </p>\n<p><code>.profile</code>主要有一下几种方式<br>/etc/profile<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc<br>~/.bash_logout   </p>\n<p>/etc/profile<br><code>登录的时候</code>读入,默认的设定文件.<br>~/.bash_profile<br><code>登录之后</code>在/etc/profile载入之后载入,十分重要的配置文件<br>~/.bash_login<br><code>登录之后</code>如果~/.bash_profile不存在的话,载入这个文件<br>~/.profile<br>登录之后~/.bash_login不存在的话,才载入这个文件<br>~/.bashrc<br>bash shell打开的时候载入</p>","date":"2018-05-08T10:50:47.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"PostgreSQL函数、索引和视图操作Demo","date":"2018-09-26T08:32:31.000Z","_content":"#### 创建演示数据表结构\n```SQL\n--创建dept表\nCREATE TABLE dept (\n    d_no INT PRIMARY KEY,     --部门编号\n\td_name VARCHAR(30),       --部门名称\n\td_location VARCHAR(300)   --部门所在地址\n);\n\n--dept表初始化数据\nINSERT INTO dept VALUES (10, '开发部', '北京市海淀区');\nINSERT INTO dept VALUES (20, '测试部', '北京市东城区');\nINSERT INTO dept VALUES (30, '销售部', '上海市');\nINSERT INTO dept VALUES (40, '财务部', '广州市');\nINSERT INTO dept VALUES (50, '运维部', '武汉市');\nINSERT INTO dept VALUES (60, '集成部', '南京市');\n\n--创建employee表\nCREATE TABLE employee (\n    e_no INT PRIMARY KEY,             --雇员编号\n\te_name VARCHAR(30) NOT NULL,      --雇员名称\n\te_gender CHAR(2) NOT NULL,        --性别，f：女，m：男\n\tdept_no INT,                      --所在部门编号\n\te_job VARCHAR(50) NOT NULL,       --职位\n\te_salary NUMERIC(9, 2),           --工资\n\te_hireDate DATE,                  --入职日期\n\tCONSTRAINT fk_emp_deptno FOREIGN KEY (dept_no) REFERENCES dept(d_no)\n);\n\n--初始化employee表\nINSERT INTO employee VALUES (100, '赵志军', 'f', 10, '开发工程师', 5000, '2010-01-01');\nINSERT INTO employee VALUES (101, '张铭雨', 'f', 10, '开发工程师', 6000, '2012-04-04');\nINSERT INTO employee VALUES (102, '许锋', 'f', 10, '开发经理', 8000, '2008-01-01');\nINSERT INTO employee VALUES (103, '王嘉琦', 'm', 20, '测试工程师', 4500, '2013-08-12');\nINSERT INTO employee VALUES (104, '李江新', 'f', 20, '测试工程师', 5000, '2011-08-16');\nINSERT INTO employee VALUES (105, '张海影', 'm', 20, '测试经理', 6000, '2009-11-12');\nINSERT INTO employee VALUES (106, '马恩波', 'f', 30, '销售人员', 3000, '2014-09-01');\nINSERT INTO employee VALUES (107, '李慧敏', 'm', 30, '销售人员', 5000, '2010-08-14');\nINSERT INTO employee VALUES (108, '马爽爽', 'm', 30, '销售经理', 9000, '2006-12-02');\nINSERT INTO employee VALUES (109, '史晓云', 'm', 30, '销售高级经理', 12000, '2003-07-14');\nINSERT INTO employee VALUES (110, '刘燕凤', 'm', 40, '财务人员', 3000, '2011-06-01');\nINSERT INTO employee VALUES (111, '王科', 'f', 40, '财务人员', 3500, '2010-05-01');\nINSERT INTO employee VALUES (112, '李林英', 'm', 40, '财务经理', 5000, '2008-05-07');\nINSERT INTO employee VALUES (113, '李杨', 'f', 10, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (114, '李刚', 'f', NULL, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (115, '王林', 'f', NULL, '实习工程师', NULL, '2015-05-07');\n```\n<!-- more -->\n\n#### 函数使用：数值函数\n```SQL\n--AVG函数\nSELECT AVG(e_salary) FROM employee;\n--COUNT函数\nSELECT COUNT(*) FROM employee;\n--MAX函数\nSELECT MAX(e_salary) FROM employee;\n--MIN函数\nSELECT MIN(e_salary) FROM employee;\n--SUM函数\nSELECT SUM(e_salary) FROM employee;\n```\n\n#### 函数使用：字符串函数\n```SQL\n--LENGTH函数\nSELECT e_name, LENGTH(e_name) FROM employee;\n--CONCAT函数\nSELECT CONCAT(e_no, '|', e_name, '|', e_salary) FROM employee;\nSELECT e_no, e_name, e_hireDate, CONCAT(e_no, e_name, e_hireDate) FROM employee;\n--TRIM函数\nSELECT CONCAT('         ', e_name), TRIM(CONCAT('         ', e_name)) FROM employee;\n--REPLACE函数\nSELECT e_name, REPLACE(e_name, '李', '张') FROM employee;\n--SUBSTRING函数\nSELECT e_name, SUBSTRING(e_name, 2, 3) FROM employee;\n```\n\n\n#### 函数使用：日期时间函数\n```SQL\n--EXTRACT函数\nSELECT e_no, e_name, e_hireDate, EXTRACT(YEAR FROM e_hireDate), EXTRACT(MONTH FROM e_hireDate), EXTRACT(DAY FROM e_hireDate) FROM employee;\n--CURRENT_DATE、CURRENT_TIME、NOW函数\nSELECT CURRENT_DATE, CURRENT_TIME, now();\n```\n\n\n#### 创建函数示例\n\n```SQL\n-- 函数示例\nCREATE FUNCTION add(INTEGER, INTEGER) RETURNS INTEGER          \n    AS ' select $1 + $2; '\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT;\n\n\n\n--应用\n--创建函数\nCREATE OR REPLACE FUNCTION CONCAT_TEST(INTEGER, VARCHAR, DATE) RETURNS VARCHAR\n    AS 'SELECT $1||$2||$3;'\n    LANGUAGE SQL\nRETURNS NULL ON NULL INPUT;\n\n--函数调用\nselect e_no, e_name, e_hireDate, CONCAT_TEST(e_no, e_name, e_hireDate) from employee;\n\n--删除函数\nDROP FUNCTION CONCAT_TEST(INTEGER, VARCHAR, DATE);\n```\n\n#### 索引\n```SQL\n--创建索引\nCREATE INDEX emp_name_index ON employee (e_name);\n--删除索引\nDROP INDEX emp_name_index;\n```\n\n#### 视图\n```SQL\n--创建视图\nCREATE VIEW V_EMP_DEV AS\n  SELECT e_no, e_name, e_salary, e_hireDate\n  FROM employee\n  WHERE dept_no = 10 ORDER BY e_salary DESC;\n\n--视图调用\nSELECT * FROM V_EMP_DEV;\n--删除视图\nDROP VIEW V_EMP_DEV;\n```\n","source":"_posts/PostgreSQL函数、索引和视图操作Demo.md","raw":"---\ntitle: PostgreSQL函数、索引和视图操作Demo\ndate: 2018-09-26 16:32:31\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n#### 创建演示数据表结构\n```SQL\n--创建dept表\nCREATE TABLE dept (\n    d_no INT PRIMARY KEY,     --部门编号\n\td_name VARCHAR(30),       --部门名称\n\td_location VARCHAR(300)   --部门所在地址\n);\n\n--dept表初始化数据\nINSERT INTO dept VALUES (10, '开发部', '北京市海淀区');\nINSERT INTO dept VALUES (20, '测试部', '北京市东城区');\nINSERT INTO dept VALUES (30, '销售部', '上海市');\nINSERT INTO dept VALUES (40, '财务部', '广州市');\nINSERT INTO dept VALUES (50, '运维部', '武汉市');\nINSERT INTO dept VALUES (60, '集成部', '南京市');\n\n--创建employee表\nCREATE TABLE employee (\n    e_no INT PRIMARY KEY,             --雇员编号\n\te_name VARCHAR(30) NOT NULL,      --雇员名称\n\te_gender CHAR(2) NOT NULL,        --性别，f：女，m：男\n\tdept_no INT,                      --所在部门编号\n\te_job VARCHAR(50) NOT NULL,       --职位\n\te_salary NUMERIC(9, 2),           --工资\n\te_hireDate DATE,                  --入职日期\n\tCONSTRAINT fk_emp_deptno FOREIGN KEY (dept_no) REFERENCES dept(d_no)\n);\n\n--初始化employee表\nINSERT INTO employee VALUES (100, '赵志军', 'f', 10, '开发工程师', 5000, '2010-01-01');\nINSERT INTO employee VALUES (101, '张铭雨', 'f', 10, '开发工程师', 6000, '2012-04-04');\nINSERT INTO employee VALUES (102, '许锋', 'f', 10, '开发经理', 8000, '2008-01-01');\nINSERT INTO employee VALUES (103, '王嘉琦', 'm', 20, '测试工程师', 4500, '2013-08-12');\nINSERT INTO employee VALUES (104, '李江新', 'f', 20, '测试工程师', 5000, '2011-08-16');\nINSERT INTO employee VALUES (105, '张海影', 'm', 20, '测试经理', 6000, '2009-11-12');\nINSERT INTO employee VALUES (106, '马恩波', 'f', 30, '销售人员', 3000, '2014-09-01');\nINSERT INTO employee VALUES (107, '李慧敏', 'm', 30, '销售人员', 5000, '2010-08-14');\nINSERT INTO employee VALUES (108, '马爽爽', 'm', 30, '销售经理', 9000, '2006-12-02');\nINSERT INTO employee VALUES (109, '史晓云', 'm', 30, '销售高级经理', 12000, '2003-07-14');\nINSERT INTO employee VALUES (110, '刘燕凤', 'm', 40, '财务人员', 3000, '2011-06-01');\nINSERT INTO employee VALUES (111, '王科', 'f', 40, '财务人员', 3500, '2010-05-01');\nINSERT INTO employee VALUES (112, '李林英', 'm', 40, '财务经理', 5000, '2008-05-07');\nINSERT INTO employee VALUES (113, '李杨', 'f', 10, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (114, '李刚', 'f', NULL, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (115, '王林', 'f', NULL, '实习工程师', NULL, '2015-05-07');\n```\n<!-- more -->\n\n#### 函数使用：数值函数\n```SQL\n--AVG函数\nSELECT AVG(e_salary) FROM employee;\n--COUNT函数\nSELECT COUNT(*) FROM employee;\n--MAX函数\nSELECT MAX(e_salary) FROM employee;\n--MIN函数\nSELECT MIN(e_salary) FROM employee;\n--SUM函数\nSELECT SUM(e_salary) FROM employee;\n```\n\n#### 函数使用：字符串函数\n```SQL\n--LENGTH函数\nSELECT e_name, LENGTH(e_name) FROM employee;\n--CONCAT函数\nSELECT CONCAT(e_no, '|', e_name, '|', e_salary) FROM employee;\nSELECT e_no, e_name, e_hireDate, CONCAT(e_no, e_name, e_hireDate) FROM employee;\n--TRIM函数\nSELECT CONCAT('         ', e_name), TRIM(CONCAT('         ', e_name)) FROM employee;\n--REPLACE函数\nSELECT e_name, REPLACE(e_name, '李', '张') FROM employee;\n--SUBSTRING函数\nSELECT e_name, SUBSTRING(e_name, 2, 3) FROM employee;\n```\n\n\n#### 函数使用：日期时间函数\n```SQL\n--EXTRACT函数\nSELECT e_no, e_name, e_hireDate, EXTRACT(YEAR FROM e_hireDate), EXTRACT(MONTH FROM e_hireDate), EXTRACT(DAY FROM e_hireDate) FROM employee;\n--CURRENT_DATE、CURRENT_TIME、NOW函数\nSELECT CURRENT_DATE, CURRENT_TIME, now();\n```\n\n\n#### 创建函数示例\n\n```SQL\n-- 函数示例\nCREATE FUNCTION add(INTEGER, INTEGER) RETURNS INTEGER          \n    AS ' select $1 + $2; '\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT;\n\n\n\n--应用\n--创建函数\nCREATE OR REPLACE FUNCTION CONCAT_TEST(INTEGER, VARCHAR, DATE) RETURNS VARCHAR\n    AS 'SELECT $1||$2||$3;'\n    LANGUAGE SQL\nRETURNS NULL ON NULL INPUT;\n\n--函数调用\nselect e_no, e_name, e_hireDate, CONCAT_TEST(e_no, e_name, e_hireDate) from employee;\n\n--删除函数\nDROP FUNCTION CONCAT_TEST(INTEGER, VARCHAR, DATE);\n```\n\n#### 索引\n```SQL\n--创建索引\nCREATE INDEX emp_name_index ON employee (e_name);\n--删除索引\nDROP INDEX emp_name_index;\n```\n\n#### 视图\n```SQL\n--创建视图\nCREATE VIEW V_EMP_DEV AS\n  SELECT e_no, e_name, e_salary, e_hireDate\n  FROM employee\n  WHERE dept_no = 10 ORDER BY e_salary DESC;\n\n--视图调用\nSELECT * FROM V_EMP_DEV;\n--删除视图\nDROP VIEW V_EMP_DEV;\n```\n","slug":"PostgreSQL函数、索引和视图操作Demo","published":1,"updated":"2018-09-26T08:54:31.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x5c003nexothqhqx954","content":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">    d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">    e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--初始化employee表</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">100</span>, <span class=\"string\">'赵志军'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">101</span>, <span class=\"string\">'张铭雨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2012-04-04'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">102</span>, <span class=\"string\">'许锋'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发经理'</span>, <span class=\"number\">8000</span>, <span class=\"string\">'2008-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">103</span>, <span class=\"string\">'王嘉琦'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">4500</span>, <span class=\"string\">'2013-08-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">104</span>, <span class=\"string\">'李江新'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2011-08-16'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">105</span>, <span class=\"string\">'张海影'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试经理'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2009-11-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">106</span>, <span class=\"string\">'马恩波'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2014-09-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">107</span>, <span class=\"string\">'李慧敏'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-08-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">108</span>, <span class=\"string\">'马爽爽'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售经理'</span>, <span class=\"number\">9000</span>, <span class=\"string\">'2006-12-02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">109</span>, <span class=\"string\">'史晓云'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售高级经理'</span>, <span class=\"number\">12000</span>, <span class=\"string\">'2003-07-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">110</span>, <span class=\"string\">'刘燕凤'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2011-06-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">111</span>, <span class=\"string\">'王科'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3500</span>, <span class=\"string\">'2010-05-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">112</span>, <span class=\"string\">'李林英'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务经理'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2008-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">113</span>, <span class=\"string\">'李杨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">114</span>, <span class=\"string\">'李刚'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">115</span>, <span class=\"string\">'王林'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"函数使用：数值函数\"><a href=\"#函数使用：数值函数\" class=\"headerlink\" title=\"函数使用：数值函数\"></a>函数使用：数值函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--AVG函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--COUNT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--MAX函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--MIN函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--SUM函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数使用：字符串函数\"><a href=\"#函数使用：字符串函数\" class=\"headerlink\" title=\"函数使用：字符串函数\"></a>函数使用：字符串函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--LENGTH函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">LENGTH</span>(e_name) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--CONCAT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(e_no, <span class=\"string\">'|'</span>, e_name, <span class=\"string\">'|'</span>, e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate, <span class=\"keyword\">CONCAT</span>(e_no, e_name, e_hireDate) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--TRIM函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'         '</span>, e_name), <span class=\"keyword\">TRIM</span>(<span class=\"keyword\">CONCAT</span>(<span class=\"string\">'         '</span>, e_name)) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--REPLACE函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">REPLACE</span>(e_name, <span class=\"string\">'李'</span>, <span class=\"string\">'张'</span>) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--SUBSTRING函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">SUBSTRING</span>(e_name, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"keyword\">FROM</span> employee;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数使用：日期时间函数\"><a href=\"#函数使用：日期时间函数\" class=\"headerlink\" title=\"函数使用：日期时间函数\"></a>函数使用：日期时间函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--EXTRACT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate, <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">YEAR</span> <span class=\"keyword\">FROM</span> e_hireDate), <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">MONTH</span> <span class=\"keyword\">FROM</span> e_hireDate), <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">DAY</span> <span class=\"keyword\">FROM</span> e_hireDate) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--CURRENT_DATE、CURRENT_TIME、NOW函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CURRENT_DATE</span>, <span class=\"keyword\">CURRENT_TIME</span>, <span class=\"keyword\">now</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建函数示例\"><a href=\"#创建函数示例\" class=\"headerlink\" title=\"创建函数示例\"></a>创建函数示例</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> <span class=\"keyword\">add</span>(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">INTEGER</span>) <span class=\"keyword\">RETURNS</span> <span class=\"built_in\">INTEGER</span>          </span><br><span class=\"line\">    <span class=\"keyword\">AS</span> <span class=\"string\">' select $1 + $2; '</span></span><br><span class=\"line\"><span class=\"keyword\">LANGUAGE</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">INPUT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--应用</span></span><br><span class=\"line\"><span class=\"comment\">--创建函数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">REPLACE</span> <span class=\"keyword\">FUNCTION</span> CONCAT_TEST(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">VARCHAR</span>, <span class=\"built_in\">DATE</span>) <span class=\"keyword\">RETURNS</span> <span class=\"built_in\">VARCHAR</span></span><br><span class=\"line\">    <span class=\"keyword\">AS</span> <span class=\"string\">'SELECT $1||$2||$3;'</span></span><br><span class=\"line\">    <span class=\"keyword\">LANGUAGE</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">INPUT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--函数调用</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e_no, e_name, e_hireDate, CONCAT_TEST(e_no, e_name, e_hireDate) <span class=\"keyword\">from</span> employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除函数</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> CONCAT_TEST(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">VARCHAR</span>, <span class=\"built_in\">DATE</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> emp_name_index <span class=\"keyword\">ON</span> employee (e_name);</span><br><span class=\"line\"><span class=\"comment\">--删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> emp_name_index;</span><br></pre></td></tr></table></figure>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> V_EMP_DEV <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> e_no, e_name, e_salary, e_hireDate</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> employee</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--视图调用</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> V_EMP_DEV;</span><br><span class=\"line\"><span class=\"comment\">--删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> V_EMP_DEV;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">    d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">    e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--初始化employee表</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">100</span>, <span class=\"string\">'赵志军'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">101</span>, <span class=\"string\">'张铭雨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2012-04-04'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">102</span>, <span class=\"string\">'许锋'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发经理'</span>, <span class=\"number\">8000</span>, <span class=\"string\">'2008-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">103</span>, <span class=\"string\">'王嘉琦'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">4500</span>, <span class=\"string\">'2013-08-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">104</span>, <span class=\"string\">'李江新'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2011-08-16'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">105</span>, <span class=\"string\">'张海影'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试经理'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2009-11-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">106</span>, <span class=\"string\">'马恩波'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2014-09-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">107</span>, <span class=\"string\">'李慧敏'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-08-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">108</span>, <span class=\"string\">'马爽爽'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售经理'</span>, <span class=\"number\">9000</span>, <span class=\"string\">'2006-12-02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">109</span>, <span class=\"string\">'史晓云'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售高级经理'</span>, <span class=\"number\">12000</span>, <span class=\"string\">'2003-07-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">110</span>, <span class=\"string\">'刘燕凤'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2011-06-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">111</span>, <span class=\"string\">'王科'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3500</span>, <span class=\"string\">'2010-05-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">112</span>, <span class=\"string\">'李林英'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务经理'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2008-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">113</span>, <span class=\"string\">'李杨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">114</span>, <span class=\"string\">'李刚'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">115</span>, <span class=\"string\">'王林'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"函数使用：数值函数\"><a href=\"#函数使用：数值函数\" class=\"headerlink\" title=\"函数使用：数值函数\"></a>函数使用：数值函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--AVG函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--COUNT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--MAX函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--MIN函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--SUM函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(e_salary) <span class=\"keyword\">FROM</span> employee;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数使用：字符串函数\"><a href=\"#函数使用：字符串函数\" class=\"headerlink\" title=\"函数使用：字符串函数\"></a>函数使用：字符串函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--LENGTH函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">LENGTH</span>(e_name) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--CONCAT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(e_no, <span class=\"string\">'|'</span>, e_name, <span class=\"string\">'|'</span>, e_salary) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate, <span class=\"keyword\">CONCAT</span>(e_no, e_name, e_hireDate) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--TRIM函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'         '</span>, e_name), <span class=\"keyword\">TRIM</span>(<span class=\"keyword\">CONCAT</span>(<span class=\"string\">'         '</span>, e_name)) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--REPLACE函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">REPLACE</span>(e_name, <span class=\"string\">'李'</span>, <span class=\"string\">'张'</span>) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--SUBSTRING函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_name, <span class=\"keyword\">SUBSTRING</span>(e_name, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"keyword\">FROM</span> employee;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数使用：日期时间函数\"><a href=\"#函数使用：日期时间函数\" class=\"headerlink\" title=\"函数使用：日期时间函数\"></a>函数使用：日期时间函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--EXTRACT函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate, <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">YEAR</span> <span class=\"keyword\">FROM</span> e_hireDate), <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">MONTH</span> <span class=\"keyword\">FROM</span> e_hireDate), <span class=\"keyword\">EXTRACT</span>(<span class=\"keyword\">DAY</span> <span class=\"keyword\">FROM</span> e_hireDate) <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--CURRENT_DATE、CURRENT_TIME、NOW函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CURRENT_DATE</span>, <span class=\"keyword\">CURRENT_TIME</span>, <span class=\"keyword\">now</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建函数示例\"><a href=\"#创建函数示例\" class=\"headerlink\" title=\"创建函数示例\"></a>创建函数示例</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> <span class=\"keyword\">add</span>(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">INTEGER</span>) <span class=\"keyword\">RETURNS</span> <span class=\"built_in\">INTEGER</span>          </span><br><span class=\"line\">    <span class=\"keyword\">AS</span> <span class=\"string\">' select $1 + $2; '</span></span><br><span class=\"line\"><span class=\"keyword\">LANGUAGE</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">INPUT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--应用</span></span><br><span class=\"line\"><span class=\"comment\">--创建函数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">REPLACE</span> <span class=\"keyword\">FUNCTION</span> CONCAT_TEST(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">VARCHAR</span>, <span class=\"built_in\">DATE</span>) <span class=\"keyword\">RETURNS</span> <span class=\"built_in\">VARCHAR</span></span><br><span class=\"line\">    <span class=\"keyword\">AS</span> <span class=\"string\">'SELECT $1||$2||$3;'</span></span><br><span class=\"line\">    <span class=\"keyword\">LANGUAGE</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">INPUT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--函数调用</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e_no, e_name, e_hireDate, CONCAT_TEST(e_no, e_name, e_hireDate) <span class=\"keyword\">from</span> employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除函数</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> CONCAT_TEST(<span class=\"built_in\">INTEGER</span>, <span class=\"built_in\">VARCHAR</span>, <span class=\"built_in\">DATE</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> emp_name_index <span class=\"keyword\">ON</span> employee (e_name);</span><br><span class=\"line\"><span class=\"comment\">--删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> emp_name_index;</span><br></pre></td></tr></table></figure>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> V_EMP_DEV <span class=\"keyword\">AS</span></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> e_no, e_name, e_salary, e_hireDate</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> employee</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--视图调用</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> V_EMP_DEV;</span><br><span class=\"line\"><span class=\"comment\">--删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> V_EMP_DEV;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 16:54:31 GMT+0800 (China Standard Time)","title":"PostgreSQL函数、索引和视图操作Demo","path":"2018/09/26/PostgreSQL函数、索引和视图操作Demo/","eyeCatchImage":null,"excerpt":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">    d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">    e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--初始化employee表</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">100</span>, <span class=\"string\">'赵志军'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">101</span>, <span class=\"string\">'张铭雨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2012-04-04'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">102</span>, <span class=\"string\">'许锋'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发经理'</span>, <span class=\"number\">8000</span>, <span class=\"string\">'2008-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">103</span>, <span class=\"string\">'王嘉琦'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">4500</span>, <span class=\"string\">'2013-08-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">104</span>, <span class=\"string\">'李江新'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2011-08-16'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">105</span>, <span class=\"string\">'张海影'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试经理'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2009-11-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">106</span>, <span class=\"string\">'马恩波'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2014-09-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">107</span>, <span class=\"string\">'李慧敏'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-08-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">108</span>, <span class=\"string\">'马爽爽'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售经理'</span>, <span class=\"number\">9000</span>, <span class=\"string\">'2006-12-02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">109</span>, <span class=\"string\">'史晓云'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售高级经理'</span>, <span class=\"number\">12000</span>, <span class=\"string\">'2003-07-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">110</span>, <span class=\"string\">'刘燕凤'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2011-06-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">111</span>, <span class=\"string\">'王科'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3500</span>, <span class=\"string\">'2010-05-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">112</span>, <span class=\"string\">'李林英'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务经理'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2008-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">113</span>, <span class=\"string\">'李杨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">114</span>, <span class=\"string\">'李刚'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">115</span>, <span class=\"string\">'王林'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br></pre></td></tr></table></figure>","date":"2018-09-26T08:32:31.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"PostgreSQL数据库、数据表、数类型和运算符Demo案例","date":"2018-09-26T02:19:05.000Z","_content":"\n#### 数据库对象操作 ####\n```SQL\n--最简单创建数据库示例（使用默认参数）\nCREATE DATABASE db_jikexueyuan1;\n\n--带参数创建数据库示例（指定数据库OWNER和字符集）\nCREATE DATABASE db_jikexueyuan2 WITH OWNER = postgres ENCODING = 'UTF8';\n\n--修改数据库名称\nALTER DATABASE db_jikexueyuan2 RENAME TO db_jikexueyuan3;\n\n--修改数据库连接数\nALTER DATABASE db_jikexueyuan2 CONNECTION LIMIT = 20;\n\n--删除数据库\nDROP DATABASE db_jikexueyuan2;\n```\n<!-- more -->\n#### 数据表对象操作 ####\n```SQL\n--创建student数据表\nCREATE TABLE studnet (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--修改数据表名称\nALTER TABLE studnet RENAME TO studnet1;\n\n--修改数据表字段长度\nALTER TABLE studnet1 ALTER COLUMN name TYPE VARCHAR(40);\n\n--修改数据表字段名称\nALTER TABLE studnet1 RENAME id TO bh;\n\n--在数据表中新增字段\nALTER TABLE studnet1 ADD COLUMN address VARCHAR(100);\n\n--删除数据表中字段\nALTER TABLE student DROP COLUMN name;\n\n--删除数据表对象\nDROP TABLE studnet1;\n\n--删除数据表之前先做判断\nDROP TABLE IF EXISTS studnet1;\n```\n\n#### 数据类型 ####\n```SQL\n--数值类型\nCREATE TABLE temp (x SMALLINT, y INT, z NUMERIC(5, 2));\nINSERT INTO temp VALUES (1, 100, 3.58);\n--INSERT INTO temp VALUES (1, 100, 1000.58);--（出现错误，超过存储范围）\nINSERT INTO temp VALUES (1, 100, 100.58);\nINSERT INTO temp VALUES (1, 100, 100.588);--（合法，会进行四舍五入）\n\n--日期/时间类型\nCREATE TABLE temp1 (t TIME, d DATE, ts TIMESTAMP);\nINSERT INTO temp1 VALUES ('02:02:02', '1996-01-01', '1996-01-01 02:02:02');\nINSERT INTO temp1 VALUES ('101112', '96-01-01', '1996-01-01 02:02:02');\n\n--字符串类型\nCREATE TABLE temp2 (ch CHAR(4), vch VARCHAR(30), t TEXT);\nINSERT INTO temp2 VALUES ('abcd', '极客学院', '极客学院极客学院极客学院');\n\n--比较char类型与varchar类型之间的区别\nSELECT\n    CONCAT('(', ch, ')'),\n\tCONCAT('(', vch, ')'),\n    CONCAT('(', t, ')')\nFROM temp2;\n```\n\n#### 运算符介绍\n```SQL\n--算术运算符\nSELECT 3+2, 3-2, 3*2, 3/2, 3%2;\n\n--比较运算符\n--比较运算符（一）\nSELECT 1 = 0, '2' = 2, '2' <> 2, 2 = 2, NULL = NULL, NULL != NULL;\n\n--比较运算符（二）\nSELECT 1 >= 2, 4 >= 4, 2 > 1, 'good' >= 'god', 'good' > 'god', NULL >= NULL;\n\n--比较运算符（三）\nSELECT 4 BETWEEN 2 AND 5, 12 BETWEEN 10 AND 12;\n\n--比较运算符（四）\nSELECT 2 IN (2,3,4), 3 NOT IN (1,2,5,9), 'a' IN ('a','b','c','d'), NULL IN (1,3,NULL);\n\n--比较运算符（五）\n-- % 表示任意0个或多个字符\n-- _ 表示任意单个字符\n-- [ ] 表示括号内所列字符中的一个（类似与正则表达式）\n-- [^ ] 表示不在括号所列之内的单个字符\nSELECT 'abc' LIKE 'abc', 'abc' LIKE 'ab_', 'abc' LIKE '%c', 'abc' LIKE 't___';\n\n--逻辑运算符\n--逻辑运算符（一）\nSELECT NOT '1', NOT 'y', NOT '0', NOT NULL, NOT 'n';\n\n--逻辑运算符（二）\nSELECT '1' AND 'y', '1' AND '0', '1' AND NULL, '0' AND NULL;\n\n--逻辑运算符（三）\nSELECT '1' OR 't', '1' OR 'y', '1' OR NULL;\n```\n","source":"_posts/PostgreSQL数据库、数据表、数类型和运算符Demo案例.md","raw":"---\ntitle: PostgreSQL数据库、数据表、数类型和运算符Demo案例\ndate: 2018-09-26 10:19:05\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n#### 数据库对象操作 ####\n```SQL\n--最简单创建数据库示例（使用默认参数）\nCREATE DATABASE db_jikexueyuan1;\n\n--带参数创建数据库示例（指定数据库OWNER和字符集）\nCREATE DATABASE db_jikexueyuan2 WITH OWNER = postgres ENCODING = 'UTF8';\n\n--修改数据库名称\nALTER DATABASE db_jikexueyuan2 RENAME TO db_jikexueyuan3;\n\n--修改数据库连接数\nALTER DATABASE db_jikexueyuan2 CONNECTION LIMIT = 20;\n\n--删除数据库\nDROP DATABASE db_jikexueyuan2;\n```\n<!-- more -->\n#### 数据表对象操作 ####\n```SQL\n--创建student数据表\nCREATE TABLE studnet (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--修改数据表名称\nALTER TABLE studnet RENAME TO studnet1;\n\n--修改数据表字段长度\nALTER TABLE studnet1 ALTER COLUMN name TYPE VARCHAR(40);\n\n--修改数据表字段名称\nALTER TABLE studnet1 RENAME id TO bh;\n\n--在数据表中新增字段\nALTER TABLE studnet1 ADD COLUMN address VARCHAR(100);\n\n--删除数据表中字段\nALTER TABLE student DROP COLUMN name;\n\n--删除数据表对象\nDROP TABLE studnet1;\n\n--删除数据表之前先做判断\nDROP TABLE IF EXISTS studnet1;\n```\n\n#### 数据类型 ####\n```SQL\n--数值类型\nCREATE TABLE temp (x SMALLINT, y INT, z NUMERIC(5, 2));\nINSERT INTO temp VALUES (1, 100, 3.58);\n--INSERT INTO temp VALUES (1, 100, 1000.58);--（出现错误，超过存储范围）\nINSERT INTO temp VALUES (1, 100, 100.58);\nINSERT INTO temp VALUES (1, 100, 100.588);--（合法，会进行四舍五入）\n\n--日期/时间类型\nCREATE TABLE temp1 (t TIME, d DATE, ts TIMESTAMP);\nINSERT INTO temp1 VALUES ('02:02:02', '1996-01-01', '1996-01-01 02:02:02');\nINSERT INTO temp1 VALUES ('101112', '96-01-01', '1996-01-01 02:02:02');\n\n--字符串类型\nCREATE TABLE temp2 (ch CHAR(4), vch VARCHAR(30), t TEXT);\nINSERT INTO temp2 VALUES ('abcd', '极客学院', '极客学院极客学院极客学院');\n\n--比较char类型与varchar类型之间的区别\nSELECT\n    CONCAT('(', ch, ')'),\n\tCONCAT('(', vch, ')'),\n    CONCAT('(', t, ')')\nFROM temp2;\n```\n\n#### 运算符介绍\n```SQL\n--算术运算符\nSELECT 3+2, 3-2, 3*2, 3/2, 3%2;\n\n--比较运算符\n--比较运算符（一）\nSELECT 1 = 0, '2' = 2, '2' <> 2, 2 = 2, NULL = NULL, NULL != NULL;\n\n--比较运算符（二）\nSELECT 1 >= 2, 4 >= 4, 2 > 1, 'good' >= 'god', 'good' > 'god', NULL >= NULL;\n\n--比较运算符（三）\nSELECT 4 BETWEEN 2 AND 5, 12 BETWEEN 10 AND 12;\n\n--比较运算符（四）\nSELECT 2 IN (2,3,4), 3 NOT IN (1,2,5,9), 'a' IN ('a','b','c','d'), NULL IN (1,3,NULL);\n\n--比较运算符（五）\n-- % 表示任意0个或多个字符\n-- _ 表示任意单个字符\n-- [ ] 表示括号内所列字符中的一个（类似与正则表达式）\n-- [^ ] 表示不在括号所列之内的单个字符\nSELECT 'abc' LIKE 'abc', 'abc' LIKE 'ab_', 'abc' LIKE '%c', 'abc' LIKE 't___';\n\n--逻辑运算符\n--逻辑运算符（一）\nSELECT NOT '1', NOT 'y', NOT '0', NOT NULL, NOT 'n';\n\n--逻辑运算符（二）\nSELECT '1' AND 'y', '1' AND '0', '1' AND NULL, '0' AND NULL;\n\n--逻辑运算符（三）\nSELECT '1' OR 't', '1' OR 'y', '1' OR NULL;\n```\n","slug":"PostgreSQL数据库、数据表、数类型和运算符Demo案例","published":1,"updated":"2018-09-26T02:38:18.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x5l003rexotuyv08ydp","content":"<h4 id=\"数据库对象操作\"><a href=\"#数据库对象操作\" class=\"headerlink\" title=\"数据库对象操作\"></a>数据库对象操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--最简单创建数据库示例（使用默认参数）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带参数创建数据库示例（指定数据库OWNER和字符集）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">WITH</span> OWNER = postgres <span class=\"keyword\">ENCODING</span> = <span class=\"string\">'UTF8'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> db_jikexueyuan3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库连接数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">CONNECTION</span> <span class=\"keyword\">LIMIT</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"数据表对象操作\"><a href=\"#数据表对象操作\" class=\"headerlink\" title=\"数据表对象操作\"></a>数据表对象操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建student数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> studnet (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> studnet1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表字段长度</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">name</span> <span class=\"keyword\">TYPE</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表字段名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">RENAME</span> <span class=\"keyword\">id</span> <span class=\"keyword\">TO</span> bh;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--在数据表中新增字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> address <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表中字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表对象</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> studnet1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表之前先做判断</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> studnet1;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数值类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp (x <span class=\"built_in\">SMALLINT</span>, y <span class=\"built_in\">INT</span>, z <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">3.58</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO temp VALUES (1, 100, 1000.58);--（出现错误，超过存储范围）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">100.58</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">100.588</span>);<span class=\"comment\">--（合法，会进行四舍五入）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--日期/时间类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp1 (t <span class=\"keyword\">TIME</span>, d <span class=\"built_in\">DATE</span>, ts <span class=\"keyword\">TIMESTAMP</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp1 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'02:02:02'</span>, <span class=\"string\">'1996-01-01'</span>, <span class=\"string\">'1996-01-01 02:02:02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp1 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'101112'</span>, <span class=\"string\">'96-01-01'</span>, <span class=\"string\">'1996-01-01 02:02:02'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--字符串类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp2 (ch <span class=\"built_in\">CHAR</span>(<span class=\"number\">4</span>), vch <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>), t <span class=\"built_in\">TEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp2 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'abcd'</span>, <span class=\"string\">'极客学院'</span>, <span class=\"string\">'极客学院极客学院极客学院'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较char类型与varchar类型之间的区别</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, ch, <span class=\"string\">')'</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, vch, <span class=\"string\">')'</span>),</span><br><span class=\"line\">    <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, t, <span class=\"string\">')'</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> temp2;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运算符介绍\"><a href=\"#运算符介绍\" class=\"headerlink\" title=\"运算符介绍\"></a>运算符介绍</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--算术运算符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">3</span>+<span class=\"number\">2</span>, <span class=\"number\">3</span><span class=\"number\">-2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>/<span class=\"number\">2</span>, <span class=\"number\">3</span>%<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符</span></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（一）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> = <span class=\"number\">0</span>, <span class=\"string\">'2'</span> = <span class=\"number\">2</span>, <span class=\"string\">'2'</span> &lt;&gt; <span class=\"number\">2</span>, <span class=\"number\">2</span> = <span class=\"number\">2</span>, <span class=\"literal\">NULL</span> = <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span> != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（二）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> &gt;= <span class=\"number\">2</span>, <span class=\"number\">4</span> &gt;= <span class=\"number\">4</span>, <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>, <span class=\"string\">'good'</span> &gt;= <span class=\"string\">'god'</span>, <span class=\"string\">'good'</span> &gt; <span class=\"string\">'god'</span>, <span class=\"literal\">NULL</span> &gt;= <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（三）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">4</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">2</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>, <span class=\"number\">12</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">10</span> <span class=\"keyword\">AND</span> <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（四）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">2</span> <span class=\"keyword\">IN</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>), <span class=\"number\">3</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>), <span class=\"string\">'a'</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>), <span class=\"literal\">NULL</span> <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（五）</span></span><br><span class=\"line\"><span class=\"comment\">-- % 表示任意0个或多个字符</span></span><br><span class=\"line\"><span class=\"comment\">-- _ 表示任意单个字符</span></span><br><span class=\"line\"><span class=\"comment\">-- [ ] 表示括号内所列字符中的一个（类似与正则表达式）</span></span><br><span class=\"line\"><span class=\"comment\">-- [^ ] 表示不在括号所列之内的单个字符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'abc'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'ab_'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%c'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'t___'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符</span></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（一）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">NOT</span> <span class=\"string\">'1'</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'y'</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'0'</span>, <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（二）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'y'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"literal\">NULL</span>, <span class=\"string\">'0'</span> <span class=\"keyword\">AND</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（三）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"string\">'t'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"string\">'y'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"数据库对象操作\"><a href=\"#数据库对象操作\" class=\"headerlink\" title=\"数据库对象操作\"></a>数据库对象操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--最简单创建数据库示例（使用默认参数）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带参数创建数据库示例（指定数据库OWNER和字符集）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">WITH</span> OWNER = postgres <span class=\"keyword\">ENCODING</span> = <span class=\"string\">'UTF8'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> db_jikexueyuan3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库连接数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">CONNECTION</span> <span class=\"keyword\">LIMIT</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"数据表对象操作\"><a href=\"#数据表对象操作\" class=\"headerlink\" title=\"数据表对象操作\"></a>数据表对象操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建student数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> studnet (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> studnet1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表字段长度</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">name</span> <span class=\"keyword\">TYPE</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据表字段名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">RENAME</span> <span class=\"keyword\">id</span> <span class=\"keyword\">TO</span> bh;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--在数据表中新增字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> studnet1 <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> address <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表中字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表对象</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> studnet1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据表之前先做判断</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> studnet1;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数值类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp (x <span class=\"built_in\">SMALLINT</span>, y <span class=\"built_in\">INT</span>, z <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">3.58</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO temp VALUES (1, 100, 1000.58);--（出现错误，超过存储范围）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">100.58</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">100.588</span>);<span class=\"comment\">--（合法，会进行四舍五入）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--日期/时间类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp1 (t <span class=\"keyword\">TIME</span>, d <span class=\"built_in\">DATE</span>, ts <span class=\"keyword\">TIMESTAMP</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp1 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'02:02:02'</span>, <span class=\"string\">'1996-01-01'</span>, <span class=\"string\">'1996-01-01 02:02:02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp1 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'101112'</span>, <span class=\"string\">'96-01-01'</span>, <span class=\"string\">'1996-01-01 02:02:02'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--字符串类型</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> temp2 (ch <span class=\"built_in\">CHAR</span>(<span class=\"number\">4</span>), vch <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>), t <span class=\"built_in\">TEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> temp2 <span class=\"keyword\">VALUES</span> (<span class=\"string\">'abcd'</span>, <span class=\"string\">'极客学院'</span>, <span class=\"string\">'极客学院极客学院极客学院'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较char类型与varchar类型之间的区别</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, ch, <span class=\"string\">')'</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, vch, <span class=\"string\">')'</span>),</span><br><span class=\"line\">    <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'('</span>, t, <span class=\"string\">')'</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> temp2;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运算符介绍\"><a href=\"#运算符介绍\" class=\"headerlink\" title=\"运算符介绍\"></a>运算符介绍</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--算术运算符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">3</span>+<span class=\"number\">2</span>, <span class=\"number\">3</span><span class=\"number\">-2</span>, <span class=\"number\">3</span>*<span class=\"number\">2</span>, <span class=\"number\">3</span>/<span class=\"number\">2</span>, <span class=\"number\">3</span>%<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符</span></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（一）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> = <span class=\"number\">0</span>, <span class=\"string\">'2'</span> = <span class=\"number\">2</span>, <span class=\"string\">'2'</span> &lt;&gt; <span class=\"number\">2</span>, <span class=\"number\">2</span> = <span class=\"number\">2</span>, <span class=\"literal\">NULL</span> = <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span> != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（二）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> &gt;= <span class=\"number\">2</span>, <span class=\"number\">4</span> &gt;= <span class=\"number\">4</span>, <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>, <span class=\"string\">'good'</span> &gt;= <span class=\"string\">'god'</span>, <span class=\"string\">'good'</span> &gt; <span class=\"string\">'god'</span>, <span class=\"literal\">NULL</span> &gt;= <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（三）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">4</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">2</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>, <span class=\"number\">12</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">10</span> <span class=\"keyword\">AND</span> <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（四）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">2</span> <span class=\"keyword\">IN</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>), <span class=\"number\">3</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>), <span class=\"string\">'a'</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>), <span class=\"literal\">NULL</span> <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--比较运算符（五）</span></span><br><span class=\"line\"><span class=\"comment\">-- % 表示任意0个或多个字符</span></span><br><span class=\"line\"><span class=\"comment\">-- _ 表示任意单个字符</span></span><br><span class=\"line\"><span class=\"comment\">-- [ ] 表示括号内所列字符中的一个（类似与正则表达式）</span></span><br><span class=\"line\"><span class=\"comment\">-- [^ ] 表示不在括号所列之内的单个字符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'abc'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'ab_'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%c'</span>, <span class=\"string\">'abc'</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'t___'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符</span></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（一）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">NOT</span> <span class=\"string\">'1'</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'y'</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'0'</span>, <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>, <span class=\"keyword\">NOT</span> <span class=\"string\">'n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（二）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'y'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">AND</span> <span class=\"literal\">NULL</span>, <span class=\"string\">'0'</span> <span class=\"keyword\">AND</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--逻辑运算符（三）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"string\">'t'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"string\">'y'</span>, <span class=\"string\">'1'</span> <span class=\"keyword\">OR</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 10:38:18 GMT+0800 (China Standard Time)","title":"PostgreSQL数据库、数据表、数类型和运算符Demo案例","path":"2018/09/26/PostgreSQL数据库、数据表、数类型和运算符Demo案例/","eyeCatchImage":null,"excerpt":"<h4 id=\"数据库对象操作\"><a href=\"#数据库对象操作\" class=\"headerlink\" title=\"数据库对象操作\"></a>数据库对象操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--最简单创建数据库示例（使用默认参数）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带参数创建数据库示例（指定数据库OWNER和字符集）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">WITH</span> OWNER = postgres <span class=\"keyword\">ENCODING</span> = <span class=\"string\">'UTF8'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库名称</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> db_jikexueyuan3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改数据库连接数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2 <span class=\"keyword\">CONNECTION</span> <span class=\"keyword\">LIMIT</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> db_jikexueyuan2;</span><br></pre></td></tr></table></figure>","date":"2018-09-26T02:19:05.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"PostgreSQL数据操作和数据表约束Demo","date":"2018-09-26T05:57:21.000Z","_content":"\n#### 插入数据 INSERT\n```SQL\n--创建student数据表\nCREATE TABLE student (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--向表中所有字段插入数据（顺序不能乱）\nINSERT INTO student VALUES (1, '张三', '1990-01-01', 3.85);\n\n--向表中指定字段插入数据\nINSERT INTO student(id, name, birthday) VALUES (2, '李四', '1990-01-02');\n\n--向表中指定字段插入数据（打乱字段顺序）\nINSERT INTO student(id, birthday, name) VALUES (3, '1988-05-01', '王五');\n\n--使用INSERT语句批量插入多条数据\nINSERT INTO student(id, name, birthday) VALUES (4, '张三1', '1990-02-01'), (5, '张三2', '1990-02-02'), (6, '张三3', '1990-02-03');\n\n--创建student1数据表\nCREATE TABLE student_new (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--将查询结果插入到表中\nINSERT INTO student_new SELECT * FROM student;\n\n--将查询结果插入到表中\nINSERT INTO student_new(id, name, birthday) SELECT id, name, birthday FROM student;\n```\n<!-- more -->\n\n#### 更新数据 update\n```SQL\n--指定条件更新数据\nupdate student set name = '李四1' where id = 2;\n\n--批量更新数据\nUPDATE student SET score = 3.76;\n\n--将指定结果更新到对应字段\nupdate student set score = 1.1+2.3 where id = 1;\n```\n\n\n#### 删除数据 DELETE TRUNCATE\n```SQL\n--删除数据\nDELETE FROM student WHERE id = 1;\nDELETE FROM student WHERE birthday BETWEEN '1988-01-01' AND '1989-12-31';\n\n--TRUNCATE清空数据\nTRUNCATE TABLE student_new;\n\n```\n\n#### 主键约束 PRIMARY KEY\n```SQL\n--创建emp表\nCREATE TABLE emp (\n   id INT PRIMARY KEY,       --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2)      --工资\n);\n\nINSERT INTO emp VALUES (1, '张三', 3000.00);\n--INSERT INTO emp VALUES (1, '李四', 3000.00); --插入提示错误，主键冲突\n\n--创建emp1表\nCREATE TABLE emp1 (\n   id INT,                   --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   CONSTRAINT pk_emp1 PRIMARY KEY(id)\n);\n\n--创建emp2表（联合主键）\nCREATE TABLE emp2 (\n   id INT,                   --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   CONSTRAINT pk_emp2 PRIMARY KEY(id, name)\n);\n```\n\n#### 外键约束 FOREIGN KEY(field) REFERENCES\n```SQL\n--创建dept表\nCREATE TABLE dept (\n   id INT,                   --编号\n   name VARCHAR(30),         --部门名称\n   CONSTRAINT pk_dept PRIMARY KEY(id)\n);\n\nINSERT INTO dept VALUES(1, '开发部');\nINSERT INTO dept VALUES(2, '测试部');\n\n--创建emp表\nCREATE TABLE emp3 (\n   id INT PRIMARY KEY,       --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   deptId INT,\n   CONSTRAINT fk_emp3_dept FOREIGN KEY(deptId) REFERENCES dept(id)\n);\n\n--插入数据\nINSERT INTO emp3 VALUES(1, '张三', 3000.00, 1);\n--INSERT INTO emp3 VALUES(2, '李四', 3000.00, 3); --插入数据报错，外键关联数据不存在\n--DELETE FROM dept WHERE id = 1; --删除数据报错，存在外键关联数据\nDELETE FROM dept WHERE id = 2; --不存在外键关联数据，可以正常删除数据\n```\n\n\n#### 删除表 DROP\n```SQL\n--DROP TABLE dept; --直接删除dept表会报错，与emp3表存在关联\nDROP TABLE dept CASCADE; --强制递归删除数据\n```\n\n#### 创建非空约束 NOT NULL\n```SQL\n--创建非空约束\nCREATE TABLE emp4 (\n   id INT PRIMARY KEY,           --编号\n   name VARCHAR(30) NOT NULL,    --姓名\n   salary NUMERIC(9, 2)         --工资\n);\n\nINSERT INTO emp4 VALUES(1, '张三', 3000.00);\n--INSERT INTO emp4 VALUES(2, NULL, 3000.00); --插入数据报错，违法非空约束\n\n```\n\n#### 创建唯一约束 UNIQUE\n```SQL\n--创建唯一约束\nCREATE TABLE emp5 (\n   id INT PRIMARY KEY,          --编号\n   name VARCHAR(30),            --姓名\n   phone VARCHAR(30) UNIQUE,    --电话号码\n   salary NUMERIC(9, 2)         --工资\n);\n\nINSERT INTO emp5 VALUES(1, '张三', '13436652541', 3000.00);\n--INSERT INTO emp5 VALUES(2, '李四', '13436652541', 3000.00); --插入数据报错，违法唯一约束\n```\n\n#### 创建默认值约束 default\n```SQL\n--创建默认值约束\nCREATE TABLE emp6 (\n   id INT PRIMARY KEY,               --编号\n   name VARCHAR(30),                 --姓名\n   salary NUMERIC(9, 2) default 0.0  --工资\n);\n\ninsert into emp6 (id, name) values (1,'张三');\ninsert into emp6 (id, name, salary) values (2,'李四', 3000);\n```\n\n-------------\n","source":"_posts/PostgreSQL数据操作和数据表约束Demo.md","raw":"---\ntitle: PostgreSQL数据操作和数据表约束Demo\ndate: 2018-09-26 13:57:21\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n#### 插入数据 INSERT\n```SQL\n--创建student数据表\nCREATE TABLE student (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--向表中所有字段插入数据（顺序不能乱）\nINSERT INTO student VALUES (1, '张三', '1990-01-01', 3.85);\n\n--向表中指定字段插入数据\nINSERT INTO student(id, name, birthday) VALUES (2, '李四', '1990-01-02');\n\n--向表中指定字段插入数据（打乱字段顺序）\nINSERT INTO student(id, birthday, name) VALUES (3, '1988-05-01', '王五');\n\n--使用INSERT语句批量插入多条数据\nINSERT INTO student(id, name, birthday) VALUES (4, '张三1', '1990-02-01'), (5, '张三2', '1990-02-02'), (6, '张三3', '1990-02-03');\n\n--创建student1数据表\nCREATE TABLE student_new (\n   id INT,                   --学生编号\n   name VARCHAR(30),         --学生姓名\n   birthday DATE,            --出生日期\n   score NUMERIC(5, 2)       --学分\n);\n\n--将查询结果插入到表中\nINSERT INTO student_new SELECT * FROM student;\n\n--将查询结果插入到表中\nINSERT INTO student_new(id, name, birthday) SELECT id, name, birthday FROM student;\n```\n<!-- more -->\n\n#### 更新数据 update\n```SQL\n--指定条件更新数据\nupdate student set name = '李四1' where id = 2;\n\n--批量更新数据\nUPDATE student SET score = 3.76;\n\n--将指定结果更新到对应字段\nupdate student set score = 1.1+2.3 where id = 1;\n```\n\n\n#### 删除数据 DELETE TRUNCATE\n```SQL\n--删除数据\nDELETE FROM student WHERE id = 1;\nDELETE FROM student WHERE birthday BETWEEN '1988-01-01' AND '1989-12-31';\n\n--TRUNCATE清空数据\nTRUNCATE TABLE student_new;\n\n```\n\n#### 主键约束 PRIMARY KEY\n```SQL\n--创建emp表\nCREATE TABLE emp (\n   id INT PRIMARY KEY,       --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2)      --工资\n);\n\nINSERT INTO emp VALUES (1, '张三', 3000.00);\n--INSERT INTO emp VALUES (1, '李四', 3000.00); --插入提示错误，主键冲突\n\n--创建emp1表\nCREATE TABLE emp1 (\n   id INT,                   --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   CONSTRAINT pk_emp1 PRIMARY KEY(id)\n);\n\n--创建emp2表（联合主键）\nCREATE TABLE emp2 (\n   id INT,                   --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   CONSTRAINT pk_emp2 PRIMARY KEY(id, name)\n);\n```\n\n#### 外键约束 FOREIGN KEY(field) REFERENCES\n```SQL\n--创建dept表\nCREATE TABLE dept (\n   id INT,                   --编号\n   name VARCHAR(30),         --部门名称\n   CONSTRAINT pk_dept PRIMARY KEY(id)\n);\n\nINSERT INTO dept VALUES(1, '开发部');\nINSERT INTO dept VALUES(2, '测试部');\n\n--创建emp表\nCREATE TABLE emp3 (\n   id INT PRIMARY KEY,       --编号\n   name VARCHAR(30),         --姓名\n   salary NUMERIC(9, 2),     --工资\n   deptId INT,\n   CONSTRAINT fk_emp3_dept FOREIGN KEY(deptId) REFERENCES dept(id)\n);\n\n--插入数据\nINSERT INTO emp3 VALUES(1, '张三', 3000.00, 1);\n--INSERT INTO emp3 VALUES(2, '李四', 3000.00, 3); --插入数据报错，外键关联数据不存在\n--DELETE FROM dept WHERE id = 1; --删除数据报错，存在外键关联数据\nDELETE FROM dept WHERE id = 2; --不存在外键关联数据，可以正常删除数据\n```\n\n\n#### 删除表 DROP\n```SQL\n--DROP TABLE dept; --直接删除dept表会报错，与emp3表存在关联\nDROP TABLE dept CASCADE; --强制递归删除数据\n```\n\n#### 创建非空约束 NOT NULL\n```SQL\n--创建非空约束\nCREATE TABLE emp4 (\n   id INT PRIMARY KEY,           --编号\n   name VARCHAR(30) NOT NULL,    --姓名\n   salary NUMERIC(9, 2)         --工资\n);\n\nINSERT INTO emp4 VALUES(1, '张三', 3000.00);\n--INSERT INTO emp4 VALUES(2, NULL, 3000.00); --插入数据报错，违法非空约束\n\n```\n\n#### 创建唯一约束 UNIQUE\n```SQL\n--创建唯一约束\nCREATE TABLE emp5 (\n   id INT PRIMARY KEY,          --编号\n   name VARCHAR(30),            --姓名\n   phone VARCHAR(30) UNIQUE,    --电话号码\n   salary NUMERIC(9, 2)         --工资\n);\n\nINSERT INTO emp5 VALUES(1, '张三', '13436652541', 3000.00);\n--INSERT INTO emp5 VALUES(2, '李四', '13436652541', 3000.00); --插入数据报错，违法唯一约束\n```\n\n#### 创建默认值约束 default\n```SQL\n--创建默认值约束\nCREATE TABLE emp6 (\n   id INT PRIMARY KEY,               --编号\n   name VARCHAR(30),                 --姓名\n   salary NUMERIC(9, 2) default 0.0  --工资\n);\n\ninsert into emp6 (id, name) values (1,'张三');\ninsert into emp6 (id, name, salary) values (2,'李四', 3000);\n```\n\n-------------\n","slug":"PostgreSQL数据操作和数据表约束Demo","published":1,"updated":"2018-09-26T08:45:02.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x5s003texotrcwb94vj","content":"<h4 id=\"插入数据-INSERT\"><a href=\"#插入数据-INSERT\" class=\"headerlink\" title=\"插入数据 INSERT\"></a>插入数据 INSERT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建student数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中所有字段插入数据（顺序不能乱）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"string\">'1990-01-01'</span>, <span class=\"number\">3.85</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"string\">'李四'</span>, <span class=\"string\">'1990-01-02'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据（打乱字段顺序）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, birthday, <span class=\"keyword\">name</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"string\">'1988-05-01'</span>, <span class=\"string\">'王五'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用INSERT语句批量插入多条数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">'张三1'</span>, <span class=\"string\">'1990-02-01'</span>), (<span class=\"number\">5</span>, <span class=\"string\">'张三2'</span>, <span class=\"string\">'1990-02-02'</span>), (<span class=\"number\">6</span>, <span class=\"string\">'张三3'</span>, <span class=\"string\">'1990-02-03'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建student1数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student_new (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday <span class=\"keyword\">FROM</span> student;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"更新数据-update\"><a href=\"#更新数据-update\" class=\"headerlink\" title=\"更新数据 update\"></a>更新数据 update</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--指定条件更新数据</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> student <span class=\"keyword\">set</span> <span class=\"keyword\">name</span> = <span class=\"string\">'李四1'</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--批量更新数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> student <span class=\"keyword\">SET</span> score = <span class=\"number\">3.76</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将指定结果更新到对应字段</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> student <span class=\"keyword\">set</span> score = <span class=\"number\">1.1</span>+<span class=\"number\">2.3</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据-DELETE-TRUNCATE\"><a href=\"#删除数据-DELETE-TRUNCATE\" class=\"headerlink\" title=\"删除数据 DELETE TRUNCATE\"></a>删除数据 DELETE TRUNCATE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> birthday <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'1988-01-01'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'1989-12-31'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--TRUNCATE清空数据</span></span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> student_new;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主键约束-PRIMARY-KEY\"><a href=\"#主键约束-PRIMARY-KEY\" class=\"headerlink\" title=\"主键约束 PRIMARY KEY\"></a>主键约束 PRIMARY KEY</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建emp表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,       <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)      <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp VALUES (1, '李四', 3000.00); --插入提示错误，主键冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp1表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp1 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_emp1 PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp2表（联合主键）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp2 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_emp2 PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"外键约束-FOREIGN-KEY-field-REFERENCES\"><a href=\"#外键约束-FOREIGN-KEY-field-REFERENCES\" class=\"headerlink\" title=\"外键约束 FOREIGN KEY(field) REFERENCES\"></a>外键约束 FOREIGN KEY(field) REFERENCES</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_dept PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>, <span class=\"string\">'测试部'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp3 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,       <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   deptId <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> fk_emp3_dept FOREIGN <span class=\"keyword\">KEY</span>(deptId) <span class=\"keyword\">REFERENCES</span> dept(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp3 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp3 VALUES(2, '李四', 3000.00, 3); --插入数据报错，外键关联数据不存在</span></span><br><span class=\"line\"><span class=\"comment\">--DELETE FROM dept WHERE id = 1; --删除数据报错，存在外键关联数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">2</span>; <span class=\"comment\">--不存在外键关联数据，可以正常删除数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除表-DROP\"><a href=\"#删除表-DROP\" class=\"headerlink\" title=\"删除表 DROP\"></a>删除表 DROP</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--DROP TABLE dept; --直接删除dept表会报错，与emp3表存在关联</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dept <span class=\"keyword\">CASCADE</span>; <span class=\"comment\">--强制递归删除数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建非空约束-NOT-NULL\"><a href=\"#创建非空约束-NOT-NULL\" class=\"headerlink\" title=\"创建非空约束 NOT NULL\"></a>创建非空约束 NOT NULL</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建非空约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp4 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,           <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,    <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)         <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp4 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp4 VALUES(2, NULL, 3000.00); --插入数据报错，违法非空约束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建唯一约束-UNIQUE\"><a href=\"#创建唯一约束-UNIQUE\" class=\"headerlink\" title=\"创建唯一约束 UNIQUE\"></a>创建唯一约束 UNIQUE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建唯一约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp5 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,          <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),            <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   phone <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">UNIQUE</span>,    <span class=\"comment\">--电话号码</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)         <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp5 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"string\">'13436652541'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp5 VALUES(2, '李四', '13436652541', 3000.00); --插入数据报错，违法唯一约束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建默认值约束-default\"><a href=\"#创建默认值约束-default\" class=\"headerlink\" title=\"创建默认值约束 default\"></a>创建默认值约束 default</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建默认值约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp6 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,               <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),                 <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>) <span class=\"keyword\">default</span> <span class=\"number\">0.0</span>  <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp6 (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'张三'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp6 (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, salary) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'李四'</span>, <span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"插入数据-INSERT\"><a href=\"#插入数据-INSERT\" class=\"headerlink\" title=\"插入数据 INSERT\"></a>插入数据 INSERT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建student数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中所有字段插入数据（顺序不能乱）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"string\">'1990-01-01'</span>, <span class=\"number\">3.85</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"string\">'李四'</span>, <span class=\"string\">'1990-01-02'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据（打乱字段顺序）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, birthday, <span class=\"keyword\">name</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"string\">'1988-05-01'</span>, <span class=\"string\">'王五'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用INSERT语句批量插入多条数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">'张三1'</span>, <span class=\"string\">'1990-02-01'</span>), (<span class=\"number\">5</span>, <span class=\"string\">'张三2'</span>, <span class=\"string\">'1990-02-02'</span>), (<span class=\"number\">6</span>, <span class=\"string\">'张三3'</span>, <span class=\"string\">'1990-02-03'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建student1数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student_new (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday <span class=\"keyword\">FROM</span> student;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"更新数据-update\"><a href=\"#更新数据-update\" class=\"headerlink\" title=\"更新数据 update\"></a>更新数据 update</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--指定条件更新数据</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> student <span class=\"keyword\">set</span> <span class=\"keyword\">name</span> = <span class=\"string\">'李四1'</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--批量更新数据</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> student <span class=\"keyword\">SET</span> score = <span class=\"number\">3.76</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将指定结果更新到对应字段</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> student <span class=\"keyword\">set</span> score = <span class=\"number\">1.1</span>+<span class=\"number\">2.3</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据-DELETE-TRUNCATE\"><a href=\"#删除数据-DELETE-TRUNCATE\" class=\"headerlink\" title=\"删除数据 DELETE TRUNCATE\"></a>删除数据 DELETE TRUNCATE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> birthday <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'1988-01-01'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'1989-12-31'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--TRUNCATE清空数据</span></span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> student_new;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主键约束-PRIMARY-KEY\"><a href=\"#主键约束-PRIMARY-KEY\" class=\"headerlink\" title=\"主键约束 PRIMARY KEY\"></a>主键约束 PRIMARY KEY</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建emp表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,       <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)      <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp VALUES (1, '李四', 3000.00); --插入提示错误，主键冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp1表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp1 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_emp1 PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp2表（联合主键）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp2 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_emp2 PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"外键约束-FOREIGN-KEY-field-REFERENCES\"><a href=\"#外键约束-FOREIGN-KEY-field-REFERENCES\" class=\"headerlink\" title=\"外键约束 FOREIGN KEY(field) REFERENCES\"></a>外键约束 FOREIGN KEY(field) REFERENCES</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> pk_dept PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>, <span class=\"string\">'测试部'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建emp表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp3 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,       <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),     <span class=\"comment\">--工资</span></span><br><span class=\"line\">   deptId <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">   <span class=\"keyword\">CONSTRAINT</span> fk_emp3_dept FOREIGN <span class=\"keyword\">KEY</span>(deptId) <span class=\"keyword\">REFERENCES</span> dept(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp3 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp3 VALUES(2, '李四', 3000.00, 3); --插入数据报错，外键关联数据不存在</span></span><br><span class=\"line\"><span class=\"comment\">--DELETE FROM dept WHERE id = 1; --删除数据报错，存在外键关联数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">2</span>; <span class=\"comment\">--不存在外键关联数据，可以正常删除数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"删除表-DROP\"><a href=\"#删除表-DROP\" class=\"headerlink\" title=\"删除表 DROP\"></a>删除表 DROP</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--DROP TABLE dept; --直接删除dept表会报错，与emp3表存在关联</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dept <span class=\"keyword\">CASCADE</span>; <span class=\"comment\">--强制递归删除数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建非空约束-NOT-NULL\"><a href=\"#创建非空约束-NOT-NULL\" class=\"headerlink\" title=\"创建非空约束 NOT NULL\"></a>创建非空约束 NOT NULL</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建非空约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp4 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,           <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,    <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)         <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp4 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp4 VALUES(2, NULL, 3000.00); --插入数据报错，违法非空约束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建唯一约束-UNIQUE\"><a href=\"#创建唯一约束-UNIQUE\" class=\"headerlink\" title=\"创建唯一约束 UNIQUE\"></a>创建唯一约束 UNIQUE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建唯一约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp5 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,          <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),            <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   phone <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">UNIQUE</span>,    <span class=\"comment\">--电话号码</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>)         <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> emp5 <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"string\">'13436652541'</span>, <span class=\"number\">3000.00</span>);</span><br><span class=\"line\"><span class=\"comment\">--INSERT INTO emp5 VALUES(2, '李四', '13436652541', 3000.00); --插入数据报错，违法唯一约束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建默认值约束-default\"><a href=\"#创建默认值约束-default\" class=\"headerlink\" title=\"创建默认值约束 default\"></a>创建默认值约束 default</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建默认值约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> emp6 (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,               <span class=\"comment\">--编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),                 <span class=\"comment\">--姓名</span></span><br><span class=\"line\">   salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>) <span class=\"keyword\">default</span> <span class=\"number\">0.0</span>  <span class=\"comment\">--工资</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp6 (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'张三'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp6 (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, salary) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'李四'</span>, <span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 16:45:02 GMT+0800 (China Standard Time)","title":"PostgreSQL数据操作和数据表约束Demo","path":"2018/09/26/PostgreSQL数据操作和数据表约束Demo/","eyeCatchImage":null,"excerpt":"<h4 id=\"插入数据-INSERT\"><a href=\"#插入数据-INSERT\" class=\"headerlink\" title=\"插入数据 INSERT\"></a>插入数据 INSERT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建student数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中所有字段插入数据（顺序不能乱）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">'张三'</span>, <span class=\"string\">'1990-01-01'</span>, <span class=\"number\">3.85</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"string\">'李四'</span>, <span class=\"string\">'1990-01-02'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--向表中指定字段插入数据（打乱字段顺序）</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, birthday, <span class=\"keyword\">name</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"string\">'1988-05-01'</span>, <span class=\"string\">'王五'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用INSERT语句批量插入多条数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">'张三1'</span>, <span class=\"string\">'1990-02-01'</span>), (<span class=\"number\">5</span>, <span class=\"string\">'张三2'</span>, <span class=\"string\">'1990-02-02'</span>), (<span class=\"number\">6</span>, <span class=\"string\">'张三3'</span>, <span class=\"string\">'1990-02-03'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建student1数据表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student_new (</span><br><span class=\"line\">   <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,                   <span class=\"comment\">--学生编号</span></span><br><span class=\"line\">   <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),         <span class=\"comment\">--学生姓名</span></span><br><span class=\"line\">   birthday <span class=\"built_in\">DATE</span>,            <span class=\"comment\">--出生日期</span></span><br><span class=\"line\">   score <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)       <span class=\"comment\">--学分</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--将查询结果插入到表中</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student_new(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday) <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, birthday <span class=\"keyword\">FROM</span> student;</span><br></pre></td></tr></table></figure>","date":"2018-09-26T05:57:21.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"PostgreSQL数据查询Demo","date":"2018-09-26T02:58:30.000Z","_content":"\n#### 创建演示数据表结构\n```SQL\n--创建dept表\nCREATE TABLE dept (\n  d_no INT PRIMARY KEY,     --部门编号\n\td_name VARCHAR(30),       --部门名称\n\td_location VARCHAR(300)   --部门所在地址\n);\n\n--dept表初始化数据\nINSERT INTO dept VALUES (10, '开发部', '北京市海淀区');\nINSERT INTO dept VALUES (20, '测试部', '北京市东城区');\nINSERT INTO dept VALUES (30, '销售部', '上海市');\nINSERT INTO dept VALUES (40, '财务部', '广州市');\nINSERT INTO dept VALUES (50, '运维部', '武汉市');\nINSERT INTO dept VALUES (60, '集成部', '南京市');\n\n--创建employee表\nCREATE TABLE employee (\n  e_no INT PRIMARY KEY,             --雇员编号\n\te_name VARCHAR(30) NOT NULL,      --雇员名称\n\te_gender CHAR(2) NOT NULL,        --性别，f：女，m：男\n\tdept_no INT,                      --所在部门编号\n\te_job VARCHAR(50) NOT NULL,       --职位\n\te_salary NUMERIC(9, 2),           --工资\n\te_hireDate DATE,                  --入职日期\n\tCONSTRAINT fk_emp_deptno FOREIGN KEY (dept_no) REFERENCES dept(d_no)\n);\n\n```\n```SQL\n-- select 语句顺序\nSELECT\n  {* | <字段列表>}       //查询结果字段内容\nFROM\n  [\n      <表1>,<表2>…                       //查询数据表\n      [WHERE <表达式>]                   //where查询条件表达式\n      [GROUP BY <group by definition>]  //group by数据分组\n      [HAVING <expression> [{<operator> <expression>}…]]            \n      [ORDER BY <order by definition>]  //查询结果排序\n      [LIMIT [<offset>,] <row count>]   //限制结果显示数量\n  ]\n```\n\n<!-- more -->\n```SQL\n--初始化employee表\nINSERT INTO employee VALUES (100, '赵志军', 'f', 10, '开发工程师', 5000, '2010-01-01');\nINSERT INTO employee VALUES (101, '张铭雨', 'f', 10, '开发工程师', 6000, '2012-04-04');\nINSERT INTO employee VALUES (102, '许锋', 'f', 10, '开发经理', 8000, '2008-01-01');\nINSERT INTO employee VALUES (103, '王嘉琦', 'm', 20, '测试工程师', 4500, '2013-08-12');\nINSERT INTO employee VALUES (104, '李江新', 'f', 20, '测试工程师', 5000, '2011-08-16');\nINSERT INTO employee VALUES (105, '张海影', 'm', 20, '测试经理', 6000, '2009-11-12');\nINSERT INTO employee VALUES (106, '马恩波', 'f', 30, '销售人员', 3000, '2014-09-01');\nINSERT INTO employee VALUES (107, '李慧敏', 'm', 30, '销售人员', 5000, '2010-08-14');\nINSERT INTO employee VALUES (108, '马爽爽', 'm', 30, '销售经理', 9000, '2006-12-02');\nINSERT INTO employee VALUES (109, '史晓云', 'm', 30, '销售高级经理', 12000, '2003-07-14');\nINSERT INTO employee VALUES (110, '刘燕凤', 'm', 40, '财务人员', 3000, '2011-06-01');\nINSERT INTO employee VALUES (111, '王科', 'f', 40, '财务人员', 3500, '2010-05-01');\nINSERT INTO employee VALUES (112, '李林英', 'm', 40, '财务经理', 5000, '2008-05-07');\nINSERT INTO employee VALUES (113, '李杨', 'f', 10, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (114, '李刚', 'f', NULL, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (115, '王林', 'f', NULL, '实习工程师', NULL, '2015-05-07');\n\n--查询所有字段\n--查询所有字段内容(使用*号通配符)\nSELECT * FROM employee;\n--查询所有字段内容(穷举所有字段)  --讲解一下使用*号的弊端\nSELECT e_no, e_name, e_gender, dept_no, e_job, e_salary, e_hireDate FROM employee;\n--查询指定字段数据内容\nSELECT e_no, e_name, e_hireDate FROM employee;\n\n--使用别名\nSELECT d_no, d_name, d_location FROM dept;\n\n--查询指定记录，带条件查询\n--指定条件查询数据\nSELECT e_no, e_name, e_hireDate FROM employee WHERE e_salary = 5000;\nSELECT e_no, e_name, e_gender FROM employee WHERE e_gender = 'f';\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary < 5000;\n\n--复杂条件查询\n--带IN关键字的条件查询\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no IN (20, 30);\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no NOT IN (20, 30);\n\n--带BETWEEN AND关键字的范围查询\nSELECT e_no, e_name, e_hireDate FROM employee WHERE e_hireDate BETWEEN '2010-01-01' AND '2015-01-01';\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary NOT BETWEEN 5000 AND 8000;\n\n--带LIKE的字符匹配查询\nSELECT e_no, e_name FROM employee WHERE e_name LIKE '李%';\nSELECT e_no, e_name FROM employee WHERE e_name NOT LIKE '李_';\n\n--查询空值内容\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary IS NULL;\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary IS NOT NULL;\n\n--带AND的多条件查询\nSELECT e_no, e_name, e_gender, dept_no FROM employee WHERE e_gender = 'f' AND dept_no = 10;\nSELECT e_no, e_name, e_gender, dept_no FROM employee WHERE e_gender = 'f' AND dept_no IN (10, 30);\n\n--带OR的多条件查询\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no = 10 OR dept_no = 20;\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no IN (10, 20);\n\n--对查询结果进行排序\nSELECT e_salary FROM employee ORDER BY e_salary ASC;\nSELECT e_salary FROM employee ORDER BY e_salary DESC;\nSELECT e_salary, e_hireDate FROM employee ORDER BY e_salary ASC, e_hireDate DESC;\n\n--用LIMIT限制查询结果的数量\nSELECT * FROM employee LIMIT 5;\nSELECT * FROM employee LIMIT 4 OFFSET 3;\n\n--连接查询\n--内连接查询\nSELECT e_no, e_name, e_job, d_name, d_location FROM employee, dept WHERE dept_no = d_no;\nSELECT e_no, e_name, e_job, d_name, d_location FROM employee INNER JOIN dept ON dept_no = d_no WHERE dept_no = 10;\n\n--外连接查询\n--左连接查询\nSELECT e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location FROM employee e LEFT JOIN dept d ON e.dept_no = d.d_no\n--右连接查询\nSELECT e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location FROM employee e RIGHT JOIN dept d ON e.dept_no = d.d_no\n\n--子查询\n--带EXISTS关键字的子查询\n-- 先在外层查询中取“学生表”的第一行记录，用该记录的相关的属性值（在内层WHERE子句中给定的）处理内层查询，若外层的WHERE子句返回“TRUE”值，则这条记录放入结果表中。然后再取下一行记录；重复上述过程直到外层表的记录全部遍历一次为止。\nSELECT * FROM employee WHERE EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部');\nSELECT * FROM employee WHERE EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部'  AND dept_no = d_no);\n\nSELECT * FROM employee WHERE NOT EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部'  AND dept_no = d_no);\n\n--带IN关键字的子查询\nselect * from employee WHERE dept_no in (select d_no from dept WHERE d_name = '开发部');\nselect * from employee WHERE dept_no not in (select d_no from dept WHERE d_name = '开发部');\n\n--标量子查询\nSELECT e.e_no, e.e_name, (SELECT d_name || ' ' || d_location FROM dept d WHERE d.d_no = e.dept_no) AS address FROM employee e;\nSELECT e.e_no, e.e_name, (SELECT concat(d_name, '---', d_location) FROM dept d WHERE d.d_no = e.dept_no) AS address FROM employee e;\n\n--合并查询结果\n--使用UNION ALL合并结果\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE dept_no IN (10, 20)\nUNION ALL\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE e_salary > 5000;\n\n--使用UNION合并结果\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE dept_no IN (10, 20)\nUNION\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE e_salary > 5000;\n\n--查询结果使用空值占位\nSELECT e_no, e_name, dept_no, e_salary, e_hireDate FROM employee WHERE dept_no IN (10, 20)\nUNION ALL\nSELECT e_no, e_name, dept_no, e_salary, NULL FROM employee WHERE e_salary > 5000;\n\n```\n","source":"_posts/PostgreSQL数据查询Demo.md","raw":"---\ntitle: PostgreSQL数据查询Demo\ndate: 2018-09-26 10:58:30\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n#### 创建演示数据表结构\n```SQL\n--创建dept表\nCREATE TABLE dept (\n  d_no INT PRIMARY KEY,     --部门编号\n\td_name VARCHAR(30),       --部门名称\n\td_location VARCHAR(300)   --部门所在地址\n);\n\n--dept表初始化数据\nINSERT INTO dept VALUES (10, '开发部', '北京市海淀区');\nINSERT INTO dept VALUES (20, '测试部', '北京市东城区');\nINSERT INTO dept VALUES (30, '销售部', '上海市');\nINSERT INTO dept VALUES (40, '财务部', '广州市');\nINSERT INTO dept VALUES (50, '运维部', '武汉市');\nINSERT INTO dept VALUES (60, '集成部', '南京市');\n\n--创建employee表\nCREATE TABLE employee (\n  e_no INT PRIMARY KEY,             --雇员编号\n\te_name VARCHAR(30) NOT NULL,      --雇员名称\n\te_gender CHAR(2) NOT NULL,        --性别，f：女，m：男\n\tdept_no INT,                      --所在部门编号\n\te_job VARCHAR(50) NOT NULL,       --职位\n\te_salary NUMERIC(9, 2),           --工资\n\te_hireDate DATE,                  --入职日期\n\tCONSTRAINT fk_emp_deptno FOREIGN KEY (dept_no) REFERENCES dept(d_no)\n);\n\n```\n```SQL\n-- select 语句顺序\nSELECT\n  {* | <字段列表>}       //查询结果字段内容\nFROM\n  [\n      <表1>,<表2>…                       //查询数据表\n      [WHERE <表达式>]                   //where查询条件表达式\n      [GROUP BY <group by definition>]  //group by数据分组\n      [HAVING <expression> [{<operator> <expression>}…]]            \n      [ORDER BY <order by definition>]  //查询结果排序\n      [LIMIT [<offset>,] <row count>]   //限制结果显示数量\n  ]\n```\n\n<!-- more -->\n```SQL\n--初始化employee表\nINSERT INTO employee VALUES (100, '赵志军', 'f', 10, '开发工程师', 5000, '2010-01-01');\nINSERT INTO employee VALUES (101, '张铭雨', 'f', 10, '开发工程师', 6000, '2012-04-04');\nINSERT INTO employee VALUES (102, '许锋', 'f', 10, '开发经理', 8000, '2008-01-01');\nINSERT INTO employee VALUES (103, '王嘉琦', 'm', 20, '测试工程师', 4500, '2013-08-12');\nINSERT INTO employee VALUES (104, '李江新', 'f', 20, '测试工程师', 5000, '2011-08-16');\nINSERT INTO employee VALUES (105, '张海影', 'm', 20, '测试经理', 6000, '2009-11-12');\nINSERT INTO employee VALUES (106, '马恩波', 'f', 30, '销售人员', 3000, '2014-09-01');\nINSERT INTO employee VALUES (107, '李慧敏', 'm', 30, '销售人员', 5000, '2010-08-14');\nINSERT INTO employee VALUES (108, '马爽爽', 'm', 30, '销售经理', 9000, '2006-12-02');\nINSERT INTO employee VALUES (109, '史晓云', 'm', 30, '销售高级经理', 12000, '2003-07-14');\nINSERT INTO employee VALUES (110, '刘燕凤', 'm', 40, '财务人员', 3000, '2011-06-01');\nINSERT INTO employee VALUES (111, '王科', 'f', 40, '财务人员', 3500, '2010-05-01');\nINSERT INTO employee VALUES (112, '李林英', 'm', 40, '财务经理', 5000, '2008-05-07');\nINSERT INTO employee VALUES (113, '李杨', 'f', 10, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (114, '李刚', 'f', NULL, '实习工程师', NULL, '2015-05-07');\nINSERT INTO employee VALUES (115, '王林', 'f', NULL, '实习工程师', NULL, '2015-05-07');\n\n--查询所有字段\n--查询所有字段内容(使用*号通配符)\nSELECT * FROM employee;\n--查询所有字段内容(穷举所有字段)  --讲解一下使用*号的弊端\nSELECT e_no, e_name, e_gender, dept_no, e_job, e_salary, e_hireDate FROM employee;\n--查询指定字段数据内容\nSELECT e_no, e_name, e_hireDate FROM employee;\n\n--使用别名\nSELECT d_no, d_name, d_location FROM dept;\n\n--查询指定记录，带条件查询\n--指定条件查询数据\nSELECT e_no, e_name, e_hireDate FROM employee WHERE e_salary = 5000;\nSELECT e_no, e_name, e_gender FROM employee WHERE e_gender = 'f';\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary < 5000;\n\n--复杂条件查询\n--带IN关键字的条件查询\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no IN (20, 30);\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no NOT IN (20, 30);\n\n--带BETWEEN AND关键字的范围查询\nSELECT e_no, e_name, e_hireDate FROM employee WHERE e_hireDate BETWEEN '2010-01-01' AND '2015-01-01';\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary NOT BETWEEN 5000 AND 8000;\n\n--带LIKE的字符匹配查询\nSELECT e_no, e_name FROM employee WHERE e_name LIKE '李%';\nSELECT e_no, e_name FROM employee WHERE e_name NOT LIKE '李_';\n\n--查询空值内容\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary IS NULL;\nSELECT e_no, e_name, e_salary FROM employee WHERE e_salary IS NOT NULL;\n\n--带AND的多条件查询\nSELECT e_no, e_name, e_gender, dept_no FROM employee WHERE e_gender = 'f' AND dept_no = 10;\nSELECT e_no, e_name, e_gender, dept_no FROM employee WHERE e_gender = 'f' AND dept_no IN (10, 30);\n\n--带OR的多条件查询\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no = 10 OR dept_no = 20;\nSELECT e_no, e_name, dept_no FROM employee WHERE dept_no IN (10, 20);\n\n--对查询结果进行排序\nSELECT e_salary FROM employee ORDER BY e_salary ASC;\nSELECT e_salary FROM employee ORDER BY e_salary DESC;\nSELECT e_salary, e_hireDate FROM employee ORDER BY e_salary ASC, e_hireDate DESC;\n\n--用LIMIT限制查询结果的数量\nSELECT * FROM employee LIMIT 5;\nSELECT * FROM employee LIMIT 4 OFFSET 3;\n\n--连接查询\n--内连接查询\nSELECT e_no, e_name, e_job, d_name, d_location FROM employee, dept WHERE dept_no = d_no;\nSELECT e_no, e_name, e_job, d_name, d_location FROM employee INNER JOIN dept ON dept_no = d_no WHERE dept_no = 10;\n\n--外连接查询\n--左连接查询\nSELECT e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location FROM employee e LEFT JOIN dept d ON e.dept_no = d.d_no\n--右连接查询\nSELECT e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location FROM employee e RIGHT JOIN dept d ON e.dept_no = d.d_no\n\n--子查询\n--带EXISTS关键字的子查询\n-- 先在外层查询中取“学生表”的第一行记录，用该记录的相关的属性值（在内层WHERE子句中给定的）处理内层查询，若外层的WHERE子句返回“TRUE”值，则这条记录放入结果表中。然后再取下一行记录；重复上述过程直到外层表的记录全部遍历一次为止。\nSELECT * FROM employee WHERE EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部');\nSELECT * FROM employee WHERE EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部'  AND dept_no = d_no);\n\nSELECT * FROM employee WHERE NOT EXISTS (SELECT d_no FROM dept WHERE d_name = '开发部'  AND dept_no = d_no);\n\n--带IN关键字的子查询\nselect * from employee WHERE dept_no in (select d_no from dept WHERE d_name = '开发部');\nselect * from employee WHERE dept_no not in (select d_no from dept WHERE d_name = '开发部');\n\n--标量子查询\nSELECT e.e_no, e.e_name, (SELECT d_name || ' ' || d_location FROM dept d WHERE d.d_no = e.dept_no) AS address FROM employee e;\nSELECT e.e_no, e.e_name, (SELECT concat(d_name, '---', d_location) FROM dept d WHERE d.d_no = e.dept_no) AS address FROM employee e;\n\n--合并查询结果\n--使用UNION ALL合并结果\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE dept_no IN (10, 20)\nUNION ALL\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE e_salary > 5000;\n\n--使用UNION合并结果\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE dept_no IN (10, 20)\nUNION\nSELECT e_no, e_name, dept_no, e_salary FROM employee WHERE e_salary > 5000;\n\n--查询结果使用空值占位\nSELECT e_no, e_name, dept_no, e_salary, e_hireDate FROM employee WHERE dept_no IN (10, 20)\nUNION ALL\nSELECT e_no, e_name, dept_no, e_salary, NULL FROM employee WHERE e_salary > 5000;\n\n```\n","slug":"PostgreSQL数据查询Demo","published":1,"updated":"2018-09-26T05:52:57.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x5w003yexot8x09bx3l","content":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">  d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">  e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- select 语句顺序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  &#123;* | &lt;字段列表&gt;&#125;       //查询结果字段内容</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  [</span><br><span class=\"line\">      &lt;表<span class=\"number\">1</span>&gt;,&lt;表<span class=\"number\">2</span>&gt;…                       //查询数据表</span><br><span class=\"line\">      [<span class=\"keyword\">WHERE</span> &lt;表达式&gt;]                   //<span class=\"keyword\">where</span>查询条件表达式</span><br><span class=\"line\">      [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> definition&gt;]  //<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>数据分组</span><br><span class=\"line\">      [<span class=\"keyword\">HAVING</span> &lt;expression&gt; [&#123;&lt;<span class=\"keyword\">operator</span>&gt; &lt;expression&gt;&#125;…]]            </span><br><span class=\"line\">      [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> definition&gt;]  //查询结果排序</span><br><span class=\"line\">      [<span class=\"keyword\">LIMIT</span> [&lt;<span class=\"keyword\">offset</span>&gt;,] &lt;<span class=\"keyword\">row</span> <span class=\"keyword\">count</span>&gt;]   //限制结果显示数量</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--初始化employee表</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">100</span>, <span class=\"string\">'赵志军'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">101</span>, <span class=\"string\">'张铭雨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2012-04-04'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">102</span>, <span class=\"string\">'许锋'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发经理'</span>, <span class=\"number\">8000</span>, <span class=\"string\">'2008-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">103</span>, <span class=\"string\">'王嘉琦'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">4500</span>, <span class=\"string\">'2013-08-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">104</span>, <span class=\"string\">'李江新'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2011-08-16'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">105</span>, <span class=\"string\">'张海影'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试经理'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2009-11-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">106</span>, <span class=\"string\">'马恩波'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2014-09-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">107</span>, <span class=\"string\">'李慧敏'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-08-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">108</span>, <span class=\"string\">'马爽爽'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售经理'</span>, <span class=\"number\">9000</span>, <span class=\"string\">'2006-12-02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">109</span>, <span class=\"string\">'史晓云'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售高级经理'</span>, <span class=\"number\">12000</span>, <span class=\"string\">'2003-07-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">110</span>, <span class=\"string\">'刘燕凤'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2011-06-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">111</span>, <span class=\"string\">'王科'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3500</span>, <span class=\"string\">'2010-05-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">112</span>, <span class=\"string\">'李林英'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务经理'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2008-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">113</span>, <span class=\"string\">'李杨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">114</span>, <span class=\"string\">'李刚'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">115</span>, <span class=\"string\">'王林'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询所有字段</span></span><br><span class=\"line\"><span class=\"comment\">--查询所有字段内容(使用*号通配符)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--查询所有字段内容(穷举所有字段)  --讲解一下使用*号的弊端</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no, e_job, e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--查询指定字段数据内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> d_no, d_name, d_location <span class=\"keyword\">FROM</span> dept;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询指定记录，带条件查询</span></span><br><span class=\"line\"><span class=\"comment\">--指定条件查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary = <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &lt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--复杂条件查询</span></span><br><span class=\"line\"><span class=\"comment\">--带IN关键字的条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带BETWEEN AND关键字的范围查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_hireDate <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'2010-01-01'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'2015-01-01'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">NOT</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5000</span> <span class=\"keyword\">AND</span> <span class=\"number\">8000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带LIKE的字符匹配查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_name <span class=\"keyword\">LIKE</span> <span class=\"string\">'李%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'李_'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询空值内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带AND的多条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span> <span class=\"keyword\">AND</span> dept_no = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span> <span class=\"keyword\">AND</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带OR的多条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span> <span class=\"keyword\">OR</span> dept_no = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对查询结果进行排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">ASC</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">ASC</span>, e_hireDate <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--用LIMIT限制查询结果的数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">LIMIT</span> <span class=\"number\">4</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--连接查询</span></span><br><span class=\"line\"><span class=\"comment\">--内连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_job, d_name, d_location <span class=\"keyword\">FROM</span> employee, dept <span class=\"keyword\">WHERE</span> dept_no = d_no;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_job, d_name, d_location <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> dept <span class=\"keyword\">ON</span> dept_no = d_no <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--外连接查询</span></span><br><span class=\"line\"><span class=\"comment\">--左连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location <span class=\"keyword\">FROM</span> employee e <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> dept d <span class=\"keyword\">ON</span> e.dept_no = d.d_no</span><br><span class=\"line\"><span class=\"comment\">--右连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location <span class=\"keyword\">FROM</span> employee e <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> dept d <span class=\"keyword\">ON</span> e.dept_no = d.d_no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--子查询</span></span><br><span class=\"line\"><span class=\"comment\">--带EXISTS关键字的子查询</span></span><br><span class=\"line\"><span class=\"comment\">-- 先在外层查询中取“学生表”的第一行记录，用该记录的相关的属性值（在内层WHERE子句中给定的）处理内层查询，若外层的WHERE子句返回“TRUE”值，则这条记录放入结果表中。然后再取下一行记录；重复上述过程直到外层表的记录全部遍历一次为止。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>  <span class=\"keyword\">AND</span> dept_no = d_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>  <span class=\"keyword\">AND</span> dept_no = d_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带IN关键字的子查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> d_no <span class=\"keyword\">from</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> d_no <span class=\"keyword\">from</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--标量子查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, (<span class=\"keyword\">SELECT</span> d_name || <span class=\"string\">' '</span> || d_location <span class=\"keyword\">FROM</span> dept d <span class=\"keyword\">WHERE</span> d.d_no = e.dept_no) <span class=\"keyword\">AS</span> address <span class=\"keyword\">FROM</span> employee e;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">concat</span>(d_name, <span class=\"string\">'---'</span>, d_location) <span class=\"keyword\">FROM</span> dept d <span class=\"keyword\">WHERE</span> d.d_no = e.dept_no) <span class=\"keyword\">AS</span> address <span class=\"keyword\">FROM</span> employee e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--合并查询结果</span></span><br><span class=\"line\"><span class=\"comment\">--使用UNION ALL合并结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UNION合并结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询结果使用空值占位</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary, <span class=\"literal\">NULL</span> <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">  d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">  e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- select 语句顺序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  &#123;* | &lt;字段列表&gt;&#125;       //查询结果字段内容</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  [</span><br><span class=\"line\">      &lt;表<span class=\"number\">1</span>&gt;,&lt;表<span class=\"number\">2</span>&gt;…                       //查询数据表</span><br><span class=\"line\">      [<span class=\"keyword\">WHERE</span> &lt;表达式&gt;]                   //<span class=\"keyword\">where</span>查询条件表达式</span><br><span class=\"line\">      [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> definition&gt;]  //<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>数据分组</span><br><span class=\"line\">      [<span class=\"keyword\">HAVING</span> &lt;expression&gt; [&#123;&lt;<span class=\"keyword\">operator</span>&gt; &lt;expression&gt;&#125;…]]            </span><br><span class=\"line\">      [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> definition&gt;]  //查询结果排序</span><br><span class=\"line\">      [<span class=\"keyword\">LIMIT</span> [&lt;<span class=\"keyword\">offset</span>&gt;,] &lt;<span class=\"keyword\">row</span> <span class=\"keyword\">count</span>&gt;]   //限制结果显示数量</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--初始化employee表</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">100</span>, <span class=\"string\">'赵志军'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">101</span>, <span class=\"string\">'张铭雨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发工程师'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2012-04-04'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">102</span>, <span class=\"string\">'许锋'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'开发经理'</span>, <span class=\"number\">8000</span>, <span class=\"string\">'2008-01-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">103</span>, <span class=\"string\">'王嘉琦'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">4500</span>, <span class=\"string\">'2013-08-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">104</span>, <span class=\"string\">'李江新'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试工程师'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2011-08-16'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">105</span>, <span class=\"string\">'张海影'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">20</span>, <span class=\"string\">'测试经理'</span>, <span class=\"number\">6000</span>, <span class=\"string\">'2009-11-12'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">106</span>, <span class=\"string\">'马恩波'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2014-09-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">107</span>, <span class=\"string\">'李慧敏'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售人员'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2010-08-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">108</span>, <span class=\"string\">'马爽爽'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售经理'</span>, <span class=\"number\">9000</span>, <span class=\"string\">'2006-12-02'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">109</span>, <span class=\"string\">'史晓云'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">30</span>, <span class=\"string\">'销售高级经理'</span>, <span class=\"number\">12000</span>, <span class=\"string\">'2003-07-14'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">110</span>, <span class=\"string\">'刘燕凤'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3000</span>, <span class=\"string\">'2011-06-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">111</span>, <span class=\"string\">'王科'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务人员'</span>, <span class=\"number\">3500</span>, <span class=\"string\">'2010-05-01'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">112</span>, <span class=\"string\">'李林英'</span>, <span class=\"string\">'m'</span>, <span class=\"number\">40</span>, <span class=\"string\">'财务经理'</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2008-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">113</span>, <span class=\"string\">'李杨'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">10</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">114</span>, <span class=\"string\">'李刚'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee <span class=\"keyword\">VALUES</span> (<span class=\"number\">115</span>, <span class=\"string\">'王林'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'实习工程师'</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2015-05-07'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询所有字段</span></span><br><span class=\"line\"><span class=\"comment\">--查询所有字段内容(使用*号通配符)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--查询所有字段内容(穷举所有字段)  --讲解一下使用*号的弊端</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no, e_job, e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"><span class=\"comment\">--查询指定字段数据内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> d_no, d_name, d_location <span class=\"keyword\">FROM</span> dept;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询指定记录，带条件查询</span></span><br><span class=\"line\"><span class=\"comment\">--指定条件查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary = <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &lt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--复杂条件查询</span></span><br><span class=\"line\"><span class=\"comment\">--带IN关键字的条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带BETWEEN AND关键字的范围查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_hireDate <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'2010-01-01'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'2015-01-01'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">NOT</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5000</span> <span class=\"keyword\">AND</span> <span class=\"number\">8000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带LIKE的字符匹配查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_name <span class=\"keyword\">LIKE</span> <span class=\"string\">'李%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'李_'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询空值内容</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带AND的多条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span> <span class=\"keyword\">AND</span> dept_no = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_gender, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_gender = <span class=\"string\">'f'</span> <span class=\"keyword\">AND</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带OR的多条件查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span> <span class=\"keyword\">OR</span> dept_no = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对查询结果进行排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">ASC</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> e_salary <span class=\"keyword\">ASC</span>, e_hireDate <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--用LIMIT限制查询结果的数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">LIMIT</span> <span class=\"number\">4</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--连接查询</span></span><br><span class=\"line\"><span class=\"comment\">--内连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_job, d_name, d_location <span class=\"keyword\">FROM</span> employee, dept <span class=\"keyword\">WHERE</span> dept_no = d_no;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, e_job, d_name, d_location <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> dept <span class=\"keyword\">ON</span> dept_no = d_no <span class=\"keyword\">WHERE</span> dept_no = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--外连接查询</span></span><br><span class=\"line\"><span class=\"comment\">--左连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location <span class=\"keyword\">FROM</span> employee e <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> dept d <span class=\"keyword\">ON</span> e.dept_no = d.d_no</span><br><span class=\"line\"><span class=\"comment\">--右连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, e.dept_no, d.d_name, d.d_location <span class=\"keyword\">FROM</span> employee e <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> dept d <span class=\"keyword\">ON</span> e.dept_no = d.d_no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--子查询</span></span><br><span class=\"line\"><span class=\"comment\">--带EXISTS关键字的子查询</span></span><br><span class=\"line\"><span class=\"comment\">-- 先在外层查询中取“学生表”的第一行记录，用该记录的相关的属性值（在内层WHERE子句中给定的）处理内层查询，若外层的WHERE子句返回“TRUE”值，则这条记录放入结果表中。然后再取下一行记录；重复上述过程直到外层表的记录全部遍历一次为止。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>  <span class=\"keyword\">AND</span> dept_no = d_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> d_no <span class=\"keyword\">FROM</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>  <span class=\"keyword\">AND</span> dept_no = d_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--带IN关键字的子查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> d_no <span class=\"keyword\">from</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> d_no <span class=\"keyword\">from</span> dept <span class=\"keyword\">WHERE</span> d_name = <span class=\"string\">'开发部'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--标量子查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, (<span class=\"keyword\">SELECT</span> d_name || <span class=\"string\">' '</span> || d_location <span class=\"keyword\">FROM</span> dept d <span class=\"keyword\">WHERE</span> d.d_no = e.dept_no) <span class=\"keyword\">AS</span> address <span class=\"keyword\">FROM</span> employee e;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.e_no, e.e_name, (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">concat</span>(d_name, <span class=\"string\">'---'</span>, d_location) <span class=\"keyword\">FROM</span> dept d <span class=\"keyword\">WHERE</span> d.d_no = e.dept_no) <span class=\"keyword\">AS</span> address <span class=\"keyword\">FROM</span> employee e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--合并查询结果</span></span><br><span class=\"line\"><span class=\"comment\">--使用UNION ALL合并结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UNION合并结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询结果使用空值占位</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary, e_hireDate <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> dept_no <span class=\"keyword\">IN</span> (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e_no, e_name, dept_no, e_salary, <span class=\"literal\">NULL</span> <span class=\"keyword\">FROM</span> employee <span class=\"keyword\">WHERE</span> e_salary &gt; <span class=\"number\">5000</span>;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 13:52:57 GMT+0800 (China Standard Time)","title":"PostgreSQL数据查询Demo","path":"2018/09/26/PostgreSQL数据查询Demo/","eyeCatchImage":null,"excerpt":"<h4 id=\"创建演示数据表结构\"><a href=\"#创建演示数据表结构\" class=\"headerlink\" title=\"创建演示数据表结构\"></a>创建演示数据表结构</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建dept表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept (</span><br><span class=\"line\">  d_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,     <span class=\"comment\">--部门编号</span></span><br><span class=\"line\">\td_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),       <span class=\"comment\">--部门名称</span></span><br><span class=\"line\">\td_location <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">300</span>)   <span class=\"comment\">--部门所在地址</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dept表初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"string\">'开发部'</span>, <span class=\"string\">'北京市海淀区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">20</span>, <span class=\"string\">'测试部'</span>, <span class=\"string\">'北京市东城区'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">30</span>, <span class=\"string\">'销售部'</span>, <span class=\"string\">'上海市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">40</span>, <span class=\"string\">'财务部'</span>, <span class=\"string\">'广州市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">50</span>, <span class=\"string\">'运维部'</span>, <span class=\"string\">'武汉市'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dept <span class=\"keyword\">VALUES</span> (<span class=\"number\">60</span>, <span class=\"string\">'集成部'</span>, <span class=\"string\">'南京市'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建employee表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">  e_no <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,             <span class=\"comment\">--雇员编号</span></span><br><span class=\"line\">\te_name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,      <span class=\"comment\">--雇员名称</span></span><br><span class=\"line\">\te_gender <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,        <span class=\"comment\">--性别，f：女，m：男</span></span><br><span class=\"line\">\tdept_no <span class=\"built_in\">INT</span>,                      <span class=\"comment\">--所在部门编号</span></span><br><span class=\"line\">\te_job <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,       <span class=\"comment\">--职位</span></span><br><span class=\"line\">\te_salary <span class=\"built_in\">NUMERIC</span>(<span class=\"number\">9</span>, <span class=\"number\">2</span>),           <span class=\"comment\">--工资</span></span><br><span class=\"line\">\te_hireDate <span class=\"built_in\">DATE</span>,                  <span class=\"comment\">--入职日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> fk_emp_deptno FOREIGN <span class=\"keyword\">KEY</span> (dept_no) <span class=\"keyword\">REFERENCES</span> dept(d_no)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- select 语句顺序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  &#123;* | &lt;字段列表&gt;&#125;       //查询结果字段内容</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  [</span><br><span class=\"line\">      &lt;表<span class=\"number\">1</span>&gt;,&lt;表<span class=\"number\">2</span>&gt;…                       //查询数据表</span><br><span class=\"line\">      [<span class=\"keyword\">WHERE</span> &lt;表达式&gt;]                   //<span class=\"keyword\">where</span>查询条件表达式</span><br><span class=\"line\">      [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> definition&gt;]  //<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>数据分组</span><br><span class=\"line\">      [<span class=\"keyword\">HAVING</span> &lt;expression&gt; [&#123;&lt;<span class=\"keyword\">operator</span>&gt; &lt;expression&gt;&#125;…]]            </span><br><span class=\"line\">      [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> definition&gt;]  //查询结果排序</span><br><span class=\"line\">      [<span class=\"keyword\">LIMIT</span> [&lt;<span class=\"keyword\">offset</span>&gt;,] &lt;<span class=\"keyword\">row</span> <span class=\"keyword\">count</span>&gt;]   //限制结果显示数量</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>","date":"2018-09-26T02:58:30.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 for ... else ...陷阱","date":"2018-03-29T09:49:49.000Z","_content":"假设有如下代码：\n```Python\nfor i in range(10):\n    if i == 5:\n        print 'found it! i = %s' % i\nelse:\n    print 'not found it ...'\n\n```\n我们期望的结果是，当找到5时打印出：\n```python\nfound it! i = 5\n```\n实际上打印出来的结果为：\n```python\nfound it! i = 5\nnot found it ...\n```\n显然这不是我们期望的结果。\n<!-- more -->\n\n根据官方文档说法：\n>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.\n\n>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.\n\n>https://docs.python.org/2/reference/compound_stmts.html#the-for-statement\n\n\n大意是说`当迭代的对象迭代完并为空时，位于else的子句将执行`，`而如果在for循环中含有break时则直接终止循环，并不会执行else子句`。\n\n所以正确的写法应该为：\n```python\nfor i in range(10):\n    if i == 5:\n        print 'found it! i = %s' % i\n        break\nelse:\n    print 'not found it ...'\n```\n\n当使用pylint检测代码时会提示:\n```python\nElse clause on loop without a break statement (useless-else-on-loop)\n```\n所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。\n\n**同样的原理适用于`while ... else`循环**\n\n**参考**\n\n1. https://www.cnblogs.com/dspace/p/6622799.html\n","source":"_posts/Python3-for-else-陷阱.md","raw":"---\ntitle: Python3 for ... else ...陷阱\ndate: 2018-03-29 17:49:49\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n假设有如下代码：\n```Python\nfor i in range(10):\n    if i == 5:\n        print 'found it! i = %s' % i\nelse:\n    print 'not found it ...'\n\n```\n我们期望的结果是，当找到5时打印出：\n```python\nfound it! i = 5\n```\n实际上打印出来的结果为：\n```python\nfound it! i = 5\nnot found it ...\n```\n显然这不是我们期望的结果。\n<!-- more -->\n\n根据官方文档说法：\n>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.\n\n>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.\n\n>https://docs.python.org/2/reference/compound_stmts.html#the-for-statement\n\n\n大意是说`当迭代的对象迭代完并为空时，位于else的子句将执行`，`而如果在for循环中含有break时则直接终止循环，并不会执行else子句`。\n\n所以正确的写法应该为：\n```python\nfor i in range(10):\n    if i == 5:\n        print 'found it! i = %s' % i\n        break\nelse:\n    print 'not found it ...'\n```\n\n当使用pylint检测代码时会提示:\n```python\nElse clause on loop without a break statement (useless-else-on-loop)\n```\n所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。\n\n**同样的原理适用于`while ... else`循环**\n\n**参考**\n\n1. https://www.cnblogs.com/dspace/p/6622799.html\n","slug":"Python3-for-else-陷阱","published":1,"updated":"2018-03-29T10:00:17.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x5z0041exot0yjw7o41","content":"<p>假设有如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'found it! i = %s'</span> % i</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'not found it ...'</span></span><br></pre></td></tr></table></figure></p>\n<p>我们期望的结果是，当找到5时打印出：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>实际上打印出来的结果为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">not</span> found it ...</span><br></pre></td></tr></table></figure></p>\n<p>显然这不是我们期望的结果。<br><a id=\"more\"></a></p>\n<p>根据官方文档说法：</p>\n<blockquote>\n<p>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.</p>\n</blockquote>\n<blockquote>\n<p>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://docs.python.org/2/reference/compound_stmts.html#the-for-statement\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/reference/compound_stmts.html#the-for-statement</a></p>\n</blockquote>\n<p>大意是说<code>当迭代的对象迭代完并为空时，位于else的子句将执行</code>，<code>而如果在for循环中含有break时则直接终止循环，并不会执行else子句</code>。</p>\n<p>所以正确的写法应该为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'found it! i = %s'</span> % i</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'not found it ...'</span></span><br></pre></td></tr></table></figure></p>\n<p>当使用pylint检测代码时会提示:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Else clause on loop without a <span class=\"keyword\">break</span> statement (useless-<span class=\"keyword\">else</span>-on-loop)</span><br></pre></td></tr></table></figure></p>\n<p>所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。</p>\n<p><strong>同样的原理适用于<code>while ... else</code>循环</strong></p>\n<p><strong>参考</strong></p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/dspace/p/6622799.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dspace/p/6622799.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>假设有如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'found it! i = %s'</span> % i</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'not found it ...'</span></span><br></pre></td></tr></table></figure></p>\n<p>我们期望的结果是，当找到5时打印出：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>实际上打印出来的结果为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">not</span> found it ...</span><br></pre></td></tr></table></figure></p>\n<p>显然这不是我们期望的结果。<br>","more":"</p>\n<p>根据官方文档说法：</p>\n<blockquote>\n<p>When the items are exhausted (which is immediately when the sequence is empty), the suite in the else clause, if present, is executed, and the loop terminates.</p>\n</blockquote>\n<blockquote>\n<p>A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and continues with the next item, or with the else clause if there was no next item.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://docs.python.org/2/reference/compound_stmts.html#the-for-statement\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/reference/compound_stmts.html#the-for-statement</a></p>\n</blockquote>\n<p>大意是说<code>当迭代的对象迭代完并为空时，位于else的子句将执行</code>，<code>而如果在for循环中含有break时则直接终止循环，并不会执行else子句</code>。</p>\n<p>所以正确的写法应该为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'found it! i = %s'</span> % i</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'not found it ...'</span></span><br></pre></td></tr></table></figure></p>\n<p>当使用pylint检测代码时会提示:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Else clause on loop without a <span class=\"keyword\">break</span> statement (useless-<span class=\"keyword\">else</span>-on-loop)</span><br></pre></td></tr></table></figure></p>\n<p>所以养成使用pylint检测代码的习惯还是很有必要的，像这种逻辑错误不注意点还是很难发现的。</p>\n<p><strong>同样的原理适用于<code>while ... else</code>循环</strong></p>\n<p><strong>参考</strong></p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/dspace/p/6622799.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dspace/p/6622799.html</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 29 2018 18:00:17 GMT+0800 (China Standard Time)","title":"Python3 for ... else ...陷阱","path":"2018/03/29/Python3-for-else-陷阱/","eyeCatchImage":null,"excerpt":"<p>假设有如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'found it! i = %s'</span> % i</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'not found it ...'</span></span><br></pre></td></tr></table></figure></p>\n<p>我们期望的结果是，当找到5时打印出：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>实际上打印出来的结果为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">found it! i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">not</span> found it ...</span><br></pre></td></tr></table></figure></p>\n<p>显然这不是我们期望的结果。<br>","date":"2018-03-29T09:49:49.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 is和==的区别","date":"2018-03-03T04:16:34.000Z","_content":"\n## Python 对象三要素\n要理解Python中is和==的区别，首先要理解Python对象的三个要素:\n\n\n| 要素        | 说明         |获取方式   |\n| :-----:       | :-----:      | :-----:   |\n| id      | 身份标识，基本就是内存地址，用来唯一标识一个对象  | id(obj)  |\n|type      | 数据类型   | type(obj)  |\n|value      | 值   | :-----:   |\n\n<!-- more -->\n## is和==区别\n\n| 标识       | 名称         |判断方法   |\n| :-----:       | :-----:      | :-----:   |\n| is      | 同一性运算符  | id  |\n| ==      | 比较运算符  | value  |\n\n---\n## 程序举例\n\n### 例1：\n![屏幕截图2.jpg](http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\na = {\"a\":1, \"b\":2}\nb = a.copy()\n\n\na == b  # True value一样\na is b  # False id不一样\n```\n---\n### 例2：\n![屏幕截图.jpg](http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\n>>> x = y = [4,5,6]\n>>> z = [4,5,6]\n>>> x == y\nTrue\n>>> x == z\nTrue\n>>> x is y\nTrue\n>>> x is z\nFalse\n>>>\n>>> print id(x)\n>>> print id(y)\n>>> print id(z)\n```\n\n---\n```python\n>>> a = 1 #a和b为数值类型\n>>> b = 1\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = 'cheesezh' #a和b为字符串类型\n>>> b = 'cheesezh'\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = (1,2,3) #a和b为元组类型\n>>> b = (1,2,3)\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = [1,2,3] #a和b为list类型\n>>> b = [1,2,3]\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = {'cheese':1,'zh':2} #a和b为dict类型\n>>> b = {'cheese':1,'zh':2}\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = set([1,2,3])#a和b为set类型\n>>> b = set([1,2,3])\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n```\n","source":"_posts/Python3-is和-的区别.md","raw":"---\ntitle: Python3 is和==的区别\ndate: 2018-03-03 12:16:34\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n## Python 对象三要素\n要理解Python中is和==的区别，首先要理解Python对象的三个要素:\n\n\n| 要素        | 说明         |获取方式   |\n| :-----:       | :-----:      | :-----:   |\n| id      | 身份标识，基本就是内存地址，用来唯一标识一个对象  | id(obj)  |\n|type      | 数据类型   | type(obj)  |\n|value      | 值   | :-----:   |\n\n<!-- more -->\n## is和==区别\n\n| 标识       | 名称         |判断方法   |\n| :-----:       | :-----:      | :-----:   |\n| is      | 同一性运算符  | id  |\n| ==      | 比较运算符  | value  |\n\n---\n## 程序举例\n\n### 例1：\n![屏幕截图2.jpg](http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\na = {\"a\":1, \"b\":2}\nb = a.copy()\n\n\na == b  # True value一样\na is b  # False id不一样\n```\n---\n### 例2：\n![屏幕截图.jpg](http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```python\n>>> x = y = [4,5,6]\n>>> z = [4,5,6]\n>>> x == y\nTrue\n>>> x == z\nTrue\n>>> x is y\nTrue\n>>> x is z\nFalse\n>>>\n>>> print id(x)\n>>> print id(y)\n>>> print id(z)\n```\n\n---\n```python\n>>> a = 1 #a和b为数值类型\n>>> b = 1\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = 'cheesezh' #a和b为字符串类型\n>>> b = 'cheesezh'\n>>> a is b\nTrue\n>>> id(a)\n>>> id(b)\n>>> a = (1,2,3) #a和b为元组类型\n>>> b = (1,2,3)\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = [1,2,3] #a和b为list类型\n>>> b = [1,2,3]\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = {'cheese':1,'zh':2} #a和b为dict类型\n>>> b = {'cheese':1,'zh':2}\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n>>> a = set([1,2,3])#a和b为set类型\n>>> b = set([1,2,3])\n>>> a is b\nFalse\n>>> id(a)\n>>> id(b)\n```\n","slug":"Python3-is和-的区别","published":1,"updated":"2018-04-21T03:34:54.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x640046exotz3qh6t5n","content":"<h2 id=\"Python-对象三要素\"><a href=\"#Python-对象三要素\" class=\"headerlink\" title=\"Python 对象三要素\"></a>Python 对象三要素</h2><p>要理解Python中is和==的区别，首先要理解Python对象的三个要素:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">要素</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">获取方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">身份标识，基本就是内存地址，用来唯一标识一个对象</td>\n<td style=\"text-align:center\">id(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">数据类型</td>\n<td style=\"text-align:center\">type(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">值</td>\n<td style=\"text-align:center\">:—–:</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"is和-区别\"><a href=\"#is和-区别\" class=\"headerlink\" title=\"is和==区别\"></a>is和==区别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">判断方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">同一性运算符</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">比较运算符</td>\n<td style=\"text-align:center\">value</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"程序举例\"><a href=\"#程序举例\" class=\"headerlink\" title=\"程序举例\"></a>程序举例</h2><h3 id=\"例1：\"><a href=\"#例1：\" class=\"headerlink\" title=\"例1：\"></a>例1：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图2.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">b = a.copy()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a == b  <span class=\"comment\"># True value一样</span></span><br><span class=\"line\">a <span class=\"keyword\">is</span> b  <span class=\"comment\"># False id不一样</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"例2：\"><a href=\"#例2：\" class=\"headerlink\" title=\"例2：\"></a>例2：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = y = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == z</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> z</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(z)</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span> <span class=\"comment\">#a和b为数值类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'cheesezh'</span> <span class=\"comment\">#a和b为字符串类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">'cheesezh'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">#a和b为元组类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#a和b为list类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125; <span class=\"comment\">#a和b为dict类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])<span class=\"comment\">#a和b为set类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python-对象三要素\"><a href=\"#Python-对象三要素\" class=\"headerlink\" title=\"Python 对象三要素\"></a>Python 对象三要素</h2><p>要理解Python中is和==的区别，首先要理解Python对象的三个要素:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">要素</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">获取方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">身份标识，基本就是内存地址，用来唯一标识一个对象</td>\n<td style=\"text-align:center\">id(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">数据类型</td>\n<td style=\"text-align:center\">type(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">值</td>\n<td style=\"text-align:center\">:—–:</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"is和-区别\"><a href=\"#is和-区别\" class=\"headerlink\" title=\"is和==区别\"></a>is和==区别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">判断方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">同一性运算符</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">比较运算符</td>\n<td style=\"text-align:center\">value</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"程序举例\"><a href=\"#程序举例\" class=\"headerlink\" title=\"程序举例\"></a>程序举例</h2><h3 id=\"例1：\"><a href=\"#例1：\" class=\"headerlink\" title=\"例1：\"></a>例1：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-ec5fa82d12a42a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图2.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">b = a.copy()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a == b  <span class=\"comment\"># True value一样</span></span><br><span class=\"line\">a <span class=\"keyword\">is</span> b  <span class=\"comment\"># False id不一样</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"例2：\"><a href=\"#例2：\" class=\"headerlink\" title=\"例2：\"></a>例2：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-21696bc9de2d0e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = y = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x == z</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> y</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">is</span> z</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> id(z)</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span> <span class=\"comment\">#a和b为数值类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'cheesezh'</span> <span class=\"comment\">#a和b为字符串类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">'cheesezh'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">#a和b为元组类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#a和b为list类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125; <span class=\"comment\">#a和b为dict类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'cheese'</span>:<span class=\"number\">1</span>,<span class=\"string\">'zh'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])<span class=\"comment\">#a和b为set类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Apr 21 2018 11:34:54 GMT+0800 (China Standard Time)","title":"Python3 is和==的区别","path":"2018/03/03/Python3-is和-的区别/","eyeCatchImage":null,"excerpt":"<h2 id=\"Python-对象三要素\"><a href=\"#Python-对象三要素\" class=\"headerlink\" title=\"Python 对象三要素\"></a>Python 对象三要素</h2><p>要理解Python中is和==的区别，首先要理解Python对象的三个要素:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">要素</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">获取方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">身份标识，基本就是内存地址，用来唯一标识一个对象</td>\n<td style=\"text-align:center\">id(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">数据类型</td>\n<td style=\"text-align:center\">type(obj)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">值</td>\n<td style=\"text-align:center\">:—–:</td>\n</tr>\n</tbody>\n</table>","date":"2018-03-03T04:16:34.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 nonlocal声明","date":"2018-03-06T06:58:07.000Z","_content":"前一节讲闭包时用到以下代码：\n```python\n# 示例2\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n```\n以上实现make_averager函数的方法效率不高。在如下示例中,我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总和以及元素个数，然后使用这两个值计算平均数。以下是实现方式，这种实现方式存在缺陷，只是为了引出`nonlocal声明`。\n<!-- more -->\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total/count\n\n    return averager\n\n```\n\n尝试使用以上定义的函数，得到如下结果：\n```python\n>>> avg = make_averager()\n>>> avg(10)\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n<ipython-input-42-ace390caaa2e> in <module>()\n----> 1 avg(10)\n\n<ipython-input-38-371a27b41829> in averager(new_value)\n      3     total = 0\n      4     def averager(new_value):\n----> 5         count += 1\n      6         total += new_value\n      7         return total/count\n\nUnboundLocalError: local variable 'count' referenced before assignment\n```\n\n问题是，当count是数字或任何不可变类型时，`count += 1`语句的作用其实与`count = count + 1`一样，因此我们在averager的定义体中为count赋值了，这样会把count变量变为局部变量，而不是自由变量。total变量也会受到这样的影响。\n\n示例2 中没有遇到这样的问题是因为我们没有给series赋值，我们只是调用`series.append`，并把它传给sum和len。也就是说，我们利用了列表是可变的对象这一事实。\n\n但是对数字和字符串、元组等不可变类型来说，只能读取，不能更新。如果尝试重新绑定，例如count += 1,其实会隐式的创建局部变量count。`这样count就不是自由变量了，也就不会保存在闭包中`。\n\n为了解决这个问题，python3引入了`nonlocal声明`。他的作用是把变量标记为自由变量，即使在函数中变量赋予新值，也会变成自由变量。如果为nonlocal声明的变量赋予新值，闭包中保存的绑定会更新。正确版的make_averager的正确实现如下：\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total/count\n\n    return averager\n\n```\n这样一来，上面的错误就没有了。\n","source":"_posts/Python3-nonlocal声明.md","raw":"---\ntitle: Python3 nonlocal声明\ndate: 2018-03-06 14:58:07\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 闭包\n---\n前一节讲闭包时用到以下代码：\n```python\n# 示例2\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n```\n以上实现make_averager函数的方法效率不高。在如下示例中,我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总和以及元素个数，然后使用这两个值计算平均数。以下是实现方式，这种实现方式存在缺陷，只是为了引出`nonlocal声明`。\n<!-- more -->\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total/count\n\n    return averager\n\n```\n\n尝试使用以上定义的函数，得到如下结果：\n```python\n>>> avg = make_averager()\n>>> avg(10)\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n<ipython-input-42-ace390caaa2e> in <module>()\n----> 1 avg(10)\n\n<ipython-input-38-371a27b41829> in averager(new_value)\n      3     total = 0\n      4     def averager(new_value):\n----> 5         count += 1\n      6         total += new_value\n      7         return total/count\n\nUnboundLocalError: local variable 'count' referenced before assignment\n```\n\n问题是，当count是数字或任何不可变类型时，`count += 1`语句的作用其实与`count = count + 1`一样，因此我们在averager的定义体中为count赋值了，这样会把count变量变为局部变量，而不是自由变量。total变量也会受到这样的影响。\n\n示例2 中没有遇到这样的问题是因为我们没有给series赋值，我们只是调用`series.append`，并把它传给sum和len。也就是说，我们利用了列表是可变的对象这一事实。\n\n但是对数字和字符串、元组等不可变类型来说，只能读取，不能更新。如果尝试重新绑定，例如count += 1,其实会隐式的创建局部变量count。`这样count就不是自由变量了，也就不会保存在闭包中`。\n\n为了解决这个问题，python3引入了`nonlocal声明`。他的作用是把变量标记为自由变量，即使在函数中变量赋予新值，也会变成自由变量。如果为nonlocal声明的变量赋予新值，闭包中保存的绑定会更新。正确版的make_averager的正确实现如下：\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total/count\n\n    return averager\n\n```\n这样一来，上面的错误就没有了。\n","slug":"Python3-nonlocal声明","published":1,"updated":"2018-03-06T07:23:38.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x660049exotncxqubyv","content":"<p>前一节讲闭包时用到以下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>以上实现make_averager函数的方法效率不高。在如下示例中,我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总和以及元素个数，然后使用这两个值计算平均数。以下是实现方式，这种实现方式存在缺陷，只是为了引出<code>nonlocal声明</code>。<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>尝试使用以上定义的函数，得到如下结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">UnboundLocalError                         Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-42</span>-ace390caaa2e&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 avg(10)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-38</span><span class=\"number\">-371</span>a27b41829&gt; <span class=\"keyword\">in</span> averager(new_value)</span><br><span class=\"line\">      <span class=\"number\">3</span>     total = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"number\">4</span>     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">----&gt; 5         count += 1</span><br><span class=\"line\">      <span class=\"number\">6</span>         total += new_value</span><br><span class=\"line\">      <span class=\"number\">7</span>         <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br></pre></td></tr></table></figure></p>\n<p>问题是，当count是数字或任何不可变类型时，<code>count += 1</code>语句的作用其实与<code>count = count + 1</code>一样，因此我们在averager的定义体中为count赋值了，这样会把count变量变为局部变量，而不是自由变量。total变量也会受到这样的影响。</p>\n<p>示例2 中没有遇到这样的问题是因为我们没有给series赋值，我们只是调用<code>series.append</code>，并把它传给sum和len。也就是说，我们利用了列表是可变的对象这一事实。</p>\n<p>但是对数字和字符串、元组等不可变类型来说，只能读取，不能更新。如果尝试重新绑定，例如count += 1,其实会隐式的创建局部变量count。<code>这样count就不是自由变量了，也就不会保存在闭包中</code>。</p>\n<p>为了解决这个问题，python3引入了<code>nonlocal声明</code>。他的作用是把变量标记为自由变量，即使在函数中变量赋予新值，也会变成自由变量。如果为nonlocal声明的变量赋予新值，闭包中保存的绑定会更新。正确版的make_averager的正确实现如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>这样一来，上面的错误就没有了。</p>\n","site":{"data":{}},"excerpt":"<p>前一节讲闭包时用到以下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>以上实现make_averager函数的方法效率不高。在如下示例中,我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总和以及元素个数，然后使用这两个值计算平均数。以下是实现方式，这种实现方式存在缺陷，只是为了引出<code>nonlocal声明</code>。<br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>尝试使用以上定义的函数，得到如下结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">UnboundLocalError                         Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-42</span>-ace390caaa2e&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 avg(10)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-38</span><span class=\"number\">-371</span>a27b41829&gt; <span class=\"keyword\">in</span> averager(new_value)</span><br><span class=\"line\">      <span class=\"number\">3</span>     total = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"number\">4</span>     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">----&gt; 5         count += 1</span><br><span class=\"line\">      <span class=\"number\">6</span>         total += new_value</span><br><span class=\"line\">      <span class=\"number\">7</span>         <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br></pre></td></tr></table></figure></p>\n<p>问题是，当count是数字或任何不可变类型时，<code>count += 1</code>语句的作用其实与<code>count = count + 1</code>一样，因此我们在averager的定义体中为count赋值了，这样会把count变量变为局部变量，而不是自由变量。total变量也会受到这样的影响。</p>\n<p>示例2 中没有遇到这样的问题是因为我们没有给series赋值，我们只是调用<code>series.append</code>，并把它传给sum和len。也就是说，我们利用了列表是可变的对象这一事实。</p>\n<p>但是对数字和字符串、元组等不可变类型来说，只能读取，不能更新。如果尝试重新绑定，例如count += 1,其实会隐式的创建局部变量count。<code>这样count就不是自由变量了，也就不会保存在闭包中</code>。</p>\n<p>为了解决这个问题，python3引入了<code>nonlocal声明</code>。他的作用是把变量标记为自由变量，即使在函数中变量赋予新值，也会变成自由变量。如果为nonlocal声明的变量赋予新值，闭包中保存的绑定会更新。正确版的make_averager的正确实现如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>这样一来，上面的错误就没有了。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 06 2018 15:23:38 GMT+0800 (China Standard Time)","title":"Python3 nonlocal声明","path":"2018/03/06/Python3-nonlocal声明/","eyeCatchImage":null,"excerpt":"<p>前一节讲闭包时用到以下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>以上实现make_averager函数的方法效率不高。在如下示例中,我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总和以及元素个数，然后使用这两个值计算平均数。以下是实现方式，这种实现方式存在缺陷，只是为了引出<code>nonlocal声明</code>。<br>","date":"2018-03-06T06:58:07.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 闭包","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python2.7.x与Python3.x差异","date":"2018-03-05T17:08:15.000Z","_content":"**Contents**\n\n1. [`__future__模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97)\n2. [`print函数`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0)\n3. [`整除`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4)\n4. [`Unicode`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode)\n5. [`xrange模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97)\n6. [`Python3中的range对象的__contains__方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95)\n7. [`Raising exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions)\n8. [`Handling exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions)\n9. [`next()函数 and .next()方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next()\n10. [`For循环变量和全局命名空间泄漏`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F)\n11. [`比较不可排序类型`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B)\n12. [`通过input()解析用户的输入`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input()\n13. [`返回可迭代对象，而不是列表`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8)\n14. [`更多的关于 Python 2 和 Python 3 的文章`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0)\n\n **参考：**\n 1. [Python2.x与Python3.x差异](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/)\n\n 2. [Key differences between Python 2.7.x and Python 3.x](http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb?create=1)\n","source":"_posts/Python2-7-x与Python3-x差异.md","raw":"---\ntitle: Python2.7.x与Python3.x差异\ndate: 2018-03-06 01:08:15\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n**Contents**\n\n1. [`__future__模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97)\n2. [`print函数`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0)\n3. [`整除`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4)\n4. [`Unicode`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode)\n5. [`xrange模块`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97)\n6. [`Python3中的range对象的__contains__方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95)\n7. [`Raising exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions)\n8. [`Handling exceptions`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions)\n9. [`next()函数 and .next()方法`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next()\n10. [`For循环变量和全局命名空间泄漏`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F)\n11. [`比较不可排序类型`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B)\n12. [`通过input()解析用户的输入`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input()\n13. [`返回可迭代对象，而不是列表`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8)\n14. [`更多的关于 Python 2 和 Python 3 的文章`](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0)\n\n **参考：**\n 1. [Python2.x与Python3.x差异](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/)\n\n 2. [Key differences between Python 2.7.x and Python 3.x](http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb?create=1)\n","slug":"Python2-7-x与Python3-x差异","published":1,"updated":"2018-03-06T17:20:06.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x69004eexothu6kbbo7","content":"<p><strong>Contents</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>__future__模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\"><code>print函数</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4\" target=\"_blank\" rel=\"noopener\"><code>整除</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode\" target=\"_blank\" rel=\"noopener\"><code>Unicode</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>xrange模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\"><code>Python3中的range对象的__contains__方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Raising exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Handling exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next(\" target=\"_blank\" rel=\"noopener\"><code>next()函数 and .next()方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F\" target=\"_blank\" rel=\"noopener\"><code>For循环变量和全局命名空间泄漏</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\"><code>比较不可排序类型</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input(\" target=\"_blank\" rel=\"noopener\"><code>通过input()解析用户的输入</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"noopener\"><code>返回可迭代对象，而不是列表</code></a></li>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0\" target=\"_blank\" rel=\"noopener\"><code>更多的关于 Python 2 和 Python 3 的文章</code></a></p>\n<p><strong>参考：</strong></p>\n<ol>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/\" target=\"_blank\" rel=\"noopener\">Python2.x与Python3.x差异</a></p>\n</li>\n<li><p><a href=\"http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb?create=1\" target=\"_blank\" rel=\"noopener\">Key differences between Python 2.7.x and Python 3.x</a></p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Contents</strong></p>\n<ol>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#__future__%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>__future__模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#print%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\"><code>print函数</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%95%B4%E9%99%A4\" target=\"_blank\" rel=\"noopener\"><code>整除</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Unicode\" target=\"_blank\" rel=\"noopener\"><code>Unicode</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#xrange%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\"><code>xrange模块</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Python3%E4%B8%AD%E7%9A%84range%E5%AF%B9%E8%B1%A1%E7%9A%84__contains__%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\"><code>Python3中的range对象的__contains__方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Raising_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Raising exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#Handling_exceptions\" target=\"_blank\" rel=\"noopener\"><code>Handling exceptions</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#next(\" target=\"_blank\" rel=\"noopener\"><code>next()函数 and .next()方法</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#For%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%84%E6%BC%8F\" target=\"_blank\" rel=\"noopener\"><code>For循环变量和全局命名空间泄漏</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener\"><code>比较不可排序类型</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E9%80%9A%E8%BF%87input(\" target=\"_blank\" rel=\"noopener\"><code>通过input()解析用户的输入</code></a></li>\n<li><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E8%BF%94%E5%9B%9E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"noopener\"><code>返回可迭代对象，而不是列表</code></a></li>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%85%B3%E4%BA%8E_Python_2_%E5%92%8C_Python_3_%E7%9A%84%E6%96%87%E7%AB%A0\" target=\"_blank\" rel=\"noopener\"><code>更多的关于 Python 2 和 Python 3 的文章</code></a></p>\n<p><strong>参考：</strong></p>\n<ol>\n<li><p><a href=\"http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/\" target=\"_blank\" rel=\"noopener\">Python2.x与Python3.x差异</a></p>\n</li>\n<li><p><a href=\"http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb?create=1\" target=\"_blank\" rel=\"noopener\">Key differences between Python 2.7.x and Python 3.x</a></p>\n</li>\n</ol>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 01:20:06 GMT+0800 (China Standard Time)","title":"Python2.7.x与Python3.x差异","path":"2018/03/06/Python2-7-x与Python3-x差异/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-05T17:08:15.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 os和sys模块的作用，以及常用的模块方法","date":"2018-03-12T08:43:03.000Z","_content":"官方解释：\n> os： This module provides a portable way of using operating system dependent functionality.\n\n翻译：提供一种方便的使用`操作系统函数`的方法。\n\n> sys：This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.\n\n翻译：提供访问由`解释器`使用或维护的变量和在与`解释器交互`使用到的函数。\n\n<!-- more -->\n\n## os 常用方法\n```Python\nos.remove()  # 删除文件  \nos.rename()  # 重命名文件  \nos.walk()  # 生成目录树下的所有文件名  \nos.chdir()  # 改变目录  \nos.mkdir/makedirs  # 创建目录/多层目录  \nos.rmdir/removedirs  # 删除目录/多层目录  \nos.listdir()  # 列出指定目录的文件  \nos.getcwd()  # 取得当前工作目录  \nos.chmod()  # 改变目录权限  \nos.path.basename()  # 去掉目录路径，返回文件名  \nos.path.dirname()  # 去掉文件名，返回目录路径  \nos.path.join()  # 将分离的各部分组合成一个路径名  \nos.path.split()  # 返回（dirname(),basename())元组  \nos.path.splitext()  # 返回(filename,extension)元组  \nos.path.getatime|ctime|mtime   # 分别返回最近访问、创建、修改时间  \nos.path.getsize()  # 返回文件大小  \nos.path.exists()  # 是否存在  \nos.path.isabs()  # 是否为绝对路径  \nos.path.isdir()  # 是否为目录  \nos.path.isfile()  # 是否为文件  \n\n```\n## sys 常用方法\n```Python\nsys.argv           # 命令行参数List，第一个元素是程序本身路径    \nsys.modules.keys() # 返回所有已经导入的模块列表    \nsys.exc_info()     # 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息    \nsys.exit(n)        # 退出程序，正常退出时exit(0)    \nsys.hexversion     # 获取Python解释程序的版本值，16进制格式如：0x020403F0    \nsys.version        # 获取Python解释程序的版本信息    \nsys.maxint         # 最大的Int值    \nsys.maxunicode     # 最大的Unicode值    \nsys.modules        # 返回系统导入的模块字段，key是模块名，value是模块    \nsys.path           # 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值    \nsys.platform       # 返回操作系统平台名称    \nsys.stdout         # 标准输出   \nsys.stdin          # 标准输入   \nsys.stderr         # 错误输出   \nsys.exc_clear()    # 用来清除当前线程所出现的当前的或最近的错误信息   \nsys.exec_prefix    # 返回平台独立的python文件安装的位置   \nsys.byteorder      # 本地字节规则的指示器，big-endian平台的值是'big',little-endian平台的值是'little'   \nsys.copyright      # 记录python版权相关的东西   \nsys.api_version    # 解释器的C的API版本   \nsys.version_info\n```\n","source":"_posts/Python3-os和sys模块的作用，以及常用的模块方法.md","raw":"---\ntitle: Python3 os和sys模块的作用，以及常用的模块方法\ndate: 2018-03-12 16:43:03\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n官方解释：\n> os： This module provides a portable way of using operating system dependent functionality.\n\n翻译：提供一种方便的使用`操作系统函数`的方法。\n\n> sys：This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.\n\n翻译：提供访问由`解释器`使用或维护的变量和在与`解释器交互`使用到的函数。\n\n<!-- more -->\n\n## os 常用方法\n```Python\nos.remove()  # 删除文件  \nos.rename()  # 重命名文件  \nos.walk()  # 生成目录树下的所有文件名  \nos.chdir()  # 改变目录  \nos.mkdir/makedirs  # 创建目录/多层目录  \nos.rmdir/removedirs  # 删除目录/多层目录  \nos.listdir()  # 列出指定目录的文件  \nos.getcwd()  # 取得当前工作目录  \nos.chmod()  # 改变目录权限  \nos.path.basename()  # 去掉目录路径，返回文件名  \nos.path.dirname()  # 去掉文件名，返回目录路径  \nos.path.join()  # 将分离的各部分组合成一个路径名  \nos.path.split()  # 返回（dirname(),basename())元组  \nos.path.splitext()  # 返回(filename,extension)元组  \nos.path.getatime|ctime|mtime   # 分别返回最近访问、创建、修改时间  \nos.path.getsize()  # 返回文件大小  \nos.path.exists()  # 是否存在  \nos.path.isabs()  # 是否为绝对路径  \nos.path.isdir()  # 是否为目录  \nos.path.isfile()  # 是否为文件  \n\n```\n## sys 常用方法\n```Python\nsys.argv           # 命令行参数List，第一个元素是程序本身路径    \nsys.modules.keys() # 返回所有已经导入的模块列表    \nsys.exc_info()     # 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息    \nsys.exit(n)        # 退出程序，正常退出时exit(0)    \nsys.hexversion     # 获取Python解释程序的版本值，16进制格式如：0x020403F0    \nsys.version        # 获取Python解释程序的版本信息    \nsys.maxint         # 最大的Int值    \nsys.maxunicode     # 最大的Unicode值    \nsys.modules        # 返回系统导入的模块字段，key是模块名，value是模块    \nsys.path           # 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值    \nsys.platform       # 返回操作系统平台名称    \nsys.stdout         # 标准输出   \nsys.stdin          # 标准输入   \nsys.stderr         # 错误输出   \nsys.exc_clear()    # 用来清除当前线程所出现的当前的或最近的错误信息   \nsys.exec_prefix    # 返回平台独立的python文件安装的位置   \nsys.byteorder      # 本地字节规则的指示器，big-endian平台的值是'big',little-endian平台的值是'little'   \nsys.copyright      # 记录python版权相关的东西   \nsys.api_version    # 解释器的C的API版本   \nsys.version_info\n```\n","slug":"Python3-os和sys模块的作用，以及常用的模块方法","published":1,"updated":"2018-03-12T08:49:03.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6b004hexotjw0qlokp","content":"<p>官方解释：</p>\n<blockquote>\n<p>os： This module provides a portable way of using operating system dependent functionality.</p>\n</blockquote>\n<p>翻译：提供一种方便的使用<code>操作系统函数</code>的方法。</p>\n<blockquote>\n<p>sys：This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.</p>\n</blockquote>\n<p>翻译：提供访问由<code>解释器</code>使用或维护的变量和在与<code>解释器交互</code>使用到的函数。</p>\n<a id=\"more\"></a>\n<h2 id=\"os-常用方法\"><a href=\"#os-常用方法\" class=\"headerlink\" title=\"os 常用方法\"></a>os 常用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.remove()  <span class=\"comment\"># 删除文件  </span></span><br><span class=\"line\">os.rename()  <span class=\"comment\"># 重命名文件  </span></span><br><span class=\"line\">os.walk()  <span class=\"comment\"># 生成目录树下的所有文件名  </span></span><br><span class=\"line\">os.chdir()  <span class=\"comment\"># 改变目录  </span></span><br><span class=\"line\">os.mkdir/makedirs  <span class=\"comment\"># 创建目录/多层目录  </span></span><br><span class=\"line\">os.rmdir/removedirs  <span class=\"comment\"># 删除目录/多层目录  </span></span><br><span class=\"line\">os.listdir()  <span class=\"comment\"># 列出指定目录的文件  </span></span><br><span class=\"line\">os.getcwd()  <span class=\"comment\"># 取得当前工作目录  </span></span><br><span class=\"line\">os.chmod()  <span class=\"comment\"># 改变目录权限  </span></span><br><span class=\"line\">os.path.basename()  <span class=\"comment\"># 去掉目录路径，返回文件名  </span></span><br><span class=\"line\">os.path.dirname()  <span class=\"comment\"># 去掉文件名，返回目录路径  </span></span><br><span class=\"line\">os.path.join()  <span class=\"comment\"># 将分离的各部分组合成一个路径名  </span></span><br><span class=\"line\">os.path.split()  <span class=\"comment\"># 返回（dirname(),basename())元组  </span></span><br><span class=\"line\">os.path.splitext()  <span class=\"comment\"># 返回(filename,extension)元组  </span></span><br><span class=\"line\">os.path.getatime|ctime|mtime   <span class=\"comment\"># 分别返回最近访问、创建、修改时间  </span></span><br><span class=\"line\">os.path.getsize()  <span class=\"comment\"># 返回文件大小  </span></span><br><span class=\"line\">os.path.exists()  <span class=\"comment\"># 是否存在  </span></span><br><span class=\"line\">os.path.isabs()  <span class=\"comment\"># 是否为绝对路径  </span></span><br><span class=\"line\">os.path.isdir()  <span class=\"comment\"># 是否为目录  </span></span><br><span class=\"line\">os.path.isfile()  <span class=\"comment\"># 是否为文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"sys-常用方法\"><a href=\"#sys-常用方法\" class=\"headerlink\" title=\"sys 常用方法\"></a>sys 常用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.argv           <span class=\"comment\"># 命令行参数List，第一个元素是程序本身路径    </span></span><br><span class=\"line\">sys.modules.keys() <span class=\"comment\"># 返回所有已经导入的模块列表    </span></span><br><span class=\"line\">sys.exc_info()     <span class=\"comment\"># 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息    </span></span><br><span class=\"line\">sys.exit(n)        <span class=\"comment\"># 退出程序，正常退出时exit(0)    </span></span><br><span class=\"line\">sys.hexversion     <span class=\"comment\"># 获取Python解释程序的版本值，16进制格式如：0x020403F0    </span></span><br><span class=\"line\">sys.version        <span class=\"comment\"># 获取Python解释程序的版本信息    </span></span><br><span class=\"line\">sys.maxint         <span class=\"comment\"># 最大的Int值    </span></span><br><span class=\"line\">sys.maxunicode     <span class=\"comment\"># 最大的Unicode值    </span></span><br><span class=\"line\">sys.modules        <span class=\"comment\"># 返回系统导入的模块字段，key是模块名，value是模块    </span></span><br><span class=\"line\">sys.path           <span class=\"comment\"># 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值    </span></span><br><span class=\"line\">sys.platform       <span class=\"comment\"># 返回操作系统平台名称    </span></span><br><span class=\"line\">sys.stdout         <span class=\"comment\"># 标准输出   </span></span><br><span class=\"line\">sys.stdin          <span class=\"comment\"># 标准输入   </span></span><br><span class=\"line\">sys.stderr         <span class=\"comment\"># 错误输出   </span></span><br><span class=\"line\">sys.exc_clear()    <span class=\"comment\"># 用来清除当前线程所出现的当前的或最近的错误信息   </span></span><br><span class=\"line\">sys.exec_prefix    <span class=\"comment\"># 返回平台独立的python文件安装的位置   </span></span><br><span class=\"line\">sys.byteorder      <span class=\"comment\"># 本地字节规则的指示器，big-endian平台的值是'big',little-endian平台的值是'little'   </span></span><br><span class=\"line\">sys.copyright      <span class=\"comment\"># 记录python版权相关的东西   </span></span><br><span class=\"line\">sys.api_version    <span class=\"comment\"># 解释器的C的API版本   </span></span><br><span class=\"line\">sys.version_info</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>官方解释：</p>\n<blockquote>\n<p>os： This module provides a portable way of using operating system dependent functionality.</p>\n</blockquote>\n<p>翻译：提供一种方便的使用<code>操作系统函数</code>的方法。</p>\n<blockquote>\n<p>sys：This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.</p>\n</blockquote>\n<p>翻译：提供访问由<code>解释器</code>使用或维护的变量和在与<code>解释器交互</code>使用到的函数。</p>","more":"<h2 id=\"os-常用方法\"><a href=\"#os-常用方法\" class=\"headerlink\" title=\"os 常用方法\"></a>os 常用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.remove()  <span class=\"comment\"># 删除文件  </span></span><br><span class=\"line\">os.rename()  <span class=\"comment\"># 重命名文件  </span></span><br><span class=\"line\">os.walk()  <span class=\"comment\"># 生成目录树下的所有文件名  </span></span><br><span class=\"line\">os.chdir()  <span class=\"comment\"># 改变目录  </span></span><br><span class=\"line\">os.mkdir/makedirs  <span class=\"comment\"># 创建目录/多层目录  </span></span><br><span class=\"line\">os.rmdir/removedirs  <span class=\"comment\"># 删除目录/多层目录  </span></span><br><span class=\"line\">os.listdir()  <span class=\"comment\"># 列出指定目录的文件  </span></span><br><span class=\"line\">os.getcwd()  <span class=\"comment\"># 取得当前工作目录  </span></span><br><span class=\"line\">os.chmod()  <span class=\"comment\"># 改变目录权限  </span></span><br><span class=\"line\">os.path.basename()  <span class=\"comment\"># 去掉目录路径，返回文件名  </span></span><br><span class=\"line\">os.path.dirname()  <span class=\"comment\"># 去掉文件名，返回目录路径  </span></span><br><span class=\"line\">os.path.join()  <span class=\"comment\"># 将分离的各部分组合成一个路径名  </span></span><br><span class=\"line\">os.path.split()  <span class=\"comment\"># 返回（dirname(),basename())元组  </span></span><br><span class=\"line\">os.path.splitext()  <span class=\"comment\"># 返回(filename,extension)元组  </span></span><br><span class=\"line\">os.path.getatime|ctime|mtime   <span class=\"comment\"># 分别返回最近访问、创建、修改时间  </span></span><br><span class=\"line\">os.path.getsize()  <span class=\"comment\"># 返回文件大小  </span></span><br><span class=\"line\">os.path.exists()  <span class=\"comment\"># 是否存在  </span></span><br><span class=\"line\">os.path.isabs()  <span class=\"comment\"># 是否为绝对路径  </span></span><br><span class=\"line\">os.path.isdir()  <span class=\"comment\"># 是否为目录  </span></span><br><span class=\"line\">os.path.isfile()  <span class=\"comment\"># 是否为文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"sys-常用方法\"><a href=\"#sys-常用方法\" class=\"headerlink\" title=\"sys 常用方法\"></a>sys 常用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.argv           <span class=\"comment\"># 命令行参数List，第一个元素是程序本身路径    </span></span><br><span class=\"line\">sys.modules.keys() <span class=\"comment\"># 返回所有已经导入的模块列表    </span></span><br><span class=\"line\">sys.exc_info()     <span class=\"comment\"># 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息    </span></span><br><span class=\"line\">sys.exit(n)        <span class=\"comment\"># 退出程序，正常退出时exit(0)    </span></span><br><span class=\"line\">sys.hexversion     <span class=\"comment\"># 获取Python解释程序的版本值，16进制格式如：0x020403F0    </span></span><br><span class=\"line\">sys.version        <span class=\"comment\"># 获取Python解释程序的版本信息    </span></span><br><span class=\"line\">sys.maxint         <span class=\"comment\"># 最大的Int值    </span></span><br><span class=\"line\">sys.maxunicode     <span class=\"comment\"># 最大的Unicode值    </span></span><br><span class=\"line\">sys.modules        <span class=\"comment\"># 返回系统导入的模块字段，key是模块名，value是模块    </span></span><br><span class=\"line\">sys.path           <span class=\"comment\"># 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值    </span></span><br><span class=\"line\">sys.platform       <span class=\"comment\"># 返回操作系统平台名称    </span></span><br><span class=\"line\">sys.stdout         <span class=\"comment\"># 标准输出   </span></span><br><span class=\"line\">sys.stdin          <span class=\"comment\"># 标准输入   </span></span><br><span class=\"line\">sys.stderr         <span class=\"comment\"># 错误输出   </span></span><br><span class=\"line\">sys.exc_clear()    <span class=\"comment\"># 用来清除当前线程所出现的当前的或最近的错误信息   </span></span><br><span class=\"line\">sys.exec_prefix    <span class=\"comment\"># 返回平台独立的python文件安装的位置   </span></span><br><span class=\"line\">sys.byteorder      <span class=\"comment\"># 本地字节规则的指示器，big-endian平台的值是'big',little-endian平台的值是'little'   </span></span><br><span class=\"line\">sys.copyright      <span class=\"comment\"># 记录python版权相关的东西   </span></span><br><span class=\"line\">sys.api_version    <span class=\"comment\"># 解释器的C的API版本   </span></span><br><span class=\"line\">sys.version_info</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 12 2018 16:49:03 GMT+0800 (China Standard Time)","title":"Python3 os和sys模块的作用，以及常用的模块方法","path":"2018/03/12/Python3-os和sys模块的作用，以及常用的模块方法/","eyeCatchImage":null,"excerpt":"<p>官方解释：</p>\n<blockquote>\n<p>os： This module provides a portable way of using operating system dependent functionality.</p>\n</blockquote>\n<p>翻译：提供一种方便的使用<code>操作系统函数</code>的方法。</p>\n<blockquote>\n<p>sys：This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.</p>\n</blockquote>\n<p>翻译：提供访问由<code>解释器</code>使用或维护的变量和在与<code>解释器交互</code>使用到的函数。</p>","date":"2018-03-12T08:43:03.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 @staticmethod和@classmethod","date":"2018-02-28T18:01:19.000Z","_content":"\nPython其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:\n\n```python\ndef foo(x):\n    print \"executing foo(%s)\"%(x)\n\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x\n\na=A()\n\n```\n<!-- more -->\n这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用`foo(x)`,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。\n对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是`foo(self, x)`,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的`a.foo(x)`(其实是`foo(a, x)`)。\n类方法一样,只不过它传递的是`类`而不是实例,`A.class_foo(x)`。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。\n\n对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用`a.static_foo(x)`或者`A.static_foo(x)`来调用.\n\n| \\\\      | 实例方法     | 类方法            | 静态方法            |\n| :------ | :------- | :------------- | :-------------- |\n| a = A() | a.foo(x) | a.class_foo(x) | a.static_foo(x) |\n| A       | 不可用      | A.class_foo(x) | A.static_foo(x) |\n\n更多关于这个问题:\n1. http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\n2. https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\n","source":"_posts/Python3-staticmethod和-classmethod.md","raw":"---\ntitle: Python3 @staticmethod和@classmethod\ndate: 2018-03-01 02:01:19\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Staticmethod & Classmethod\n---\n\nPython其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:\n\n```python\ndef foo(x):\n    print \"executing foo(%s)\"%(x)\n\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x\n\na=A()\n\n```\n<!-- more -->\n这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用`foo(x)`,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。\n对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是`foo(self, x)`,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的`a.foo(x)`(其实是`foo(a, x)`)。\n类方法一样,只不过它传递的是`类`而不是实例,`A.class_foo(x)`。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。\n\n对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用`a.static_foo(x)`或者`A.static_foo(x)`来调用.\n\n| \\\\      | 实例方法     | 类方法            | 静态方法            |\n| :------ | :------- | :------------- | :-------------- |\n| a = A() | a.foo(x) | a.class_foo(x) | a.static_foo(x) |\n| A       | 不可用      | A.class_foo(x) | A.static_foo(x) |\n\n更多关于这个问题:\n1. http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\n2. https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\n","slug":"Python3-staticmethod和-classmethod","published":1,"updated":"2018-03-01T06:36:20.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6i004mexot6y866fur","content":"<p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s)\"</span>%(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x</span><br><span class=\"line\"></span><br><span class=\"line\">a=A()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。<br>对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>)。<br>类方法一样,只不过它传递的是<code>类</code>而不是实例,<code>A.class_foo(x)</code>。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。</p>\n<p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">\\</th>\n<th style=\"text-align:left\">实例方法</th>\n<th style=\"text-align:left\">类方法</th>\n<th style=\"text-align:left\">静态方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = A()</td>\n<td style=\"text-align:left\">a.foo(x)</td>\n<td style=\"text-align:left\">a.class_foo(x)</td>\n<td style=\"text-align:left\">a.static_foo(x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td style=\"text-align:left\">不可用</td>\n<td style=\"text-align:left\">A.class_foo(x)</td>\n<td style=\"text-align:left\">A.static_foo(x)</td>\n</tr>\n</tbody>\n</table>\n<p>更多关于这个问题:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li>\n<li><a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\" target=\"_blank\" rel=\"noopener\">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s)\"</span>%(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x</span><br><span class=\"line\"></span><br><span class=\"line\">a=A()</span><br></pre></td></tr></table></figure>","more":"<p>这里先理解下函数参数里面的self和cls。这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关。<br>对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>)。<br>类方法一样,只不过它传递的是<code>类</code>而不是实例,<code>A.class_foo(x)</code>。注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好。</p>\n<p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">\\</th>\n<th style=\"text-align:left\">实例方法</th>\n<th style=\"text-align:left\">类方法</th>\n<th style=\"text-align:left\">静态方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a = A()</td>\n<td style=\"text-align:left\">a.foo(x)</td>\n<td style=\"text-align:left\">a.class_foo(x)</td>\n<td style=\"text-align:left\">a.static_foo(x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td style=\"text-align:left\">不可用</td>\n<td style=\"text-align:left\">A.class_foo(x)</td>\n<td style=\"text-align:left\">A.static_foo(x)</td>\n</tr>\n</tbody>\n</table>\n<p>更多关于这个问题:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li>\n<li><a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\" target=\"_blank\" rel=\"noopener\">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 01 2018 14:36:20 GMT+0800 (China Standard Time)","title":"Python3 @staticmethod和@classmethod","path":"2018/03/01/Python3-staticmethod和-classmethod/","eyeCatchImage":null,"excerpt":"<p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s)\"</span>%(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x</span><br><span class=\"line\"></span><br><span class=\"line\">a=A()</span><br></pre></td></tr></table></figure>","date":"2018-02-28T18:01:19.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Staticmethod & Classmethod","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 作用域","date":"2018-03-03T03:48:30.000Z","_content":"Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。\n\nPython 获取变量中的值的搜索顺序为：\n\n本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）\n","source":"_posts/Python3-作用域.md","raw":"---\ntitle: Python3 作用域\ndate: 2018-03-03 11:48:30\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 作用域\n---\nPython 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。\n\nPython 获取变量中的值的搜索顺序为：\n\n本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）\n","slug":"Python3-作用域","published":1,"updated":"2018-03-03T03:56:30.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6m004pexota5p3ge4i","content":"<p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p>\n<p>Python 获取变量中的值的搜索顺序为：</p>\n<p>本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p>\n<p>Python 获取变量中的值的搜索顺序为：</p>\n<p>本地作用域（Local）→ 当前作用域被嵌入的本地作用域（Enclosing locals）→ 全局/模块作用域（Global）→内置作用域（Built-in）</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 11:56:30 GMT+0800 (China Standard Time)","title":"Python3 作用域","path":"2018/03/03/Python3-作用域/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-03T03:48:30.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 作用域","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 使用virtualenv搭建虚拟环境","date":"2018-03-03T05:28:31.000Z","_content":"\n在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。\n\nPython虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。\n<!-- more -->\n#### 1.虚拟环境安装\n\n在终端中执行命令：\n```bash\n$ pip install virtualenv\n```\n#### 2.虚拟环境使用  \n\n\n假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：\n```bash\n$ cd   [项目所在目录]\n$ virtualenv venv\n```\n该命令执行后，将在当前目录下建立一个venv目录，**该目录拷贝一份完整的当前系统的Python环境**；\n\n我么也可以执行\n```bash\n$ virtualenv --no-site-packages venv\n```\n这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。\n\n有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：\n```bash\n$ source venv/bin/activate[.fish|.zsh]\n```\n注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。\n\n退出当前的venv环境，使用deactivate命令：\n```bash\n$ deactivate\n```\n此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n#### 3.注意\n\n为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。\n\n最后附上[Virtualenv的官方文档](https://virtualenv.pypa.io/en/stable/)\n","source":"_posts/Python3-使用virtualenv搭建虚拟环境.md","raw":"---\ntitle: Python3 使用virtualenv搭建虚拟环境\ndate: 2018-03-03 13:28:31\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 virtualenv\n---\n\n在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。\n\nPython虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。\n<!-- more -->\n#### 1.虚拟环境安装\n\n在终端中执行命令：\n```bash\n$ pip install virtualenv\n```\n#### 2.虚拟环境使用  \n\n\n假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：\n```bash\n$ cd   [项目所在目录]\n$ virtualenv venv\n```\n该命令执行后，将在当前目录下建立一个venv目录，**该目录拷贝一份完整的当前系统的Python环境**；\n\n我么也可以执行\n```bash\n$ virtualenv --no-site-packages venv\n```\n这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。\n\n有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：\n```bash\n$ source venv/bin/activate[.fish|.zsh]\n```\n注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。\n\n退出当前的venv环境，使用deactivate命令：\n```bash\n$ deactivate\n```\n此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n#### 3.注意\n\n为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。\n\n最后附上[Virtualenv的官方文档](https://virtualenv.pypa.io/en/stable/)\n","slug":"Python3-使用virtualenv搭建虚拟环境","published":1,"updated":"2018-03-03T05:32:43.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6s004uexotwg1nlqfr","content":"<p>在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。</p>\n<p>Python虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。<br><a id=\"more\"></a></p>\n<h4 id=\"1-虚拟环境安装\"><a href=\"#1-虚拟环境安装\" class=\"headerlink\" title=\"1.虚拟环境安装\"></a>1.虚拟环境安装</h4><p>在终端中执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-虚拟环境使用\"><a href=\"#2-虚拟环境使用\" class=\"headerlink\" title=\"2.虚拟环境使用\"></a>2.虚拟环境使用</h4><p>假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span>   [项目所在目录]</span><br><span class=\"line\">$ virtualenv venv</span><br></pre></td></tr></table></figure></p>\n<p>该命令执行后，将在当前目录下建立一个venv目录，<strong>该目录拷贝一份完整的当前系统的Python环境</strong>；</p>\n<p>我么也可以执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure></p>\n<p>这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。</p>\n<p>有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate[.fish|.zsh]</span><br></pre></td></tr></table></figure></p>\n<p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。</p>\n<p>退出当前的venv环境，使用deactivate命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure></p>\n<p>此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><p>为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。</p>\n<p>最后附上<a href=\"https://virtualenv.pypa.io/en/stable/\" target=\"_blank\" rel=\"noopener\">Virtualenv的官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。</p>\n<p>Python虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。<br>","more":"</p>\n<h4 id=\"1-虚拟环境安装\"><a href=\"#1-虚拟环境安装\" class=\"headerlink\" title=\"1.虚拟环境安装\"></a>1.虚拟环境安装</h4><p>在终端中执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-虚拟环境使用\"><a href=\"#2-虚拟环境使用\" class=\"headerlink\" title=\"2.虚拟环境使用\"></a>2.虚拟环境使用</h4><p>假定我们要开发一个新的项目，需要一套独立的Python运行环境，或者为已有的项目建立虚拟环境，终端执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span>   [项目所在目录]</span><br><span class=\"line\">$ virtualenv venv</span><br></pre></td></tr></table></figure></p>\n<p>该命令执行后，将在当前目录下建立一个venv目录，<strong>该目录拷贝一份完整的当前系统的Python环境</strong>；</p>\n<p>我么也可以执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure></p>\n<p>这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。新建的Python环境被放到当前目录下的venv目录。</p>\n<p>有了venv这个Python环境，可以用source进入该环境（注意是在cd之后的目录）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate[.fish|.zsh]</span><br></pre></td></tr></table></figure></p>\n<p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。在venv环境下，用pip安装的包都被安装到venv/lib目录，而不会影响系统的Python环境。</p>\n<p>退出当前的venv环境，使用deactivate命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ deactivate</span><br></pre></td></tr></table></figure></p>\n<p>此时回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><p>为保证项目之间的独立性，建议所有使用pip安装的组件都在项目虚拟环境中进行，避免不同版本的冲突。</p>\n<p>最后附上<a href=\"https://virtualenv.pypa.io/en/stable/\" target=\"_blank\" rel=\"noopener\">Virtualenv的官方文档</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 13:32:43 GMT+0800 (China Standard Time)","title":"Python3 使用virtualenv搭建虚拟环境","path":"2018/03/03/Python3-使用virtualenv搭建虚拟环境/","eyeCatchImage":null,"excerpt":"<p>在使用Python进行多个项目开发时，每个项目可能会需要安装不同的组件。把这些组件安装在同一台计算机下可能会导致组件之间的相互冲突，比如项目A使用Django 1.10，而项目B使用Django 1.8，那么同时安装两个版本可能在具体使用时产生冲突。使用虚拟环境可以有效避免这样的问题。</p>\n<p>Python虚拟环境是一套由Ian Bicking编写的管理独立Python运行环境的系统。这样，开发者可以让每个项目运行在独立的虚拟环境中，从而避免了不同项目之间组件配置的冲突。<br>","date":"2018-03-03T05:28:31.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 virtualenv","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IP地址的分类","date":"2018-11-07T11:43:34.000Z","_content":"IP地址分类（A类 B类 C类 D类 E类）\n\nIP地址由两部分组成，即`网络地址`和`主机地址`。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。\n\nIP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。\n\n\nIP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    `全0和全1的都保留不用`。\n\n- A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）\n\n     第一个字节为网络号，后三个字节为主机号。`该类IP地址的最前面为“0”`，所以地址的网络号取值于1~126之间。\n\n     一般用于大型网络。\n\n- B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）\n\n     前两个字节为网络号，后两个字节为主机号。`该类IP地址的最前面为“10”`，所以地址的网络号取值于128~191之间。\n\n     一般用于中等规模网络。\n\n- C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）\n\n     前三个字节为网络号，最后一个字节为主机号。`该类IP地址的最前面为“110”`，所以地址的网络号取值于192~223之间。\n\n     一般用于小型网络。\n\n- D类：是`多播地址`。`该类IP地址的最前面为“1110”`，所以地址的网络号取值于224~239之间。一般用于多路广播用户。\n\n- E类：是`保留地址`。`该类IP地址的最前面为“1111”`，所以地址的网络号取值于240~255之间。\n\n\n回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 \n\n一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。\n","source":"_posts/IP地址的分类.md","raw":"---\ntitle: IP地址的分类\ndate: 2018-11-07 19:43:34\ntags:\n  - 网络\ncategories:\n  - 网络\n---\nIP地址分类（A类 B类 C类 D类 E类）\n\nIP地址由两部分组成，即`网络地址`和`主机地址`。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。\n\nIP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。\n\n\nIP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    `全0和全1的都保留不用`。\n\n- A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）\n\n     第一个字节为网络号，后三个字节为主机号。`该类IP地址的最前面为“0”`，所以地址的网络号取值于1~126之间。\n\n     一般用于大型网络。\n\n- B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）\n\n     前两个字节为网络号，后两个字节为主机号。`该类IP地址的最前面为“10”`，所以地址的网络号取值于128~191之间。\n\n     一般用于中等规模网络。\n\n- C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）\n\n     前三个字节为网络号，最后一个字节为主机号。`该类IP地址的最前面为“110”`，所以地址的网络号取值于192~223之间。\n\n     一般用于小型网络。\n\n- D类：是`多播地址`。`该类IP地址的最前面为“1110”`，所以地址的网络号取值于224~239之间。一般用于多路广播用户。\n\n- E类：是`保留地址`。`该类IP地址的最前面为“1111”`，所以地址的网络号取值于240~255之间。\n\n\n回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 \n\n一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。\n","slug":"IP地址的分类","published":1,"updated":"2018-11-07T12:10:20.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6v004xexotc93k01cu","content":"<p>IP地址分类（A类 B类 C类 D类 E类）</p>\n<p>IP地址由两部分组成，即<code>网络地址</code>和<code>主机地址</code>。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。</p>\n<p>IP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。</p>\n<p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    <code>全0和全1的都保留不用</code>。</p>\n<ul>\n<li><p>A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）</p>\n<p>   第一个字节为网络号，后三个字节为主机号。<code>该类IP地址的最前面为“0”</code>，所以地址的网络号取值于1~126之间。</p>\n<p>   一般用于大型网络。</p>\n</li>\n<li><p>B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）</p>\n<p>   前两个字节为网络号，后两个字节为主机号。<code>该类IP地址的最前面为“10”</code>，所以地址的网络号取值于128~191之间。</p>\n<p>   一般用于中等规模网络。</p>\n</li>\n<li><p>C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）</p>\n<p>   前三个字节为网络号，最后一个字节为主机号。<code>该类IP地址的最前面为“110”</code>，所以地址的网络号取值于192~223之间。</p>\n<p>   一般用于小型网络。</p>\n</li>\n<li><p>D类：是<code>多播地址</code>。<code>该类IP地址的最前面为“1110”</code>，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p>\n</li>\n<li><p>E类：是<code>保留地址</code>。<code>该类IP地址的最前面为“1111”</code>，所以地址的网络号取值于240~255之间。</p>\n</li>\n</ul>\n<p>回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 </p>\n<p>一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>IP地址分类（A类 B类 C类 D类 E类）</p>\n<p>IP地址由两部分组成，即<code>网络地址</code>和<code>主机地址</code>。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。</p>\n<p>IP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。</p>\n<p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    <code>全0和全1的都保留不用</code>。</p>\n<ul>\n<li><p>A类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0或 0xFF000000）</p>\n<p>   第一个字节为网络号，后三个字节为主机号。<code>该类IP地址的最前面为“0”</code>，所以地址的网络号取值于1~126之间。</p>\n<p>   一般用于大型网络。</p>\n</li>\n<li><p>B类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0或0xFFFF0000）</p>\n<p>   前两个字节为网络号，后两个字节为主机号。<code>该类IP地址的最前面为“10”</code>，所以地址的网络号取值于128~191之间。</p>\n<p>   一般用于中等规模网络。</p>\n</li>\n<li><p>C类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0或 0xFFFFFF00）</p>\n<p>   前三个字节为网络号，最后一个字节为主机号。<code>该类IP地址的最前面为“110”</code>，所以地址的网络号取值于192~223之间。</p>\n<p>   一般用于小型网络。</p>\n</li>\n<li><p>D类：是<code>多播地址</code>。<code>该类IP地址的最前面为“1110”</code>，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p>\n</li>\n<li><p>E类：是<code>保留地址</code>。<code>该类IP地址的最前面为“1111”</code>，所以地址的网络号取值于240~255之间。</p>\n</li>\n</ul>\n<p>回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。 </p>\n<p>一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Nov 07 2018 20:10:20 GMT+0800 (China Standard Time)","title":"IP地址的分类","path":"2018/11/07/IP地址的分类/","eyeCatchImage":null,"excerpt":null,"date":"2018-11-07T11:43:34.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 使用Selenium&PhantomJS爬火影忍者漫画","date":"2018-02-27T06:16:38.000Z","_content":"\n近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。\n\nSelenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。\n\n<!--more-->\n\n## 爬虫使用到的模块\n```Python\nfrom selenium import webdriver\nfrom myLogging import MyLogging\nimport os\nimport time\nimport re\n```\n\nmyLogging模块是自己配置的日志包，想要的可以点击**_[这里](http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS)_**自己看\n\n爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。\n\n## 爬取图片思路：\n\n  * 已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下\n  * 采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用**requests.get(comicUrl).content**方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 **get_screenshot_as_file()** 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：\n  ![对比](http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  * 找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。\n  * 在新网页的基础上保存图片，设置循环如此反复。\n\n爬取网页的URL为：[爬取火影漫画第一话](http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm)\n\n## 代码\n\n```Python\nclass DownloadPics(object):\n\n    def __init__(self, url):\n        self.url = url\n        self.log = MyLogging()\n        self.browser = self.get_browser()\n        self.save_pics(self.browser)\n\n    def get_browser(self):\n        browser = webdriver.PhantomJS()\n        try:\n            browser.get(self.url)\n        except:\n            MyLogging.error('open the url %s failed' % self.url)\n        browser.implicitly_wait(20)\n        return browser\n\n    def save_pics(self, browser):\n        pics_title = browser.title.split('_')[0]\n        self.create_dir(pics_title)\n        os.chdir(pics_title)\n        sum_page = self.find_total_page_num(browser)\n        i = 1\n        while i < sum_page:\n            image_name = str(i) + '.png'\n            browser.get_screenshot_as_file(image_name)  \n            # 使用PhantomJS避免了截图的不完整，可以与Chrome比较\n            self.log.info('saving image %s' % image_name)\n            i += 1\n            css_selector = \"a[href='/comiclist/3/3/%s.htm']\" % i  \n            # 该方法感觉还不错呢，不过这个网站确实挺差劲的\n            next_page = browser.find_element_by_css_selector(css_selector)\n            next_page.click()\n            time.sleep(2)\n            # browser.implicitly_wait(20)\n\n    def find_total_page_num(self, browser):\n        page_element = browser.find_element_by_css_selector(\"table[cellspacing='1']\")\n        num = re.search(r'共\\d+页', page_element.text).group()[1:-1]  \n        return int(num)\n\n    def create_dir(self, dir_name):\n        if os.path.exists(dir_name):\n            self.log.error('create directory %s failed cause a same directory exists' % dir_name)\n        else:\n            try:\n                os.makedirs(dir_name)\n            except:\n                self.log.error('create directory %s failed' % dir_name)\n            else:\n                self.log.info('create directory %s success' % dir_name)\n\nif __name__ == '__main__':\n    start_url = 'http://comic.kukudm.com/comiclist/3/3/1.htm'\n    DL = DownloadPics(start_url)\n```\n\n## 运行结果\n\n\n![gif](http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip)\n","source":"_posts/Python3-使用Selenium-PhantomJS爬火影忍者漫画.md","raw":"---\ntitle: Python3 使用Selenium&PhantomJS爬火影忍者漫画\ndate: 2018-02-27 14:16:38\ntags:\n  - Spider\n  - Selenium\n  - PhantomJS\n  - Python3\ncategories:\n  - Spider\n  - Selenium\n\n---\n\n近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。\n\nSelenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。\n\n<!--more-->\n\n## 爬虫使用到的模块\n```Python\nfrom selenium import webdriver\nfrom myLogging import MyLogging\nimport os\nimport time\nimport re\n```\n\nmyLogging模块是自己配置的日志包，想要的可以点击**_[这里](http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS)_**自己看\n\n爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。\n\n## 爬取图片思路：\n\n  * 已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下\n  * 采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用**requests.get(comicUrl).content**方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 **get_screenshot_as_file()** 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：\n  ![对比](http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  * 找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。\n  * 在新网页的基础上保存图片，设置循环如此反复。\n\n爬取网页的URL为：[爬取火影漫画第一话](http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm)\n\n## 代码\n\n```Python\nclass DownloadPics(object):\n\n    def __init__(self, url):\n        self.url = url\n        self.log = MyLogging()\n        self.browser = self.get_browser()\n        self.save_pics(self.browser)\n\n    def get_browser(self):\n        browser = webdriver.PhantomJS()\n        try:\n            browser.get(self.url)\n        except:\n            MyLogging.error('open the url %s failed' % self.url)\n        browser.implicitly_wait(20)\n        return browser\n\n    def save_pics(self, browser):\n        pics_title = browser.title.split('_')[0]\n        self.create_dir(pics_title)\n        os.chdir(pics_title)\n        sum_page = self.find_total_page_num(browser)\n        i = 1\n        while i < sum_page:\n            image_name = str(i) + '.png'\n            browser.get_screenshot_as_file(image_name)  \n            # 使用PhantomJS避免了截图的不完整，可以与Chrome比较\n            self.log.info('saving image %s' % image_name)\n            i += 1\n            css_selector = \"a[href='/comiclist/3/3/%s.htm']\" % i  \n            # 该方法感觉还不错呢，不过这个网站确实挺差劲的\n            next_page = browser.find_element_by_css_selector(css_selector)\n            next_page.click()\n            time.sleep(2)\n            # browser.implicitly_wait(20)\n\n    def find_total_page_num(self, browser):\n        page_element = browser.find_element_by_css_selector(\"table[cellspacing='1']\")\n        num = re.search(r'共\\d+页', page_element.text).group()[1:-1]  \n        return int(num)\n\n    def create_dir(self, dir_name):\n        if os.path.exists(dir_name):\n            self.log.error('create directory %s failed cause a same directory exists' % dir_name)\n        else:\n            try:\n                os.makedirs(dir_name)\n            except:\n                self.log.error('create directory %s failed' % dir_name)\n            else:\n                self.log.info('create directory %s success' % dir_name)\n\nif __name__ == '__main__':\n    start_url = 'http://comic.kukudm.com/comiclist/3/3/1.htm'\n    DL = DownloadPics(start_url)\n```\n\n## 运行结果\n\n\n![gif](http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip)\n","slug":"Python3-使用Selenium-PhantomJS爬火影忍者漫画","published":1,"updated":"2018-03-02T18:25:45.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x6z0052exotmz6n0qc2","content":"<p>近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。</p>\n<p>Selenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"爬虫使用到的模块\"><a href=\"#爬虫使用到的模块\" class=\"headerlink\" title=\"爬虫使用到的模块\"></a>爬虫使用到的模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> myLogging <span class=\"keyword\">import</span> MyLogging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n<p>myLogging模块是自己配置的日志包，想要的可以点击<strong><em><a href=\"http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS\" target=\"_blank\" rel=\"noopener\">这里</a></em></strong>自己看</p>\n<p>爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。</p>\n<h2 id=\"爬取图片思路：\"><a href=\"#爬取图片思路：\" class=\"headerlink\" title=\"爬取图片思路：\"></a>爬取图片思路：</h2><ul>\n<li>已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下</li>\n<li>采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用<strong>requests.get(comicUrl).content</strong>方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 <strong>get_screenshot_as_file()</strong> 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比\"></li>\n<li>找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。</li>\n<li>在新网页的基础上保存图片，设置循环如此反复。</li>\n</ul>\n<p>爬取网页的URL为：<a href=\"http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm\" target=\"_blank\" rel=\"noopener\">爬取火影漫画第一话</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadPics</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        self.url = url</span><br><span class=\"line\">        self.log = MyLogging()</span><br><span class=\"line\">        self.browser = self.get_browser()</span><br><span class=\"line\">        self.save_pics(self.browser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_browser</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        browser = webdriver.PhantomJS()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            browser.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            MyLogging.error(<span class=\"string\">'open the url %s failed'</span> % self.url)</span><br><span class=\"line\">        browser.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_pics</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        pics_title = browser.title.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.create_dir(pics_title)</span><br><span class=\"line\">        os.chdir(pics_title)</span><br><span class=\"line\">        sum_page = self.find_total_page_num(browser)</span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; sum_page:</span><br><span class=\"line\">            image_name = str(i) + <span class=\"string\">'.png'</span></span><br><span class=\"line\">            browser.get_screenshot_as_file(image_name)  </span><br><span class=\"line\">            <span class=\"comment\"># 使用PhantomJS避免了截图的不完整，可以与Chrome比较</span></span><br><span class=\"line\">            self.log.info(<span class=\"string\">'saving image %s'</span> % image_name)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            css_selector = <span class=\"string\">\"a[href='/comiclist/3/3/%s.htm']\"</span> % i  </span><br><span class=\"line\">            <span class=\"comment\"># 该方法感觉还不错呢，不过这个网站确实挺差劲的</span></span><br><span class=\"line\">            next_page = browser.find_element_by_css_selector(css_selector)</span><br><span class=\"line\">            next_page.click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"comment\"># browser.implicitly_wait(20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_total_page_num</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        page_element = browser.find_element_by_css_selector(<span class=\"string\">\"table[cellspacing='1']\"</span>)</span><br><span class=\"line\">        num = re.search(<span class=\"string\">r'共\\d+页'</span>, page_element.text).group()[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dir</span><span class=\"params\">(self, dir_name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">            self.log.error(<span class=\"string\">'create directory %s failed cause a same directory exists'</span> % dir_name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                os.makedirs(dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                self.log.error(<span class=\"string\">'create directory %s failed'</span> % dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.log.info(<span class=\"string\">'create directory %s success'</span> % dir_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    start_url = <span class=\"string\">'http://comic.kukudm.com/comiclist/3/3/1.htm'</span></span><br><span class=\"line\">    DL = DownloadPics(start_url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip\" alt=\"gif\"></p>\n","site":{"data":{}},"excerpt":"<p>近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。</p>\n<p>Selenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。</p>","more":"<h2 id=\"爬虫使用到的模块\"><a href=\"#爬虫使用到的模块\" class=\"headerlink\" title=\"爬虫使用到的模块\"></a>爬虫使用到的模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> myLogging <span class=\"keyword\">import</span> MyLogging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n<p>myLogging模块是自己配置的日志包，想要的可以点击<strong><em><a href=\"http://link.zhihu.com/?target=https%3A//github.com/ByiProX/DownloadPicsBySeleniumAndPhantomJS\" target=\"_blank\" rel=\"noopener\">这里</a></em></strong>自己看</p>\n<p>爬虫很关键的一点就是能够看懂网页的源代码，记得当初刚刚真正开始接触编程的时候，有很长的一段时间在看HTML、CSS、JS的一些知识，虽然忘得很多，但是印象还是有的，对于后面看网页源代码很有帮助。学习爬虫，除了会基本的python知识以外，还要会网页的一些知识。</p>\n<h2 id=\"爬取图片思路：\"><a href=\"#爬取图片思路：\" class=\"headerlink\" title=\"爬取图片思路：\"></a>爬取图片思路：</h2><ul>\n<li>已知连接，分析网页的代码结构，看所需的数据是否需要切换frame，并定位所需数据的位于哪个标签之下</li>\n<li>采用不同的模块有不同的保存图片方式，如果采用request模块，保存图片方式是可以采用<strong>requests.get(comicUrl).content</strong>方法，使用该方法需要确定网页的地址。该项目中没有涉及request的使用，所以此后不再表述。对于selenium可以使用 <strong>get_screenshot_as_file()</strong> 方法，使用该方法强烈建议使用phantomjs，如果使用chrome浏览器，图片尺寸太大的话，会出现截图不完整，对比如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-2323c462a546dcc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比\"></li>\n<li>找到下一张图片的连接位置并点击更新网页，一般来讲新网页与之前网页结构相同。</li>\n<li>在新网页的基础上保存图片，设置循环如此反复。</li>\n</ul>\n<p>爬取网页的URL为：<a href=\"http://link.zhihu.com/?target=http%3A//comic.kukudm.com/comiclist/3/3/1.htm\" target=\"_blank\" rel=\"noopener\">爬取火影漫画第一话</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadPics</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        self.url = url</span><br><span class=\"line\">        self.log = MyLogging()</span><br><span class=\"line\">        self.browser = self.get_browser()</span><br><span class=\"line\">        self.save_pics(self.browser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_browser</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        browser = webdriver.PhantomJS()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            browser.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            MyLogging.error(<span class=\"string\">'open the url %s failed'</span> % self.url)</span><br><span class=\"line\">        browser.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_pics</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        pics_title = browser.title.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.create_dir(pics_title)</span><br><span class=\"line\">        os.chdir(pics_title)</span><br><span class=\"line\">        sum_page = self.find_total_page_num(browser)</span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; sum_page:</span><br><span class=\"line\">            image_name = str(i) + <span class=\"string\">'.png'</span></span><br><span class=\"line\">            browser.get_screenshot_as_file(image_name)  </span><br><span class=\"line\">            <span class=\"comment\"># 使用PhantomJS避免了截图的不完整，可以与Chrome比较</span></span><br><span class=\"line\">            self.log.info(<span class=\"string\">'saving image %s'</span> % image_name)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            css_selector = <span class=\"string\">\"a[href='/comiclist/3/3/%s.htm']\"</span> % i  </span><br><span class=\"line\">            <span class=\"comment\"># 该方法感觉还不错呢，不过这个网站确实挺差劲的</span></span><br><span class=\"line\">            next_page = browser.find_element_by_css_selector(css_selector)</span><br><span class=\"line\">            next_page.click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"comment\"># browser.implicitly_wait(20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_total_page_num</span><span class=\"params\">(self, browser)</span>:</span></span><br><span class=\"line\">        page_element = browser.find_element_by_css_selector(<span class=\"string\">\"table[cellspacing='1']\"</span>)</span><br><span class=\"line\">        num = re.search(<span class=\"string\">r'共\\d+页'</span>, page_element.text).group()[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dir</span><span class=\"params\">(self, dir_name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">            self.log.error(<span class=\"string\">'create directory %s failed cause a same directory exists'</span> % dir_name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                os.makedirs(dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                self.log.error(<span class=\"string\">'create directory %s failed'</span> % dir_name)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.log.info(<span class=\"string\">'create directory %s success'</span> % dir_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    start_url = <span class=\"string\">'http://comic.kukudm.com/comiclist/3/3/1.htm'</span></span><br><span class=\"line\">    DL = DownloadPics(start_url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e7e2cf39116b5fea.gif?imageMogr2/auto-orient/strip\" alt=\"gif\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 02:25:45 GMT+0800 (China Standard Time)","title":"Python3 使用Selenium&PhantomJS爬火影忍者漫画","path":"2018/02/27/Python3-使用Selenium-PhantomJS爬火影忍者漫画/","eyeCatchImage":null,"excerpt":"<p>近期学习爬虫，发现懂的越多，不懂的知识点越多（所以当个傻子还是很幸福的）。好记性不如烂笔头，之前都是把看到的资料链接直接挂到一些平台，比如知乎、简书、Github等。今天有点时间，就好好码一下字，排排版，方便以后查阅。</p>\n<p>Selenium用来模拟浏览器的行为，比如点击、最大化、滚动窗口等；PhantomJS是一种浏览器，不过这种浏览器没有UI界面，感觉就像是专门为爬虫设计，优点很明显，可以有效减小内存的使用。</p>","date":"2018-02-27T06:16:38.000Z","pv":0,"totalPV":0,"categories":"Spider > Selenium","tags":["Python3","Spider","Selenium","PhantomJS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 函数重载","date":"2018-03-03T02:54:44.000Z","_content":"## 函数重载的目的\n\n动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。\n\n在Python中实现函数重载：\n```python\nfrom io import StringIO\n\nclass Writer:\n    @staticmethod\n    def write(output, content):\n        # output对象只要实现了write方法就行\n        output.write(content)\n\n# stringIO类型\noutput = StringIO()\nWriter.write(output, 'hello world')\n\n# file 类型\noutput = open('out.txt', 'w')\nWriter.write(output, 'hello world')  \n\n```\n<!-- more -->\n在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。\n\n在Java中实现函数重载：\n```python\n\nclass Writer{\n    public static void write(StringIO output, String content){\n        output.write(content);\n        return null;\n    }\n\n    public static void write(File output, String content){\n        output.write(content);\n        return null;\n    }\n\n```\n\n参考自知乎用户刘志军：https://www.zhihu.com/question/20053359\n\n---\n\n## 函数重载主要是为了解决两个问题\n\n1. 可变参数类型。\n2. 可变参数个数。\n\n>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。\n\n那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。\n\n那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是`缺省参数`。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。\n\n参考自知乎用户`pansz`：https://www.zhihu.com/question/20053359\n","source":"_posts/Python3-函数重载.md","raw":"---\ntitle: Python3 函数重载\ndate: 2018-03-03 10:54:44\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 重载\n---\n## 函数重载的目的\n\n动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。\n\n在Python中实现函数重载：\n```python\nfrom io import StringIO\n\nclass Writer:\n    @staticmethod\n    def write(output, content):\n        # output对象只要实现了write方法就行\n        output.write(content)\n\n# stringIO类型\noutput = StringIO()\nWriter.write(output, 'hello world')\n\n# file 类型\noutput = open('out.txt', 'w')\nWriter.write(output, 'hello world')  \n\n```\n<!-- more -->\n在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。\n\n在Java中实现函数重载：\n```python\n\nclass Writer{\n    public static void write(StringIO output, String content){\n        output.write(content);\n        return null;\n    }\n\n    public static void write(File output, String content){\n        output.write(content);\n        return null;\n    }\n\n```\n\n参考自知乎用户刘志军：https://www.zhihu.com/question/20053359\n\n---\n\n## 函数重载主要是为了解决两个问题\n\n1. 可变参数类型。\n2. 可变参数个数。\n\n>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。\n\n那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。\n\n那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是`缺省参数`。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。\n\n参考自知乎用户`pansz`：https://www.zhihu.com/question/20053359\n","slug":"Python3-函数重载","published":1,"updated":"2018-03-03T03:46:12.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x710055exot4wyba43g","content":"<h2 id=\"函数重载的目的\"><a href=\"#函数重载的目的\" class=\"headerlink\" title=\"函数重载的目的\"></a>函数重载的目的</h2><p>动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。</p>\n<p>在Python中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(output, content)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># output对象只要实现了write方法就行</span></span><br><span class=\"line\">        output.write(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stringIO类型</span></span><br><span class=\"line\">output = StringIO()</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># file 类型</span></span><br><span class=\"line\">output = open(<span class=\"string\">'out.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。</p>\n<p>在Java中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Writer&#123;</span><br><span class=\"line\">    public static void write(StringIO output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void write(File output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考自知乎用户刘志军：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n<hr>\n<h2 id=\"函数重载主要是为了解决两个问题\"><a href=\"#函数重载主要是为了解决两个问题\" class=\"headerlink\" title=\"函数重载主要是为了解决两个问题\"></a>函数重载主要是为了解决两个问题</h2><ol>\n<li>可变参数类型。</li>\n<li>可变参数个数。</li>\n</ol>\n<blockquote>\n<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>\n</blockquote>\n<p>那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>\n<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是<code>缺省参数</code>。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>\n<p>参考自知乎用户<code>pansz</code>：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数重载的目的\"><a href=\"#函数重载的目的\" class=\"headerlink\" title=\"函数重载的目的\"></a>函数重载的目的</h2><p>动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。</p>\n<p>在Python中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(output, content)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># output对象只要实现了write方法就行</span></span><br><span class=\"line\">        output.write(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stringIO类型</span></span><br><span class=\"line\">output = StringIO()</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># file 类型</span></span><br><span class=\"line\">output = open(<span class=\"string\">'out.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure></p>","more":"<p>在静态语言中，方法重载是希望类可以以统一的方式处理不同类型的数据提供了可能。多个同名函数同时存在，具有不同的参数个数/类型，重载是一个类中多态性的一种表现。</p>\n<p>在Java中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Writer&#123;</span><br><span class=\"line\">    public static void write(StringIO output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void write(File output, String content)&#123;</span><br><span class=\"line\">        output.write(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考自知乎用户刘志军：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>\n<hr>\n<h2 id=\"函数重载主要是为了解决两个问题\"><a href=\"#函数重载主要是为了解决两个问题\" class=\"headerlink\" title=\"函数重载主要是为了解决两个问题\"></a>函数重载主要是为了解决两个问题</h2><ol>\n<li>可变参数类型。</li>\n<li>可变参数个数。</li>\n</ol>\n<blockquote>\n<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>\n</blockquote>\n<p>那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>\n<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是<code>缺省参数</code>。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>\n<p>参考自知乎用户<code>pansz</code>：<a href=\"https://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20053359</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 11:46:12 GMT+0800 (China Standard Time)","title":"Python3 函数重载","path":"2018/03/03/Python3-函数重载/","eyeCatchImage":null,"excerpt":"<h2 id=\"函数重载的目的\"><a href=\"#函数重载的目的\" class=\"headerlink\" title=\"函数重载的目的\"></a>函数重载的目的</h2><p>动态语言中，有鸭子类型，如果走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义了，因为函数可以通过鸭子类型来处理不同类型的对象，鸭子类型也是多态性的一种表现。</p>\n<p>在Python中实现函数重载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(output, content)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># output对象只要实现了write方法就行</span></span><br><span class=\"line\">        output.write(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stringIO类型</span></span><br><span class=\"line\">output = StringIO()</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># file 类型</span></span><br><span class=\"line\">output = open(<span class=\"string\">'out.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">Writer.write(output, <span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure></p>","date":"2018-03-03T02:54:44.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 重载","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 中的单下划线和双下划线","date":"2018-03-01T10:01:50.000Z","_content":"\n### 单下划线\n\n#### 在解释器中\n在交互解释器中，`_`符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。\n\n#### 作为名称使用\n这个跟上面有点类似。`_`用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：\n```Python\nn = 42\nfor _ in range(n):\n    do_something()\n```\n\n<!-- more -->\n#### i18n\n`_`还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 [Django documentation for translation](https://docs.djangoproject.com/en/dev/topics/i18n/translation/) 中你可能会看到：\n\n```python\nfrom django.utils.translation import ugettext as _\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n**注意**：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。\n\n#### 单下划线前缀的名称\n\n\n首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 `from a_module import *` 导入时，这部分变量和函数不会被导入。**不过值得注意的是**，如果使用 `import a_module` 这样导入模块，仍然可以用 `a_module._some_var` 这样的形式访问到这样的对象。\n\n另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 `_struct` 的一个 Python 包装。\n\n#### 单下划线后缀的名称\n在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。\n\n\n\n### 双下划线\n\n双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 `Test 类`里有一成员 `__x`，那么 dir(Test) 时会看到 `_Test__x` 而非 `__x`。这是为了避免该成员的名称与子类中的名称冲突。**但要注意这要求该名称末尾最多有一个下划线** [python document](https://docs.python.org/3.4/tutorial/classes.html#tut-private).\n\n双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 `__init__`、`__del__`、`__add__`、`__getitem__` 等，以及全局的 `__file__`、`__name__` 等。 Python `官方推荐永远不要`将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。\n\n### 举个栗子\n\n\n```python\n>>> class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n>>> mc = MyClass()\n>>> print mc.__superprivate\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: myClass instance has no attribute '__superprivate'\n>>> print mc._semiprivate\n, world!\n>>> print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n```\n\n`__foo__`:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如`__init__()`,`__del__()`,`__call__()`这些特殊方法\n\n`_foo`:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；\n\n`__foo`:这个有真正的意义:解析器用`_classname__foo`来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 `_类名__xxx` 这样的方式可以访问.\n\n### 参考\n详情见:\n1. http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\n\n2. http://www.zhihu.com/question/19754941\n\n3. https://segmentfault.com/a/1190000002611411\n\n4. https://docs.python.org/3.4/tutorial/classes.html#tut-private\n","source":"_posts/Python3-单下划线和双下划线.md","raw":"---\ntitle: Python3 中的单下划线和双下划线\ndate: 2018-03-01 18:01:50\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 下划线\n---\n\n### 单下划线\n\n#### 在解释器中\n在交互解释器中，`_`符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。\n\n#### 作为名称使用\n这个跟上面有点类似。`_`用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：\n```Python\nn = 42\nfor _ in range(n):\n    do_something()\n```\n\n<!-- more -->\n#### i18n\n`_`还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 [Django documentation for translation](https://docs.djangoproject.com/en/dev/topics/i18n/translation/) 中你可能会看到：\n\n```python\nfrom django.utils.translation import ugettext as _\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n**注意**：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。\n\n#### 单下划线前缀的名称\n\n\n首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 `from a_module import *` 导入时，这部分变量和函数不会被导入。**不过值得注意的是**，如果使用 `import a_module` 这样导入模块，仍然可以用 `a_module._some_var` 这样的形式访问到这样的对象。\n\n另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 `_struct` 的一个 Python 包装。\n\n#### 单下划线后缀的名称\n在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。\n\n\n\n### 双下划线\n\n双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 `Test 类`里有一成员 `__x`，那么 dir(Test) 时会看到 `_Test__x` 而非 `__x`。这是为了避免该成员的名称与子类中的名称冲突。**但要注意这要求该名称末尾最多有一个下划线** [python document](https://docs.python.org/3.4/tutorial/classes.html#tut-private).\n\n双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 `__init__`、`__del__`、`__add__`、`__getitem__` 等，以及全局的 `__file__`、`__name__` 等。 Python `官方推荐永远不要`将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。\n\n### 举个栗子\n\n\n```python\n>>> class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n>>> mc = MyClass()\n>>> print mc.__superprivate\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: myClass instance has no attribute '__superprivate'\n>>> print mc._semiprivate\n, world!\n>>> print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n```\n\n`__foo__`:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如`__init__()`,`__del__()`,`__call__()`这些特殊方法\n\n`_foo`:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；\n\n`__foo`:这个有真正的意义:解析器用`_classname__foo`来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 `_类名__xxx` 这样的方式可以访问.\n\n### 参考\n详情见:\n1. http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\n\n2. http://www.zhihu.com/question/19754941\n\n3. https://segmentfault.com/a/1190000002611411\n\n4. https://docs.python.org/3.4/tutorial/classes.html#tut-private\n","slug":"Python3-单下划线和双下划线","published":1,"updated":"2018-03-02T18:25:01.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x76005aexotmclsmwtz","content":"<h3 id=\"单下划线\"><a href=\"#单下划线\" class=\"headerlink\" title=\"单下划线\"></a>单下划线</h3><h4 id=\"在解释器中\"><a href=\"#在解释器中\" class=\"headerlink\" title=\"在解释器中\"></a>在解释器中</h4><p>在交互解释器中，<code>_</code>符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。</p>\n<h4 id=\"作为名称使用\"><a href=\"#作为名称使用\" class=\"headerlink\" title=\"作为名称使用\"></a>作为名称使用</h4><p>这个跟上面有点类似。<code>_</code>用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    do_something()</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h4><p><code>_</code>还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 <a href=\"https://docs.djangoproject.com/en/dev/topics/i18n/translation/\" target=\"_blank\" rel=\"noopener\">Django documentation for translation</a> 中你可能会看到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    output = _(<span class=\"string\">\"Welcome to my site.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。</p>\n<h4 id=\"单下划线前缀的名称\"><a href=\"#单下划线前缀的名称\" class=\"headerlink\" title=\"单下划线前缀的名称\"></a>单下划线前缀的名称</h4><p>首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 <code>from a_module import *</code> 导入时，这部分变量和函数不会被导入。<strong>不过值得注意的是</strong>，如果使用 <code>import a_module</code> 这样导入模块，仍然可以用 <code>a_module._some_var</code> 这样的形式访问到这样的对象。</p>\n<p>另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 <code>_struct</code> 的一个 Python 包装。</p>\n<h4 id=\"单下划线后缀的名称\"><a href=\"#单下划线后缀的名称\" class=\"headerlink\" title=\"单下划线后缀的名称\"></a>单下划线后缀的名称</h4><p>在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。</p>\n<h3 id=\"双下划线\"><a href=\"#双下划线\" class=\"headerlink\" title=\"双下划线\"></a>双下划线</h3><p>双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 <code>Test 类</code>里有一成员 <code>__x</code>，那么 dir(Test) 时会看到 <code>_Test__x</code> 而非 <code>__x</code>。这是为了避免该成员的名称与子类中的名称冲突。<strong>但要注意这要求该名称末尾最多有一个下划线</strong> <a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">python document</a>.</p>\n<p>双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 <code>__init__</code>、<code>__del__</code>、<code>__add__</code>、<code>__getitem__</code> 等，以及全局的 <code>__file__</code>、<code>__name__</code> 等。 Python <code>官方推荐永远不要</code>将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self.__superprivate = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self._semiprivate = <span class=\"string\">\", world!\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__superprivate</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">AttributeError: myClass instance has no attribute <span class=\"string\">'__superprivate'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc._semiprivate</span><br><span class=\"line\">, world!</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__dict__</span><br><span class=\"line\">&#123;<span class=\"string\">'_MyClass__superprivate'</span>: <span class=\"string\">'Hello'</span>, <span class=\"string\">'_semiprivate'</span>: <span class=\"string\">', world!'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p>\n<p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p>\n<p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 <code>_类名__xxx</code> 这样的方式可以访问.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>详情见:</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19754941\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19754941</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002611411\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002611411</a></p>\n</li>\n<li><p><a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3.4/tutorial/classes.html#tut-private</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"单下划线\"><a href=\"#单下划线\" class=\"headerlink\" title=\"单下划线\"></a>单下划线</h3><h4 id=\"在解释器中\"><a href=\"#在解释器中\" class=\"headerlink\" title=\"在解释器中\"></a>在解释器中</h4><p>在交互解释器中，<code>_</code>符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。</p>\n<h4 id=\"作为名称使用\"><a href=\"#作为名称使用\" class=\"headerlink\" title=\"作为名称使用\"></a>作为名称使用</h4><p>这个跟上面有点类似。<code>_</code>用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    do_something()</span><br></pre></td></tr></table></figure></p>","more":"<h4 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h4><p><code>_</code>还可以被用作函数名。这种情况，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。举个例子，在 <a href=\"https://docs.djangoproject.com/en/dev/topics/i18n/translation/\" target=\"_blank\" rel=\"noopener\">Django documentation for translation</a> 中你可能会看到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    output = _(<span class=\"string\">\"Welcome to my site.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：第二种和第三种用法会引起冲突，所以在任意代码块中，如果使用了_作i18n翻译查询函数，就应该避免再用作被丢弃的变量名。</p>\n<h4 id=\"单下划线前缀的名称\"><a href=\"#单下划线前缀的名称\" class=\"headerlink\" title=\"单下划线前缀的名称\"></a>单下划线前缀的名称</h4><p>首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数,用来指定私有变量。如果使用 <code>from a_module import *</code> 导入时，这部分变量和函数不会被导入。<strong>不过值得注意的是</strong>，如果使用 <code>import a_module</code> 这样导入模块，仍然可以用 <code>a_module._some_var</code> 这样的形式访问到这样的对象。</p>\n<p>另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 <code>_struct</code> 的一个 Python 包装。</p>\n<h4 id=\"单下划线后缀的名称\"><a href=\"#单下划线后缀的名称\" class=\"headerlink\" title=\"单下划线后缀的名称\"></a>单下划线后缀的名称</h4><p>在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。</p>\n<h3 id=\"双下划线\"><a href=\"#双下划线\" class=\"headerlink\" title=\"双下划线\"></a>双下划线</h3><p>双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 <code>Test 类</code>里有一成员 <code>__x</code>，那么 dir(Test) 时会看到 <code>_Test__x</code> 而非 <code>__x</code>。这是为了避免该成员的名称与子类中的名称冲突。<strong>但要注意这要求该名称末尾最多有一个下划线</strong> <a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">python document</a>.</p>\n<p>双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 <code>__init__</code>、<code>__del__</code>、<code>__add__</code>、<code>__getitem__</code> 等，以及全局的 <code>__file__</code>、<code>__name__</code> 等。 Python <code>官方推荐永远不要</code>将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self.__superprivate = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            self._semiprivate = <span class=\"string\">\", world!\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__superprivate</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">AttributeError: myClass instance has no attribute <span class=\"string\">'__superprivate'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc._semiprivate</span><br><span class=\"line\">, world!</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> mc.__dict__</span><br><span class=\"line\">&#123;<span class=\"string\">'_MyClass__superprivate'</span>: <span class=\"string\">'Hello'</span>, <span class=\"string\">'_semiprivate'</span>: <span class=\"string\">', world!'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p>\n<p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p>\n<p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,但是可以通过对象名 <code>_类名__xxx</code> 这样的方式可以访问.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>详情见:</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19754941\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19754941</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002611411\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002611411</a></p>\n</li>\n<li><p><a href=\"https://docs.python.org/3.4/tutorial/classes.html#tut-private\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3.4/tutorial/classes.html#tut-private</a></p>\n</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 02:25:01 GMT+0800 (China Standard Time)","title":"Python3 中的单下划线和双下划线","path":"2018/03/01/Python3-单下划线和双下划线/","eyeCatchImage":null,"excerpt":"<h3 id=\"单下划线\"><a href=\"#单下划线\" class=\"headerlink\" title=\"单下划线\"></a>单下划线</h3><h4 id=\"在解释器中\"><a href=\"#在解释器中\" class=\"headerlink\" title=\"在解释器中\"></a>在解释器中</h4><p>在交互解释器中，<code>_</code>符号还是指交互解释器中最后一次执行语句的返回结果。这种用法最初出现在CPython解释器中，其他解释器后来也都跟进了。</p>\n<h4 id=\"作为名称使用\"><a href=\"#作为名称使用\" class=\"headerlink\" title=\"作为名称使用\"></a>作为名称使用</h4><p>这个跟上面有点类似。<code>_</code>用作被丢弃的名称。按照惯例，这样做可以让阅读你代码的人知道，这是个不会被使用的特定名称。举个例子，你可能无所谓一个循环计数的值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    do_something()</span><br></pre></td></tr></table></figure></p>","date":"2018-03-01T10:01:50.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 下划线","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 向上取整ceil|向下取整floor|四舍五入round","date":"2018-03-09T06:21:35.000Z","_content":"```python\nimport math\n\n#向上取整\nprint(\"math.ceil---向上取整\")  \nprint(\"math.ceil(2.3) => \", math.ceil(2.3))  # 3\nprint(\"math.ceil(2.6) => \", math.ceil(2.6))  # 3\n\n#向下取整\nprint(\"\\nmath.floor---向下取整\")\nprint(\"math.floor(2.3) => \", math.floor(2.3)) # 2\nprint(\"math.floor(2.6) => \", math.floor(2.6)) # 2\n\n#四舍五入\nprint(\"\\nround---四舍五入\")\nprint(\"round(2.3) => \", round(2.3)) # 2\nprint(\"round(2.6) => \", round(2.6)) # 3\n\n```\n<!-- more -->\n```Bash\nmath.ceil---向上取整\nmath.ceil(2.3) =>  3\nmath.ceil(2.6) =>  3\n\nmath.floor---向下取整\nmath.floor(2.3) =>  2\nmath.floor(2.6) =>  2\n\nround---四舍五入\nround(2.3) =>  2\nround(2.6) =>  3\n\n```\n","source":"_posts/Python3-向上取整ceil-向下取整floor-四舍五入round.md","raw":"---\ntitle: Python3 向上取整ceil|向下取整floor|四舍五入round\ndate: 2018-03-09 14:21:35\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n```python\nimport math\n\n#向上取整\nprint(\"math.ceil---向上取整\")  \nprint(\"math.ceil(2.3) => \", math.ceil(2.3))  # 3\nprint(\"math.ceil(2.6) => \", math.ceil(2.6))  # 3\n\n#向下取整\nprint(\"\\nmath.floor---向下取整\")\nprint(\"math.floor(2.3) => \", math.floor(2.3)) # 2\nprint(\"math.floor(2.6) => \", math.floor(2.6)) # 2\n\n#四舍五入\nprint(\"\\nround---四舍五入\")\nprint(\"round(2.3) => \", round(2.3)) # 2\nprint(\"round(2.6) => \", round(2.6)) # 3\n\n```\n<!-- more -->\n```Bash\nmath.ceil---向上取整\nmath.ceil(2.3) =>  3\nmath.ceil(2.6) =>  3\n\nmath.floor---向下取整\nmath.floor(2.3) =>  2\nmath.floor(2.6) =>  2\n\nround---四舍五入\nround(2.3) =>  2\nround(2.6) =>  3\n\n```\n","slug":"Python3-向上取整ceil-向下取整floor-四舍五入round","published":1,"updated":"2018-03-09T06:27:14.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x78005dexotpkp0q794","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向上取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil---向上取整\"</span>)  </span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.3) =&gt; \"</span>, math.ceil(<span class=\"number\">2.3</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.6) =&gt; \"</span>, math.ceil(<span class=\"number\">2.6</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向下取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nmath.floor---向下取整\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.3) =&gt; \"</span>, math.floor(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.6) =&gt; \"</span>, math.floor(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#四舍五入</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nround---四舍五入\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"round(2.3) =&gt; \"</span>, round(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"round(2.6) =&gt; \"</span>, round(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil---向上取整</span><br><span class=\"line\">math.ceil(2.3) =&gt;  3</span><br><span class=\"line\">math.ceil(2.6) =&gt;  3</span><br><span class=\"line\"></span><br><span class=\"line\">math.floor---向下取整</span><br><span class=\"line\">math.floor(2.3) =&gt;  2</span><br><span class=\"line\">math.floor(2.6) =&gt;  2</span><br><span class=\"line\"></span><br><span class=\"line\">round---四舍五入</span><br><span class=\"line\">round(2.3) =&gt;  2</span><br><span class=\"line\">round(2.6) =&gt;  3</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向上取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil---向上取整\"</span>)  </span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.3) =&gt; \"</span>, math.ceil(<span class=\"number\">2.3</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.6) =&gt; \"</span>, math.ceil(<span class=\"number\">2.6</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向下取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nmath.floor---向下取整\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.3) =&gt; \"</span>, math.floor(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.6) =&gt; \"</span>, math.floor(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#四舍五入</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nround---四舍五入\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"round(2.3) =&gt; \"</span>, round(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"round(2.6) =&gt; \"</span>, round(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil---向上取整</span><br><span class=\"line\">math.ceil(2.3) =&gt;  3</span><br><span class=\"line\">math.ceil(2.6) =&gt;  3</span><br><span class=\"line\"></span><br><span class=\"line\">math.floor---向下取整</span><br><span class=\"line\">math.floor(2.3) =&gt;  2</span><br><span class=\"line\">math.floor(2.6) =&gt;  2</span><br><span class=\"line\"></span><br><span class=\"line\">round---四舍五入</span><br><span class=\"line\">round(2.3) =&gt;  2</span><br><span class=\"line\">round(2.6) =&gt;  3</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 09 2018 14:27:14 GMT+0800 (China Standard Time)","title":"Python3 向上取整ceil|向下取整floor|四舍五入round","path":"2018/03/09/Python3-向上取整ceil-向下取整floor-四舍五入round/","eyeCatchImage":null,"excerpt":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向上取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil---向上取整\"</span>)  </span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.3) =&gt; \"</span>, math.ceil(<span class=\"number\">2.3</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.ceil(2.6) =&gt; \"</span>, math.ceil(<span class=\"number\">2.6</span>))  <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向下取整</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nmath.floor---向下取整\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.3) =&gt; \"</span>, math.floor(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"math.floor(2.6) =&gt; \"</span>, math.floor(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#四舍五入</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nround---四舍五入\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"round(2.3) =&gt; \"</span>, round(<span class=\"number\">2.3</span>)) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"string\">\"round(2.6) =&gt; \"</span>, round(<span class=\"number\">2.6</span>)) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>","date":"2018-03-09T06:21:35.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 回文字符串的判断","date":"2018-03-19T10:25:12.000Z","_content":"```python\ndef isPalindrome(str_):\n    if len(str_) < 2:\n        return True\n    if str_[0] != str_[-1]:\n        return False\n\n    return isPalindrome(str_[1:-1])\n```\n","source":"_posts/Python3-回文字符串的判断.md","raw":"---\ntitle: Python3 回文字符串的判断\ndate: 2018-03-19 18:25:12\ntags:\n  - Python3\n  - Algorithm\ncategories:\n  - Algorithm\n---\n```python\ndef isPalindrome(str_):\n    if len(str_) < 2:\n        return True\n    if str_[0] != str_[-1]:\n        return False\n\n    return isPalindrome(str_[1:-1])\n```\n","slug":"Python3-回文字符串的判断","published":1,"updated":"2018-03-19T10:33:22.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x7b005hexotynjtdln3","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(str_)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(str_) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> str_[<span class=\"number\">0</span>] != str_[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isPalindrome(str_[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(str_)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(str_) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> str_[<span class=\"number\">0</span>] != str_[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isPalindrome(str_[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 19 2018 18:33:22 GMT+0800 (China Standard Time)","title":"Python3 回文字符串的判断","path":"2018/03/19/Python3-回文字符串的判断/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-19T10:25:12.000Z","pv":0,"totalPV":0,"categories":"Algorithm","tags":["Python3","Algorithm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 单例模式","date":"2018-03-19T05:44:05.000Z","_content":"单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n\n**注意：**\n\n  * 1、单例类只能有一个实例。\n  * 2、单例类必须自己创建自己的唯一实例。\n  * 3、单例类必须给所有其他对象提供这一实例。\n<!-- more -->\n## 单例模式介绍\n**意图：** 保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决：** 一个全局使用的类频繁地创建与销毁。\n\n**何时使用：** 当您想控制实例数目，节省系统资源的时候。\n\n**如何解决：** 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\n\n**关键代码：** 构造函数是私有的。\n\n**应用实例：** 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。\n\n**优点：** 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点：** 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**使用场景：** 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。\n\n**注意事项：** getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。\n\n## 单例模式的实现\n在 Python 中，我们可以用多种方法来实现单例模式：\n\n  * 使用基类 `__new__`\n  * 使用模块\n  * 使用装饰器（decorator）\n  * 使用元类（metaclass）\n\n\n### 使用基类 `__new__`\n\n`__new__` 是真正创建实例对象的方法，所以重写基类的`__new__`方法，以此来保证创建对象的时候只生成一个实例\n\n```python\nclass Singleton(object):\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls, '_instance'):\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance  \n\nclass MyClass(Singleton):  \n    a = 1\n\n```\n在上面的代码中，我们将类的实例和一个类变量 `_instance` 关联起来，如果 `cls._instance` 为 None 则创建实例，否则直接返回 `cls._instance`。执行结果如下：\n```python\n>>> one = MyClass()\n>>> two = MyClass()\n>>> one == two\nTrue\n>>> one is two\nTrue\n>>> id(one), id(two)\n(4303862608, 4303862608)\n```\n\n### 使用元类\n元类（参考：[深刻理解Python中的元类](http://blog.jobbole.com/21351/)）是用于创建类对象的类，类对象创建实例对象时一定会调用`__call__`方法，因此在调用`__call__`时候保证始终只创建一个实例即可，`type`是python中的一个元类。\n\n元类（metaclass）可以控制类的创建过程，它主要做三件事：\n\n  * 拦截类的创建\n  * 修改类的定义\n  * 返回修改后的类\n\n使用元类实现单例模式的代码如下：\n\n```python\nclass Singleton(type):\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, '_instance'):\n            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass MyClass(metaclass=Singleton):  \n    a = 1\n\n## 执行结果如下\n>>> one = MyClass()\n>>> two = MyClass()\n>>> one == two\nTrue\n>>> one is two\nTrue\n>>> id(one), id(two)\n(4303862608, 4303862608)\n```\n\n### 使用装饰器\n装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：\n\n```python\ndef singleton(cls):\n    instances = {}\n    def wrapper(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    return wrapper\n\n@singleton\nclass Foo(object):\n    pass\n```\n\n**将装饰器写成类形式**\n```python\nclass single03(object):  \n        def __init__(self, cls):  \n            self._cls = cls  \n            self._instances = None;  \n        def __call__(self, *args):  \n            if not self._instances:  \n                self._instances = self._cls(*args)  \n            return self._instances  \n\n@single03  \nclass A(object):  \n    def __init__(self, name):  \n        self.name = name\n```\n\n在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 `warpper`，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，`cls(*args, **kw)` 作为 value 存到 instances 中，否则，直接返回 instances[cls]\n\n### 使用模块\nPython 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n```\n\n将上面的代码保存在文件 mysingleton.py 中，然后这样使用:\n```python\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n\n## 参考\n1. http://python.jobbole.com/87294/\n2. http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","source":"_posts/Python3-单例模式.md","raw":"---\ntitle: Python3 单例模式\ndate: 2018-03-19 13:44:05\ntags:\n  - Python3\n  - 设计模式\ncategories:\n  - Python3 进阶\n---\n单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n\n**注意：**\n\n  * 1、单例类只能有一个实例。\n  * 2、单例类必须自己创建自己的唯一实例。\n  * 3、单例类必须给所有其他对象提供这一实例。\n<!-- more -->\n## 单例模式介绍\n**意图：** 保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**主要解决：** 一个全局使用的类频繁地创建与销毁。\n\n**何时使用：** 当您想控制实例数目，节省系统资源的时候。\n\n**如何解决：** 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\n\n**关键代码：** 构造函数是私有的。\n\n**应用实例：** 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。\n\n**优点：** 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。\n\n**缺点：** 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n**使用场景：** 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。\n\n**注意事项：** getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。\n\n## 单例模式的实现\n在 Python 中，我们可以用多种方法来实现单例模式：\n\n  * 使用基类 `__new__`\n  * 使用模块\n  * 使用装饰器（decorator）\n  * 使用元类（metaclass）\n\n\n### 使用基类 `__new__`\n\n`__new__` 是真正创建实例对象的方法，所以重写基类的`__new__`方法，以此来保证创建对象的时候只生成一个实例\n\n```python\nclass Singleton(object):\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls, '_instance'):\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance  \n\nclass MyClass(Singleton):  \n    a = 1\n\n```\n在上面的代码中，我们将类的实例和一个类变量 `_instance` 关联起来，如果 `cls._instance` 为 None 则创建实例，否则直接返回 `cls._instance`。执行结果如下：\n```python\n>>> one = MyClass()\n>>> two = MyClass()\n>>> one == two\nTrue\n>>> one is two\nTrue\n>>> id(one), id(two)\n(4303862608, 4303862608)\n```\n\n### 使用元类\n元类（参考：[深刻理解Python中的元类](http://blog.jobbole.com/21351/)）是用于创建类对象的类，类对象创建实例对象时一定会调用`__call__`方法，因此在调用`__call__`时候保证始终只创建一个实例即可，`type`是python中的一个元类。\n\n元类（metaclass）可以控制类的创建过程，它主要做三件事：\n\n  * 拦截类的创建\n  * 修改类的定义\n  * 返回修改后的类\n\n使用元类实现单例模式的代码如下：\n\n```python\nclass Singleton(type):\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, '_instance'):\n            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass MyClass(metaclass=Singleton):  \n    a = 1\n\n## 执行结果如下\n>>> one = MyClass()\n>>> two = MyClass()\n>>> one == two\nTrue\n>>> one is two\nTrue\n>>> id(one), id(two)\n(4303862608, 4303862608)\n```\n\n### 使用装饰器\n装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：\n\n```python\ndef singleton(cls):\n    instances = {}\n    def wrapper(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    return wrapper\n\n@singleton\nclass Foo(object):\n    pass\n```\n\n**将装饰器写成类形式**\n```python\nclass single03(object):  \n        def __init__(self, cls):  \n            self._cls = cls  \n            self._instances = None;  \n        def __call__(self, *args):  \n            if not self._instances:  \n                self._instances = self._cls(*args)  \n            return self._instances  \n\n@single03  \nclass A(object):  \n    def __init__(self, name):  \n        self.name = name\n```\n\n在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 `warpper`，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，`cls(*args, **kw)` 作为 value 存到 instances 中，否则，直接返回 instances[cls]\n\n### 使用模块\nPython 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n```\n\n将上面的代码保存在文件 mysingleton.py 中，然后这样使用:\n```python\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n\n## 参考\n1. http://python.jobbole.com/87294/\n2. http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","slug":"Python3-单例模式","published":1,"updated":"2018-03-19T18:56:37.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x7e005lexotevfmmmh5","content":"<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、单例类只能有一个实例。</li>\n<li>2、单例类必须自己创建自己的唯一实例。</li>\n<li>3、单例类必须给所有其他对象提供这一实例。<a id=\"more\"></a>\n<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>\n</ul>\n<p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</p>\n<p><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。</p>\n<p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>\n<p><strong>关键代码：</strong> 构造函数是私有的。</p>\n<p><strong>应用实例：</strong> 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</p>\n<p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p>\n<p><strong>缺点：</strong> 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n<p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p>\n<p><strong>注意事项：</strong> getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>\n<h2 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h2><p>在 Python 中，我们可以用多种方法来实现单例模式：</p>\n<ul>\n<li>使用基类 <code>__new__</code></li>\n<li>使用模块</li>\n<li>使用装饰器（decorator）</li>\n<li>使用元类（metaclass）</li>\n</ul>\n<h3 id=\"使用基类-new\"><a href=\"#使用基类-new\" class=\"headerlink\" title=\"使用基类 __new__\"></a>使用基类 <code>__new__</code></h3><p><code>__new__</code> 是真正创建实例对象的方法，所以重写基类的<code>__new__</code>方法，以此来保证创建对象的时候只生成一个实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。执行结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one == two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one <span class=\"keyword\">is</span> two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class=\"line\">(<span class=\"number\">4303862608</span>, <span class=\"number\">4303862608</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用元类\"><a href=\"#使用元类\" class=\"headerlink\" title=\"使用元类\"></a>使用元类</h3><p>元类（参考：<a href=\"http://blog.jobbole.com/21351/\" target=\"_blank\" rel=\"noopener\">深刻理解Python中的元类</a>）是用于创建类对象的类，类对象创建实例对象时一定会调用<code>__call__</code>方法，因此在调用<code>__call__</code>时候保证始终只创建一个实例即可，<code>type</code>是python中的一个元类。</p>\n<p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>\n<ul>\n<li>拦截类的创建</li>\n<li>修改类的定义</li>\n<li>返回修改后的类</li>\n</ul>\n<p>使用元类实现单例模式的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(metaclass=Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行结果如下</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one == two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one <span class=\"keyword\">is</span> two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class=\"line\">(<span class=\"number\">4303862608</span>, <span class=\"number\">4303862608</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h3><p>装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleton</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</span><br><span class=\"line\">            instances[cls] = cls(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>将装饰器写成类形式</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">single03</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cls)</span>:</span>  </span><br><span class=\"line\">            self._cls = cls  </span><br><span class=\"line\">            self._instances = <span class=\"keyword\">None</span>;  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args)</span>:</span>  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._instances:  </span><br><span class=\"line\">                self._instances = self._cls(*args)  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._instances  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@single03  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name</span><br></pre></td></tr></table></figure></p>\n<p>在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 <code>warpper</code>，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，<code>cls(*args, **kw)</code> 作为 value 存到 instances 中，否则，直接返回 instances[cls]</p>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h3><p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">My_Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br></pre></td></tr></table></figure></p>\n<p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87294/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87294/</a></li>\n<li><a href=\"http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、单例类只能有一个实例。</li>\n<li>2、单例类必须自己创建自己的唯一实例。</li>\n<li>3、单例类必须给所有其他对象提供这一实例。","more":"<h2 id=\"单例模式介绍\"><a href=\"#单例模式介绍\" class=\"headerlink\" title=\"单例模式介绍\"></a>单例模式介绍</h2><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>\n</ul>\n<p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</p>\n<p><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。</p>\n<p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>\n<p><strong>关键代码：</strong> 构造函数是私有的。</p>\n<p><strong>应用实例：</strong> 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</p>\n<p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p>\n<p><strong>缺点：</strong> 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n<p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p>\n<p><strong>注意事项：</strong> getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>\n<h2 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h2><p>在 Python 中，我们可以用多种方法来实现单例模式：</p>\n<ul>\n<li>使用基类 <code>__new__</code></li>\n<li>使用模块</li>\n<li>使用装饰器（decorator）</li>\n<li>使用元类（metaclass）</li>\n</ul>\n<h3 id=\"使用基类-new\"><a href=\"#使用基类-new\" class=\"headerlink\" title=\"使用基类 __new__\"></a>使用基类 <code>__new__</code></h3><p><code>__new__</code> 是真正创建实例对象的方法，所以重写基类的<code>__new__</code>方法，以此来保证创建对象的时候只生成一个实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。执行结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one == two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one <span class=\"keyword\">is</span> two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class=\"line\">(<span class=\"number\">4303862608</span>, <span class=\"number\">4303862608</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用元类\"><a href=\"#使用元类\" class=\"headerlink\" title=\"使用元类\"></a>使用元类</h3><p>元类（参考：<a href=\"http://blog.jobbole.com/21351/\" target=\"_blank\" rel=\"noopener\">深刻理解Python中的元类</a>）是用于创建类对象的类，类对象创建实例对象时一定会调用<code>__call__</code>方法，因此在调用<code>__call__</code>时候保证始终只创建一个实例即可，<code>type</code>是python中的一个元类。</p>\n<p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>\n<ul>\n<li>拦截类的创建</li>\n<li>修改类的定义</li>\n<li>返回修改后的类</li>\n</ul>\n<p>使用元类实现单例模式的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(metaclass=Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行结果如下</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one == two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>one <span class=\"keyword\">is</span> two</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class=\"line\">(<span class=\"number\">4303862608</span>, <span class=\"number\">4303862608</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h3><p>装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleton</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</span><br><span class=\"line\">            instances[cls] = cls(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>将装饰器写成类形式</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">single03</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cls)</span>:</span>  </span><br><span class=\"line\">            self._cls = cls  </span><br><span class=\"line\">            self._instances = <span class=\"keyword\">None</span>;  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args)</span>:</span>  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._instances:  </span><br><span class=\"line\">                self._instances = self._cls(*args)  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._instances  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@single03  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name</span><br></pre></td></tr></table></figure></p>\n<p>在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 <code>warpper</code>，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，<code>cls(*args, **kw)</code> 作为 value 存到 instances 中，否则，直接返回 instances[cls]</p>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h3><p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">My_Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br></pre></td></tr></table></figure></p>\n<p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87294/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87294/</a></li>\n<li><a href=\"http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87791/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 20 2018 02:56:37 GMT+0800 (China Standard Time)","title":"Python3 单例模式","path":"2018/03/19/Python3-单例模式/","eyeCatchImage":null,"excerpt":"<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、单例类只能有一个实例。</li>\n<li>2、单例类必须自己创建自己的唯一实例。</li>\n<li>3、单例类必须给所有其他对象提供这一实例。","date":"2018-03-19T05:44:05.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3","设计模式"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 子类的查看与类的对象判断","date":"2018-03-02T18:24:21.000Z","_content":"1. 如果想要查看一个类是不是另一个类的子类，可以使用內建的 `issubclass` 函数或者使用它的特殊特性`__base__`；\n\n2. 如果想要检查一个对象是不是一个类的实例，可以使用內建的 `isinstance` 函数或者使用它的特殊特性`__class__`;\n<!-- more -->\n\n```python\n# -*- coding: utf-8 -*-  \n__metaclass__ = type #确定使新式类  \n\n\nclass father():  \n    def init(self):  \n        print(\"father()已经创建\")  \n\nclass son(father):  \n    def init(self):  \n        print(\"son()已经创建\")  \n\n#下面测试issubclass()函数  \nprint(issubclass(father,son))  # output: False\nprint(issubclass(son,father))  # output: True\n\n#下面使用__bases__  \nprint(\"father.__bases__:\",father.__bases__)  # output: father.__bases__: (<class 'object'>,)  \nprint(\"son.__bases__:\",son.__bases__)        # output: son.__bases__: (<class '__main__.father'>,)  \n\n#下面测试isinstance()函数  \ns = son()  \nprint(isinstance(s,son))    # output: True\nprint(isinstance(s,father)) # output: True\nprint(isinstance(s,str))    # output: False\n\n#下面使用__class__  \nprint(\"s.__class__:\",s.__class__) # output: s.__class__: <class '__main__.son'>  \n```\n","source":"_posts/Python3-子类的查看与类的对象判断.md","raw":"---\ntitle: Python3 子类的查看与类的对象判断\ndate: 2018-03-03 02:24:21\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n1. 如果想要查看一个类是不是另一个类的子类，可以使用內建的 `issubclass` 函数或者使用它的特殊特性`__base__`；\n\n2. 如果想要检查一个对象是不是一个类的实例，可以使用內建的 `isinstance` 函数或者使用它的特殊特性`__class__`;\n<!-- more -->\n\n```python\n# -*- coding: utf-8 -*-  \n__metaclass__ = type #确定使新式类  \n\n\nclass father():  \n    def init(self):  \n        print(\"father()已经创建\")  \n\nclass son(father):  \n    def init(self):  \n        print(\"son()已经创建\")  \n\n#下面测试issubclass()函数  \nprint(issubclass(father,son))  # output: False\nprint(issubclass(son,father))  # output: True\n\n#下面使用__bases__  \nprint(\"father.__bases__:\",father.__bases__)  # output: father.__bases__: (<class 'object'>,)  \nprint(\"son.__bases__:\",son.__bases__)        # output: son.__bases__: (<class '__main__.father'>,)  \n\n#下面测试isinstance()函数  \ns = son()  \nprint(isinstance(s,son))    # output: True\nprint(isinstance(s,father)) # output: True\nprint(isinstance(s,str))    # output: False\n\n#下面使用__class__  \nprint(\"s.__class__:\",s.__class__) # output: s.__class__: <class '__main__.son'>  \n```\n","slug":"Python3-子类的查看与类的对象判断","published":1,"updated":"2018-03-03T02:39:26.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x7m005pexotug3vhkj3","content":"<ol>\n<li><p>如果想要查看一个类是不是另一个类的子类，可以使用內建的 <code>issubclass</code> 函数或者使用它的特殊特性<code>__base__</code>；</p>\n</li>\n<li><p>如果想要检查一个对象是不是一个类的实例，可以使用內建的 <code>isinstance</code> 函数或者使用它的特殊特性<code>__class__</code>;</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-  </span></span><br><span class=\"line\">__metaclass__ = type <span class=\"comment\">#确定使新式类  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span><span class=\"params\">()</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"father()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span><span class=\"params\">(father)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"son()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试issubclass()函数  </span></span><br><span class=\"line\">print(issubclass(father,son))  <span class=\"comment\"># output: False</span></span><br><span class=\"line\">print(issubclass(son,father))  <span class=\"comment\"># output: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__bases__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"father.__bases__:\"</span>,father.__bases__)  <span class=\"comment\"># output: father.__bases__: (&lt;class 'object'&gt;,)  </span></span><br><span class=\"line\">print(<span class=\"string\">\"son.__bases__:\"</span>,son.__bases__)        <span class=\"comment\"># output: son.__bases__: (&lt;class '__main__.father'&gt;,)  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试isinstance()函数  </span></span><br><span class=\"line\">s = son()  </span><br><span class=\"line\">print(isinstance(s,son))    <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,father)) <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,str))    <span class=\"comment\"># output: False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__class__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"s.__class__:\"</span>,s.__class__) <span class=\"comment\"># output: s.__class__: &lt;class '__main__.son'&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>如果想要查看一个类是不是另一个类的子类，可以使用內建的 <code>issubclass</code> 函数或者使用它的特殊特性<code>__base__</code>；</p>\n</li>\n<li><p>如果想要检查一个对象是不是一个类的实例，可以使用內建的 <code>isinstance</code> 函数或者使用它的特殊特性<code>__class__</code>;</p>","more":"</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-  </span></span><br><span class=\"line\">__metaclass__ = type <span class=\"comment\">#确定使新式类  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span><span class=\"params\">()</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"father()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span><span class=\"params\">(father)</span>:</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self)</span>:</span>  </span><br><span class=\"line\">        print(<span class=\"string\">\"son()已经创建\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试issubclass()函数  </span></span><br><span class=\"line\">print(issubclass(father,son))  <span class=\"comment\"># output: False</span></span><br><span class=\"line\">print(issubclass(son,father))  <span class=\"comment\"># output: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__bases__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"father.__bases__:\"</span>,father.__bases__)  <span class=\"comment\"># output: father.__bases__: (&lt;class 'object'&gt;,)  </span></span><br><span class=\"line\">print(<span class=\"string\">\"son.__bases__:\"</span>,son.__bases__)        <span class=\"comment\"># output: son.__bases__: (&lt;class '__main__.father'&gt;,)  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面测试isinstance()函数  </span></span><br><span class=\"line\">s = son()  </span><br><span class=\"line\">print(isinstance(s,son))    <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,father)) <span class=\"comment\"># output: True</span></span><br><span class=\"line\">print(isinstance(s,str))    <span class=\"comment\"># output: False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面使用__class__  </span></span><br><span class=\"line\">print(<span class=\"string\">\"s.__class__:\"</span>,s.__class__) <span class=\"comment\"># output: s.__class__: &lt;class '__main__.son'&gt;</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 10:39:26 GMT+0800 (China Standard Time)","title":"Python3 子类的查看与类的对象判断","path":"2018/03/03/Python3-子类的查看与类的对象判断/","eyeCatchImage":null,"excerpt":"<ol>\n<li><p>如果想要查看一个类是不是另一个类的子类，可以使用內建的 <code>issubclass</code> 函数或者使用它的特殊特性<code>__base__</code>；</p>\n</li>\n<li><p>如果想要检查一个对象是不是一个类的实例，可以使用內建的 <code>isinstance</code> 函数或者使用它的特殊特性<code>__class__</code>;</p>","date":"2018-03-02T18:24:21.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 实现二分查找","date":"2018-03-09T06:32:16.000Z","_content":"\n二分查找,给出一个已经排好序的列表,`注意是已经排好序的`,查找指定元素在列表中的位置\n```Python\nimport math\n\ndef binary_search(my_list, item):\n    \"\"\"从list中查找item\"\"\"\n    low = 0\n    high = len(my_list) - 1\n\n    while low <= high:\n        mid = math.floor((low + high)/2)\n        guess = my_list[mid]\n        if guess > item:\n            high = mid - 1\n        elif guess < item:\n            low = mid + 1\n        else:\n            return mid\n    return None\n\nmy_list = [1,3,5,7,9]\nitem = 1\nprint(binary_search(my_list, item))\n\n```\n","source":"_posts/Python3-实现二分查找.md","raw":"---\ntitle: Python3 实现二分查找\ndate: 2018-03-09 14:32:16\ntags:\n  - Python3\n  - Algorithm\ncategories:\n  - Algorithm\n---\n\n二分查找,给出一个已经排好序的列表,`注意是已经排好序的`,查找指定元素在列表中的位置\n```Python\nimport math\n\ndef binary_search(my_list, item):\n    \"\"\"从list中查找item\"\"\"\n    low = 0\n    high = len(my_list) - 1\n\n    while low <= high:\n        mid = math.floor((low + high)/2)\n        guess = my_list[mid]\n        if guess > item:\n            high = mid - 1\n        elif guess < item:\n            low = mid + 1\n        else:\n            return mid\n    return None\n\nmy_list = [1,3,5,7,9]\nitem = 1\nprint(binary_search(my_list, item))\n\n```\n","slug":"Python3-实现二分查找","published":1,"updated":"2018-03-09T07:26:37.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x7s005texot6khr4ypb","content":"<p>二分查找,给出一个已经排好序的列表,<code>注意是已经排好序的</code>,查找指定元素在列表中的位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(my_list, item)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"从list中查找item\"\"\"</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(my_list) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high)/<span class=\"number\">2</span>)</span><br><span class=\"line\">        guess = my_list[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess &gt; item:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> guess &lt; item:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_list = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">item = <span class=\"number\">1</span></span><br><span class=\"line\">print(binary_search(my_list, item))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>二分查找,给出一个已经排好序的列表,<code>注意是已经排好序的</code>,查找指定元素在列表中的位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(my_list, item)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"从list中查找item\"\"\"</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(my_list) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high)/<span class=\"number\">2</span>)</span><br><span class=\"line\">        guess = my_list[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess &gt; item:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> guess &lt; item:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_list = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">item = <span class=\"number\">1</span></span><br><span class=\"line\">print(binary_search(my_list, item))</span><br></pre></td></tr></table></figure></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 09 2018 15:26:37 GMT+0800 (China Standard Time)","title":"Python3 实现二分查找","path":"2018/03/09/Python3-实现二分查找/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-09T06:32:16.000Z","pv":0,"totalPV":0,"categories":"Algorithm","tags":["Python3","Algorithm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 垃圾回收机制","date":"2018-03-05T13:38:25.000Z","_content":"Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。\n分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。\n\n<!-- more -->\n## 引用计数\n\nPython语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个`ob_ref`字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。\n\n导致引用计数+1的情况\n  1. 对象被创建，例如`a=23`\n  2. 对象被引用，例如`b=a`\n  3. 对象被作为参数，传入到一个函数中，例如`func(a)`\n  4. 对象作为一个元素，存储在容器中，例如`list1=[a,a]`\n导致引用计数-1的情况\n  1. 对象的别名被显式销毁，例如`del a`\n  2. 对象的别名被赋予新的对象，例如`a=24`\n  3. 一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）\n  4. 对象所在的容器被销毁，或从容器中删除对象\n\n## 标记清除\n\n『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![mark-sweepg](https://foofish.net/images/mark-sweep.svg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。\n\n标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n\n## 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，`分代回收是建立在标记清除技术基础之上`。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象\n\n## Python中的GC阈值\n\n随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。\n\n当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。\n\n随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。\n\n通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。\n\n\n## gc模块\n[Garbage Collector interface](https://docs.python.org/2/library/gc.html)  \ngc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。\n\n### 常用函数：\n\n  1. gc.set_debug(flags)  \n设置gc的debug日志，一般设置为gc.DEBUG_LEAK\n  2. gc.collect([generation])  \n显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。  \n返回不可达（unreachable objects）对象的数目\n  3. gc.set_threshold(threshold0[, threshold1[, threshold2])  \n设置自动执行垃圾回收的频率。\n  4. gc.get_count()  \n获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表\n\n### gc模块的自动垃圾回收机制\n\n必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。  \n这个机制的主要作用就是发现并处理不可达的垃圾对象。\n\n`垃圾回收=垃圾检查+垃圾回收`  \n\n在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。\n\ngc模块里面会有一个长度为3的列表的计数器，可以通过`gc.get_count()`获取。  \n例如`(488,3,0)`，其中`488`是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，**注意是内存分配，而不是引用计数的增加**。例如：\n```Python\nprint gc.get_count()  # (590, 8, 0)\na = ClassA()\nprint gc.get_count()  # (591, 8, 0)\ndel a\nprint gc.get_count()  # (590, 8, 0)\n```\n`3`是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，`0`是指距离上一次2代垃圾检查，1代垃圾检查的次数。\n\ngc模快有一个自动垃圾回收的阀值，即通过`gc.get_threshold`函数获取到的长度为3的元组，例如`(700,10,10)`  \n每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器  \n例如，假设阀值是`(700,10,10)`：\n\n  * 当计数器从`(699,3,0)`增加到`(700,3,0)`，gc模块就会执行`gc.collect(0)`,即检查0代对象的垃圾，并重置计数器为`(0,4,0)`\n  * 当计数器从`(699,9,0)`增加到`(700,9,0)`，gc模块就会执行`gc.collect(1)`,即检查1、2代对象的垃圾，并重置计数器为`(0,0,1)`\n  * 当计数器从`(699,9,9)`增加到`(700,9,9)`，gc模块就会执行`gc.collect(2)`,即检查0、1、2代对象的垃圾，并重置计数器为`(0,0,0)`\n\n\n## 应用\n\n1. 项目中避免循环引用\n2. 引入gc模块，启动gc模块的自动清理循环引用的对象机制\n3. 由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗\n4. gc模块唯一处理不了的是循环引用的类都有`__del__`方法，所以项目中要避免定义_`_del__`方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用`gc.garbage`里面的对象的`__del__`来打破僵局\n\n\n## 参考\n1. http://python.jobbole.com/87843/\n2. https://www.cnblogs.com/pinganzi/p/6646742.html\n3. http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","source":"_posts/Python3-垃圾回收机制.md","raw":"---\ntitle: Python3 垃圾回收机制\ndate: 2018-03-05 21:38:25\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\nPython中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。\n分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。\n\n<!-- more -->\n## 引用计数\n\nPython语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个`ob_ref`字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。\n\n导致引用计数+1的情况\n  1. 对象被创建，例如`a=23`\n  2. 对象被引用，例如`b=a`\n  3. 对象被作为参数，传入到一个函数中，例如`func(a)`\n  4. 对象作为一个元素，存储在容器中，例如`list1=[a,a]`\n导致引用计数-1的情况\n  1. 对象的别名被显式销毁，例如`del a`\n  2. 对象的别名被赋予新的对象，例如`a=24`\n  3. 一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）\n  4. 对象所在的容器被销毁，或从容器中删除对象\n\n## 标记清除\n\n『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![mark-sweepg](https://foofish.net/images/mark-sweep.svg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。\n\n标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n\n## 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，`分代回收是建立在标记清除技术基础之上`。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象\n\n## Python中的GC阈值\n\n随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。\n\n当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。\n\n随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。\n\n通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。\n\n\n## gc模块\n[Garbage Collector interface](https://docs.python.org/2/library/gc.html)  \ngc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。\n\n### 常用函数：\n\n  1. gc.set_debug(flags)  \n设置gc的debug日志，一般设置为gc.DEBUG_LEAK\n  2. gc.collect([generation])  \n显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。  \n返回不可达（unreachable objects）对象的数目\n  3. gc.set_threshold(threshold0[, threshold1[, threshold2])  \n设置自动执行垃圾回收的频率。\n  4. gc.get_count()  \n获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表\n\n### gc模块的自动垃圾回收机制\n\n必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。  \n这个机制的主要作用就是发现并处理不可达的垃圾对象。\n\n`垃圾回收=垃圾检查+垃圾回收`  \n\n在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。\n\ngc模块里面会有一个长度为3的列表的计数器，可以通过`gc.get_count()`获取。  \n例如`(488,3,0)`，其中`488`是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，**注意是内存分配，而不是引用计数的增加**。例如：\n```Python\nprint gc.get_count()  # (590, 8, 0)\na = ClassA()\nprint gc.get_count()  # (591, 8, 0)\ndel a\nprint gc.get_count()  # (590, 8, 0)\n```\n`3`是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，`0`是指距离上一次2代垃圾检查，1代垃圾检查的次数。\n\ngc模快有一个自动垃圾回收的阀值，即通过`gc.get_threshold`函数获取到的长度为3的元组，例如`(700,10,10)`  \n每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器  \n例如，假设阀值是`(700,10,10)`：\n\n  * 当计数器从`(699,3,0)`增加到`(700,3,0)`，gc模块就会执行`gc.collect(0)`,即检查0代对象的垃圾，并重置计数器为`(0,4,0)`\n  * 当计数器从`(699,9,0)`增加到`(700,9,0)`，gc模块就会执行`gc.collect(1)`,即检查1、2代对象的垃圾，并重置计数器为`(0,0,1)`\n  * 当计数器从`(699,9,9)`增加到`(700,9,9)`，gc模块就会执行`gc.collect(2)`,即检查0、1、2代对象的垃圾，并重置计数器为`(0,0,0)`\n\n\n## 应用\n\n1. 项目中避免循环引用\n2. 引入gc模块，启动gc模块的自动清理循环引用的对象机制\n3. 由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗\n4. gc模块唯一处理不了的是循环引用的类都有`__del__`方法，所以项目中要避免定义_`_del__`方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用`gc.garbage`里面的对象的`__del__`来打破僵局\n\n\n## 参考\n1. http://python.jobbole.com/87843/\n2. https://www.cnblogs.com/pinganzi/p/6646742.html\n3. http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&utm_medium=relatedPosts\n","slug":"Python3-垃圾回收机制","published":1,"updated":"2018-03-05T16:51:20.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x7v005xexot2vu499or","content":"<p>Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。</p>\n<a id=\"more\"></a>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</p>\n<p>导致引用计数+1的情况</p>\n<ol>\n<li>对象被创建，例如<code>a=23</code></li>\n<li>对象被引用，例如<code>b=a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code><br>导致引用计数-1的情况</li>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ol>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"https://foofish.net/images/mark-sweep.svg\" alt=\"mark-sweepg\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>\n<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h2 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h2><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，<code>分代回收是建立在标记清除技术基础之上</code>。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p>\n<h2 id=\"Python中的GC阈值\"><a href=\"#Python中的GC阈值\" class=\"headerlink\" title=\"Python中的GC阈值\"></a>Python中的GC阈值</h2><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。</p>\n<p>当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。</p>\n<p>随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。</p>\n<p>通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。</p>\n<h2 id=\"gc模块\"><a href=\"#gc模块\" class=\"headerlink\" title=\"gc模块\"></a>gc模块</h2><p><a href=\"https://docs.python.org/2/library/gc.html\" target=\"_blank\" rel=\"noopener\">Garbage Collector interface</a><br>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>\n<h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><ol>\n<li>gc.set_debug(flags)<br>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</li>\n<li>gc.collect([generation])<br>显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。<br>返回不可达（unreachable objects）对象的数目</li>\n<li>gc.set_threshold(threshold0[, threshold1[, threshold2])<br>设置自动执行垃圾回收的频率。</li>\n<li>gc.get_count()<br>获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>\n</ol>\n<h3 id=\"gc模块的自动垃圾回收机制\"><a href=\"#gc模块的自动垃圾回收机制\" class=\"headerlink\" title=\"gc模块的自动垃圾回收机制\"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>\n<p><code>垃圾回收=垃圾检查+垃圾回收</code>  </p>\n<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>\n<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。<br>例如<code>(488,3,0)</code>，其中<code>488</code>是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，<strong>注意是内存分配，而不是引用计数的增加</strong>。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br><span class=\"line\">a = ClassA()</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (591, 8, 0)</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>3</code>是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，<code>0</code>是指距离上一次2代垃圾检查，1代垃圾检查的次数。</p>\n<p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器<br>例如，假设阀值是<code>(700,10,10)</code>：</p>\n<ul>\n<li>当计数器从<code>(699,3,0)</code>增加到<code>(700,3,0)</code>，gc模块就会执行<code>gc.collect(0)</code>,即检查0代对象的垃圾，并重置计数器为<code>(0,4,0)</code></li>\n<li>当计数器从<code>(699,9,0)</code>增加到<code>(700,9,0)</code>，gc模块就会执行<code>gc.collect(1)</code>,即检查1、2代对象的垃圾，并重置计数器为<code>(0,0,1)</code></li>\n<li>当计数器从<code>(699,9,9)</code>增加到<code>(700,9,9)</code>，gc模块就会执行<code>gc.collect(2)</code>,即检查0、1、2代对象的垃圾，并重置计数器为<code>(0,0,0)</code></li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>项目中避免循环引用</li>\n<li>引入gc模块，启动gc模块的自动清理循环引用的对象机制</li>\n<li>由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗</li>\n<li>gc模块唯一处理不了的是循环引用的类都有<code>__del__</code>方法，所以项目中要避免定义_<code>_del__</code>方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用<code>gc.garbage</code>里面的对象的<code>__del__</code>来打破僵局</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87843/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87843/</a></li>\n<li><a href=\"https://www.cnblogs.com/pinganzi/p/6646742.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pinganzi/p/6646742.html</a></li>\n<li><a href=\"http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。</p>","more":"<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</p>\n<p>导致引用计数+1的情况</p>\n<ol>\n<li>对象被创建，例如<code>a=23</code></li>\n<li>对象被引用，例如<code>b=a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code><br>导致引用计数-1的情况</li>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ol>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"https://foofish.net/images/mark-sweep.svg\" alt=\"mark-sweepg\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>\n<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h2 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h2><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉(包括循环引用的对象)，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，<code>分代回收是建立在标记清除技术基础之上</code>。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p>\n<h2 id=\"Python中的GC阈值\"><a href=\"#Python中的GC阈值\" class=\"headerlink\" title=\"Python中的GC阈值\"></a>Python中的GC阈值</h2><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。</p>\n<p>当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。</p>\n<p>随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。</p>\n<p>通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。</p>\n<h2 id=\"gc模块\"><a href=\"#gc模块\" class=\"headerlink\" title=\"gc模块\"></a>gc模块</h2><p><a href=\"https://docs.python.org/2/library/gc.html\" target=\"_blank\" rel=\"noopener\">Garbage Collector interface</a><br>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>\n<h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><ol>\n<li>gc.set_debug(flags)<br>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</li>\n<li>gc.collect([generation])<br>显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。<br>返回不可达（unreachable objects）对象的数目</li>\n<li>gc.set_threshold(threshold0[, threshold1[, threshold2])<br>设置自动执行垃圾回收的频率。</li>\n<li>gc.get_count()<br>获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>\n</ol>\n<h3 id=\"gc模块的自动垃圾回收机制\"><a href=\"#gc模块的自动垃圾回收机制\" class=\"headerlink\" title=\"gc模块的自动垃圾回收机制\"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>\n<p><code>垃圾回收=垃圾检查+垃圾回收</code>  </p>\n<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>\n<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。<br>例如<code>(488,3,0)</code>，其中<code>488</code>是指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目，<strong>注意是内存分配，而不是引用计数的增加</strong>。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br><span class=\"line\">a = ClassA()</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (591, 8, 0)</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a</span><br><span class=\"line\"><span class=\"keyword\">print</span> gc.get_count()  <span class=\"comment\"># (590, 8, 0)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>3</code>是指距离上一次1代垃圾检查，0代垃圾检查的次数，同理，<code>0</code>是指距离上一次2代垃圾检查，1代垃圾检查的次数。</p>\n<p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器<br>例如，假设阀值是<code>(700,10,10)</code>：</p>\n<ul>\n<li>当计数器从<code>(699,3,0)</code>增加到<code>(700,3,0)</code>，gc模块就会执行<code>gc.collect(0)</code>,即检查0代对象的垃圾，并重置计数器为<code>(0,4,0)</code></li>\n<li>当计数器从<code>(699,9,0)</code>增加到<code>(700,9,0)</code>，gc模块就会执行<code>gc.collect(1)</code>,即检查1、2代对象的垃圾，并重置计数器为<code>(0,0,1)</code></li>\n<li>当计数器从<code>(699,9,9)</code>增加到<code>(700,9,9)</code>，gc模块就会执行<code>gc.collect(2)</code>,即检查0、1、2代对象的垃圾，并重置计数器为<code>(0,0,0)</code></li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>项目中避免循环引用</li>\n<li>引入gc模块，启动gc模块的自动清理循环引用的对象机制</li>\n<li>由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗</li>\n<li>gc模块唯一处理不了的是循环引用的类都有<code>__del__</code>方法，所以项目中要避免定义_<code>_del__</code>方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用<code>gc.garbage</code>里面的对象的<code>__del__</code>来打破僵局</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://python.jobbole.com/87843/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87843/</a></li>\n<li><a href=\"https://www.cnblogs.com/pinganzi/p/6646742.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pinganzi/p/6646742.html</a></li>\n<li><a href=\"http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/87064/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 06 2018 00:51:20 GMT+0800 (China Standard Time)","title":"Python3 垃圾回收机制","path":"2018/03/05/Python3-垃圾回收机制/","eyeCatchImage":null,"excerpt":"<p>Python中的垃圾回收GC(Garbage collection)是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>分代收集在一定程度上解决了循环引用的问题（可能描述不准确）。</p>","date":"2018-03-05T13:38:25.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 基于顺序表技术实现栈类","date":"2018-03-17T06:40:55.000Z","_content":"## 定义异常类\n实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义\n```Python\nclass StackUnderflow(ValueError):  # 栈下溢，空栈访问\n    pass\n```\n上面把异常`StackUnderflow`定义为`ValueError`子类，只简单定义了一个类名，类体部分只有一个`pass`语句，未定义任何新属性，因为不准备提供`ValueError`之外的新功能，只是想与其他`ValueError`异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过`except`进行捕捉和处理，但只能通过`raise`语句引发。\n\n<!-- more -->\n## 栈类定义\n把list当做栈使用时，完全可以满足应用需要。但是，这样建立的对象实际上还是list，提供了list类型的所有操作。特别是提供了一大批栈结构原本不应该支持的操作，威胁栈的使用安全性(例如，栈要求未经弹出的元素应该存在，但表运行任意删除)。另外，这样的“栈”不是一个独立的类型，因此没有独立类型的所有重要性质。\n\n为了概念更清晰，实现更安全，操作名也更容易理解，，可以考虑使用顺序表定义一个栈类，使之成为一个独立的类型，把Python的list隐藏在类内部，作为其实现基础。\n\n```python\n\"\"\"\n基于顺序表实现栈类\n用list对象 _elems存储栈中的元素\n所有的栈操作都映射到list操作\n\"\"\"\nclass SStack(object):\n    def __init__(self):\n        self._elems = []\n\n    def is_empty(self):\n        return self._elems == []\n\n    def top(self):\n        if self._elems == []:\n            raise StackUnderflow('in SStack.top()')\n        return self._elems[-1]\n\n    def push(self, elem):\n        self._elems.append(elem)\n\n    def pop(self):\n        if self._elems == []:\n            raise StackUnderflow('in SStack.pop()')\n        return self._elems.pop()\n```\n\n## 参考\n\n1. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","source":"_posts/Python3-基于顺序表技术实现栈类.md","raw":"---\ntitle: Python3 基于顺序表技术实现栈类\ndate: 2018-03-17 14:40:55\ntags:\n  - Python3\n  - Algorithm\n  - Data Structures\ncategories:\n  - Data Structures\n---\n## 定义异常类\n实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义\n```Python\nclass StackUnderflow(ValueError):  # 栈下溢，空栈访问\n    pass\n```\n上面把异常`StackUnderflow`定义为`ValueError`子类，只简单定义了一个类名，类体部分只有一个`pass`语句，未定义任何新属性，因为不准备提供`ValueError`之外的新功能，只是想与其他`ValueError`异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过`except`进行捕捉和处理，但只能通过`raise`语句引发。\n\n<!-- more -->\n## 栈类定义\n把list当做栈使用时，完全可以满足应用需要。但是，这样建立的对象实际上还是list，提供了list类型的所有操作。特别是提供了一大批栈结构原本不应该支持的操作，威胁栈的使用安全性(例如，栈要求未经弹出的元素应该存在，但表运行任意删除)。另外，这样的“栈”不是一个独立的类型，因此没有独立类型的所有重要性质。\n\n为了概念更清晰，实现更安全，操作名也更容易理解，，可以考虑使用顺序表定义一个栈类，使之成为一个独立的类型，把Python的list隐藏在类内部，作为其实现基础。\n\n```python\n\"\"\"\n基于顺序表实现栈类\n用list对象 _elems存储栈中的元素\n所有的栈操作都映射到list操作\n\"\"\"\nclass SStack(object):\n    def __init__(self):\n        self._elems = []\n\n    def is_empty(self):\n        return self._elems == []\n\n    def top(self):\n        if self._elems == []:\n            raise StackUnderflow('in SStack.top()')\n        return self._elems[-1]\n\n    def push(self, elem):\n        self._elems.append(elem)\n\n    def pop(self):\n        if self._elems == []:\n            raise StackUnderflow('in SStack.pop()')\n        return self._elems.pop()\n```\n\n## 参考\n\n1. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","slug":"Python3-基于顺序表技术实现栈类","published":1,"updated":"2018-03-17T07:12:09.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x800061exotgvhjzfog","content":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>上面把异常<code>StackUnderflow</code>定义为<code>ValueError</code>子类，只简单定义了一个类名，类体部分只有一个<code>pass</code>语句，未定义任何新属性，因为不准备提供<code>ValueError</code>之外的新功能，只是想与其他<code>ValueError</code>异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过<code>except</code>进行捕捉和处理，但只能通过<code>raise</code>语句引发。</p>\n<a id=\"more\"></a>\n<h2 id=\"栈类定义\"><a href=\"#栈类定义\" class=\"headerlink\" title=\"栈类定义\"></a>栈类定义</h2><p>把list当做栈使用时，完全可以满足应用需要。但是，这样建立的对象实际上还是list，提供了list类型的所有操作。特别是提供了一大批栈结构原本不应该支持的操作，威胁栈的使用安全性(例如，栈要求未经弹出的元素应该存在，但表运行任意删除)。另外，这样的“栈”不是一个独立的类型，因此没有独立类型的所有重要性质。</p>\n<p>为了概念更清晰，实现更安全，操作名也更容易理解，，可以考虑使用顺序表定义一个栈类，使之成为一个独立的类型，把Python的list隐藏在类内部，作为其实现基础。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于顺序表实现栈类</span></span><br><span class=\"line\"><span class=\"string\">用list对象 _elems存储栈中的元素</span></span><br><span class=\"line\"><span class=\"string\">所有的栈操作都映射到list操作</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._elems = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems == []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._elems == []:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in SStack.top()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, elem)</span>:</span></span><br><span class=\"line\">        self._elems.append(elem)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._elems == []:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in SStack.pop()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>上面把异常<code>StackUnderflow</code>定义为<code>ValueError</code>子类，只简单定义了一个类名，类体部分只有一个<code>pass</code>语句，未定义任何新属性，因为不准备提供<code>ValueError</code>之外的新功能，只是想与其他<code>ValueError</code>异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过<code>except</code>进行捕捉和处理，但只能通过<code>raise</code>语句引发。</p>","more":"<h2 id=\"栈类定义\"><a href=\"#栈类定义\" class=\"headerlink\" title=\"栈类定义\"></a>栈类定义</h2><p>把list当做栈使用时，完全可以满足应用需要。但是，这样建立的对象实际上还是list，提供了list类型的所有操作。特别是提供了一大批栈结构原本不应该支持的操作，威胁栈的使用安全性(例如，栈要求未经弹出的元素应该存在，但表运行任意删除)。另外，这样的“栈”不是一个独立的类型，因此没有独立类型的所有重要性质。</p>\n<p>为了概念更清晰，实现更安全，操作名也更容易理解，，可以考虑使用顺序表定义一个栈类，使之成为一个独立的类型，把Python的list隐藏在类内部，作为其实现基础。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于顺序表实现栈类</span></span><br><span class=\"line\"><span class=\"string\">用list对象 _elems存储栈中的元素</span></span><br><span class=\"line\"><span class=\"string\">所有的栈操作都映射到list操作</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._elems = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems == []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._elems == []:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in SStack.top()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, elem)</span>:</span></span><br><span class=\"line\">        self._elems.append(elem)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._elems == []:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in SStack.pop()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._elems.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 17 2018 15:12:09 GMT+0800 (China Standard Time)","title":"Python3 基于顺序表技术实现栈类","path":"2018/03/17/Python3-基于顺序表技术实现栈类/","eyeCatchImage":null,"excerpt":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>上面把异常<code>StackUnderflow</code>定义为<code>ValueError</code>子类，只简单定义了一个类名，类体部分只有一个<code>pass</code>语句，未定义任何新属性，因为不准备提供<code>ValueError</code>之外的新功能，只是想与其他<code>ValueError</code>异常有所区分，程序出错时能产生不同的错误信息。必要时可以定义专门的异常处理操作。自定义异常与python内置异常类似，同样通过<code>except</code>进行捕捉和处理，但只能通过<code>raise</code>语句引发。</p>","date":"2018-03-17T06:40:55.000Z","pv":0,"totalPV":0,"categories":"Data Structures","tags":["Python3","Algorithm","Data Structures"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 基于链表技术实现栈","date":"2018-03-17T07:40:12.000Z","_content":"## 定义异常类\n实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义\n```Python\nclass StackUnderflow(ValueError):  # 栈下溢，空栈访问\n    pass\n```\n\n## 定义一个表结点类\n\n```python\nclass LNode:\n    def __init__(self, elem, next_=None):\n        self.elem = elem\n        self.next = next_\n```\n方法的第二个参数用名字`next_`，是为了避免与Python`标准函数next`重名\n\n<!-- more -->\n\n## 栈的链接表实现\n由于所有栈的操作都在线性表的一端进行，采用链接表技术，自然应该用表头一端作为栈顶，表尾作为栈底，是操作实现方便，效率也高。按照这种安排，容易定义出一个链接栈类。\n```python\nclass LStack:\n    def __init__(self):\n        self._top = None\n\n    def is_empty(self):\n        return self._top is None\n\n    def top(self):\n        if self._top is None:\n            raise StackUnderflow('in LStack.top()')\n        return self._top.elem\n\n    def push(self, elem):\n        self._top = LNode(elem, self._top)\n\n    def pop(self):\n        if self._top is None:\n            raise StackUnderflow('in LStack.pop()')\n        p = self._top\n        self._top = p.next\n        return p.elem\n\n\n\n```\n\n## 参考\n\n1. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","source":"_posts/Python3-基于链表技术实现栈.md","raw":"---\ntitle: Python3 基于链表技术实现栈\ndate: 2018-03-17 15:40:12\ntags:\n  - Python3\n  - Algorithm\n  - Data Structures\ncategories:\n  - Data Structures\n---\n## 定义异常类\n实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义\n```Python\nclass StackUnderflow(ValueError):  # 栈下溢，空栈访问\n    pass\n```\n\n## 定义一个表结点类\n\n```python\nclass LNode:\n    def __init__(self, elem, next_=None):\n        self.elem = elem\n        self.next = next_\n```\n方法的第二个参数用名字`next_`，是为了避免与Python`标准函数next`重名\n\n<!-- more -->\n\n## 栈的链接表实现\n由于所有栈的操作都在线性表的一端进行，采用链接表技术，自然应该用表头一端作为栈顶，表尾作为栈底，是操作实现方便，效率也高。按照这种安排，容易定义出一个链接栈类。\n```python\nclass LStack:\n    def __init__(self):\n        self._top = None\n\n    def is_empty(self):\n        return self._top is None\n\n    def top(self):\n        if self._top is None:\n            raise StackUnderflow('in LStack.top()')\n        return self._top.elem\n\n    def push(self, elem):\n        self._top = LNode(elem, self._top)\n\n    def pop(self):\n        if self._top is None:\n            raise StackUnderflow('in LStack.pop()')\n        p = self._top\n        self._top = p.next\n        return p.elem\n\n\n\n```\n\n## 参考\n\n1. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","slug":"Python3-基于链表技术实现栈","published":1,"updated":"2018-03-18T20:13:11.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x8g0064exotvuqpvf7s","content":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"定义一个表结点类\"><a href=\"#定义一个表结点类\" class=\"headerlink\" title=\"定义一个表结点类\"></a>定义一个表结点类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, elem, next_=None)</span>:</span></span><br><span class=\"line\">        self.elem = elem</span><br><span class=\"line\">        self.next = next_</span><br></pre></td></tr></table></figure>\n<p>方法的第二个参数用名字<code>next_</code>，是为了避免与Python<code>标准函数next</code>重名</p>\n<a id=\"more\"></a>\n<h2 id=\"栈的链接表实现\"><a href=\"#栈的链接表实现\" class=\"headerlink\" title=\"栈的链接表实现\"></a>栈的链接表实现</h2><p>由于所有栈的操作都在线性表的一端进行，采用链接表技术，自然应该用表头一端作为栈顶，表尾作为栈底，是操作实现方便，效率也高。按照这种安排，容易定义出一个链接栈类。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LStack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._top = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in LStack.top()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._top.elem</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, elem)</span>:</span></span><br><span class=\"line\">        self._top = LNode(elem, self._top)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in LStack.pop()'</span>)</span><br><span class=\"line\">        p = self._top</span><br><span class=\"line\">        self._top = p.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.elem</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"定义一个表结点类\"><a href=\"#定义一个表结点类\" class=\"headerlink\" title=\"定义一个表结点类\"></a>定义一个表结点类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, elem, next_=None)</span>:</span></span><br><span class=\"line\">        self.elem = elem</span><br><span class=\"line\">        self.next = next_</span><br></pre></td></tr></table></figure>\n<p>方法的第二个参数用名字<code>next_</code>，是为了避免与Python<code>标准函数next</code>重名</p>","more":"<h2 id=\"栈的链接表实现\"><a href=\"#栈的链接表实现\" class=\"headerlink\" title=\"栈的链接表实现\"></a>栈的链接表实现</h2><p>由于所有栈的操作都在线性表的一端进行，采用链接表技术，自然应该用表头一端作为栈顶，表尾作为栈底，是操作实现方便，效率也高。按照这种安排，容易定义出一个链接栈类。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LStack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._top = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in LStack.top()'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._top.elem</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, elem)</span>:</span></span><br><span class=\"line\">        self._top = LNode(elem, self._top)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StackUnderflow(<span class=\"string\">'in LStack.pop()'</span>)</span><br><span class=\"line\">        p = self._top</span><br><span class=\"line\">        self._top = p.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.elem</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 19 2018 04:13:11 GMT+0800 (China Standard Time)","title":"Python3 基于链表技术实现栈","path":"2018/03/17/Python3-基于链表技术实现栈/","eyeCatchImage":null,"excerpt":"<h2 id=\"定义异常类\"><a href=\"#定义异常类\" class=\"headerlink\" title=\"定义异常类\"></a>定义异常类</h2><p>实现栈结构之前，先考虑为操作失败的处理定义一个异常类。在这里通过继承已有的异常类定义自己的异常类。由于栈操作(如空栈弹出)时不满足需要可以看做参数值错误，采用下面的定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUnderflow</span><span class=\"params\">(ValueError)</span>:</span>  <span class=\"comment\"># 栈下溢，空栈访问</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"定义一个表结点类\"><a href=\"#定义一个表结点类\" class=\"headerlink\" title=\"定义一个表结点类\"></a>定义一个表结点类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, elem, next_=None)</span>:</span></span><br><span class=\"line\">        self.elem = elem</span><br><span class=\"line\">        self.next = next_</span><br></pre></td></tr></table></figure>\n<p>方法的第二个参数用名字<code>next_</code>，是为了避免与Python<code>标准函数next</code>重名</p>","date":"2018-03-17T07:40:12.000Z","pv":0,"totalPV":0,"categories":"Data Structures","tags":["Python3","Algorithm","Data Structures"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 实现二叉树前、中、后序遍历及按层遍历","date":"2018-03-15T15:57:26.000Z","_content":"假设有这么一个二叉树如下：\n![二叉树.png](https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10\n中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7\n后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1\n\n## 二叉树的类实现\n```python\nclass Node(object):\n    def __init__(self, value=None, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nif __name__ == \"__main__\":\n    tree = Node(1, Node(2, Node(4),\n                           Node(5, Node(8),\n                                   Node(9, left=Node(11)))),\n                   Node(3, Node(6),\n                           Node(7, left=Node(10))))\n```\n<!-- more -->\n## 深度优先遍历\n### 递归法\n\n```python\n# 前序遍历（递归）\ndef pre_deep_func(root):\n    if root is None:\n        return\n    print(root.value, end = ' ')  # print 放到下一行 就是中序遍历，放到最后 就是后序遍历\n    pre_deep_func(root.left)\n    pre_deep_func(root.right)\n\n```\n\n### 非递归法\n#### 前序遍历\n根据已有的认识，此函数需要一个栈，保存树尚未访问过的部分信息。对于前序遍历也会有不同的实现方法，下面考虑一种方法，即：\n1. 由于采取先序遍历，遇到结点就应该访问，下一步就应该沿着树的坐分支下行\n2. 但结点的右分支（右子树）还没有访问，因此需要记录，将右子结点入栈。\n3. 遇到空树时回溯，取出栈中保存的一个右分支，像一颗二叉树一样遍历它。\n\n\n```python\n## 方法一 常规打印\ndef preorder_nonrec(root):\n    s = []\n    while s or root:\n        while root:  # 沿左分支下行\n            print(root.value, end = ' ')  # 先处理根数据\n            s.append(root.right)          # 右分支入栈\n            root = root.left\n        root = s.pop()                    #  遇到空树，回溯\n\n## 方法二 通过生成器函数遍历\ndef preorder_elements(root):\n    s = []\n    while s or root:\n        while root:\n            s.append(root.right)\n            yield root.value\n            root = root.left\n        root = s.pop()\n\n## 方法三\n# 前序遍历（根左右）:模拟压栈过程\n# 入栈之前读（根、左），这样出栈时再读右（也是右结点子节点们的根）\ndef pre_deep_func2(root):\n    a = []\n    while a or root:\n        while root:\n            print(root.value, end = ' ')\n            a.append(root)  ## 根入栈\n            root = root.left\n        h = a.pop()\n        root = h.right\n\n```\n\n非递归算法的一个价值是把算法过程完整的暴露出来，便于进行细致的分析。\n时间复杂度：在非递归的算法中，因为在执行的过程中访问每个结点一次，一部分子树(所有右子树，方法一、二)被压入和弹出各一次(栈操作是O(1)时间)，所以整个遍历过程需要的时间复杂度为O(n)。\n空间复杂度：这里的关键因素是遍历中栈可能达到的最大深度（栈中元素的最大深度个数），而栈的最大深度由被遍历的二叉树的高度决定。由于二叉树的高度可能达到O(n)，所以在最坏情况下，算法的空间复杂度为O(n)，n个结点的二叉树的平均高度为O(log n)，所以非递归前序遍历的平均空间复杂度为O(log n)。\n在一些情况下，修改实现方法也可能降低空间的开销。对于上面函数，修改其定义，只把非空的右子树进栈，在很多情况下能减小一些空间开销。\n\n其他非递归的遍历算法，包括中序遍历和后续遍历算法以及层次遍历算法，都可以直接了当的修改成迭代器。但是递归算法不可以。\n\n#### 中序遍历\n```python\n# 中序遍历（左根右）:模拟压栈过程\n# 出栈之后读（左、根），这样出栈后指针变更再读右\ndef mid_deep_func2(root):\n    a = []\n    while a or root:\n        while root:\n            a.append(root)\n            root = root.left\n        h = a.pop()\n        print h.value\n        root = h.right\n```\n\n#### 后序遍历\n```python\n# 后序遍历（左右根）:模拟逆序(根右左)存入数组b，然后再数组b逆序输出\n# (根右左)与(根左右)类似，入栈a前读（根、右），出栈后指针变更再读左\n## 方法 1\ndef after_deep_func2(root):\n    a = []\n    b = []\n    while a or root:\n        while root:\n            b.append(root.value)\n            a.append(root.left)\n            root = root.right\n        root = a.pop()\n    print(b[::-1])\n\n## 方法2\ndef after_deep_func2(root):\n    a = []\n    b = []\n    while a or root:\n        while root:\n            b.append(root.value)\n            a.append(root)\n            root = root.right\n        h = a.pop()\n        root = h.left\n    print b[::-1]\n```\n\n## 广度优先遍历\n```python\ndef level_func(root):\n    a = []\n    a.append(root)\n    while a:\n        head = a.pop(0)\n        print head.value\n        if head.left:\n            a.append(head.left)\n        if head.right:\n            a.append(head.right)\n\n```\n\n\n\n## 参考\n\n1. http://blog.csdn.net/su92chen/article/details/70242822\n2. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","source":"_posts/Python3-实现二叉树前、中、后序遍历及按层遍历.md","raw":"---\ntitle: Python3 实现二叉树前、中、后序遍历及按层遍历\ndate: 2018-03-15 23:57:26\ntags:\n  - Python3\n  - Algorithm\n  - Data Structures\ncategories:\n  - Data Structures\n---\n假设有这么一个二叉树如下：\n![二叉树.png](https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10\n中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7\n后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1\n\n## 二叉树的类实现\n```python\nclass Node(object):\n    def __init__(self, value=None, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nif __name__ == \"__main__\":\n    tree = Node(1, Node(2, Node(4),\n                           Node(5, Node(8),\n                                   Node(9, left=Node(11)))),\n                   Node(3, Node(6),\n                           Node(7, left=Node(10))))\n```\n<!-- more -->\n## 深度优先遍历\n### 递归法\n\n```python\n# 前序遍历（递归）\ndef pre_deep_func(root):\n    if root is None:\n        return\n    print(root.value, end = ' ')  # print 放到下一行 就是中序遍历，放到最后 就是后序遍历\n    pre_deep_func(root.left)\n    pre_deep_func(root.right)\n\n```\n\n### 非递归法\n#### 前序遍历\n根据已有的认识，此函数需要一个栈，保存树尚未访问过的部分信息。对于前序遍历也会有不同的实现方法，下面考虑一种方法，即：\n1. 由于采取先序遍历，遇到结点就应该访问，下一步就应该沿着树的坐分支下行\n2. 但结点的右分支（右子树）还没有访问，因此需要记录，将右子结点入栈。\n3. 遇到空树时回溯，取出栈中保存的一个右分支，像一颗二叉树一样遍历它。\n\n\n```python\n## 方法一 常规打印\ndef preorder_nonrec(root):\n    s = []\n    while s or root:\n        while root:  # 沿左分支下行\n            print(root.value, end = ' ')  # 先处理根数据\n            s.append(root.right)          # 右分支入栈\n            root = root.left\n        root = s.pop()                    #  遇到空树，回溯\n\n## 方法二 通过生成器函数遍历\ndef preorder_elements(root):\n    s = []\n    while s or root:\n        while root:\n            s.append(root.right)\n            yield root.value\n            root = root.left\n        root = s.pop()\n\n## 方法三\n# 前序遍历（根左右）:模拟压栈过程\n# 入栈之前读（根、左），这样出栈时再读右（也是右结点子节点们的根）\ndef pre_deep_func2(root):\n    a = []\n    while a or root:\n        while root:\n            print(root.value, end = ' ')\n            a.append(root)  ## 根入栈\n            root = root.left\n        h = a.pop()\n        root = h.right\n\n```\n\n非递归算法的一个价值是把算法过程完整的暴露出来，便于进行细致的分析。\n时间复杂度：在非递归的算法中，因为在执行的过程中访问每个结点一次，一部分子树(所有右子树，方法一、二)被压入和弹出各一次(栈操作是O(1)时间)，所以整个遍历过程需要的时间复杂度为O(n)。\n空间复杂度：这里的关键因素是遍历中栈可能达到的最大深度（栈中元素的最大深度个数），而栈的最大深度由被遍历的二叉树的高度决定。由于二叉树的高度可能达到O(n)，所以在最坏情况下，算法的空间复杂度为O(n)，n个结点的二叉树的平均高度为O(log n)，所以非递归前序遍历的平均空间复杂度为O(log n)。\n在一些情况下，修改实现方法也可能降低空间的开销。对于上面函数，修改其定义，只把非空的右子树进栈，在很多情况下能减小一些空间开销。\n\n其他非递归的遍历算法，包括中序遍历和后续遍历算法以及层次遍历算法，都可以直接了当的修改成迭代器。但是递归算法不可以。\n\n#### 中序遍历\n```python\n# 中序遍历（左根右）:模拟压栈过程\n# 出栈之后读（左、根），这样出栈后指针变更再读右\ndef mid_deep_func2(root):\n    a = []\n    while a or root:\n        while root:\n            a.append(root)\n            root = root.left\n        h = a.pop()\n        print h.value\n        root = h.right\n```\n\n#### 后序遍历\n```python\n# 后序遍历（左右根）:模拟逆序(根右左)存入数组b，然后再数组b逆序输出\n# (根右左)与(根左右)类似，入栈a前读（根、右），出栈后指针变更再读左\n## 方法 1\ndef after_deep_func2(root):\n    a = []\n    b = []\n    while a or root:\n        while root:\n            b.append(root.value)\n            a.append(root.left)\n            root = root.right\n        root = a.pop()\n    print(b[::-1])\n\n## 方法2\ndef after_deep_func2(root):\n    a = []\n    b = []\n    while a or root:\n        while root:\n            b.append(root.value)\n            a.append(root)\n            root = root.right\n        h = a.pop()\n        root = h.left\n    print b[::-1]\n```\n\n## 广度优先遍历\n```python\ndef level_func(root):\n    a = []\n    a.append(root)\n    while a:\n        head = a.pop(0)\n        print head.value\n        if head.left:\n            a.append(head.left)\n        if head.right:\n            a.append(head.right)\n\n```\n\n\n\n## 参考\n\n1. http://blog.csdn.net/su92chen/article/details/70242822\n2. 《数据结构与算法Python语言描述》 --- 裘宗燕\n","slug":"Python3-实现二叉树前、中、后序遍历及按层遍历","published":1,"updated":"2018-03-18T20:12:31.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x8r0069exotx6ckqev0","content":"<p>假设有这么一个二叉树如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"二叉树.png\"></p>\n<p>前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10<br>中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7<br>后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1</p>\n<h2 id=\"二叉树的类实现\"><a href=\"#二叉树的类实现\" class=\"headerlink\" title=\"二叉树的类实现\"></a>二叉树的类实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value=None, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    tree = Node(<span class=\"number\">1</span>, Node(<span class=\"number\">2</span>, Node(<span class=\"number\">4</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">5</span>, Node(<span class=\"number\">8</span>),</span><br><span class=\"line\">                                   Node(<span class=\"number\">9</span>, left=Node(<span class=\"number\">11</span>)))),</span><br><span class=\"line\">                   Node(<span class=\"number\">3</span>, Node(<span class=\"number\">6</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">7</span>, left=Node(<span class=\"number\">10</span>))))</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h2><h3 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前序遍历（递归）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_deep_func</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    print(root.value, end = <span class=\"string\">' '</span>)  <span class=\"comment\"># print 放到下一行 就是中序遍历，放到最后 就是后序遍历</span></span><br><span class=\"line\">    pre_deep_func(root.left)</span><br><span class=\"line\">    pre_deep_func(root.right)</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归法\"><a href=\"#非递归法\" class=\"headerlink\" title=\"非递归法\"></a>非递归法</h3><h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>根据已有的认识，此函数需要一个栈，保存树尚未访问过的部分信息。对于前序遍历也会有不同的实现方法，下面考虑一种方法，即：</p>\n<ol>\n<li>由于采取先序遍历，遇到结点就应该访问，下一步就应该沿着树的坐分支下行</li>\n<li>但结点的右分支（右子树）还没有访问，因此需要记录，将右子结点入栈。</li>\n<li>遇到空树时回溯，取出栈中保存的一个右分支，像一颗二叉树一样遍历它。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 方法一 常规打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorder_nonrec</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    s = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> s <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:  <span class=\"comment\"># 沿左分支下行</span></span><br><span class=\"line\">            print(root.value, end = <span class=\"string\">' '</span>)  <span class=\"comment\"># 先处理根数据</span></span><br><span class=\"line\">            s.append(root.right)          <span class=\"comment\"># 右分支入栈</span></span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        root = s.pop()                    <span class=\"comment\">#  遇到空树，回溯</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法二 通过生成器函数遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorder_elements</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    s = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> s <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            s.append(root.right)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> root.value</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        root = s.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法三</span></span><br><span class=\"line\"><span class=\"comment\"># 前序遍历（根左右）:模拟压栈过程</span></span><br><span class=\"line\"><span class=\"comment\"># 入栈之前读（根、左），这样出栈时再读右（也是右结点子节点们的根）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            print(root.value, end = <span class=\"string\">' '</span>)</span><br><span class=\"line\">            a.append(root)  <span class=\"comment\">## 根入栈</span></span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        root = h.right</span><br></pre></td></tr></table></figure>\n<p>非递归算法的一个价值是把算法过程完整的暴露出来，便于进行细致的分析。<br>时间复杂度：在非递归的算法中，因为在执行的过程中访问每个结点一次，一部分子树(所有右子树，方法一、二)被压入和弹出各一次(栈操作是O(1)时间)，所以整个遍历过程需要的时间复杂度为O(n)。<br>空间复杂度：这里的关键因素是遍历中栈可能达到的最大深度（栈中元素的最大深度个数），而栈的最大深度由被遍历的二叉树的高度决定。由于二叉树的高度可能达到O(n)，所以在最坏情况下，算法的空间复杂度为O(n)，n个结点的二叉树的平均高度为O(log n)，所以非递归前序遍历的平均空间复杂度为O(log n)。<br>在一些情况下，修改实现方法也可能降低空间的开销。对于上面函数，修改其定义，只把非空的右子树进栈，在很多情况下能减小一些空间开销。</p>\n<p>其他非递归的遍历算法，包括中序遍历和后续遍历算法以及层次遍历算法，都可以直接了当的修改成迭代器。但是递归算法不可以。</p>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 中序遍历（左根右）:模拟压栈过程</span></span><br><span class=\"line\"><span class=\"comment\"># 出栈之后读（左、根），这样出栈后指针变更再读右</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mid_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            a.append(root)</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> h.value</span><br><span class=\"line\">        root = h.right</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后序遍历（左右根）:模拟逆序(根右左)存入数组b，然后再数组b逆序输出</span></span><br><span class=\"line\"><span class=\"comment\"># (根右左)与(根左右)类似，入栈a前读（根、右），出栈后指针变更再读左</span></span><br><span class=\"line\"><span class=\"comment\">## 方法 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            b.append(root.value)</span><br><span class=\"line\">            a.append(root.left)</span><br><span class=\"line\">            root = root.right</span><br><span class=\"line\">        root = a.pop()</span><br><span class=\"line\">    print(b[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            b.append(root.value)</span><br><span class=\"line\">            a.append(root)</span><br><span class=\"line\">            root = root.right</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        root = h.left</span><br><span class=\"line\">    <span class=\"keyword\">print</span> b[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">level_func</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    a.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a:</span><br><span class=\"line\">        head = a.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> head.value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head.left:</span><br><span class=\"line\">            a.append(head.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head.right:</span><br><span class=\"line\">            a.append(head.right)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://blog.csdn.net/su92chen/article/details/70242822\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/su92chen/article/details/70242822</a></li>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>假设有这么一个二叉树如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"二叉树.png\"></p>\n<p>前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10<br>中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7<br>后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1</p>\n<h2 id=\"二叉树的类实现\"><a href=\"#二叉树的类实现\" class=\"headerlink\" title=\"二叉树的类实现\"></a>二叉树的类实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value=None, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    tree = Node(<span class=\"number\">1</span>, Node(<span class=\"number\">2</span>, Node(<span class=\"number\">4</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">5</span>, Node(<span class=\"number\">8</span>),</span><br><span class=\"line\">                                   Node(<span class=\"number\">9</span>, left=Node(<span class=\"number\">11</span>)))),</span><br><span class=\"line\">                   Node(<span class=\"number\">3</span>, Node(<span class=\"number\">6</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">7</span>, left=Node(<span class=\"number\">10</span>))))</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h2><h3 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前序遍历（递归）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_deep_func</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    print(root.value, end = <span class=\"string\">' '</span>)  <span class=\"comment\"># print 放到下一行 就是中序遍历，放到最后 就是后序遍历</span></span><br><span class=\"line\">    pre_deep_func(root.left)</span><br><span class=\"line\">    pre_deep_func(root.right)</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归法\"><a href=\"#非递归法\" class=\"headerlink\" title=\"非递归法\"></a>非递归法</h3><h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>根据已有的认识，此函数需要一个栈，保存树尚未访问过的部分信息。对于前序遍历也会有不同的实现方法，下面考虑一种方法，即：</p>\n<ol>\n<li>由于采取先序遍历，遇到结点就应该访问，下一步就应该沿着树的坐分支下行</li>\n<li>但结点的右分支（右子树）还没有访问，因此需要记录，将右子结点入栈。</li>\n<li>遇到空树时回溯，取出栈中保存的一个右分支，像一颗二叉树一样遍历它。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 方法一 常规打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorder_nonrec</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    s = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> s <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:  <span class=\"comment\"># 沿左分支下行</span></span><br><span class=\"line\">            print(root.value, end = <span class=\"string\">' '</span>)  <span class=\"comment\"># 先处理根数据</span></span><br><span class=\"line\">            s.append(root.right)          <span class=\"comment\"># 右分支入栈</span></span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        root = s.pop()                    <span class=\"comment\">#  遇到空树，回溯</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法二 通过生成器函数遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorder_elements</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    s = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> s <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            s.append(root.right)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> root.value</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        root = s.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法三</span></span><br><span class=\"line\"><span class=\"comment\"># 前序遍历（根左右）:模拟压栈过程</span></span><br><span class=\"line\"><span class=\"comment\"># 入栈之前读（根、左），这样出栈时再读右（也是右结点子节点们的根）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            print(root.value, end = <span class=\"string\">' '</span>)</span><br><span class=\"line\">            a.append(root)  <span class=\"comment\">## 根入栈</span></span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        root = h.right</span><br></pre></td></tr></table></figure>\n<p>非递归算法的一个价值是把算法过程完整的暴露出来，便于进行细致的分析。<br>时间复杂度：在非递归的算法中，因为在执行的过程中访问每个结点一次，一部分子树(所有右子树，方法一、二)被压入和弹出各一次(栈操作是O(1)时间)，所以整个遍历过程需要的时间复杂度为O(n)。<br>空间复杂度：这里的关键因素是遍历中栈可能达到的最大深度（栈中元素的最大深度个数），而栈的最大深度由被遍历的二叉树的高度决定。由于二叉树的高度可能达到O(n)，所以在最坏情况下，算法的空间复杂度为O(n)，n个结点的二叉树的平均高度为O(log n)，所以非递归前序遍历的平均空间复杂度为O(log n)。<br>在一些情况下，修改实现方法也可能降低空间的开销。对于上面函数，修改其定义，只把非空的右子树进栈，在很多情况下能减小一些空间开销。</p>\n<p>其他非递归的遍历算法，包括中序遍历和后续遍历算法以及层次遍历算法，都可以直接了当的修改成迭代器。但是递归算法不可以。</p>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 中序遍历（左根右）:模拟压栈过程</span></span><br><span class=\"line\"><span class=\"comment\"># 出栈之后读（左、根），这样出栈后指针变更再读右</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mid_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            a.append(root)</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> h.value</span><br><span class=\"line\">        root = h.right</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后序遍历（左右根）:模拟逆序(根右左)存入数组b，然后再数组b逆序输出</span></span><br><span class=\"line\"><span class=\"comment\"># (根右左)与(根左右)类似，入栈a前读（根、右），出栈后指针变更再读左</span></span><br><span class=\"line\"><span class=\"comment\">## 方法 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            b.append(root.value)</span><br><span class=\"line\">            a.append(root.left)</span><br><span class=\"line\">            root = root.right</span><br><span class=\"line\">        root = a.pop()</span><br><span class=\"line\">    print(b[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 方法2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_deep_func2</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a <span class=\"keyword\">or</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            b.append(root.value)</span><br><span class=\"line\">            a.append(root)</span><br><span class=\"line\">            root = root.right</span><br><span class=\"line\">        h = a.pop()</span><br><span class=\"line\">        root = h.left</span><br><span class=\"line\">    <span class=\"keyword\">print</span> b[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">level_func</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    a.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a:</span><br><span class=\"line\">        head = a.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> head.value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head.left:</span><br><span class=\"line\">            a.append(head.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head.right:</span><br><span class=\"line\">            a.append(head.right)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://blog.csdn.net/su92chen/article/details/70242822\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/su92chen/article/details/70242822</a></li>\n<li>《数据结构与算法Python语言描述》 — 裘宗燕</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 19 2018 04:12:31 GMT+0800 (China Standard Time)","title":"Python3 实现二叉树前、中、后序遍历及按层遍历","path":"2018/03/15/Python3-实现二叉树前、中、后序遍历及按层遍历/","eyeCatchImage":null,"excerpt":"<p>假设有这么一个二叉树如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-707a1e95da262138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"二叉树.png\"></p>\n<p>前序遍历结果：1, 2, 4, 5, 8, 9, 11, 3, 6, 7, 10<br>中序遍历结果：4, 2, 8, 5, 11, 9, 1, 6, 3, 10, 7<br>后序遍历结果：4, 8, 11, 9, 5, 2, 6, 10, 7, 3, 1</p>\n<h2 id=\"二叉树的类实现\"><a href=\"#二叉树的类实现\" class=\"headerlink\" title=\"二叉树的类实现\"></a>二叉树的类实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value=None, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    tree = Node(<span class=\"number\">1</span>, Node(<span class=\"number\">2</span>, Node(<span class=\"number\">4</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">5</span>, Node(<span class=\"number\">8</span>),</span><br><span class=\"line\">                                   Node(<span class=\"number\">9</span>, left=Node(<span class=\"number\">11</span>)))),</span><br><span class=\"line\">                   Node(<span class=\"number\">3</span>, Node(<span class=\"number\">6</span>),</span><br><span class=\"line\">                           Node(<span class=\"number\">7</span>, left=Node(<span class=\"number\">10</span>))))</span><br></pre></td></tr></table></figure>","date":"2018-03-15T15:57:26.000Z","pv":0,"totalPV":0,"categories":"Data Structures","tags":["Python3","Algorithm","Data Structures"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 实现遍历目录与子目录，并抓取.py文件","date":"2018-03-12T08:54:54.000Z","_content":"\n```bash\ntree test\n.\n├── subtest1\n│   ├── subsubdir\n│   │   └── sub.py\n│   └── test1.py\n├── subtest2\n│   └── test2.py\n└── subtest3\n    └── test3.py\n```\n```python\n# 1. for-in dir/subdir to get the filesname  \n# 2. splitext filename to filter  \n\nimport os  \n\ndef getFiles(dir, suffix):  \n\n    res = []  \n    for root, directory, files in os.walk(dir):  \n        for filename in files:  \n            name, suf = os.path.splitext(filename)  \n            if suf == suffix:  \n                res.append(os.path.join(root, filename))  \n    return res  \n\nfor file in getFiles(\"./\", '.py'):  \n    print(file)\n# output:\n# ./walkdir.py\n# ./subtest2/test2.py\n# ./subtest3/test3.py\n# ./subtest1/test1.py\n# ./subtest1/subsubdir/sub.py\n\n```\n","source":"_posts/Python3-实现遍历目录与子目录，并抓取-py文件.md","raw":"---\ntitle: Python3 实现遍历目录与子目录，并抓取.py文件\ndate: 2018-03-12 16:54:54\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n```bash\ntree test\n.\n├── subtest1\n│   ├── subsubdir\n│   │   └── sub.py\n│   └── test1.py\n├── subtest2\n│   └── test2.py\n└── subtest3\n    └── test3.py\n```\n```python\n# 1. for-in dir/subdir to get the filesname  \n# 2. splitext filename to filter  \n\nimport os  \n\ndef getFiles(dir, suffix):  \n\n    res = []  \n    for root, directory, files in os.walk(dir):  \n        for filename in files:  \n            name, suf = os.path.splitext(filename)  \n            if suf == suffix:  \n                res.append(os.path.join(root, filename))  \n    return res  \n\nfor file in getFiles(\"./\", '.py'):  \n    print(file)\n# output:\n# ./walkdir.py\n# ./subtest2/test2.py\n# ./subtest3/test3.py\n# ./subtest1/test1.py\n# ./subtest1/subsubdir/sub.py\n\n```\n","slug":"Python3-实现遍历目录与子目录，并抓取-py文件","published":1,"updated":"2018-03-12T09:04:15.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x91006cexot8sb4orgd","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree <span class=\"built_in\">test</span></span><br><span class=\"line\">.</span><br><span class=\"line\">├── subtest1</span><br><span class=\"line\">│   ├── subsubdir</span><br><span class=\"line\">│   │   └── sub.py</span><br><span class=\"line\">│   └── test1.py</span><br><span class=\"line\">├── subtest2</span><br><span class=\"line\">│   └── test2.py</span><br><span class=\"line\">└── subtest3</span><br><span class=\"line\">    └── test3.py</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. for-in dir/subdir to get the filesname  </span></span><br><span class=\"line\"><span class=\"comment\"># 2. splitext filename to filter  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFiles</span><span class=\"params\">(dir, suffix)</span>:</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    res = []  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, directory, files <span class=\"keyword\">in</span> os.walk(dir):  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:  </span><br><span class=\"line\">            name, suf = os.path.splitext(filename)  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> suf == suffix:  </span><br><span class=\"line\">                res.append(os.path.join(root, filename))  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> getFiles(<span class=\"string\">\"./\"</span>, <span class=\"string\">'.py'</span>):  </span><br><span class=\"line\">    print(file)</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># ./walkdir.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest2/test2.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest3/test3.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest1/test1.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest1/subsubdir/sub.py</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree <span class=\"built_in\">test</span></span><br><span class=\"line\">.</span><br><span class=\"line\">├── subtest1</span><br><span class=\"line\">│   ├── subsubdir</span><br><span class=\"line\">│   │   └── sub.py</span><br><span class=\"line\">│   └── test1.py</span><br><span class=\"line\">├── subtest2</span><br><span class=\"line\">│   └── test2.py</span><br><span class=\"line\">└── subtest3</span><br><span class=\"line\">    └── test3.py</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. for-in dir/subdir to get the filesname  </span></span><br><span class=\"line\"><span class=\"comment\"># 2. splitext filename to filter  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFiles</span><span class=\"params\">(dir, suffix)</span>:</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    res = []  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, directory, files <span class=\"keyword\">in</span> os.walk(dir):  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:  </span><br><span class=\"line\">            name, suf = os.path.splitext(filename)  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> suf == suffix:  </span><br><span class=\"line\">                res.append(os.path.join(root, filename))  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> getFiles(<span class=\"string\">\"./\"</span>, <span class=\"string\">'.py'</span>):  </span><br><span class=\"line\">    print(file)</span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># ./walkdir.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest2/test2.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest3/test3.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest1/test1.py</span></span><br><span class=\"line\"><span class=\"comment\"># ./subtest1/subsubdir/sub.py</span></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 12 2018 17:04:15 GMT+0800 (China Standard Time)","title":"Python3 实现遍历目录与子目录，并抓取.py文件","path":"2018/03/12/Python3-实现遍历目录与子目录，并抓取-py文件/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-12T08:54:54.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 对象操作的时间复杂度总结","date":"2018-03-29T11:27:04.000Z","_content":"## 列表 list\n列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。\n\n| Operation                                                    | Average Case | [Amortized Worst Case](http://en.wikipedia.org/wiki/Amortized_analysis) |\n| ------------------------------------------------------------ | ------------ | ------------------------------------------------------------ |\n| Copy                                                         | O(n)         | O(n)                                                         |\n| Append[1]                                                    | O(1)         | O(1)                                                         |\n| Pop last                                                     | O(1)         | O(1)                                                         |\n| Pop intermediate                                             | O(k)         | O(k)                                                         |\n| Insert                                                       | O(n)         | O(n)                                                         |\n| Get Item                                                     | O(1)         | O(1)                                                         |\n| Set Item                                                     | O(1)         | O(1)                                                         |\n| Delete Item                                                  | O(n)         | O(n)                                                         |\n| Iteration                                                    | O(n)         | O(n)                                                         |\n| Get Slice                                                    | O(k)         | O(k)                                                         |\n| Del Slice                                                    | O(n)         | O(n)                                                         |\n| Set Slice                                                    | O(k+n)       | O(k+n)                                                       |\n| Extend[1]                                                    | O(k)         | O(k)                                                         |\n| [Sort](http://svn.python.org/projects/python/trunk/Objects/listsort.txt) | O(n log n)   | O(n log n)                                                   |\n| Multiply                                                     | O(nk)        | O(nk)                                                        |\n| x in s                                                       | O(n)         |                                                              |\n| min(s), max(s)                                               | O(n)         |                                                              |\n| Get Length                                                   | O(1)         | O(1)                                                         |\n\n<!-- more -->\n## 双向队列 collections.deque\n\ndeque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。\n\n|  **操作**  | **平均情况** | **最坏情况** |\n| :--------: | :----------: | :----------: |\n|    复制    |     O(n)     |     O(n)     |\n|   append   |     O(1)     |     O(1)     |\n| appendleft |     O(1)     |     O(1)     |\n|    pop     |     O(1)     |     O(1)     |\n|  popleft   |     O(1)     |     O(1)     |\n|   extend   |     O(k)     |     O(k)     |\n| extendleft |     O(k)     |     O(k)     |\n|   rotate   |     O(k)     |     O(k)     |\n|   remove   |     O(n)     |     O(n)     |\n\n\n## 集合 set\n| **Operation**                     | **Average case**                                             | **Worst Case**                                | **notes**                                  |\n| --------------------------------- | ------------------------------------------------------------ | --------------------------------------------- | ------------------------------------------ |\n| x in s                            | O(1)                                                         | O(n)                                          |                                            |\n| Union s\\|t                        | [O(len(s)+len(t))](https://wiki.python.org/moin/TimeComplexity_%28SetCode%29) |                                               |                                            |\n| Intersection s&t                  | O(min(len(s), len(t))                                        | O(len(s) * len(t))                            | replace \"min\" with \"max\" if t is not a set |\n| Multiple intersection s1&s2&..&sn |                                                              | (n-1)*O(l) where l is max(len(s1),..,len(sn)) |                                            |\n| Difference s-t                    | O(len(s))                                                    |                                               |                                            |\n| s.difference_update(t)            | O(len(t))                                                    |                                               |                                            |\n| Symmetric Difference s^t          | O(len(s))                                                    | O(len(s) * len(t))                            |                                            |\n| s.symmetric_difference_update(t)  | O(len(t))                                                    | O(len(t) * len(s))                            |                                            ||\n\n## 字典 dict\n字典的平均情况基于以下假设：\n1. 对象的散列函数足够撸棒（robust），不会发生冲突。\n2. 字典的键是从所有可能的键的集合中随机选择的。\n\n| **Operation** | **Average Case** | **Amortized Worst Case** |\n| ------------- | ---------------- | ------------------------ |\n| Copy[2]       | O(n)             | O(n)                     |\n| Get Item      | O(1)             | O(n)                     |\n| Set Item[1]   | O(1)             | O(n)                     |\n| Delete Item   | O(1)             | O(n)                     |\n| Iteration[2]  | O(n)             | O(n)                     |\n\n\n## 参考\n1. https://wiki.python.org/moin/TimeComplexity\n","source":"_posts/Python3-对象操作的时间复杂度总结.md","raw":"---\ntitle: Python3 对象操作的时间复杂度总结\ndate: 2018-03-29 19:27:04\ntags:\n  - Python3\n  - Algorithm\ncategories:\n  - Python3 进阶\n---\n## 列表 list\n列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。\n\n| Operation                                                    | Average Case | [Amortized Worst Case](http://en.wikipedia.org/wiki/Amortized_analysis) |\n| ------------------------------------------------------------ | ------------ | ------------------------------------------------------------ |\n| Copy                                                         | O(n)         | O(n)                                                         |\n| Append[1]                                                    | O(1)         | O(1)                                                         |\n| Pop last                                                     | O(1)         | O(1)                                                         |\n| Pop intermediate                                             | O(k)         | O(k)                                                         |\n| Insert                                                       | O(n)         | O(n)                                                         |\n| Get Item                                                     | O(1)         | O(1)                                                         |\n| Set Item                                                     | O(1)         | O(1)                                                         |\n| Delete Item                                                  | O(n)         | O(n)                                                         |\n| Iteration                                                    | O(n)         | O(n)                                                         |\n| Get Slice                                                    | O(k)         | O(k)                                                         |\n| Del Slice                                                    | O(n)         | O(n)                                                         |\n| Set Slice                                                    | O(k+n)       | O(k+n)                                                       |\n| Extend[1]                                                    | O(k)         | O(k)                                                         |\n| [Sort](http://svn.python.org/projects/python/trunk/Objects/listsort.txt) | O(n log n)   | O(n log n)                                                   |\n| Multiply                                                     | O(nk)        | O(nk)                                                        |\n| x in s                                                       | O(n)         |                                                              |\n| min(s), max(s)                                               | O(n)         |                                                              |\n| Get Length                                                   | O(1)         | O(1)                                                         |\n\n<!-- more -->\n## 双向队列 collections.deque\n\ndeque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。\n\n|  **操作**  | **平均情况** | **最坏情况** |\n| :--------: | :----------: | :----------: |\n|    复制    |     O(n)     |     O(n)     |\n|   append   |     O(1)     |     O(1)     |\n| appendleft |     O(1)     |     O(1)     |\n|    pop     |     O(1)     |     O(1)     |\n|  popleft   |     O(1)     |     O(1)     |\n|   extend   |     O(k)     |     O(k)     |\n| extendleft |     O(k)     |     O(k)     |\n|   rotate   |     O(k)     |     O(k)     |\n|   remove   |     O(n)     |     O(n)     |\n\n\n## 集合 set\n| **Operation**                     | **Average case**                                             | **Worst Case**                                | **notes**                                  |\n| --------------------------------- | ------------------------------------------------------------ | --------------------------------------------- | ------------------------------------------ |\n| x in s                            | O(1)                                                         | O(n)                                          |                                            |\n| Union s\\|t                        | [O(len(s)+len(t))](https://wiki.python.org/moin/TimeComplexity_%28SetCode%29) |                                               |                                            |\n| Intersection s&t                  | O(min(len(s), len(t))                                        | O(len(s) * len(t))                            | replace \"min\" with \"max\" if t is not a set |\n| Multiple intersection s1&s2&..&sn |                                                              | (n-1)*O(l) where l is max(len(s1),..,len(sn)) |                                            |\n| Difference s-t                    | O(len(s))                                                    |                                               |                                            |\n| s.difference_update(t)            | O(len(t))                                                    |                                               |                                            |\n| Symmetric Difference s^t          | O(len(s))                                                    | O(len(s) * len(t))                            |                                            |\n| s.symmetric_difference_update(t)  | O(len(t))                                                    | O(len(t) * len(s))                            |                                            ||\n\n## 字典 dict\n字典的平均情况基于以下假设：\n1. 对象的散列函数足够撸棒（robust），不会发生冲突。\n2. 字典的键是从所有可能的键的集合中随机选择的。\n\n| **Operation** | **Average Case** | **Amortized Worst Case** |\n| ------------- | ---------------- | ------------------------ |\n| Copy[2]       | O(n)             | O(n)                     |\n| Get Item      | O(1)             | O(n)                     |\n| Set Item[1]   | O(1)             | O(n)                     |\n| Delete Item   | O(1)             | O(n)                     |\n| Iteration[2]  | O(n)             | O(n)                     |\n\n\n## 参考\n1. https://wiki.python.org/moin/TimeComplexity\n","slug":"Python3-对象操作的时间复杂度总结","published":1,"updated":"2018-09-22T04:31:23.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x94006hexotlcbg3jvf","content":"<h2 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表 list\"></a>列表 list</h2><p>列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average Case</th>\n<th><a href=\"http://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\" rel=\"noopener\">Amortized Worst Case</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copy</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Append[1]</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop last</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop intermediate</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Set Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Delete Item</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Iteration</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Slice</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Del Slice</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Set Slice</td>\n<td>O(k+n)</td>\n<td>O(k+n)</td>\n</tr>\n<tr>\n<td>Extend[1]</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td><a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\" target=\"_blank\" rel=\"noopener\">Sort</a></td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n</tr>\n<tr>\n<td>Multiply</td>\n<td>O(nk)</td>\n<td>O(nk)</td>\n</tr>\n<tr>\n<td>x in s</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>min(s), max(s)</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>Get Length</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"双向队列-collections-deque\"><a href=\"#双向队列-collections-deque\" class=\"headerlink\" title=\"双向队列 collections.deque\"></a>双向队列 collections.deque</h2><p>deque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>操作</strong></th>\n<th style=\"text-align:center\"><strong>平均情况</strong></th>\n<th style=\"text-align:center\"><strong>最坏情况</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">append</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appendleft</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">popleft</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">extend</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">extendleft</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rotate</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">remove</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合 set\"></a>集合 set</h2><table>\n<thead>\n<tr>\n<th><strong>Operation</strong></th>\n<th><strong>Average case</strong></th>\n<th><strong>Worst Case</strong></th>\n<th><strong>notes</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x in s</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>Union s\\</td>\n<td>t</td>\n<td><a href=\"https://wiki.python.org/moin/TimeComplexity_%28SetCode%29\" target=\"_blank\" rel=\"noopener\">O(len(s)+len(t))</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Intersection s&amp;t</td>\n<td>O(min(len(s), len(t))</td>\n<td>O(len(s) * len(t))</td>\n<td>replace “min” with “max” if t is not a set</td>\n</tr>\n<tr>\n<td>Multiple intersection s1&amp;s2&amp;..&amp;sn</td>\n<td></td>\n<td>(n-1)*O(l) where l is max(len(s1),..,len(sn))</td>\n<td></td>\n</tr>\n<tr>\n<td>Difference s-t</td>\n<td>O(len(s))</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>s.difference_update(t)</td>\n<td>O(len(t))</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Symmetric Difference s^t</td>\n<td>O(len(s))</td>\n<td>O(len(s) * len(t))</td>\n<td></td>\n</tr>\n<tr>\n<td>s.symmetric_difference_update(t)</td>\n<td>O(len(t))</td>\n<td>O(len(t) * len(s))</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字典-dict\"><a href=\"#字典-dict\" class=\"headerlink\" title=\"字典 dict\"></a>字典 dict</h2><p>字典的平均情况基于以下假设：</p>\n<ol>\n<li>对象的散列函数足够撸棒（robust），不会发生冲突。</li>\n<li>字典的键是从所有可能的键的集合中随机选择的。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>Operation</strong></th>\n<th><strong>Average Case</strong></th>\n<th><strong>Amortized Worst Case</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copy[2]</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Set Item[1]</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Delete Item</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Iteration[2]</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://wiki.python.org/moin/TimeComplexity\" target=\"_blank\" rel=\"noopener\">https://wiki.python.org/moin/TimeComplexity</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表 list\"></a>列表 list</h2><p>列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average Case</th>\n<th><a href=\"http://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\" rel=\"noopener\">Amortized Worst Case</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copy</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Append[1]</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop last</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop intermediate</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Set Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Delete Item</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Iteration</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Slice</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Del Slice</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Set Slice</td>\n<td>O(k+n)</td>\n<td>O(k+n)</td>\n</tr>\n<tr>\n<td>Extend[1]</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td><a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\" target=\"_blank\" rel=\"noopener\">Sort</a></td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n</tr>\n<tr>\n<td>Multiply</td>\n<td>O(nk)</td>\n<td>O(nk)</td>\n</tr>\n<tr>\n<td>x in s</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>min(s), max(s)</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>Get Length</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"双向队列-collections-deque\"><a href=\"#双向队列-collections-deque\" class=\"headerlink\" title=\"双向队列 collections.deque\"></a>双向队列 collections.deque</h2><p>deque是以双向链表的形式实现的。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>操作</strong></th>\n<th style=\"text-align:center\"><strong>平均情况</strong></th>\n<th style=\"text-align:center\"><strong>最坏情况</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">append</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appendleft</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">popleft</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">extend</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">extendleft</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rotate</td>\n<td style=\"text-align:center\">O(k)</td>\n<td style=\"text-align:center\">O(k)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">remove</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合 set\"></a>集合 set</h2><table>\n<thead>\n<tr>\n<th><strong>Operation</strong></th>\n<th><strong>Average case</strong></th>\n<th><strong>Worst Case</strong></th>\n<th><strong>notes</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x in s</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>Union s\\</td>\n<td>t</td>\n<td><a href=\"https://wiki.python.org/moin/TimeComplexity_%28SetCode%29\" target=\"_blank\" rel=\"noopener\">O(len(s)+len(t))</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Intersection s&amp;t</td>\n<td>O(min(len(s), len(t))</td>\n<td>O(len(s) * len(t))</td>\n<td>replace “min” with “max” if t is not a set</td>\n</tr>\n<tr>\n<td>Multiple intersection s1&amp;s2&amp;..&amp;sn</td>\n<td></td>\n<td>(n-1)*O(l) where l is max(len(s1),..,len(sn))</td>\n<td></td>\n</tr>\n<tr>\n<td>Difference s-t</td>\n<td>O(len(s))</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>s.difference_update(t)</td>\n<td>O(len(t))</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Symmetric Difference s^t</td>\n<td>O(len(s))</td>\n<td>O(len(s) * len(t))</td>\n<td></td>\n</tr>\n<tr>\n<td>s.symmetric_difference_update(t)</td>\n<td>O(len(t))</td>\n<td>O(len(t) * len(s))</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字典-dict\"><a href=\"#字典-dict\" class=\"headerlink\" title=\"字典 dict\"></a>字典 dict</h2><p>字典的平均情况基于以下假设：</p>\n<ol>\n<li>对象的散列函数足够撸棒（robust），不会发生冲突。</li>\n<li>字典的键是从所有可能的键的集合中随机选择的。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>Operation</strong></th>\n<th><strong>Average Case</strong></th>\n<th><strong>Amortized Worst Case</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copy[2]</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Set Item[1]</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Delete Item</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Iteration[2]</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://wiki.python.org/moin/TimeComplexity\" target=\"_blank\" rel=\"noopener\">https://wiki.python.org/moin/TimeComplexity</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Sep 22 2018 12:31:23 GMT+0800 (China Standard Time)","title":"Python3 对象操作的时间复杂度总结","path":"2018/03/29/Python3-对象操作的时间复杂度总结/","eyeCatchImage":null,"excerpt":"<h2 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表 list\"></a>列表 list</h2><p>列表是以数组（Array）实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动，这种情况可以考虑使用双向队列来解决。</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average Case</th>\n<th><a href=\"http://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\" rel=\"noopener\">Amortized Worst Case</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copy</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Append[1]</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop last</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Pop intermediate</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Set Item</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Delete Item</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Iteration</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get Slice</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td>Del Slice</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Set Slice</td>\n<td>O(k+n)</td>\n<td>O(k+n)</td>\n</tr>\n<tr>\n<td>Extend[1]</td>\n<td>O(k)</td>\n<td>O(k)</td>\n</tr>\n<tr>\n<td><a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\" target=\"_blank\" rel=\"noopener\">Sort</a></td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n</tr>\n<tr>\n<td>Multiply</td>\n<td>O(nk)</td>\n<td>O(nk)</td>\n</tr>\n<tr>\n<td>x in s</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>min(s), max(s)</td>\n<td>O(n)</td>\n<td></td>\n</tr>\n<tr>\n<td>Get Length</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>","date":"2018-03-29T11:27:04.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3","Algorithm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 拷贝对象(深拷贝deepcopy和浅拷贝copy)","date":"2018-03-03T04:10:54.000Z","_content":"\n1. copy.copy 浅拷贝 `只拷贝父对象`，不会拷贝对象的内部的子对象。\n2. copy.deepcopy 深拷贝 `拷贝对象及其子对象`\n---\n![屏幕截图3.jpg](http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```python\n# -*-coding:utf-8 -*-\nimport copy\na = [1, 2, 3, 4, ['a', 'b']] #原始对象\n\nb = a #赋值，传对象的引用\nc = copy.copy(a) #对象拷贝，浅拷贝\nd = copy.deepcopy(a) #对象拷贝，深拷贝\n\na.append(5) #修改对象a\na[4].append('c') #修改对象a中的['a', 'b']数组对象\n\nprint 'a = ', a\nprint 'b = ', b\nprint 'c = ', c\nprint 'd = ', d\n输出结果：\na =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nb =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nc =  [1, 2, 3, 4, ['a', 'b', 'c']]\nd =  [1, 2, 3, 4, ['a', 'b']]\n```\n","source":"_posts/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy.md","raw":"---\ntitle: Python3 拷贝对象(深拷贝deepcopy和浅拷贝copy)\ndate: 2018-03-03 12:10:54\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 拷贝对象\n---\n\n1. copy.copy 浅拷贝 `只拷贝父对象`，不会拷贝对象的内部的子对象。\n2. copy.deepcopy 深拷贝 `拷贝对象及其子对象`\n---\n![屏幕截图3.jpg](http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```python\n# -*-coding:utf-8 -*-\nimport copy\na = [1, 2, 3, 4, ['a', 'b']] #原始对象\n\nb = a #赋值，传对象的引用\nc = copy.copy(a) #对象拷贝，浅拷贝\nd = copy.deepcopy(a) #对象拷贝，深拷贝\n\na.append(5) #修改对象a\na[4].append('c') #修改对象a中的['a', 'b']数组对象\n\nprint 'a = ', a\nprint 'b = ', b\nprint 'c = ', c\nprint 'd = ', d\n输出结果：\na =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nb =  [1, 2, 3, 4, ['a', 'b', 'c'], 5]\nc =  [1, 2, 3, 4, ['a', 'b', 'c']]\nd =  [1, 2, 3, 4, ['a', 'b']]\n```\n","slug":"Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy","published":1,"updated":"2018-03-03T04:14:09.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x97006kexotizkv17s6","content":"<ol>\n<li>copy.copy 浅拷贝 <code>只拷贝父对象</code>，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 <code>拷贝对象及其子对象</code></li>\n</ol>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图3.jpg\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]] <span class=\"comment\">#原始对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = a <span class=\"comment\">#赋值，传对象的引用</span></span><br><span class=\"line\">c = copy.copy(a) <span class=\"comment\">#对象拷贝，浅拷贝</span></span><br><span class=\"line\">d = copy.deepcopy(a) <span class=\"comment\">#对象拷贝，深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(<span class=\"number\">5</span>) <span class=\"comment\">#修改对象a</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>].append(<span class=\"string\">'c'</span>) <span class=\"comment\">#修改对象a中的['a', 'b']数组对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'a = '</span>, a</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'b = '</span>, b</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'c = '</span>, c</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'d = '</span>, d</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">a =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">b =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">c =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]]</span><br><span class=\"line\">d =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ol>\n<li>copy.copy 浅拷贝 <code>只拷贝父对象</code>，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 <code>拷贝对象及其子对象</code></li>\n</ol>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图3.jpg\"></p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]] <span class=\"comment\">#原始对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = a <span class=\"comment\">#赋值，传对象的引用</span></span><br><span class=\"line\">c = copy.copy(a) <span class=\"comment\">#对象拷贝，浅拷贝</span></span><br><span class=\"line\">d = copy.deepcopy(a) <span class=\"comment\">#对象拷贝，深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(<span class=\"number\">5</span>) <span class=\"comment\">#修改对象a</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>].append(<span class=\"string\">'c'</span>) <span class=\"comment\">#修改对象a中的['a', 'b']数组对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'a = '</span>, a</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'b = '</span>, b</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'c = '</span>, c</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'d = '</span>, d</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">a =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">b =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">c =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]]</span><br><span class=\"line\">d =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]]</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 12:14:09 GMT+0800 (China Standard Time)","title":"Python3 拷贝对象(深拷贝deepcopy和浅拷贝copy)","path":"2018/03/03/Python3-拷贝对象-深拷贝deepcopy和浅拷贝copy/","eyeCatchImage":null,"excerpt":"<ol>\n<li>copy.copy 浅拷贝 <code>只拷贝父对象</code>，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 <code>拷贝对象及其子对象</code></li>\n</ol>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-17e1f4233f95285d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕截图3.jpg\"></p>","date":"2018-03-03T04:10:54.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 拷贝对象","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 真假值对照表","date":"2018-03-03T05:14:45.000Z","_content":"\n| 类型              | False                       |True   |\n| :-----:           | :-----:                    | :-----:   |\n|布尔               |False(与0等价)                |True(与1等价)   |\n|数值                | 0, &nbsp;&nbsp;0.0         |非零的数值   |\n|字符串              | '',&nbsp;&nbsp;\"\"(空字符串)  |非空字符串   |\n|容器   |[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set() |至少有一个元素的容器对象|\n|None          |None|非None对象|\n","source":"_posts/Python3-真假值对照表.md","raw":"---\ntitle: Python3 真假值对照表\ndate: 2018-03-03 13:14:45\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 True or False\n---\n\n| 类型              | False                       |True   |\n| :-----:           | :-----:                    | :-----:   |\n|布尔               |False(与0等价)                |True(与1等价)   |\n|数值                | 0, &nbsp;&nbsp;0.0         |非零的数值   |\n|字符串              | '',&nbsp;&nbsp;\"\"(空字符串)  |非空字符串   |\n|容器   |[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set() |至少有一个元素的容器对象|\n|None          |None|非None对象|\n","slug":"Python3-真假值对照表","published":1,"updated":"2018-03-03T05:21:56.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x9k006pexotfery2j4w","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">False</th>\n<th style=\"text-align:center\">True</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">False(与0等价)</td>\n<td style=\"text-align:center\">True(与1等价)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\">0, &nbsp;&nbsp;0.0</td>\n<td style=\"text-align:center\">非零的数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\">‘’,&nbsp;&nbsp;””(空字符串)</td>\n<td style=\"text-align:center\">非空字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器</td>\n<td style=\"text-align:center\">[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set()</td>\n<td style=\"text-align:center\">至少有一个元素的容器对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">非None对象</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">False</th>\n<th style=\"text-align:center\">True</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">False(与0等价)</td>\n<td style=\"text-align:center\">True(与1等价)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\">0, &nbsp;&nbsp;0.0</td>\n<td style=\"text-align:center\">非零的数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\">‘’,&nbsp;&nbsp;””(空字符串)</td>\n<td style=\"text-align:center\">非空字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器</td>\n<td style=\"text-align:center\">[],&nbsp;&nbsp;(),&nbsp;&nbsp;{},&nbsp;&nbsp;set()</td>\n<td style=\"text-align:center\">至少有一个元素的容器对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">非None对象</td>\n</tr>\n</tbody>\n</table>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 13:21:56 GMT+0800 (China Standard Time)","title":"Python3 真假值对照表","path":"2018/03/03/Python3-真假值对照表/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-03T05:14:45.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 True or False","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 将两个排好序的列表合并成一个有序列表","date":"2018-03-11T16:11:27.000Z","_content":"```Python\ndef merge_list(a, b):\n    if not a:\n        return b\n    if not b:\n        return a\n    a_index = b_index = 0\n    ret = []\n    while a_index < len(a) and b_index < len(b):\n        if a[a_index] <= b[b_index]:\n            ret.append(a[a_index])\n            a_index += 1\n        else:\n            ret.append(b[b_index])\n            b_index += 1\n    if a_index < len(a):\n        ret.extend(a[a_index:])\n    if b_index < len(b):\n        ret.extend(b[b_index:])\n    return ret\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 5, 7, 9]\n    b = [1, 2, 2, 4, 5, 6, 8, 10]\n    print(merge_list(a, b))\n\n```\n","source":"_posts/Python3-将两个排好序的列表合并成一个有序列表.md","raw":"---\ntitle: Python3 将两个排好序的列表合并成一个有序列表\ndate: 2018-03-12 00:11:27\ntags:\n  - Python3\n  - Algorithm\ncategories:\n  - Algorithm\n---\n```Python\ndef merge_list(a, b):\n    if not a:\n        return b\n    if not b:\n        return a\n    a_index = b_index = 0\n    ret = []\n    while a_index < len(a) and b_index < len(b):\n        if a[a_index] <= b[b_index]:\n            ret.append(a[a_index])\n            a_index += 1\n        else:\n            ret.append(b[b_index])\n            b_index += 1\n    if a_index < len(a):\n        ret.extend(a[a_index:])\n    if b_index < len(b):\n        ret.extend(b[b_index:])\n    return ret\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 5, 7, 9]\n    b = [1, 2, 2, 4, 5, 6, 8, 10]\n    print(merge_list(a, b))\n\n```\n","slug":"Python3-将两个排好序的列表合并成一个有序列表","published":1,"updated":"2018-03-11T17:59:27.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x9p006sexotvcqun83r","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_list</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    a_index = b_index = <span class=\"number\">0</span></span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a_index &lt; len(a) <span class=\"keyword\">and</span> b_index &lt; len(b):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[a_index] &lt;= b[b_index]:</span><br><span class=\"line\">            ret.append(a[a_index])</span><br><span class=\"line\">            a_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ret.append(b[b_index])</span><br><span class=\"line\">            b_index += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a_index &lt; len(a):</span><br><span class=\"line\">        ret.extend(a[a_index:])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b_index &lt; len(b):</span><br><span class=\"line\">        ret.extend(b[b_index:])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">    b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">    print(merge_list(a, b))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_list</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    a_index = b_index = <span class=\"number\">0</span></span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> a_index &lt; len(a) <span class=\"keyword\">and</span> b_index &lt; len(b):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[a_index] &lt;= b[b_index]:</span><br><span class=\"line\">            ret.append(a[a_index])</span><br><span class=\"line\">            a_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ret.append(b[b_index])</span><br><span class=\"line\">            b_index += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a_index &lt; len(a):</span><br><span class=\"line\">        ret.extend(a[a_index:])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b_index &lt; len(b):</span><br><span class=\"line\">        ret.extend(b[b_index:])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">    b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">    print(merge_list(a, b))</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 12 2018 01:59:27 GMT+0800 (China Standard Time)","title":"Python3 将两个排好序的列表合并成一个有序列表","path":"2018/03/12/Python3-将两个排好序的列表合并成一个有序列表/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-11T16:11:27.000Z","pv":0,"totalPV":0,"categories":"Algorithm","tags":["Python3","Algorithm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 自省","date":"2018-03-01T08:19:37.000Z","_content":"\n自省是python彪悍的特性之一.\n\n自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.\n\n<!-- more -->\n\n自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().\n\n```python\na = [1,2,3]\nb = {'a':1,'b':2,'c':3}\nc = True\nprint type(a),type(b),type(c) # <type 'list'> <type 'dict'> <type 'bool'>\nprint isinstance(a,list)  # True\n```\n\n\n未完待续\n\n参考：\n1. http://python.jobbole.com/82110/\n2. http://blog.csdn.net/IAlexanderI/article/details/78768378\n","source":"_posts/Python3-自省.md","raw":"---\ntitle: Python3 自省\ndate: 2018-03-01 16:19:37\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 自省\n---\n\n自省是python彪悍的特性之一.\n\n自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.\n\n<!-- more -->\n\n自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().\n\n```python\na = [1,2,3]\nb = {'a':1,'b':2,'c':3}\nc = True\nprint type(a),type(b),type(c) # <type 'list'> <type 'dict'> <type 'bool'>\nprint isinstance(a,list)  # True\n```\n\n\n未完待续\n\n参考：\n1. http://python.jobbole.com/82110/\n2. http://blog.csdn.net/IAlexanderI/article/details/78768378\n","slug":"Python3-自省","published":1,"updated":"2018-03-02T17:23:56.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0x9t006xexot0p0118h9","content":"<p>自省是python彪悍的特性之一.</p>\n<p>自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.</p>\n<a id=\"more\"></a>\n<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(a),type(b),type(c) <span class=\"comment\"># &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> isinstance(a,list)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://python.jobbole.com/82110/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82110/</a></li>\n<li><a href=\"http://blog.csdn.net/IAlexanderI/article/details/78768378\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/IAlexanderI/article/details/78768378</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>自省是python彪悍的特性之一.</p>\n<p>自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.</p>","more":"<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(a),type(b),type(c) <span class=\"comment\"># &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> isinstance(a,list)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://python.jobbole.com/82110/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82110/</a></li>\n<li><a href=\"http://blog.csdn.net/IAlexanderI/article/details/78768378\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/IAlexanderI/article/details/78768378</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 01:23:56 GMT+0800 (China Standard Time)","title":"Python3 自省","path":"2018/03/01/Python3-自省/","eyeCatchImage":null,"excerpt":"<p>自省是python彪悍的特性之一.</p>\n<p>自省（introspection）是一种自我检查行为。在计算机编程中，自省是指这种能力：检查某些事物以确定它是什么、它知道什么以及它能做什么。自省向程序员提供了极大的灵活性和控制力.</p>","date":"2018-03-01T08:19:37.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 自省","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Mac Dock栏分组","date":"2018-09-18T05:42:06.000Z","_content":"\n#### 方法1\n终端下输入如下命令\n```bash\n~ defaults write com.apple.dock persistent-apps -array-add '{ \"tile-type\" = \"spacer-tile\"; }'\n\n~ killall Dock\n```\n实际上在docker中添加了空白的icon，如需删除只需右键移除即可。\n\n<!-- more -->\n\n#### 方法2\n\nhttps://github.com/DeromirNeves/VerticalBar\n\nhttps://github.com/DeromirNeves/VerticalBar.git\n","source":"_posts/Mac-Dock栏分组.md","raw":"---\ntitle: Mac Dock栏分组\ndate: 2018-09-18 13:42:06\ntags:\n  - 玩转苹果\ncategories:\n  - 玩转苹果\n---\n\n#### 方法1\n终端下输入如下命令\n```bash\n~ defaults write com.apple.dock persistent-apps -array-add '{ \"tile-type\" = \"spacer-tile\"; }'\n\n~ killall Dock\n```\n实际上在docker中添加了空白的icon，如需删除只需右键移除即可。\n\n<!-- more -->\n\n#### 方法2\n\nhttps://github.com/DeromirNeves/VerticalBar\n\nhttps://github.com/DeromirNeves/VerticalBar.git\n","slug":"Mac-Dock栏分组","published":1,"updated":"2018-09-19T08:46:40.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xab0070exotep4ibdqw","content":"<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>终端下输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ defaults write com.apple.dock persistent-apps -array-add <span class=\"string\">'&#123; \"tile-type\" = \"spacer-tile\"; &#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">~ killall Dock</span><br></pre></td></tr></table></figure></p>\n<p>实际上在docker中添加了空白的icon，如需删除只需右键移除即可。</p>\n<a id=\"more\"></a>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p><a href=\"https://github.com/DeromirNeves/VerticalBar\" target=\"_blank\" rel=\"noopener\">https://github.com/DeromirNeves/VerticalBar</a></p>\n<p><a href=\"https://github.com/DeromirNeves/VerticalBar.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DeromirNeves/VerticalBar.git</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>终端下输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ defaults write com.apple.dock persistent-apps -array-add <span class=\"string\">'&#123; \"tile-type\" = \"spacer-tile\"; &#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">~ killall Dock</span><br></pre></td></tr></table></figure></p>\n<p>实际上在docker中添加了空白的icon，如需删除只需右键移除即可。</p>","more":"<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p><a href=\"https://github.com/DeromirNeves/VerticalBar\" target=\"_blank\" rel=\"noopener\">https://github.com/DeromirNeves/VerticalBar</a></p>\n<p><a href=\"https://github.com/DeromirNeves/VerticalBar.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DeromirNeves/VerticalBar.git</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 19 2018 16:46:40 GMT+0800 (China Standard Time)","title":"Mac Dock栏分组","path":"2018/09/18/Mac-Dock栏分组/","eyeCatchImage":null,"excerpt":"<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>终端下输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ defaults write com.apple.dock persistent-apps -array-add <span class=\"string\">'&#123; \"tile-type\" = \"spacer-tile\"; &#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">~ killall Dock</span><br></pre></td></tr></table></figure></p>\n<p>实际上在docker中添加了空白的icon，如需删除只需右键移除即可。</p>","date":"2018-09-18T05:42:06.000Z","pv":0,"totalPV":0,"categories":"玩转苹果","tags":["玩转苹果"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 类变量和实例变量","date":"2018-03-01T05:21:38.000Z","_content":"### 写在前面\n首先来一张图\n![classvariable.png](http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 类变量和实例变量\n\n在Python Tutorial中对于类变量和实例变量是这样描述的：\n>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:\n\n```python\nclass Dog:\n    kind = 'canine'         # class variable shared by all instances\n    def __init__(self, name):\n        self.name = name    # instance variable unique to each instance\n```\n\n类`Dog`中，类属性`kind`为所有实例所共享；实例属性`name`为每个`Dog`的实例独有。\n<!-- more -->\n\n#### 类变量：\n\n> ​\t是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。\n\n#### 实例变量：\n\n> 实例化之后，每个实例单独拥有的变量。\n\n\n```python\nclass Test(object):  \n    num_of_instance = 0  \n    def __init__(self, name):  \n        self.name = name  \n        Test.num_of_instance += 1  \n\nif __name__ == '__main__':  \n    print Test.num_of_instance   # 0\n    t1 = Test('jack')  \n    print Test.num_of_instance   # 1\n    t2 = Test('lucy')  \n    print t1.name , t1.num_of_instance  # jack 2\n    print t2.name , t2.num_of_instance  # lucy 2\n```\n\n> 补充的例子\n\n```python\nclass Person:\n    name=\"aaa\"\n\np1=Person()\np2=Person()\np1.name=\"bbb\"\nprint p1.name  # bbb\nprint p2.name  # aaa\nprint Person.name  # aaa\n```\n\n这里`p1.name=\"bbb\"`是实例调用了类变量,属于函数传参的问题,`p1.name`一开始是指向的类变量`name=\"aaa\"`,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.\n\n可以看看下面的例子:\n\n```python\nclass Person:\n    name=[]\n\np1=Person()\np2=Person()\np1.name.append(1)\nprint p1.name  # [1]\nprint p2.name  # [1]\nprint Person.name  # [1]\n```\n\n### 类对象和实例对象\n\n#### 类对象\n`Python`中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如\n```python    \nclass Dog:\n    pass\n```\n会在当前作用域定义名字`Dog`，指向类对象`Dog`。\n\n**类对象支持的操作**：  \n总的来说，类对象仅支持两个操作：\n\n  1. 实例化；使用`instance_name = class_name()`的方式实例化，实例化操作创建该类的实例。\n  2. 属性引用；使用`class_name.attr_name`的方式引用类属性。\n\n#### 实例对象\n\n**实例对象是类对象实例化的产物，实例对象仅支持一个操作**:\n\n  1. 属性引用；与类对象属性引用的方式相同，使用`instance_name.attr_name`的方式。\n\n按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在`Python`中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。\n\n在[Python tutorial](https://docs.python.org/3/tutorial/classes.html#class-definition-syntax)关于类定义也这么说：\n\n> In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.\n\n实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。\n\n这里说的其他语句，就是指类属性的绑定语句。\n\n\n### 属性绑定\n\n在定义类时，通常我们说的定义属性，其实是分为两个方面的：\n\n  1. 类属性绑定\n  2. 实例属性绑定\n\n用**绑定**这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。\n\n我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用\n\n    objname.attr = attr_value\n\n的方式，为对象`objname`绑定属性`attr`。\n\n这分两种情况：\n\n  1. 若属性`attr`已经存在，绑定操作会将属性名指向新的对象；\n  2. 若不存在，则为该对象添加新的属性，后面就可以引用新增属性。\n\n#### 类属性绑定\n\n`Python`作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n下面这个例子说明了类属性绑定发生的时期：\n```python\nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\ndel Dog.kind\nprint(Dog.kind, ' - ', Dog.country)\n# AttributeError: type object 'Dog' has no attribute 'kind'\n```\n在类定义中，类属性的绑定并没有使用`objname.attr = attr_value`的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。  \n因为是动态语言，所以可以在运行时增加属性，删除属性。\n\n#### 实例属性绑定\n\n与类属性绑定相同，实例属性绑定也发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n示例：\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndog = Dog('Lily', 3)\ndog.fur_color = 'red'\nprint('%s is %s years old, it has %s fur' % (dog.name, dog.age, dog.fur_color))\n# Output: Lily is 3 years old, it has red fur\n```\n`Python`类实例有两个特殊之处：\n\n  1. `__init__`在实例化时执行\n  2. `Python`实例调用方法时，会将实例对象作为第一个参数传递\n\n因此，`__init__`方法中的`self`就是实例对象本身，这里是`dog`，语句\n```python\nself.name = name\nself.age = age\n```\n以及后面的语句\n```python\ndog.fur_color = 'red'\n```\n为实例`dog`增加三个属性`name`, `age`, `fur_color`。\n\n### 属性引用\n\n#### 类属属性引用\n\n类属性的引用，肯定是需要类对象的，属性分为两种：\n\n  1. 数据属性\n  2. 函数属性\n\n数据属性引用很简单，示例：\n```python    \nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\n```\n通常很少有引用类函数属性的需求，示例：\n```python\nclass Dog:\n    kind = 'canine'\n    def tell_kind():\n        print(Dog.kind)\n\nDog.tell_kind() # Output: canine\n```\n函数`tell_kind`在引用`kind`需要使用`Dog.kind`而不是直接使用`kind`，涉及到作用域，这一点在我的另一篇文章中有介绍：[Python进阶 - 命名空间与作用域](http://www.cnblogs.com/crazyrunning/p/6914080.html)\n\n\n#### 实例属性引用\n\n使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：\n\n  1. 总是先到实例对象中查找属性，再到类属性中查找属性；\n  2. 属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。\n\n##### 数据属性引用\n\n示例1：\n```Python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country)\n# output: Lily 3 canine Britain\n\n```\n类对象`Dog`与实例对象`dog`均有属性`country`，按照规则，`dog.country`会引用到实例对象的属性；但实例对象`dog`没有属性`kind`，按照规则会引用类对象的属性。\n\n示例2：\n```python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 canine Britain\nprint(dog.__dict__) # {'name': 'Lily', 'age': 3, 'country': 'Britain'}\n\ndog.kind = 'feline'\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 feline Britain\nprint(dog.__dict__)  # {'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'}\nprint(Dog.kind) # canine 没有改变类属性的指向\n\n```\n\n示例3，可变类属性引用：\n\n```python\n\nclass Dog:\n\n    tricks = []\n\n    def __init__(self, name):\n        self.name = name\n\n    def add_trick(self, trick):\n        # self.tricks.append(trick)\n        Dog.tricks.append(trick)\n\nd = Dog('Fido')\ne = Dog('Buddy')\nd.add_trick('roll over')\ne.add_trick('play dead')\nprint(d.tricks) # ['roll over', 'play dead']\n```\n\n语句`self.tricks.append(trick)`并不是属性绑定语句，因此还是在类属性上修改可变对象。\n\n##### 方法属性引用\n\n与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：\n\n```Python\nclass MethodTest:\n\n    def inner_test(self):\n        print('in class')\n\ndef outer_test():\n    print('out of class')\n\nmt = MethodTest()\nmt.outer_test = outer_test\n\nprint(type(MethodTest.inner_test))  # <class 'function'> 类函数\nprint(type(mt.inner_test))          #<class 'method'> 类方法\nprint(type(mt.outer_test))          #<class 'function'> 类函数\n\n```\n可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。\n\nPython tutorial中这样介绍方法对象：\n\n>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.\n\n引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。\n\n那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。  \n所以可以使用如下方式直接调用方法与函数：\n\n```python\nmt.inner_test()\nmt.outer_test()\n```\n除了方法与函数的区别，其引用与数据属性都是一样的\n\n### 最佳实践\n\n虽然`Python`作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。\n\n\n\n\n\n\n\n\n参考:\n1. http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\n2. https://www.cnblogs.com/crazyrunning/p/6945183.html\n","source":"_posts/Python3-类变量和实例变量.md","raw":"---\ntitle: Python3 类变量和实例变量\ndate: 2018-03-01 13:21:38\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - 类变量 和 实例变量\n---\n### 写在前面\n首先来一张图\n![classvariable.png](http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 类变量和实例变量\n\n在Python Tutorial中对于类变量和实例变量是这样描述的：\n>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:\n\n```python\nclass Dog:\n    kind = 'canine'         # class variable shared by all instances\n    def __init__(self, name):\n        self.name = name    # instance variable unique to each instance\n```\n\n类`Dog`中，类属性`kind`为所有实例所共享；实例属性`name`为每个`Dog`的实例独有。\n<!-- more -->\n\n#### 类变量：\n\n> ​\t是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。\n\n#### 实例变量：\n\n> 实例化之后，每个实例单独拥有的变量。\n\n\n```python\nclass Test(object):  \n    num_of_instance = 0  \n    def __init__(self, name):  \n        self.name = name  \n        Test.num_of_instance += 1  \n\nif __name__ == '__main__':  \n    print Test.num_of_instance   # 0\n    t1 = Test('jack')  \n    print Test.num_of_instance   # 1\n    t2 = Test('lucy')  \n    print t1.name , t1.num_of_instance  # jack 2\n    print t2.name , t2.num_of_instance  # lucy 2\n```\n\n> 补充的例子\n\n```python\nclass Person:\n    name=\"aaa\"\n\np1=Person()\np2=Person()\np1.name=\"bbb\"\nprint p1.name  # bbb\nprint p2.name  # aaa\nprint Person.name  # aaa\n```\n\n这里`p1.name=\"bbb\"`是实例调用了类变量,属于函数传参的问题,`p1.name`一开始是指向的类变量`name=\"aaa\"`,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.\n\n可以看看下面的例子:\n\n```python\nclass Person:\n    name=[]\n\np1=Person()\np2=Person()\np1.name.append(1)\nprint p1.name  # [1]\nprint p2.name  # [1]\nprint Person.name  # [1]\n```\n\n### 类对象和实例对象\n\n#### 类对象\n`Python`中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如\n```python    \nclass Dog:\n    pass\n```\n会在当前作用域定义名字`Dog`，指向类对象`Dog`。\n\n**类对象支持的操作**：  \n总的来说，类对象仅支持两个操作：\n\n  1. 实例化；使用`instance_name = class_name()`的方式实例化，实例化操作创建该类的实例。\n  2. 属性引用；使用`class_name.attr_name`的方式引用类属性。\n\n#### 实例对象\n\n**实例对象是类对象实例化的产物，实例对象仅支持一个操作**:\n\n  1. 属性引用；与类对象属性引用的方式相同，使用`instance_name.attr_name`的方式。\n\n按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在`Python`中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。\n\n在[Python tutorial](https://docs.python.org/3/tutorial/classes.html#class-definition-syntax)关于类定义也这么说：\n\n> In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.\n\n实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。\n\n这里说的其他语句，就是指类属性的绑定语句。\n\n\n### 属性绑定\n\n在定义类时，通常我们说的定义属性，其实是分为两个方面的：\n\n  1. 类属性绑定\n  2. 实例属性绑定\n\n用**绑定**这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。\n\n我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用\n\n    objname.attr = attr_value\n\n的方式，为对象`objname`绑定属性`attr`。\n\n这分两种情况：\n\n  1. 若属性`attr`已经存在，绑定操作会将属性名指向新的对象；\n  2. 若不存在，则为该对象添加新的属性，后面就可以引用新增属性。\n\n#### 类属性绑定\n\n`Python`作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n下面这个例子说明了类属性绑定发生的时期：\n```python\nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\ndel Dog.kind\nprint(Dog.kind, ' - ', Dog.country)\n# AttributeError: type object 'Dog' has no attribute 'kind'\n```\n在类定义中，类属性的绑定并没有使用`objname.attr = attr_value`的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。  \n因为是动态语言，所以可以在运行时增加属性，删除属性。\n\n#### 实例属性绑定\n\n与类属性绑定相同，实例属性绑定也发生在两个地方：\n\n  1. 类定义时；\n  2. 运行时任意阶段。\n\n示例：\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndog = Dog('Lily', 3)\ndog.fur_color = 'red'\nprint('%s is %s years old, it has %s fur' % (dog.name, dog.age, dog.fur_color))\n# Output: Lily is 3 years old, it has red fur\n```\n`Python`类实例有两个特殊之处：\n\n  1. `__init__`在实例化时执行\n  2. `Python`实例调用方法时，会将实例对象作为第一个参数传递\n\n因此，`__init__`方法中的`self`就是实例对象本身，这里是`dog`，语句\n```python\nself.name = name\nself.age = age\n```\n以及后面的语句\n```python\ndog.fur_color = 'red'\n```\n为实例`dog`增加三个属性`name`, `age`, `fur_color`。\n\n### 属性引用\n\n#### 类属属性引用\n\n类属性的引用，肯定是需要类对象的，属性分为两种：\n\n  1. 数据属性\n  2. 函数属性\n\n数据属性引用很简单，示例：\n```python    \nclass Dog:\n    kind = 'canine'\n\nDog.country = 'China'\nprint(Dog.kind, ' - ', Dog.country) # output: canine - China\n```\n通常很少有引用类函数属性的需求，示例：\n```python\nclass Dog:\n    kind = 'canine'\n    def tell_kind():\n        print(Dog.kind)\n\nDog.tell_kind() # Output: canine\n```\n函数`tell_kind`在引用`kind`需要使用`Dog.kind`而不是直接使用`kind`，涉及到作用域，这一点在我的另一篇文章中有介绍：[Python进阶 - 命名空间与作用域](http://www.cnblogs.com/crazyrunning/p/6914080.html)\n\n\n#### 实例属性引用\n\n使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：\n\n  1. 总是先到实例对象中查找属性，再到类属性中查找属性；\n  2. 属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。\n\n##### 数据属性引用\n\n示例1：\n```Python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country)\n# output: Lily 3 canine Britain\n\n```\n类对象`Dog`与实例对象`dog`均有属性`country`，按照规则，`dog.country`会引用到实例对象的属性；但实例对象`dog`没有属性`kind`，按照规则会引用类对象的属性。\n\n示例2：\n```python\nclass Dog:\n\n    kind = 'canine'\n    country = 'China'\n\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n\ndog = Dog('Lily', 3, 'Britain')\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 canine Britain\nprint(dog.__dict__) # {'name': 'Lily', 'age': 3, 'country': 'Britain'}\n\ndog.kind = 'feline'\nprint(dog.name, dog.age, dog.kind, dog.country) # Lily 3 feline Britain\nprint(dog.__dict__)  # {'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'}\nprint(Dog.kind) # canine 没有改变类属性的指向\n\n```\n\n示例3，可变类属性引用：\n\n```python\n\nclass Dog:\n\n    tricks = []\n\n    def __init__(self, name):\n        self.name = name\n\n    def add_trick(self, trick):\n        # self.tricks.append(trick)\n        Dog.tricks.append(trick)\n\nd = Dog('Fido')\ne = Dog('Buddy')\nd.add_trick('roll over')\ne.add_trick('play dead')\nprint(d.tricks) # ['roll over', 'play dead']\n```\n\n语句`self.tricks.append(trick)`并不是属性绑定语句，因此还是在类属性上修改可变对象。\n\n##### 方法属性引用\n\n与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：\n\n```Python\nclass MethodTest:\n\n    def inner_test(self):\n        print('in class')\n\ndef outer_test():\n    print('out of class')\n\nmt = MethodTest()\nmt.outer_test = outer_test\n\nprint(type(MethodTest.inner_test))  # <class 'function'> 类函数\nprint(type(mt.inner_test))          #<class 'method'> 类方法\nprint(type(mt.outer_test))          #<class 'function'> 类函数\n\n```\n可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。\n\nPython tutorial中这样介绍方法对象：\n\n>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.\n\n引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。\n\n那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。  \n所以可以使用如下方式直接调用方法与函数：\n\n```python\nmt.inner_test()\nmt.outer_test()\n```\n除了方法与函数的区别，其引用与数据属性都是一样的\n\n### 最佳实践\n\n虽然`Python`作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。\n\n\n\n\n\n\n\n\n参考:\n1. http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\n2. https://www.cnblogs.com/crazyrunning/p/6945183.html\n","slug":"Python3-类变量和实例变量","published":1,"updated":"2018-03-01T08:05:39.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xat0075exotb1bpp2ib","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>首先来一张图<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"classvariable.png\"></p>\n<h3 id=\"类变量和实例变量\"><a href=\"#类变量和实例变量\" class=\"headerlink\" title=\"类变量和实例变量\"></a>类变量和实例变量</h3><p>在Python Tutorial中对于类变量和实例变量是这样描述的：</p>\n<blockquote>\n<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span>         <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name    <span class=\"comment\"># instance variable unique to each instance</span></span><br></pre></td></tr></table></figure>\n<p>类<code>Dog</code>中，类属性<code>kind</code>为所有实例所共享；实例属性<code>name</code>为每个<code>Dog</code>的实例独有。<br><a id=\"more\"></a></p>\n<h4 id=\"类变量：\"><a href=\"#类变量：\" class=\"headerlink\" title=\"类变量：\"></a>类变量：</h4><blockquote>\n<p>​    是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p>\n</blockquote>\n<h4 id=\"实例变量：\"><a href=\"#实例变量：\" class=\"headerlink\" title=\"实例变量：\"></a>实例变量：</h4><blockquote>\n<p>实例化之后，每个实例单独拥有的变量。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    num_of_instance = <span class=\"number\">0</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name  </span><br><span class=\"line\">        Test.num_of_instance += <span class=\"number\">1</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    t1 = Test(<span class=\"string\">'jack'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    t2 = Test(<span class=\"string\">'lucy'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> t1.name , t1.num_of_instance  <span class=\"comment\"># jack 2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> t2.name , t2.num_of_instance  <span class=\"comment\"># lucy 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充的例子</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=<span class=\"string\">\"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name=<span class=\"string\">\"bbb\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># bbb</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># aaa</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># aaa</span></span><br></pre></td></tr></table></figure>\n<p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,属于函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p>\n<p>可以看看下面的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=[]</span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类对象和实例对象\"><a href=\"#类对象和实例对象\" class=\"headerlink\" title=\"类对象和实例对象\"></a>类对象和实例对象</h3><h4 id=\"类对象\"><a href=\"#类对象\" class=\"headerlink\" title=\"类对象\"></a>类对象</h4><p><code>Python</code>中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>会在当前作用域定义名字<code>Dog</code>，指向类对象<code>Dog</code>。</p>\n<p><strong>类对象支持的操作</strong>：<br>总的来说，类对象仅支持两个操作：</p>\n<ol>\n<li>实例化；使用<code>instance_name = class_name()</code>的方式实例化，实例化操作创建该类的实例。</li>\n<li>属性引用；使用<code>class_name.attr_name</code>的方式引用类属性。</li>\n</ol>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p><strong>实例对象是类对象实例化的产物，实例对象仅支持一个操作</strong>:</p>\n<ol>\n<li>属性引用；与类对象属性引用的方式相同，使用<code>instance_name.attr_name</code>的方式。</li>\n</ol>\n<p>按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在<code>Python</code>中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。</p>\n<p>在<a href=\"https://docs.python.org/3/tutorial/classes.html#class-definition-syntax\" target=\"_blank\" rel=\"noopener\">Python tutorial</a>关于类定义也这么说：</p>\n<blockquote>\n<p>In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.</p>\n</blockquote>\n<p>实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。</p>\n<p>这里说的其他语句，就是指类属性的绑定语句。</p>\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><p>在定义类时，通常我们说的定义属性，其实是分为两个方面的：</p>\n<ol>\n<li>类属性绑定</li>\n<li>实例属性绑定</li>\n</ol>\n<p>用<strong>绑定</strong>这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。</p>\n<p>我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用</p>\n<pre><code>objname.attr = attr_value\n</code></pre><p>的方式，为对象<code>objname</code>绑定属性<code>attr</code>。</p>\n<p>这分两种情况：</p>\n<ol>\n<li>若属性<code>attr</code>已经存在，绑定操作会将属性名指向新的对象；</li>\n<li>若不存在，则为该对象添加新的属性，后面就可以引用新增属性。</li>\n</ol>\n<h4 id=\"类属性绑定\"><a href=\"#类属性绑定\" class=\"headerlink\" title=\"类属性绑定\"></a>类属性绑定</h4><p><code>Python</code>作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>下面这个例子说明了类属性绑定发生的时期：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> Dog.kind</span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country)</span><br><span class=\"line\"><span class=\"comment\"># AttributeError: type object 'Dog' has no attribute 'kind'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类定义中，类属性的绑定并没有使用<code>objname.attr = attr_value</code>的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。<br>因为是动态语言，所以可以在运行时增加属性，删除属性。</p>\n<h4 id=\"实例属性绑定\"><a href=\"#实例属性绑定\" class=\"headerlink\" title=\"实例属性绑定\"></a>实例属性绑定</h4><p>与类属性绑定相同，实例属性绑定也发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s is %s years old, it has %s fur'</span> % (dog.name, dog.age, dog.fur_color))</span><br><span class=\"line\"><span class=\"comment\"># Output: Lily is 3 years old, it has red fur</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Python</code>类实例有两个特殊之处：</p>\n<ol>\n<li><code>__init__</code>在实例化时执行</li>\n<li><code>Python</code>实例调用方法时，会将实例对象作为第一个参数传递</li>\n</ol>\n<p>因此，<code>__init__</code>方法中的<code>self</code>就是实例对象本身，这里是<code>dog</code>，语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = name</span><br><span class=\"line\">self.age = age</span><br></pre></td></tr></table></figure></p>\n<p>以及后面的语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br></pre></td></tr></table></figure></p>\n<p>为实例<code>dog</code>增加三个属性<code>name</code>, <code>age</code>, <code>fur_color</code>。</p>\n<h3 id=\"属性引用\"><a href=\"#属性引用\" class=\"headerlink\" title=\"属性引用\"></a>属性引用</h3><h4 id=\"类属属性引用\"><a href=\"#类属属性引用\" class=\"headerlink\" title=\"类属属性引用\"></a>类属属性引用</h4><p>类属性的引用，肯定是需要类对象的，属性分为两种：</p>\n<ol>\n<li>数据属性</li>\n<li>函数属性</li>\n</ol>\n<p>数据属性引用很简单，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br></pre></td></tr></table></figure></p>\n<p>通常很少有引用类函数属性的需求，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell_kind</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(Dog.kind)</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.tell_kind() <span class=\"comment\"># Output: canine</span></span><br></pre></td></tr></table></figure></p>\n<p>函数<code>tell_kind</code>在引用<code>kind</code>需要使用<code>Dog.kind</code>而不是直接使用<code>kind</code>，涉及到作用域，这一点在我的另一篇文章中有介绍：<a href=\"http://www.cnblogs.com/crazyrunning/p/6914080.html\" target=\"_blank\" rel=\"noopener\">Python进阶 - 命名空间与作用域</a></p>\n<h4 id=\"实例属性引用\"><a href=\"#实例属性引用\" class=\"headerlink\" title=\"实例属性引用\"></a>实例属性引用</h4><p>使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：</p>\n<ol>\n<li>总是先到实例对象中查找属性，再到类属性中查找属性；</li>\n<li>属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。</li>\n</ol>\n<h5 id=\"数据属性引用\"><a href=\"#数据属性引用\" class=\"headerlink\" title=\"数据属性引用\"></a>数据属性引用</h5><p>示例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country)</span><br><span class=\"line\"><span class=\"comment\"># output: Lily 3 canine Britain</span></span><br></pre></td></tr></table></figure></p>\n<p>类对象<code>Dog</code>与实例对象<code>dog</code>均有属性<code>country</code>，按照规则，<code>dog.country</code>会引用到实例对象的属性；但实例对象<code>dog</code>没有属性<code>kind</code>，按照规则会引用类对象的属性。</p>\n<p>示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 canine Britain</span></span><br><span class=\"line\">print(dog.__dict__) <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dog.kind = <span class=\"string\">'feline'</span></span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 feline Britain</span></span><br><span class=\"line\">print(dog.__dict__)  <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'&#125;</span></span><br><span class=\"line\">print(Dog.kind) <span class=\"comment\"># canine 没有改变类属性的指向</span></span><br></pre></td></tr></table></figure></p>\n<p>示例3，可变类属性引用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tricks = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_trick</span><span class=\"params\">(self, trick)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># self.tricks.append(trick)</span></span><br><span class=\"line\">        Dog.tricks.append(trick)</span><br><span class=\"line\"></span><br><span class=\"line\">d = Dog(<span class=\"string\">'Fido'</span>)</span><br><span class=\"line\">e = Dog(<span class=\"string\">'Buddy'</span>)</span><br><span class=\"line\">d.add_trick(<span class=\"string\">'roll over'</span>)</span><br><span class=\"line\">e.add_trick(<span class=\"string\">'play dead'</span>)</span><br><span class=\"line\">print(d.tricks) <span class=\"comment\"># ['roll over', 'play dead']</span></span><br></pre></td></tr></table></figure>\n<p>语句<code>self.tricks.append(trick)</code>并不是属性绑定语句，因此还是在类属性上修改可变对象。</p>\n<h5 id=\"方法属性引用\"><a href=\"#方法属性引用\" class=\"headerlink\" title=\"方法属性引用\"></a>方法属性引用</h5><p>与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodTest</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner_test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'in class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer_test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'out of class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mt = MethodTest()</span><br><span class=\"line\">mt.outer_test = outer_test</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(MethodTest.inner_test))  <span class=\"comment\"># &lt;class 'function'&gt; 类函数</span></span><br><span class=\"line\">print(type(mt.inner_test))          <span class=\"comment\">#&lt;class 'method'&gt; 类方法</span></span><br><span class=\"line\">print(type(mt.outer_test))          <span class=\"comment\">#&lt;class 'function'&gt; 类函数</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。</p>\n<p>Python tutorial中这样介绍方法对象：</p>\n<blockquote>\n<p>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>\n</blockquote>\n<p>引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。</p>\n<p>那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。<br>所以可以使用如下方式直接调用方法与函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mt.inner_test()</span><br><span class=\"line\">mt.outer_test()</span><br></pre></td></tr></table></figure>\n<p>除了方法与函数的区别，其引用与数据属性都是一样的</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>虽然<code>Python</code>作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。</p>\n<p>参考:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></li>\n<li><a href=\"https://www.cnblogs.com/crazyrunning/p/6945183.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/crazyrunning/p/6945183.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>首先来一张图<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"classvariable.png\"></p>\n<h3 id=\"类变量和实例变量\"><a href=\"#类变量和实例变量\" class=\"headerlink\" title=\"类变量和实例变量\"></a>类变量和实例变量</h3><p>在Python Tutorial中对于类变量和实例变量是这样描述的：</p>\n<blockquote>\n<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span>         <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name    <span class=\"comment\"># instance variable unique to each instance</span></span><br></pre></td></tr></table></figure>\n<p>类<code>Dog</code>中，类属性<code>kind</code>为所有实例所共享；实例属性<code>name</code>为每个<code>Dog</code>的实例独有。<br>","more":"</p>\n<h4 id=\"类变量：\"><a href=\"#类变量：\" class=\"headerlink\" title=\"类变量：\"></a>类变量：</h4><blockquote>\n<p>​    是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p>\n</blockquote>\n<h4 id=\"实例变量：\"><a href=\"#实例变量：\" class=\"headerlink\" title=\"实例变量：\"></a>实例变量：</h4><blockquote>\n<p>实例化之后，每个实例单独拥有的变量。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    num_of_instance = <span class=\"number\">0</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span>  </span><br><span class=\"line\">        self.name = name  </span><br><span class=\"line\">        Test.num_of_instance += <span class=\"number\">1</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    t1 = Test(<span class=\"string\">'jack'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> Test.num_of_instance   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    t2 = Test(<span class=\"string\">'lucy'</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> t1.name , t1.num_of_instance  <span class=\"comment\"># jack 2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> t2.name , t2.num_of_instance  <span class=\"comment\"># lucy 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充的例子</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=<span class=\"string\">\"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name=<span class=\"string\">\"bbb\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># bbb</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># aaa</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># aaa</span></span><br></pre></td></tr></table></figure>\n<p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,属于函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p>\n<p>可以看看下面的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    name=[]</span><br><span class=\"line\"></span><br><span class=\"line\">p1=Person()</span><br><span class=\"line\">p2=Person()</span><br><span class=\"line\">p1.name.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> p1.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> p2.name  <span class=\"comment\"># [1]</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> Person.name  <span class=\"comment\"># [1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类对象和实例对象\"><a href=\"#类对象和实例对象\" class=\"headerlink\" title=\"类对象和实例对象\"></a>类对象和实例对象</h3><h4 id=\"类对象\"><a href=\"#类对象\" class=\"headerlink\" title=\"类对象\"></a>类对象</h4><p><code>Python</code>中一切皆对象；类定义完成后，会在当前作用域中定义一个以类名为名字，指向类对象的名字。如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>会在当前作用域定义名字<code>Dog</code>，指向类对象<code>Dog</code>。</p>\n<p><strong>类对象支持的操作</strong>：<br>总的来说，类对象仅支持两个操作：</p>\n<ol>\n<li>实例化；使用<code>instance_name = class_name()</code>的方式实例化，实例化操作创建该类的实例。</li>\n<li>属性引用；使用<code>class_name.attr_name</code>的方式引用类属性。</li>\n</ol>\n<h4 id=\"实例对象\"><a href=\"#实例对象\" class=\"headerlink\" title=\"实例对象\"></a>实例对象</h4><p><strong>实例对象是类对象实例化的产物，实例对象仅支持一个操作</strong>:</p>\n<ol>\n<li>属性引用；与类对象属性引用的方式相同，使用<code>instance_name.attr_name</code>的方式。</li>\n</ol>\n<p>按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在<code>Python</code>中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。</p>\n<p>在<a href=\"https://docs.python.org/3/tutorial/classes.html#class-definition-syntax\" target=\"_blank\" rel=\"noopener\">Python tutorial</a>关于类定义也这么说：</p>\n<blockquote>\n<p>In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful.</p>\n</blockquote>\n<p>实践中，类定义中的语句通常是函数定义，但是其他语句也是允许的，有时也是有用的。</p>\n<p>这里说的其他语句，就是指类属性的绑定语句。</p>\n<h3 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h3><p>在定义类时，通常我们说的定义属性，其实是分为两个方面的：</p>\n<ol>\n<li>类属性绑定</li>\n<li>实例属性绑定</li>\n</ol>\n<p>用<strong>绑定</strong>这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。</p>\n<p>我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用</p>\n<pre><code>objname.attr = attr_value\n</code></pre><p>的方式，为对象<code>objname</code>绑定属性<code>attr</code>。</p>\n<p>这分两种情况：</p>\n<ol>\n<li>若属性<code>attr</code>已经存在，绑定操作会将属性名指向新的对象；</li>\n<li>若不存在，则为该对象添加新的属性，后面就可以引用新增属性。</li>\n</ol>\n<h4 id=\"类属性绑定\"><a href=\"#类属性绑定\" class=\"headerlink\" title=\"类属性绑定\"></a>类属性绑定</h4><p><code>Python</code>作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>下面这个例子说明了类属性绑定发生的时期：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> Dog.kind</span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country)</span><br><span class=\"line\"><span class=\"comment\"># AttributeError: type object 'Dog' has no attribute 'kind'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类定义中，类属性的绑定并没有使用<code>objname.attr = attr_value</code>的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式。<br>因为是动态语言，所以可以在运行时增加属性，删除属性。</p>\n<h4 id=\"实例属性绑定\"><a href=\"#实例属性绑定\" class=\"headerlink\" title=\"实例属性绑定\"></a>实例属性绑定</h4><p>与类属性绑定相同，实例属性绑定也发生在两个地方：</p>\n<ol>\n<li>类定义时；</li>\n<li>运行时任意阶段。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s is %s years old, it has %s fur'</span> % (dog.name, dog.age, dog.fur_color))</span><br><span class=\"line\"><span class=\"comment\"># Output: Lily is 3 years old, it has red fur</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Python</code>类实例有两个特殊之处：</p>\n<ol>\n<li><code>__init__</code>在实例化时执行</li>\n<li><code>Python</code>实例调用方法时，会将实例对象作为第一个参数传递</li>\n</ol>\n<p>因此，<code>__init__</code>方法中的<code>self</code>就是实例对象本身，这里是<code>dog</code>，语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = name</span><br><span class=\"line\">self.age = age</span><br></pre></td></tr></table></figure></p>\n<p>以及后面的语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog.fur_color = <span class=\"string\">'red'</span></span><br></pre></td></tr></table></figure></p>\n<p>为实例<code>dog</code>增加三个属性<code>name</code>, <code>age</code>, <code>fur_color</code>。</p>\n<h3 id=\"属性引用\"><a href=\"#属性引用\" class=\"headerlink\" title=\"属性引用\"></a>属性引用</h3><h4 id=\"类属属性引用\"><a href=\"#类属属性引用\" class=\"headerlink\" title=\"类属属性引用\"></a>类属属性引用</h4><p>类属性的引用，肯定是需要类对象的，属性分为两种：</p>\n<ol>\n<li>数据属性</li>\n<li>函数属性</li>\n</ol>\n<p>数据属性引用很简单，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.country = <span class=\"string\">'China'</span></span><br><span class=\"line\">print(Dog.kind, <span class=\"string\">' - '</span>, Dog.country) <span class=\"comment\"># output: canine - China</span></span><br></pre></td></tr></table></figure></p>\n<p>通常很少有引用类函数属性的需求，示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell_kind</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(Dog.kind)</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.tell_kind() <span class=\"comment\"># Output: canine</span></span><br></pre></td></tr></table></figure></p>\n<p>函数<code>tell_kind</code>在引用<code>kind</code>需要使用<code>Dog.kind</code>而不是直接使用<code>kind</code>，涉及到作用域，这一点在我的另一篇文章中有介绍：<a href=\"http://www.cnblogs.com/crazyrunning/p/6914080.html\" target=\"_blank\" rel=\"noopener\">Python进阶 - 命名空间与作用域</a></p>\n<h4 id=\"实例属性引用\"><a href=\"#实例属性引用\" class=\"headerlink\" title=\"实例属性引用\"></a>实例属性引用</h4><p>使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：</p>\n<ol>\n<li>总是先到实例对象中查找属性，再到类属性中查找属性；</li>\n<li>属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。</li>\n</ol>\n<h5 id=\"数据属性引用\"><a href=\"#数据属性引用\" class=\"headerlink\" title=\"数据属性引用\"></a>数据属性引用</h5><p>示例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country)</span><br><span class=\"line\"><span class=\"comment\"># output: Lily 3 canine Britain</span></span><br></pre></td></tr></table></figure></p>\n<p>类对象<code>Dog</code>与实例对象<code>dog</code>均有属性<code>country</code>，按照规则，<code>dog.country</code>会引用到实例对象的属性；但实例对象<code>dog</code>没有属性<code>kind</code>，按照规则会引用类对象的属性。</p>\n<p>示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span></span><br><span class=\"line\">    country = <span class=\"string\">'China'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, country)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.country = country</span><br><span class=\"line\"></span><br><span class=\"line\">dog = Dog(<span class=\"string\">'Lily'</span>, <span class=\"number\">3</span>, <span class=\"string\">'Britain'</span>)</span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 canine Britain</span></span><br><span class=\"line\">print(dog.__dict__) <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dog.kind = <span class=\"string\">'feline'</span></span><br><span class=\"line\">print(dog.name, dog.age, dog.kind, dog.country) <span class=\"comment\"># Lily 3 feline Britain</span></span><br><span class=\"line\">print(dog.__dict__)  <span class=\"comment\"># &#123;'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'&#125;</span></span><br><span class=\"line\">print(Dog.kind) <span class=\"comment\"># canine 没有改变类属性的指向</span></span><br></pre></td></tr></table></figure></p>\n<p>示例3，可变类属性引用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tricks = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_trick</span><span class=\"params\">(self, trick)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># self.tricks.append(trick)</span></span><br><span class=\"line\">        Dog.tricks.append(trick)</span><br><span class=\"line\"></span><br><span class=\"line\">d = Dog(<span class=\"string\">'Fido'</span>)</span><br><span class=\"line\">e = Dog(<span class=\"string\">'Buddy'</span>)</span><br><span class=\"line\">d.add_trick(<span class=\"string\">'roll over'</span>)</span><br><span class=\"line\">e.add_trick(<span class=\"string\">'play dead'</span>)</span><br><span class=\"line\">print(d.tricks) <span class=\"comment\"># ['roll over', 'play dead']</span></span><br></pre></td></tr></table></figure>\n<p>语句<code>self.tricks.append(trick)</code>并不是属性绑定语句，因此还是在类属性上修改可变对象。</p>\n<h5 id=\"方法属性引用\"><a href=\"#方法属性引用\" class=\"headerlink\" title=\"方法属性引用\"></a>方法属性引用</h5><p>与数据成员不同，类函数属性在实例对象中会变成方法属性。先看一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodTest</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner_test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'in class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer_test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'out of class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mt = MethodTest()</span><br><span class=\"line\">mt.outer_test = outer_test</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(MethodTest.inner_test))  <span class=\"comment\"># &lt;class 'function'&gt; 类函数</span></span><br><span class=\"line\">print(type(mt.inner_test))          <span class=\"comment\">#&lt;class 'method'&gt; 类方法</span></span><br><span class=\"line\">print(type(mt.outer_test))          <span class=\"comment\">#&lt;class 'function'&gt; 类函数</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，类函数属性在实例对象中变成了方法属性，但是并不是实例对象中所有的函数都是方法。</p>\n<p>Python tutorial中这样介绍方法对象：</p>\n<blockquote>\n<p>When an instance attribute is referenced that isn’t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>\n</blockquote>\n<p>引用非数据属性的实例属性时，会搜索它对应的类。如果名字是一个有效的函数对象，Python会将实例对象连同函数对象打包到一个抽象的对象中并且依据这个对象创建方法对象：这就是被调用的方法对象。当使用参数列表调用方法对象时，会使用实例对象以及原有参数列表构建新的参数列表，并且使用新的参数列表调用函数对象。</p>\n<p>那么，实例对象只有在引用方法属性时，才会将自身作为第一个参数传递；调用实例对象的普通函数，则不会。<br>所以可以使用如下方式直接调用方法与函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mt.inner_test()</span><br><span class=\"line\">mt.outer_test()</span><br></pre></td></tr></table></figure>\n<p>除了方法与函数的区别，其引用与数据属性都是一样的</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>虽然<code>Python</code>作为动态语言，支持在运行时绑定属性，但是从面向对象的角度来看，还是在定义类的时候将属性确定下来。</p>\n<p>参考:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></li>\n<li><a href=\"https://www.cnblogs.com/crazyrunning/p/6945183.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/crazyrunning/p/6945183.html</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 01 2018 16:05:39 GMT+0800 (China Standard Time)","title":"Python3 类变量和实例变量","path":"2018/03/01/Python3-类变量和实例变量/","eyeCatchImage":null,"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>首先来一张图<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-07f6d669392b20c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"classvariable.png\"></p>\n<h3 id=\"类变量和实例变量\"><a href=\"#类变量和实例变量\" class=\"headerlink\" title=\"类变量和实例变量\"></a>类变量和实例变量</h3><p>在Python Tutorial中对于类变量和实例变量是这样描述的：</p>\n<blockquote>\n<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>:</span></span><br><span class=\"line\">    kind = <span class=\"string\">'canine'</span>         <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name    <span class=\"comment\"># instance variable unique to each instance</span></span><br></pre></td></tr></table></figure>\n<p>类<code>Dog</code>中，类属性<code>kind</code>为所有实例所共享；实例属性<code>name</code>为每个<code>Dog</code>的实例独有。<br>","date":"2018-03-01T05:21:38.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > 类变量 和 实例变量","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 实现常见的各种排序方法","date":"2018-03-09T07:56:09.000Z","_content":"\n\n## 冒泡排序\n\n冒泡排序原理即：从数组下标为0的位置开始，比较下标位置为0和1的数据，如果0号位置的大，则交换位置，如果1号位置大，则什么也不做，然后右移一个位置，比较1号和2号的数据，和刚才的一样，如果1号的大，则交换位置，以此类推直至最后一个位置结束，到此数组中最大的元素就被排到了最后，之后再根据之前的步骤开始排前面的数据，直至全部数据都排序完成。\n\n就是传说中的大的沉到底原则，适用于小量数据\n\n冒泡排序思路: 每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)\n\n缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低\n![冒泡排序](http://upload-images.jianshu.io/upload_images/2952111-020fcd7b86279da7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```Python\ndef bubbleSort(relist):\n    \"\"\"冒泡排序\"\"\"\n    len_ = len(relist)\n    for i in range(len_ - 1):  # 这个循环负责设置冒泡排序进行的次数\n        for j in range(0,len_-i-1):\n            if relist[j] > relist[j+1]:\n                relist[j+1], relist[j] = relist[j], relist[j+1]\n    return relist\n\nprint(bubbleSort([1,5,2,6,9,3]))\n```\n![冒泡排序](http://upload-images.jianshu.io/upload_images/2952111-e421e0f31170cb93.gif?imageMogr2/auto-orient/strip)\n\n由上图看出最大的数一直沉到底部\n\n\n## 选择排序\n\n选择排序基本原理：\n1. 第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；\n2. 第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；\n3. 以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。\n\n```Python\n# 方法一\ndef selectSort(relist):\n    len_ = len(relist)\n    for i in range(len_):\n        min_index = i\n        for j in range(i+1,len_):  # 这个循环会找到值比第i个索引所代表值小的索引\n            if relist[j] < relist[min_index]:\n                min_index = j\n        relist[i] ,relist[min_index] = relist[min_index], relist[i]  # 互换两个索引位置\n    return relist\n\nprint selectSort([1,5,2,6,9,3])\n\n# 方法二\ndef findSmallest(arr):\n    smallest = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n    return smallest_index\n\ndef selectionSort(arr):\n    newArr = []\n    for i in range(len(arr)):\n        smallest = findSmallest(arr)\n        newArr.append(arr.pop(smallest))\n    return newArr\n\nprint(selectionSort([5,3,7,2,1,8]))\n```\n\n![选择排序](http://upload-images.jianshu.io/upload_images/2952111-3b59aac6b772ddf0.gif?imageMogr2/auto-orient/strip)\n\n\n## 归并排序\n\n`所谓归并是指将若干个已排好序的部分合并成一个有序的部分。`\n\n假设我们有一个没有排好序的序列(14,12,15,13,11,16)，那么首先我们使用分割的办法将这个序列分割成一个个已经排好序的子序列。然后再利用归并的方法将一个个的子序列合并成排序好的序列。分割和归并的过程可以看下面的图例。这样通过先递归的分解数列，再合并数列就完成了归并排序。\n\n![MergeSort.jpg](https://upload-images.jianshu.io/upload_images/2952111-b7ca2aad908df253.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```Python\nimport math\ndef merge(left, right):\n    result = []\n    while left and right:\n        result.append(left.pop(0) if left[0] <= right[0] else right.pop(0))\n    while left:\n        result.append(left.pop(0))\n    while right:\n        result.append(right.pop(0))\n\n    return result\n\ndef mergeSort(relist):\n    if len(relist) <= 1:\n        return relist\n    mid_index = math.floor(len(relist)/2)\n    left = mergeSort(relist[:mid_index])  # 递归拆解的过程\n    right = mergeSort(relist[mid_index:])\n    return merge(left, right)  # 合并的过程\n\nprint(mergeSort([1,5,2,6,9,3]))\n\n```\n![归并排序](https://upload-images.jianshu.io/upload_images/2952111-8ee3d2a2a81eab80.gif?imageMogr2/auto-orient/strip)\n\n## 快速排序\n快速排序的思路：\n1. 先从数列中取出一个数作为基准数。\n2. 分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边(假定从小到大排序)。\n3. 再对左右区间重复第二步，直到各区间只有一个数\n\n```Python\ndef quicksort(array):\n    \"\"\"快速排序\"\"\"\n    if len(array) < 2:  # 基线条件：为空或者只有一个元素的数组是有序的\n        return array\n    else:\n        pivot = array[0]  # 递归条件,基准值\n        less = [i for i in array[1:] if i <= pivot]  # 所有小于基准值的元素组成的子数组\n        greater = [i for i in array[1:] if i > pivot]  # 所有大于基准值的元素组成的子数组\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([1,2,7,4,2,9,3]))\n```\n\n![快速排序](http://upload-images.jianshu.io/upload_images/2952111-d52e0c914f7272a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![20170801013540271.gif](http://upload-images.jianshu.io/upload_images/2952111-03cf1024e51c6dee.gif?imageMogr2/auto-orient/strip)\n\n\n## 堆排序\n\n1. 创建最大堆:将堆所有数据重新排序，使其成为最大堆\n2. 最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序\n3. 堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算\n\n![堆排序.png](https://upload-images.jianshu.io/upload_images/2952111-5903c9ca1e9a0473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```Python\n# code from -http://blog.csdn.net/minxihou/article/details/51850001\nimport random\n\ndef MAX_Heapify(heap,HeapSize,root):#在堆中做结构调整使得父节点的值大于子节点\n\n    left = 2*root + 1\n    right = left + 1\n    larger = root\n    if left < HeapSize and heap[larger] < heap[left]:\n        larger = left\n    if right < HeapSize and heap[larger] < heap[right]:\n        larger = right\n    if larger != root:#如果做了堆调整则larger的值等于左节点或者右节点的，这个时候做对调值操作\n        heap[larger],heap[root] = heap[root],heap[larger]\n        MAX_Heapify(heap, HeapSize, larger)\n\ndef Build_MAX_Heap(heap):#构造一个堆，将堆中所有数据重新排序\n    HeapSize = len(heap)#将堆的长度当独拿出来方便\n    for i in range((HeapSize -2)//2,-1,-1):#从后往前出数\n        MAX_Heapify(heap,HeapSize,i)\n\ndef HeapSort(heap):#将根节点取出与最后一位做对调，对前面len-1个节点继续进行对调整过程。\n    Build_MAX_Heap(heap)\n    for i in range(len(heap)-1,-1,-1):\n        heap[0],heap[i] = heap[i],heap[0]\n        MAX_Heapify(heap, i, 0)\n    return heap\n\nif __name__ == '__main__':\n    a = [30,50,57,77,62,78,94,80,84]\n    print(a)\n    HeapSort(a)\n    print(a)\n    b = [random.randint(1,1000) for i in range(1000)]\n    #print b\n    HeapSort(b)\n    print(b)\n\n\n```\n![堆排序.gif](https://upload-images.jianshu.io/upload_images/2952111-d80509464c38434d.gif?imageMogr2/auto-orient/strip)\n\n## 复杂度\n\n\n| 排序法 | 最差时间 | 平均时间复杂度 |稳定度|空间复杂度|\n| :--- | :------- | :------ |:------ |:------ |\n| 冒泡排序 | O(n^2) | O(n^2) |稳定|O(1)|\n| 选择排序 | O(n^2) | O(n^2) |不稳定|O(1)|\n| 插入排序 | O(n^2) | O(n^2) |稳定|O(1)|\n| 希尔排序 | O      | O           |不稳定|O(1)|\n| 归并排序 | O(n*log n)| O(n*log n) |稳定|?|\n| 快速排序 | O(n^2) | O(n*log n) |不稳定|O(logn)~O(n)|\n| 二叉树排序 | O(n^2) | O(n*log n) |不一定|O(n)|\n| 堆排序 | O(n*log n) | O(n*log n) |不稳定|O(1)|\n\n>Ps:算法第四版179页,还没有人证明`希尔排序`对随机数据的运行时间是线性代数级别\n\n## 参考\n1. http://blog.csdn.net/mrlevo520/article/details/77829204\n2. http://blog.csdn.net/minxihou/article/details/51850001\n3. https://blog.csdn.net/yuzhihui_no1/article/details/44198701\n","source":"_posts/Python3-实现常见的各种排序方法.md","raw":"---\ntitle: Python3 实现常见的各种排序方法\ndate: 2018-03-09 15:56:09\ntags:\n  - Python3\n  - Algorithm\n  - Data Structures\ncategories:\n  - Algorithm\n---\n\n\n## 冒泡排序\n\n冒泡排序原理即：从数组下标为0的位置开始，比较下标位置为0和1的数据，如果0号位置的大，则交换位置，如果1号位置大，则什么也不做，然后右移一个位置，比较1号和2号的数据，和刚才的一样，如果1号的大，则交换位置，以此类推直至最后一个位置结束，到此数组中最大的元素就被排到了最后，之后再根据之前的步骤开始排前面的数据，直至全部数据都排序完成。\n\n就是传说中的大的沉到底原则，适用于小量数据\n\n冒泡排序思路: 每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)\n\n缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低\n![冒泡排序](http://upload-images.jianshu.io/upload_images/2952111-020fcd7b86279da7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n```Python\ndef bubbleSort(relist):\n    \"\"\"冒泡排序\"\"\"\n    len_ = len(relist)\n    for i in range(len_ - 1):  # 这个循环负责设置冒泡排序进行的次数\n        for j in range(0,len_-i-1):\n            if relist[j] > relist[j+1]:\n                relist[j+1], relist[j] = relist[j], relist[j+1]\n    return relist\n\nprint(bubbleSort([1,5,2,6,9,3]))\n```\n![冒泡排序](http://upload-images.jianshu.io/upload_images/2952111-e421e0f31170cb93.gif?imageMogr2/auto-orient/strip)\n\n由上图看出最大的数一直沉到底部\n\n\n## 选择排序\n\n选择排序基本原理：\n1. 第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；\n2. 第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；\n3. 以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。\n\n```Python\n# 方法一\ndef selectSort(relist):\n    len_ = len(relist)\n    for i in range(len_):\n        min_index = i\n        for j in range(i+1,len_):  # 这个循环会找到值比第i个索引所代表值小的索引\n            if relist[j] < relist[min_index]:\n                min_index = j\n        relist[i] ,relist[min_index] = relist[min_index], relist[i]  # 互换两个索引位置\n    return relist\n\nprint selectSort([1,5,2,6,9,3])\n\n# 方法二\ndef findSmallest(arr):\n    smallest = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n    return smallest_index\n\ndef selectionSort(arr):\n    newArr = []\n    for i in range(len(arr)):\n        smallest = findSmallest(arr)\n        newArr.append(arr.pop(smallest))\n    return newArr\n\nprint(selectionSort([5,3,7,2,1,8]))\n```\n\n![选择排序](http://upload-images.jianshu.io/upload_images/2952111-3b59aac6b772ddf0.gif?imageMogr2/auto-orient/strip)\n\n\n## 归并排序\n\n`所谓归并是指将若干个已排好序的部分合并成一个有序的部分。`\n\n假设我们有一个没有排好序的序列(14,12,15,13,11,16)，那么首先我们使用分割的办法将这个序列分割成一个个已经排好序的子序列。然后再利用归并的方法将一个个的子序列合并成排序好的序列。分割和归并的过程可以看下面的图例。这样通过先递归的分解数列，再合并数列就完成了归并排序。\n\n![MergeSort.jpg](https://upload-images.jianshu.io/upload_images/2952111-b7ca2aad908df253.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```Python\nimport math\ndef merge(left, right):\n    result = []\n    while left and right:\n        result.append(left.pop(0) if left[0] <= right[0] else right.pop(0))\n    while left:\n        result.append(left.pop(0))\n    while right:\n        result.append(right.pop(0))\n\n    return result\n\ndef mergeSort(relist):\n    if len(relist) <= 1:\n        return relist\n    mid_index = math.floor(len(relist)/2)\n    left = mergeSort(relist[:mid_index])  # 递归拆解的过程\n    right = mergeSort(relist[mid_index:])\n    return merge(left, right)  # 合并的过程\n\nprint(mergeSort([1,5,2,6,9,3]))\n\n```\n![归并排序](https://upload-images.jianshu.io/upload_images/2952111-8ee3d2a2a81eab80.gif?imageMogr2/auto-orient/strip)\n\n## 快速排序\n快速排序的思路：\n1. 先从数列中取出一个数作为基准数。\n2. 分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边(假定从小到大排序)。\n3. 再对左右区间重复第二步，直到各区间只有一个数\n\n```Python\ndef quicksort(array):\n    \"\"\"快速排序\"\"\"\n    if len(array) < 2:  # 基线条件：为空或者只有一个元素的数组是有序的\n        return array\n    else:\n        pivot = array[0]  # 递归条件,基准值\n        less = [i for i in array[1:] if i <= pivot]  # 所有小于基准值的元素组成的子数组\n        greater = [i for i in array[1:] if i > pivot]  # 所有大于基准值的元素组成的子数组\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([1,2,7,4,2,9,3]))\n```\n\n![快速排序](http://upload-images.jianshu.io/upload_images/2952111-d52e0c914f7272a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![20170801013540271.gif](http://upload-images.jianshu.io/upload_images/2952111-03cf1024e51c6dee.gif?imageMogr2/auto-orient/strip)\n\n\n## 堆排序\n\n1. 创建最大堆:将堆所有数据重新排序，使其成为最大堆\n2. 最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序\n3. 堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算\n\n![堆排序.png](https://upload-images.jianshu.io/upload_images/2952111-5903c9ca1e9a0473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```Python\n# code from -http://blog.csdn.net/minxihou/article/details/51850001\nimport random\n\ndef MAX_Heapify(heap,HeapSize,root):#在堆中做结构调整使得父节点的值大于子节点\n\n    left = 2*root + 1\n    right = left + 1\n    larger = root\n    if left < HeapSize and heap[larger] < heap[left]:\n        larger = left\n    if right < HeapSize and heap[larger] < heap[right]:\n        larger = right\n    if larger != root:#如果做了堆调整则larger的值等于左节点或者右节点的，这个时候做对调值操作\n        heap[larger],heap[root] = heap[root],heap[larger]\n        MAX_Heapify(heap, HeapSize, larger)\n\ndef Build_MAX_Heap(heap):#构造一个堆，将堆中所有数据重新排序\n    HeapSize = len(heap)#将堆的长度当独拿出来方便\n    for i in range((HeapSize -2)//2,-1,-1):#从后往前出数\n        MAX_Heapify(heap,HeapSize,i)\n\ndef HeapSort(heap):#将根节点取出与最后一位做对调，对前面len-1个节点继续进行对调整过程。\n    Build_MAX_Heap(heap)\n    for i in range(len(heap)-1,-1,-1):\n        heap[0],heap[i] = heap[i],heap[0]\n        MAX_Heapify(heap, i, 0)\n    return heap\n\nif __name__ == '__main__':\n    a = [30,50,57,77,62,78,94,80,84]\n    print(a)\n    HeapSort(a)\n    print(a)\n    b = [random.randint(1,1000) for i in range(1000)]\n    #print b\n    HeapSort(b)\n    print(b)\n\n\n```\n![堆排序.gif](https://upload-images.jianshu.io/upload_images/2952111-d80509464c38434d.gif?imageMogr2/auto-orient/strip)\n\n## 复杂度\n\n\n| 排序法 | 最差时间 | 平均时间复杂度 |稳定度|空间复杂度|\n| :--- | :------- | :------ |:------ |:------ |\n| 冒泡排序 | O(n^2) | O(n^2) |稳定|O(1)|\n| 选择排序 | O(n^2) | O(n^2) |不稳定|O(1)|\n| 插入排序 | O(n^2) | O(n^2) |稳定|O(1)|\n| 希尔排序 | O      | O           |不稳定|O(1)|\n| 归并排序 | O(n*log n)| O(n*log n) |稳定|?|\n| 快速排序 | O(n^2) | O(n*log n) |不稳定|O(logn)~O(n)|\n| 二叉树排序 | O(n^2) | O(n*log n) |不一定|O(n)|\n| 堆排序 | O(n*log n) | O(n*log n) |不稳定|O(1)|\n\n>Ps:算法第四版179页,还没有人证明`希尔排序`对随机数据的运行时间是线性代数级别\n\n## 参考\n1. http://blog.csdn.net/mrlevo520/article/details/77829204\n2. http://blog.csdn.net/minxihou/article/details/51850001\n3. https://blog.csdn.net/yuzhihui_no1/article/details/44198701\n","slug":"Python3-实现常见的各种排序方法","published":1,"updated":"2018-10-12T03:23:28.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xaz0078exotb2ccznx8","content":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序原理即：从数组下标为0的位置开始，比较下标位置为0和1的数据，如果0号位置的大，则交换位置，如果1号位置大，则什么也不做，然后右移一个位置，比较1号和2号的数据，和刚才的一样，如果1号的大，则交换位置，以此类推直至最后一个位置结束，到此数组中最大的元素就被排到了最后，之后再根据之前的步骤开始排前面的数据，直至全部数据都排序完成。</p>\n<p>就是传说中的大的沉到底原则，适用于小量数据</p>\n<p>冒泡排序思路: 每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)</p>\n<p>缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-020fcd7b86279da7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"冒泡排序\"></p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"冒泡排序\"\"\"</span></span><br><span class=\"line\">    len_ = len(relist)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len_ - <span class=\"number\">1</span>):  <span class=\"comment\"># 这个循环负责设置冒泡排序进行的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len_-i<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> relist[j] &gt; relist[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                relist[j+<span class=\"number\">1</span>], relist[j] = relist[j], relist[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> relist</span><br><span class=\"line\"></span><br><span class=\"line\">print(bubbleSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e421e0f31170cb93.gif?imageMogr2/auto-orient/strip\" alt=\"冒泡排序\"></p>\n<p>由上图看出最大的数一直沉到底部</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序基本原理：</p>\n<ol>\n<li>第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；</li>\n<li>第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；</li>\n<li>以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">selectSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    len_ = len(relist)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len_):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,len_):  <span class=\"comment\"># 这个循环会找到值比第i个索引所代表值小的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> relist[j] &lt; relist[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        relist[i] ,relist[min_index] = relist[min_index], relist[i]  <span class=\"comment\"># 互换两个索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> relist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> selectSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findSmallest</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    smallest = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    smallest_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(arr)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> arr[i] &lt; smallest:</span><br><span class=\"line\">            smallest = arr[i]</span><br><span class=\"line\">            smallest_index = i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> smallest_index</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">selectionSort</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    newArr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(arr)):</span><br><span class=\"line\">        smallest = findSmallest(arr)</span><br><span class=\"line\">        newArr.append(arr.pop(smallest))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\"></span><br><span class=\"line\">print(selectionSort([<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-3b59aac6b772ddf0.gif?imageMogr2/auto-orient/strip\" alt=\"选择排序\"></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p><code>所谓归并是指将若干个已排好序的部分合并成一个有序的部分。</code></p>\n<p>假设我们有一个没有排好序的序列(14,12,15,13,11,16)，那么首先我们使用分割的办法将这个序列分割成一个个已经排好序的子序列。然后再利用归并的方法将一个个的子序列合并成排序好的序列。分割和归并的过程可以看下面的图例。这样通过先递归的分解数列，再合并数列就完成了归并排序。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-b7ca2aad908df253.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MergeSort.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(left, right)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left <span class=\"keyword\">and</span> right:</span><br><span class=\"line\">        result.append(left.pop(<span class=\"number\">0</span>) <span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>] <span class=\"keyword\">else</span> right.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left:</span><br><span class=\"line\">        result.append(left.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> right:</span><br><span class=\"line\">        result.append(right.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(relist) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> relist</span><br><span class=\"line\">    mid_index = math.floor(len(relist)/<span class=\"number\">2</span>)</span><br><span class=\"line\">    left = mergeSort(relist[:mid_index])  <span class=\"comment\"># 递归拆解的过程</span></span><br><span class=\"line\">    right = mergeSort(relist[mid_index:])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(left, right)  <span class=\"comment\"># 合并的过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(mergeSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-8ee3d2a2a81eab80.gif?imageMogr2/auto-orient/strip\" alt=\"归并排序\"></p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序的思路：</p>\n<ol>\n<li>先从数列中取出一个数作为基准数。</li>\n<li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边(假定从小到大排序)。</li>\n<li>再对左右区间重复第二步，直到各区间只有一个数</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quicksort</span><span class=\"params\">(array)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"快速排序\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(array) &lt; <span class=\"number\">2</span>:  <span class=\"comment\"># 基线条件：为空或者只有一个元素的数组是有序的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = array[<span class=\"number\">0</span>]  <span class=\"comment\"># 递归条件,基准值</span></span><br><span class=\"line\">        less = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &lt;= pivot]  <span class=\"comment\"># 所有小于基准值的元素组成的子数组</span></span><br><span class=\"line\">        greater = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &gt; pivot]  <span class=\"comment\"># 所有大于基准值的元素组成的子数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> quicksort(less) + [pivot] + quicksort(greater)</span><br><span class=\"line\"></span><br><span class=\"line\">print(quicksort([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-d52e0c914f7272a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"快速排序\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-03cf1024e51c6dee.gif?imageMogr2/auto-orient/strip\" alt=\"20170801013540271.gif\"></p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ol>\n<li>创建最大堆:将堆所有数据重新排序，使其成为最大堆</li>\n<li>最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序</li>\n<li>堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-5903c9ca1e9a0473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"堆排序.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># code from -http://blog.csdn.net/minxihou/article/details/51850001</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MAX_Heapify</span><span class=\"params\">(heap,HeapSize,root)</span>:</span><span class=\"comment\">#在堆中做结构调整使得父节点的值大于子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    left = <span class=\"number\">2</span>*root + <span class=\"number\">1</span></span><br><span class=\"line\">    right = left + <span class=\"number\">1</span></span><br><span class=\"line\">    larger = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; HeapSize <span class=\"keyword\">and</span> heap[larger] &lt; heap[left]:</span><br><span class=\"line\">        larger = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right &lt; HeapSize <span class=\"keyword\">and</span> heap[larger] &lt; heap[right]:</span><br><span class=\"line\">        larger = right</span><br><span class=\"line\">    <span class=\"keyword\">if</span> larger != root:<span class=\"comment\">#如果做了堆调整则larger的值等于左节点或者右节点的，这个时候做对调值操作</span></span><br><span class=\"line\">        heap[larger],heap[root] = heap[root],heap[larger]</span><br><span class=\"line\">        MAX_Heapify(heap, HeapSize, larger)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Build_MAX_Heap</span><span class=\"params\">(heap)</span>:</span><span class=\"comment\">#构造一个堆，将堆中所有数据重新排序</span></span><br><span class=\"line\">    HeapSize = len(heap)<span class=\"comment\">#将堆的长度当独拿出来方便</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range((HeapSize <span class=\"number\">-2</span>)//<span class=\"number\">2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):<span class=\"comment\">#从后往前出数</span></span><br><span class=\"line\">        MAX_Heapify(heap,HeapSize,i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HeapSort</span><span class=\"params\">(heap)</span>:</span><span class=\"comment\">#将根节点取出与最后一位做对调，对前面len-1个节点继续进行对调整过程。</span></span><br><span class=\"line\">    Build_MAX_Heap(heap)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(heap)<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        heap[<span class=\"number\">0</span>],heap[i] = heap[i],heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        MAX_Heapify(heap, i, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = [<span class=\"number\">30</span>,<span class=\"number\">50</span>,<span class=\"number\">57</span>,<span class=\"number\">77</span>,<span class=\"number\">62</span>,<span class=\"number\">78</span>,<span class=\"number\">94</span>,<span class=\"number\">80</span>,<span class=\"number\">84</span>]</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    HeapSort(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    b = [random.randint(<span class=\"number\">1</span>,<span class=\"number\">1000</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#print b</span></span><br><span class=\"line\">    HeapSort(b)</span><br><span class=\"line\">    print(b)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d80509464c38434d.gif?imageMogr2/auto-orient/strip\" alt=\"堆排序.gif\"></p>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">排序法</th>\n<th style=\"text-align:left\">最差时间</th>\n<th style=\"text-align:left\">平均时间复杂度</th>\n<th style=\"text-align:left\">稳定度</th>\n<th style=\"text-align:left\">空间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">冒泡排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">选择排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">希尔排序</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并排序</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">?</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快速排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(logn)~O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">二叉树排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不一定</td>\n<td style=\"text-align:left\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆排序</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ps:算法第四版179页,还没有人证明<code>希尔排序</code>对随机数据的运行时间是线性代数级别</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://blog.csdn.net/mrlevo520/article/details/77829204\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mrlevo520/article/details/77829204</a></li>\n<li><a href=\"http://blog.csdn.net/minxihou/article/details/51850001\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/minxihou/article/details/51850001</a></li>\n<li><a href=\"https://blog.csdn.net/yuzhihui_no1/article/details/44198701\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuzhihui_no1/article/details/44198701</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序原理即：从数组下标为0的位置开始，比较下标位置为0和1的数据，如果0号位置的大，则交换位置，如果1号位置大，则什么也不做，然后右移一个位置，比较1号和2号的数据，和刚才的一样，如果1号的大，则交换位置，以此类推直至最后一个位置结束，到此数组中最大的元素就被排到了最后，之后再根据之前的步骤开始排前面的数据，直至全部数据都排序完成。</p>\n<p>就是传说中的大的沉到底原则，适用于小量数据</p>\n<p>冒泡排序思路: 每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)</p>\n<p>缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-020fcd7b86279da7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"冒泡排序\"></p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"冒泡排序\"\"\"</span></span><br><span class=\"line\">    len_ = len(relist)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len_ - <span class=\"number\">1</span>):  <span class=\"comment\"># 这个循环负责设置冒泡排序进行的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len_-i<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> relist[j] &gt; relist[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                relist[j+<span class=\"number\">1</span>], relist[j] = relist[j], relist[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> relist</span><br><span class=\"line\"></span><br><span class=\"line\">print(bubbleSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-e421e0f31170cb93.gif?imageMogr2/auto-orient/strip\" alt=\"冒泡排序\"></p>\n<p>由上图看出最大的数一直沉到底部</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序基本原理：</p>\n<ol>\n<li>第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；</li>\n<li>第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；</li>\n<li>以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">selectSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    len_ = len(relist)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len_):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,len_):  <span class=\"comment\"># 这个循环会找到值比第i个索引所代表值小的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> relist[j] &lt; relist[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        relist[i] ,relist[min_index] = relist[min_index], relist[i]  <span class=\"comment\"># 互换两个索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> relist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> selectSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findSmallest</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    smallest = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    smallest_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(arr)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> arr[i] &lt; smallest:</span><br><span class=\"line\">            smallest = arr[i]</span><br><span class=\"line\">            smallest_index = i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> smallest_index</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">selectionSort</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    newArr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(arr)):</span><br><span class=\"line\">        smallest = findSmallest(arr)</span><br><span class=\"line\">        newArr.append(arr.pop(smallest))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\"></span><br><span class=\"line\">print(selectionSort([<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-3b59aac6b772ddf0.gif?imageMogr2/auto-orient/strip\" alt=\"选择排序\"></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p><code>所谓归并是指将若干个已排好序的部分合并成一个有序的部分。</code></p>\n<p>假设我们有一个没有排好序的序列(14,12,15,13,11,16)，那么首先我们使用分割的办法将这个序列分割成一个个已经排好序的子序列。然后再利用归并的方法将一个个的子序列合并成排序好的序列。分割和归并的过程可以看下面的图例。这样通过先递归的分解数列，再合并数列就完成了归并排序。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-b7ca2aad908df253.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MergeSort.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(left, right)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left <span class=\"keyword\">and</span> right:</span><br><span class=\"line\">        result.append(left.pop(<span class=\"number\">0</span>) <span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>] <span class=\"keyword\">else</span> right.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left:</span><br><span class=\"line\">        result.append(left.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> right:</span><br><span class=\"line\">        result.append(right.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeSort</span><span class=\"params\">(relist)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(relist) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> relist</span><br><span class=\"line\">    mid_index = math.floor(len(relist)/<span class=\"number\">2</span>)</span><br><span class=\"line\">    left = mergeSort(relist[:mid_index])  <span class=\"comment\"># 递归拆解的过程</span></span><br><span class=\"line\">    right = mergeSort(relist[mid_index:])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(left, right)  <span class=\"comment\"># 合并的过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(mergeSort([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-8ee3d2a2a81eab80.gif?imageMogr2/auto-orient/strip\" alt=\"归并排序\"></p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序的思路：</p>\n<ol>\n<li>先从数列中取出一个数作为基准数。</li>\n<li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边(假定从小到大排序)。</li>\n<li>再对左右区间重复第二步，直到各区间只有一个数</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quicksort</span><span class=\"params\">(array)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"快速排序\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(array) &lt; <span class=\"number\">2</span>:  <span class=\"comment\"># 基线条件：为空或者只有一个元素的数组是有序的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = array[<span class=\"number\">0</span>]  <span class=\"comment\"># 递归条件,基准值</span></span><br><span class=\"line\">        less = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &lt;= pivot]  <span class=\"comment\"># 所有小于基准值的元素组成的子数组</span></span><br><span class=\"line\">        greater = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &gt; pivot]  <span class=\"comment\"># 所有大于基准值的元素组成的子数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> quicksort(less) + [pivot] + quicksort(greater)</span><br><span class=\"line\"></span><br><span class=\"line\">print(quicksort([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-d52e0c914f7272a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"快速排序\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-03cf1024e51c6dee.gif?imageMogr2/auto-orient/strip\" alt=\"20170801013540271.gif\"></p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ol>\n<li>创建最大堆:将堆所有数据重新排序，使其成为最大堆</li>\n<li>最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序</li>\n<li>堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-5903c9ca1e9a0473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"堆排序.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># code from -http://blog.csdn.net/minxihou/article/details/51850001</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MAX_Heapify</span><span class=\"params\">(heap,HeapSize,root)</span>:</span><span class=\"comment\">#在堆中做结构调整使得父节点的值大于子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    left = <span class=\"number\">2</span>*root + <span class=\"number\">1</span></span><br><span class=\"line\">    right = left + <span class=\"number\">1</span></span><br><span class=\"line\">    larger = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; HeapSize <span class=\"keyword\">and</span> heap[larger] &lt; heap[left]:</span><br><span class=\"line\">        larger = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right &lt; HeapSize <span class=\"keyword\">and</span> heap[larger] &lt; heap[right]:</span><br><span class=\"line\">        larger = right</span><br><span class=\"line\">    <span class=\"keyword\">if</span> larger != root:<span class=\"comment\">#如果做了堆调整则larger的值等于左节点或者右节点的，这个时候做对调值操作</span></span><br><span class=\"line\">        heap[larger],heap[root] = heap[root],heap[larger]</span><br><span class=\"line\">        MAX_Heapify(heap, HeapSize, larger)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Build_MAX_Heap</span><span class=\"params\">(heap)</span>:</span><span class=\"comment\">#构造一个堆，将堆中所有数据重新排序</span></span><br><span class=\"line\">    HeapSize = len(heap)<span class=\"comment\">#将堆的长度当独拿出来方便</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range((HeapSize <span class=\"number\">-2</span>)//<span class=\"number\">2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):<span class=\"comment\">#从后往前出数</span></span><br><span class=\"line\">        MAX_Heapify(heap,HeapSize,i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HeapSort</span><span class=\"params\">(heap)</span>:</span><span class=\"comment\">#将根节点取出与最后一位做对调，对前面len-1个节点继续进行对调整过程。</span></span><br><span class=\"line\">    Build_MAX_Heap(heap)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(heap)<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        heap[<span class=\"number\">0</span>],heap[i] = heap[i],heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        MAX_Heapify(heap, i, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = [<span class=\"number\">30</span>,<span class=\"number\">50</span>,<span class=\"number\">57</span>,<span class=\"number\">77</span>,<span class=\"number\">62</span>,<span class=\"number\">78</span>,<span class=\"number\">94</span>,<span class=\"number\">80</span>,<span class=\"number\">84</span>]</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    HeapSort(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    b = [random.randint(<span class=\"number\">1</span>,<span class=\"number\">1000</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#print b</span></span><br><span class=\"line\">    HeapSort(b)</span><br><span class=\"line\">    print(b)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d80509464c38434d.gif?imageMogr2/auto-orient/strip\" alt=\"堆排序.gif\"></p>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">排序法</th>\n<th style=\"text-align:left\">最差时间</th>\n<th style=\"text-align:left\">平均时间复杂度</th>\n<th style=\"text-align:left\">稳定度</th>\n<th style=\"text-align:left\">空间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">冒泡排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">选择排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">希尔排序</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并排序</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">稳定</td>\n<td style=\"text-align:left\">?</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快速排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(logn)~O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">二叉树排序</td>\n<td style=\"text-align:left\">O(n^2)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不一定</td>\n<td style=\"text-align:left\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆排序</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">O(n*log n)</td>\n<td style=\"text-align:left\">不稳定</td>\n<td style=\"text-align:left\">O(1)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ps:算法第四版179页,还没有人证明<code>希尔排序</code>对随机数据的运行时间是线性代数级别</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://blog.csdn.net/mrlevo520/article/details/77829204\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mrlevo520/article/details/77829204</a></li>\n<li><a href=\"http://blog.csdn.net/minxihou/article/details/51850001\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/minxihou/article/details/51850001</a></li>\n<li><a href=\"https://blog.csdn.net/yuzhihui_no1/article/details/44198701\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuzhihui_no1/article/details/44198701</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Oct 12 2018 11:23:28 GMT+0800 (China Standard Time)","title":"Python3 实现常见的各种排序方法","path":"2018/03/09/Python3-实现常见的各种排序方法/","eyeCatchImage":null,"excerpt":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序原理即：从数组下标为0的位置开始，比较下标位置为0和1的数据，如果0号位置的大，则交换位置，如果1号位置大，则什么也不做，然后右移一个位置，比较1号和2号的数据，和刚才的一样，如果1号的大，则交换位置，以此类推直至最后一个位置结束，到此数组中最大的元素就被排到了最后，之后再根据之前的步骤开始排前面的数据，直至全部数据都排序完成。</p>\n<p>就是传说中的大的沉到底原则，适用于小量数据</p>\n<p>冒泡排序思路: 每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)</p>\n<p>缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-020fcd7b86279da7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"冒泡排序\"></p>","date":"2018-03-09T07:56:09.000Z","pv":0,"totalPV":0,"categories":"Algorithm","tags":["Python3","Algorithm","Data Structures"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 让字典保持有序","date":"2018-03-06T04:02:36.000Z","_content":"\n## 背景\n想创建一个字典，同时当对字典做迭代或序列化操作时，也能控制其中元素的顺序。\n\n## 解决方案\n\n要控制字典中元素的顺序，可以使用`collections模块`中的`OrderDict类`。当对字典做迭代时，他会严格按照元素初始添加的顺序执行。例如：\n```Python\nfrom collections import OrderedDict\n\nd = OrderedDict()\nd['foo'] = 1\nd['bar'] = 2\nd['spam'] = 3\nd['qrok'] = 4\n\nfor key in d:\n    print(key, d[key])\n\n# output:\n# foo 1\n# bar 2\n# spam 3\n# qrok 4\n```\n<!-- more -->\n当想创建一个映射结构以便稍后对其做序列化或编码成另一种格式时，OrderedDict就显得特别有用。例如，如果想在进行json编码时精确控制各个字段的顺序，那么只要首先在OrderedDict中构建数据就可以了。\n\n```Python\n>>> import json\n>>> json.dumps(d)\n'{\"foo\":1,\"bar\":2,\"spam\":3,\"qrok\":4}'\n>>>\n```\n\n## 讨论\n\nOrderedDict内部维护了一个双向链表，他会根据元素加入的顺序来排列键的位置。第一个加入的元素被放置的链表的末尾。接下来对已存在的键做重新赋值不会改变键的顺序。\n\n注意OrderedDict的大小是普通字典的两倍多，这是由于它额外创建的链表所致。因此，如果打算构建一个涉及大量OrderedDict实例的数据结构（例如从CSV文件中读取100000行内容到OrderedDict列表中），那么需要认真对应用做需求分析，从而判断使用OrderedDict所带来的好处是否能够超越额外的内存开销带来的缺点。\n\n\n\n\n\n\n\n\na\n","source":"_posts/Python3-让字典保持有序.md","raw":"---\ntitle: Python3 让字典保持有序\ndate: 2018-03-06 12:02:36\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 字典\n---\n\n## 背景\n想创建一个字典，同时当对字典做迭代或序列化操作时，也能控制其中元素的顺序。\n\n## 解决方案\n\n要控制字典中元素的顺序，可以使用`collections模块`中的`OrderDict类`。当对字典做迭代时，他会严格按照元素初始添加的顺序执行。例如：\n```Python\nfrom collections import OrderedDict\n\nd = OrderedDict()\nd['foo'] = 1\nd['bar'] = 2\nd['spam'] = 3\nd['qrok'] = 4\n\nfor key in d:\n    print(key, d[key])\n\n# output:\n# foo 1\n# bar 2\n# spam 3\n# qrok 4\n```\n<!-- more -->\n当想创建一个映射结构以便稍后对其做序列化或编码成另一种格式时，OrderedDict就显得特别有用。例如，如果想在进行json编码时精确控制各个字段的顺序，那么只要首先在OrderedDict中构建数据就可以了。\n\n```Python\n>>> import json\n>>> json.dumps(d)\n'{\"foo\":1,\"bar\":2,\"spam\":3,\"qrok\":4}'\n>>>\n```\n\n## 讨论\n\nOrderedDict内部维护了一个双向链表，他会根据元素加入的顺序来排列键的位置。第一个加入的元素被放置的链表的末尾。接下来对已存在的键做重新赋值不会改变键的顺序。\n\n注意OrderedDict的大小是普通字典的两倍多，这是由于它额外创建的链表所致。因此，如果打算构建一个涉及大量OrderedDict实例的数据结构（例如从CSV文件中读取100000行内容到OrderedDict列表中），那么需要认真对应用做需求分析，从而判断使用OrderedDict所带来的好处是否能够超越额外的内存开销带来的缺点。\n\n\n\n\n\n\n\n\na\n","slug":"Python3-让字典保持有序","published":1,"updated":"2018-03-06T04:55:57.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xb7007dexottmkxmubm","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>想创建一个字典，同时当对字典做迭代或序列化操作时，也能控制其中元素的顺序。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>要控制字典中元素的顺序，可以使用<code>collections模块</code>中的<code>OrderDict类</code>。当对字典做迭代时，他会严格按照元素初始添加的顺序执行。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\">d = OrderedDict()</span><br><span class=\"line\">d[<span class=\"string\">'foo'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">d[<span class=\"string\">'bar'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">d[<span class=\"string\">'spam'</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">d[<span class=\"string\">'qrok'</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    print(key, d[key])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># foo 1</span></span><br><span class=\"line\"><span class=\"comment\"># bar 2</span></span><br><span class=\"line\"><span class=\"comment\"># spam 3</span></span><br><span class=\"line\"><span class=\"comment\"># qrok 4</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>当想创建一个映射结构以便稍后对其做序列化或编码成另一种格式时，OrderedDict就显得特别有用。例如，如果想在进行json编码时精确控制各个字段的顺序，那么只要首先在OrderedDict中构建数据就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(d)</span><br><span class=\"line\"><span class=\"string\">'&#123;\"foo\":1,\"bar\":2,\"spam\":3,\"qrok\":4&#125;'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>OrderedDict内部维护了一个双向链表，他会根据元素加入的顺序来排列键的位置。第一个加入的元素被放置的链表的末尾。接下来对已存在的键做重新赋值不会改变键的顺序。</p>\n<p>注意OrderedDict的大小是普通字典的两倍多，这是由于它额外创建的链表所致。因此，如果打算构建一个涉及大量OrderedDict实例的数据结构（例如从CSV文件中读取100000行内容到OrderedDict列表中），那么需要认真对应用做需求分析，从而判断使用OrderedDict所带来的好处是否能够超越额外的内存开销带来的缺点。</p>\n<p>a</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>想创建一个字典，同时当对字典做迭代或序列化操作时，也能控制其中元素的顺序。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>要控制字典中元素的顺序，可以使用<code>collections模块</code>中的<code>OrderDict类</code>。当对字典做迭代时，他会严格按照元素初始添加的顺序执行。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\">d = OrderedDict()</span><br><span class=\"line\">d[<span class=\"string\">'foo'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">d[<span class=\"string\">'bar'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">d[<span class=\"string\">'spam'</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">d[<span class=\"string\">'qrok'</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    print(key, d[key])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># foo 1</span></span><br><span class=\"line\"><span class=\"comment\"># bar 2</span></span><br><span class=\"line\"><span class=\"comment\"># spam 3</span></span><br><span class=\"line\"><span class=\"comment\"># qrok 4</span></span><br></pre></td></tr></table></figure></p>","more":"<p>当想创建一个映射结构以便稍后对其做序列化或编码成另一种格式时，OrderedDict就显得特别有用。例如，如果想在进行json编码时精确控制各个字段的顺序，那么只要首先在OrderedDict中构建数据就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(d)</span><br><span class=\"line\"><span class=\"string\">'&#123;\"foo\":1,\"bar\":2,\"spam\":3,\"qrok\":4&#125;'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>OrderedDict内部维护了一个双向链表，他会根据元素加入的顺序来排列键的位置。第一个加入的元素被放置的链表的末尾。接下来对已存在的键做重新赋值不会改变键的顺序。</p>\n<p>注意OrderedDict的大小是普通字典的两倍多，这是由于它额外创建的链表所致。因此，如果打算构建一个涉及大量OrderedDict实例的数据结构（例如从CSV文件中读取100000行内容到OrderedDict列表中），那么需要认真对应用做需求分析，从而判断使用OrderedDict所带来的好处是否能够超越额外的内存开销带来的缺点。</p>\n<p>a</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 06 2018 12:55:57 GMT+0800 (China Standard Time)","title":"Python3 让字典保持有序","path":"2018/03/06/Python3-让字典保持有序/","eyeCatchImage":null,"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>想创建一个字典，同时当对字典做迭代或序列化操作时，也能控制其中元素的顺序。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>要控制字典中元素的顺序，可以使用<code>collections模块</code>中的<code>OrderDict类</code>。当对字典做迭代时，他会严格按照元素初始添加的顺序执行。例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\">d = OrderedDict()</span><br><span class=\"line\">d[<span class=\"string\">'foo'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">d[<span class=\"string\">'bar'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">d[<span class=\"string\">'spam'</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">d[<span class=\"string\">'qrok'</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    print(key, d[key])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># output:</span></span><br><span class=\"line\"><span class=\"comment\"># foo 1</span></span><br><span class=\"line\"><span class=\"comment\"># bar 2</span></span><br><span class=\"line\"><span class=\"comment\"># spam 3</span></span><br><span class=\"line\"><span class=\"comment\"># qrok 4</span></span><br></pre></td></tr></table></figure></p>","date":"2018-03-06T04:02:36.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 字典","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 闭包","date":"2018-03-06T06:04:56.000Z","_content":"闭包是指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。\n闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。\n\n当一个内嵌函数引用其外部作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:\n\n  1. 必须有一个内嵌函数\n  2. 内嵌函数必须引用外部函数中的变量\n  3. 外部函数的返回值必须是内嵌函数\n\n闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。\n<!-- more -->\n\n闭包的概念难以掌握，最好通过示例理解。\n\n假如有个名为avg的函数，他的作用是计算不断增加的系列值得平均数。起初，avg是这样使用的：\n```Python\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n\n```\n初学者可能会用类来实现，如示例1\n```python\n# 示例1\nclass Averager(object):\n    \"\"\"docstring for Average.\"\"\"\n    def __init__(self):\n        self.series = []\n\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n\n```\nAverage的实例是可调用对象：\n```python\n>>> avg = Averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n```\n\n下面使用函数式实现，如示例2：\n```python\n# 示例2\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n\n```\n调用make_averager时，返回一个averager函数对象。每次调用averager时，他会把参数添加到系列值中，然后计算当前平均值，如下所示：\n```python\n>>> avg = make_averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n```\n\n注意，以上两个示例有共通之处：调用Averager()或make_averager()得到一个可调用对象avg，他会更新历史值，然后计算当前均值。示例1中，avg是Averager的实例；实例2中是内部函数averager。不管怎样，我们都只需要调用avg(n),把n放入系列值中，然后重新计算均值。\n\nAverager()类的实例avg在哪里存储历史值很明显：self.series实例属性；但是第二个示例中的avg函数在哪里寻找series呢？\n\n注意，series是make_averager函数的局部变量，因为那个函数的定义体中初始化了series：series = []。可是，调用avg(10)时，make_averager函数已经返回了，而他的本地作用域也一去不复返了。\n\n在averager函数中，series是自由变量。这是一个技术术语，指未在本地作用域中绑定的变量，如图：\n\n![闭包](http://upload-images.jianshu.io/upload_images/2952111-039ebc44d7803bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**averager的闭包延伸到那个函数的作用域之外，包含自由变量series的绑定**\n\n我们可以审查返回的averager对象，发现Python在`__code__`属性（表示编译后的函数定义体）中保存局部变量和自由变量的名称，如下所示\n\n```Python\n# 审查make_averager创建的函数\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n```\n\nseries绑定在返回的avg函数的`__closure__`属性中。`avg.__closure__`中各个元素对应于`avg.__code__.co_freevars`中的一个名称。这些元素是cell对象，有个`cell_content`属性，保存着真正的值。这些属性的值如示例所示：\n```python\n>>> avg.__code__.co_freevars\n('series',)\n>>> avg.__closure__\n(<cell at 0x108b89828: list object at 0x108ae96c8>,)\n>>> avg.__closure__[0].cell_contents\n[10,11,12]\n```\n综上，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。\n\n注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。\n","source":"_posts/Python3-闭包.md","raw":"---\ntitle: Python3 闭包\ndate: 2018-03-06 14:04:56\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 闭包\n---\n闭包是指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。\n闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。\n\n当一个内嵌函数引用其外部作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:\n\n  1. 必须有一个内嵌函数\n  2. 内嵌函数必须引用外部函数中的变量\n  3. 外部函数的返回值必须是内嵌函数\n\n闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。\n<!-- more -->\n\n闭包的概念难以掌握，最好通过示例理解。\n\n假如有个名为avg的函数，他的作用是计算不断增加的系列值得平均数。起初，avg是这样使用的：\n```Python\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n\n```\n初学者可能会用类来实现，如示例1\n```python\n# 示例1\nclass Averager(object):\n    \"\"\"docstring for Average.\"\"\"\n    def __init__(self):\n        self.series = []\n\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n\n```\nAverage的实例是可调用对象：\n```python\n>>> avg = Averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n```\n\n下面使用函数式实现，如示例2：\n```python\n# 示例2\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n\n```\n调用make_averager时，返回一个averager函数对象。每次调用averager时，他会把参数添加到系列值中，然后计算当前平均值，如下所示：\n```python\n>>> avg = make_averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n```\n\n注意，以上两个示例有共通之处：调用Averager()或make_averager()得到一个可调用对象avg，他会更新历史值，然后计算当前均值。示例1中，avg是Averager的实例；实例2中是内部函数averager。不管怎样，我们都只需要调用avg(n),把n放入系列值中，然后重新计算均值。\n\nAverager()类的实例avg在哪里存储历史值很明显：self.series实例属性；但是第二个示例中的avg函数在哪里寻找series呢？\n\n注意，series是make_averager函数的局部变量，因为那个函数的定义体中初始化了series：series = []。可是，调用avg(10)时，make_averager函数已经返回了，而他的本地作用域也一去不复返了。\n\n在averager函数中，series是自由变量。这是一个技术术语，指未在本地作用域中绑定的变量，如图：\n\n![闭包](http://upload-images.jianshu.io/upload_images/2952111-039ebc44d7803bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**averager的闭包延伸到那个函数的作用域之外，包含自由变量series的绑定**\n\n我们可以审查返回的averager对象，发现Python在`__code__`属性（表示编译后的函数定义体）中保存局部变量和自由变量的名称，如下所示\n\n```Python\n# 审查make_averager创建的函数\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n```\n\nseries绑定在返回的avg函数的`__closure__`属性中。`avg.__closure__`中各个元素对应于`avg.__code__.co_freevars`中的一个名称。这些元素是cell对象，有个`cell_content`属性，保存着真正的值。这些属性的值如示例所示：\n```python\n>>> avg.__code__.co_freevars\n('series',)\n>>> avg.__closure__\n(<cell at 0x108b89828: list object at 0x108ae96c8>,)\n>>> avg.__closure__[0].cell_contents\n[10,11,12]\n```\n综上，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。\n\n注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。\n","slug":"Python3-闭包","published":1,"updated":"2018-03-06T06:56:44.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xbg007gexotd0evuepq","content":"<p>闭包是指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。<br>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p>\n<p>当一个内嵌函数引用其外部作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p>\n<ol>\n<li>必须有一个内嵌函数</li>\n<li>内嵌函数必须引用外部函数中的变量</li>\n<li>外部函数的返回值必须是内嵌函数</li>\n</ol>\n<p>闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。<br><a id=\"more\"></a></p>\n<p>闭包的概念难以掌握，最好通过示例理解。</p>\n<p>假如有个名为avg的函数，他的作用是计算不断增加的系列值得平均数。起初，avg是这样使用的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>初学者可能会用类来实现，如示例1<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for Average.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure></p>\n<p>Average的实例是可调用对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = Averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>下面使用函数式实现，如示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>调用make_averager时，返回一个averager函数对象。每次调用averager时，他会把参数添加到系列值中，然后计算当前平均值，如下所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>注意，以上两个示例有共通之处：调用Averager()或make_averager()得到一个可调用对象avg，他会更新历史值，然后计算当前均值。示例1中，avg是Averager的实例；实例2中是内部函数averager。不管怎样，我们都只需要调用avg(n),把n放入系列值中，然后重新计算均值。</p>\n<p>Averager()类的实例avg在哪里存储历史值很明显：self.series实例属性；但是第二个示例中的avg函数在哪里寻找series呢？</p>\n<p>注意，series是make_averager函数的局部变量，因为那个函数的定义体中初始化了series：series = []。可是，调用avg(10)时，make_averager函数已经返回了，而他的本地作用域也一去不复返了。</p>\n<p>在averager函数中，series是自由变量。这是一个技术术语，指未在本地作用域中绑定的变量，如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-039ebc44d7803bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"闭包\"></p>\n<p><strong>averager的闭包延伸到那个函数的作用域之外，包含自由变量series的绑定</strong></p>\n<p>我们可以审查返回的averager对象，发现Python在<code>__code__</code>属性（表示编译后的函数定义体）中保存局部变量和自由变量的名称，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 审查make_averager创建的函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'new_value'</span>, <span class=\"string\">'total'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br></pre></td></tr></table></figure>\n<p>series绑定在返回的avg函数的<code>__closure__</code>属性中。<code>avg.__closure__</code>中各个元素对应于<code>avg.__code__.co_freevars</code>中的一个名称。这些元素是cell对象，有个<code>cell_content</code>属性，保存着真正的值。这些属性的值如示例所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class=\"line\">(&lt;cell at <span class=\"number\">0x108b89828</span>: list object at <span class=\"number\">0x108ae96c8</span>&gt;,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure></p>\n<p>综上，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。</p>\n<p>注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p>\n","site":{"data":{}},"excerpt":"<p>闭包是指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。<br>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p>\n<p>当一个内嵌函数引用其外部作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p>\n<ol>\n<li>必须有一个内嵌函数</li>\n<li>内嵌函数必须引用外部函数中的变量</li>\n<li>外部函数的返回值必须是内嵌函数</li>\n</ol>\n<p>闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。<br>","more":"</p>\n<p>闭包的概念难以掌握，最好通过示例理解。</p>\n<p>假如有个名为avg的函数，他的作用是计算不断增加的系列值得平均数。起初，avg是这样使用的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>初学者可能会用类来实现，如示例1<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for Average.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure></p>\n<p>Average的实例是可调用对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = Averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>下面使用函数式实现，如示例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure></p>\n<p>调用make_averager时，返回一个averager函数对象。每次调用averager时，他会把参数添加到系列值中，然后计算当前平均值，如下所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"number\">11.0</span></span><br></pre></td></tr></table></figure></p>\n<p>注意，以上两个示例有共通之处：调用Averager()或make_averager()得到一个可调用对象avg，他会更新历史值，然后计算当前均值。示例1中，avg是Averager的实例；实例2中是内部函数averager。不管怎样，我们都只需要调用avg(n),把n放入系列值中，然后重新计算均值。</p>\n<p>Averager()类的实例avg在哪里存储历史值很明显：self.series实例属性；但是第二个示例中的avg函数在哪里寻找series呢？</p>\n<p>注意，series是make_averager函数的局部变量，因为那个函数的定义体中初始化了series：series = []。可是，调用avg(10)时，make_averager函数已经返回了，而他的本地作用域也一去不复返了。</p>\n<p>在averager函数中，series是自由变量。这是一个技术术语，指未在本地作用域中绑定的变量，如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-039ebc44d7803bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"闭包\"></p>\n<p><strong>averager的闭包延伸到那个函数的作用域之外，包含自由变量series的绑定</strong></p>\n<p>我们可以审查返回的averager对象，发现Python在<code>__code__</code>属性（表示编译后的函数定义体）中保存局部变量和自由变量的名称，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 审查make_averager创建的函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'new_value'</span>, <span class=\"string\">'total'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br></pre></td></tr></table></figure>\n<p>series绑定在返回的avg函数的<code>__closure__</code>属性中。<code>avg.__closure__</code>中各个元素对应于<code>avg.__code__.co_freevars</code>中的一个名称。这些元素是cell对象，有个<code>cell_content</code>属性，保存着真正的值。这些属性的值如示例所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class=\"line\">(&lt;cell at <span class=\"number\">0x108b89828</span>: list object at <span class=\"number\">0x108ae96c8</span>&gt;,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure></p>\n<p>综上，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。</p>\n<p>注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 06 2018 14:56:44 GMT+0800 (China Standard Time)","title":"Python3 闭包","path":"2018/03/06/Python3-闭包/","eyeCatchImage":null,"excerpt":"<p>闭包是指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。<br>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p>\n<p>当一个内嵌函数引用其外部作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p>\n<ol>\n<li>必须有一个内嵌函数</li>\n<li>内嵌函数必须引用外部函数中的变量</li>\n<li>外部函数的返回值必须是内嵌函数</li>\n</ol>\n<p>闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时虽然定义作用域不可用了，但仍能使用那些绑定。<br>","date":"2018-03-06T06:04:56.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 闭包","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 解包和压包","date":"2018-04-06T15:31:01.000Z","_content":"\nPython中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。\n\n\n## **可迭代对象每个元素赋值给一个变量**\n```python\n# 列表\n>>> name, age, date = ['Bob', 20, '2018-1-1']\n>>> name\n'Bob'\n>>> age\n20\n>>> date\n'2018-1-1'\n\n>>> a, b, c = enumerate(['a', 'b', 'c'])\n>>> a\n(0, 'a')\n\n# 元组\n>>> a, b, c = ('a', 'b', 'c')\n>>> a\n'a'\n\n# 字典\n>>> a, b, c = {'a':1, 'b':2, 'c':3}\n>>> a\n'a'\n\n>>> a, b, c = {'a':1, 'b':2, 'c':3}.items()\n>>> a\n('a', 1)\n\n>>> a, b, c = {'a':1, 'b':2, 'c':3}.values()\n>>> a\n1\n\n# 字符串\n>>> a, b, c = 'abc'\n>>> a\n'a'\n\n# 生成器\n>>> a, b, c = (x + 1 for x in range(3))\n>>> b\n2\n```\n<!-- more -->\n\n## **星号\"*\"的使用---解包**\n\n比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值\n```python\n>>> small, *new, big = sorted([93,12,33,55,99])\n>>> new\n[33, 55, 93]\n```\n\n## **压包与解包**\n```python\na = ['a', 'b', 'c']\nb = [1, 2, 3]\nfor i, j in zip(a, b):\n    print(i+j)\n\n# 输出\n1\n3\n5\n```\n分析以上代码：\n1. zip函数将a, b压包程一个可迭代对象\n2. 对可迭代对象的每一个元素（('a', 1)）进行解包（i, j = ('a', 1)）\n3. 接下来可以分别调用i, j变量进行计算\n\n再举一个例子：\n```python\nl = [\n    ('Bob', '1991', '60'),\n    ('Bill', '1992', '65'),\n    ('Mike', '1993', '70')\n]\nfor name, *args in l:\n    print(name, args)\n\nBob ['1991', '60']\nBill ['1992', '65']\nMike ['1993', '70']\n```\n\n## **\"_\"的用法**\n当一些变量不用时，用`_`表示是更好的写法，可以让读代码的人知道这个元素是不要的\n```python\n>>> p = ('Bob', 20, 50, (11,20,2000))\n>>> name, *_, (*_, year) = p\n>>> name\n'Bob'\n>>> year\n2000\n```\n\n## **多变量同时赋值**\n```python\n>>> a, b = 1, 2\n>>> a = 1, 2\n>>> a\n(1, 2)\n```\n下面用法都会报错\n```python\n*a = 1, 3\na,b,c = 1,2\n```\n`但是这种写法是可以的`\n```python\n>>> *a, = 1,2\n>>> a\n[1,2]\n```\n\n## **“*”之可变参数**\n函数定义时，我们使用*的可变参数，其实也是压包解包过程\n```python\ndef func(*args):\n    print(args)\n\n>>> func(1,2,3,4)\n(1, 2, 3, 4)\n```\n参数用*num表示，num变量就可以当成元组调用了。\n其实这个过程相当于*num, = 1,2,5,6\n\n\n## **“*”之关键字参数**\n```python\ndef func(**kw):\n    print(kw)\n\n>>> func(name = 'Bob', age = 10, weight = 60)\n{'name' = 'Bob', 'age' = 10, 'weight' = 60}\n```\n\n键值对传入**kw，kw就可以表示相应字典。\n\n`**`的用法只在函数定义中使用，`不能这样使用`\n```python\na, **b = {'name' = 'Bob', 'age' = 10, 'weight' = 60}\n```\n\n## **可变参数与关键字参数的细节问题**\n### 函数传入实参时，可变参数`*`之前的参数不能指定参数名\n```python\ndef func(a, *b):\n    print(a)\n    print(b)\n\n>>> func(a=1, 2,3,4)\nFile \"<ipython-input-17-978eea76866e>\", line 1\n  func(a=1, 2,3,4)\n           ^\nSyntaxError: positional argument follows keyword argument\nfunc(1,2,3,4)\n1\n(2,3,4)\n```\n\n### 函数传入实参时，可变参数`*`之后的参数必须指定参数名，否则就会被归到可变参数之中\n```python\ndef func(a, *b, c = None):\n    print(a)\n    print(b)\n    print(c)\n\n>>> func(1,2,3,4)\n1\n(2,3,4)\nNone\n\n>>> func(1,2,3,c=4)\n1\n(2,3)\n4\n```\n如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:\n```python\ndef func(*, a, b):\n    print(a)\n    print(b)\n\n>>> func(a = 1, b = 2)\n1\n2\n```\n可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来\n### 关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\n```python\ndef func(a, *b, c, **d):\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n\n>>> func(1,2,3,c=4,m=5,n=6)\n1\n(2,3)\n4\n{'m': 5, 'n':6}\n```\n\n### `可变参数与关键词参数共同使用以表示任意参数`\n下面是这一点在装饰器当中的使用\n\n```python\ndef mydecorator(func):\n    def wrapper(*args, **kw):\n        print('i am using a decorator')\n        return func(*args, **kw)\n    return wrapper\n\n@mydecorator\ndef myfun(a, b):\n    print(a)\n    print(b)\n\n>>> myfun(1, b = 2)\ni am using a decorator\n1\n2\n```\nwrapper函数使用`*args`, `**kw`作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用`*args`, `**kw`完全没有问题。\n\n## 解包作为参数传入函数中\n首先定义一个函数\n```python\ndef myfun(a, b):\n    print(a + b)\n```\n列表|元组的解包\n```python\n>>> n = [1,2]\n>>> myfun(*n)\n3\n```\n字典的解包\n```python\n>>> mydict = {'a':1, 'b':2}\n>>> myfun(**mydict)\n3\n>>> myfun(*mydict)\n'ab'\n```\n\n一个简单的应用\n```python\n>>> Bob = {'name': 'Bob', 'age':20}\n>>> \"{name}'s age is {age}\".format(**Bob)\n\"Bob's age is 20\"\n```\n## 多返回值函数\n下面过程也涉及到了解包\n```python\ndef myfun(a, b):\n    print a+1, b+1\n\n>>> m,n = myfun(1,2)\n>>> m\n2\n>>> n\n3\n```\n其本身是一个元组\n```python\n>>> p = myfun(1, 2)\n>>> p\n(2, 3)\n```\n","source":"_posts/Python3-解包和压包.md","raw":"---\ntitle: Python3 解包和压包\ndate: 2018-04-06 23:31:01\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\nPython中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。\n\n\n## **可迭代对象每个元素赋值给一个变量**\n```python\n# 列表\n>>> name, age, date = ['Bob', 20, '2018-1-1']\n>>> name\n'Bob'\n>>> age\n20\n>>> date\n'2018-1-1'\n\n>>> a, b, c = enumerate(['a', 'b', 'c'])\n>>> a\n(0, 'a')\n\n# 元组\n>>> a, b, c = ('a', 'b', 'c')\n>>> a\n'a'\n\n# 字典\n>>> a, b, c = {'a':1, 'b':2, 'c':3}\n>>> a\n'a'\n\n>>> a, b, c = {'a':1, 'b':2, 'c':3}.items()\n>>> a\n('a', 1)\n\n>>> a, b, c = {'a':1, 'b':2, 'c':3}.values()\n>>> a\n1\n\n# 字符串\n>>> a, b, c = 'abc'\n>>> a\n'a'\n\n# 生成器\n>>> a, b, c = (x + 1 for x in range(3))\n>>> b\n2\n```\n<!-- more -->\n\n## **星号\"*\"的使用---解包**\n\n比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值\n```python\n>>> small, *new, big = sorted([93,12,33,55,99])\n>>> new\n[33, 55, 93]\n```\n\n## **压包与解包**\n```python\na = ['a', 'b', 'c']\nb = [1, 2, 3]\nfor i, j in zip(a, b):\n    print(i+j)\n\n# 输出\n1\n3\n5\n```\n分析以上代码：\n1. zip函数将a, b压包程一个可迭代对象\n2. 对可迭代对象的每一个元素（('a', 1)）进行解包（i, j = ('a', 1)）\n3. 接下来可以分别调用i, j变量进行计算\n\n再举一个例子：\n```python\nl = [\n    ('Bob', '1991', '60'),\n    ('Bill', '1992', '65'),\n    ('Mike', '1993', '70')\n]\nfor name, *args in l:\n    print(name, args)\n\nBob ['1991', '60']\nBill ['1992', '65']\nMike ['1993', '70']\n```\n\n## **\"_\"的用法**\n当一些变量不用时，用`_`表示是更好的写法，可以让读代码的人知道这个元素是不要的\n```python\n>>> p = ('Bob', 20, 50, (11,20,2000))\n>>> name, *_, (*_, year) = p\n>>> name\n'Bob'\n>>> year\n2000\n```\n\n## **多变量同时赋值**\n```python\n>>> a, b = 1, 2\n>>> a = 1, 2\n>>> a\n(1, 2)\n```\n下面用法都会报错\n```python\n*a = 1, 3\na,b,c = 1,2\n```\n`但是这种写法是可以的`\n```python\n>>> *a, = 1,2\n>>> a\n[1,2]\n```\n\n## **“*”之可变参数**\n函数定义时，我们使用*的可变参数，其实也是压包解包过程\n```python\ndef func(*args):\n    print(args)\n\n>>> func(1,2,3,4)\n(1, 2, 3, 4)\n```\n参数用*num表示，num变量就可以当成元组调用了。\n其实这个过程相当于*num, = 1,2,5,6\n\n\n## **“*”之关键字参数**\n```python\ndef func(**kw):\n    print(kw)\n\n>>> func(name = 'Bob', age = 10, weight = 60)\n{'name' = 'Bob', 'age' = 10, 'weight' = 60}\n```\n\n键值对传入**kw，kw就可以表示相应字典。\n\n`**`的用法只在函数定义中使用，`不能这样使用`\n```python\na, **b = {'name' = 'Bob', 'age' = 10, 'weight' = 60}\n```\n\n## **可变参数与关键字参数的细节问题**\n### 函数传入实参时，可变参数`*`之前的参数不能指定参数名\n```python\ndef func(a, *b):\n    print(a)\n    print(b)\n\n>>> func(a=1, 2,3,4)\nFile \"<ipython-input-17-978eea76866e>\", line 1\n  func(a=1, 2,3,4)\n           ^\nSyntaxError: positional argument follows keyword argument\nfunc(1,2,3,4)\n1\n(2,3,4)\n```\n\n### 函数传入实参时，可变参数`*`之后的参数必须指定参数名，否则就会被归到可变参数之中\n```python\ndef func(a, *b, c = None):\n    print(a)\n    print(b)\n    print(c)\n\n>>> func(1,2,3,4)\n1\n(2,3,4)\nNone\n\n>>> func(1,2,3,c=4)\n1\n(2,3)\n4\n```\n如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:\n```python\ndef func(*, a, b):\n    print(a)\n    print(b)\n\n>>> func(a = 1, b = 2)\n1\n2\n```\n可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来\n### 关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\n```python\ndef func(a, *b, c, **d):\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n\n>>> func(1,2,3,c=4,m=5,n=6)\n1\n(2,3)\n4\n{'m': 5, 'n':6}\n```\n\n### `可变参数与关键词参数共同使用以表示任意参数`\n下面是这一点在装饰器当中的使用\n\n```python\ndef mydecorator(func):\n    def wrapper(*args, **kw):\n        print('i am using a decorator')\n        return func(*args, **kw)\n    return wrapper\n\n@mydecorator\ndef myfun(a, b):\n    print(a)\n    print(b)\n\n>>> myfun(1, b = 2)\ni am using a decorator\n1\n2\n```\nwrapper函数使用`*args`, `**kw`作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用`*args`, `**kw`完全没有问题。\n\n## 解包作为参数传入函数中\n首先定义一个函数\n```python\ndef myfun(a, b):\n    print(a + b)\n```\n列表|元组的解包\n```python\n>>> n = [1,2]\n>>> myfun(*n)\n3\n```\n字典的解包\n```python\n>>> mydict = {'a':1, 'b':2}\n>>> myfun(**mydict)\n3\n>>> myfun(*mydict)\n'ab'\n```\n\n一个简单的应用\n```python\n>>> Bob = {'name': 'Bob', 'age':20}\n>>> \"{name}'s age is {age}\".format(**Bob)\n\"Bob's age is 20\"\n```\n## 多返回值函数\n下面过程也涉及到了解包\n```python\ndef myfun(a, b):\n    print a+1, b+1\n\n>>> m,n = myfun(1,2)\n>>> m\n2\n>>> n\n3\n```\n其本身是一个元组\n```python\n>>> p = myfun(1, 2)\n>>> p\n(2, 3)\n```\n","slug":"Python3-解包和压包","published":1,"updated":"2018-04-06T17:14:14.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xbk007lexotbqwl886f","content":"<p>Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。</p>\n<h2 id=\"可迭代对象每个元素赋值给一个变量\"><a href=\"#可迭代对象每个元素赋值给一个变量\" class=\"headerlink\" title=\"可迭代对象每个元素赋值给一个变量\"></a><strong>可迭代对象每个元素赋值给一个变量</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, age, date = [<span class=\"string\">'Bob'</span>, <span class=\"number\">20</span>, <span class=\"string\">'2018-1-1'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>date</span><br><span class=\"line\"><span class=\"string\">'2018-1-1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = enumerate([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.items()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.values()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成器</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (x + <span class=\"number\">1</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"星号”-”的使用—解包\"><a href=\"#星号”-”的使用—解包\" class=\"headerlink\" title=\"星号”*”的使用—解包\"></a><strong>星号”*”的使用—解包</strong></h2><p>比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>small, *new, big = sorted([<span class=\"number\">93</span>,<span class=\"number\">12</span>,<span class=\"number\">33</span>,<span class=\"number\">55</span>,<span class=\"number\">99</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new</span><br><span class=\"line\">[<span class=\"number\">33</span>, <span class=\"number\">55</span>, <span class=\"number\">93</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"压包与解包\"><a href=\"#压包与解包\" class=\"headerlink\" title=\"压包与解包\"></a><strong>压包与解包</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">    print(i+j)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>分析以上代码：</p>\n<ol>\n<li>zip函数将a, b压包程一个可迭代对象</li>\n<li>对可迭代对象的每一个元素（(‘a’, 1)）进行解包（i, j = (‘a’, 1)）</li>\n<li>接下来可以分别调用i, j变量进行计算</li>\n</ol>\n<p>再举一个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l = [</span><br><span class=\"line\">    (<span class=\"string\">'Bob'</span>, <span class=\"string\">'1991'</span>, <span class=\"string\">'60'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'Bill'</span>, <span class=\"string\">'1992'</span>, <span class=\"string\">'65'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'Mike'</span>, <span class=\"string\">'1993'</span>, <span class=\"string\">'70'</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, *args <span class=\"keyword\">in</span> l:</span><br><span class=\"line\">    print(name, args)</span><br><span class=\"line\"></span><br><span class=\"line\">Bob [<span class=\"string\">'1991'</span>, <span class=\"string\">'60'</span>]</span><br><span class=\"line\">Bill [<span class=\"string\">'1992'</span>, <span class=\"string\">'65'</span>]</span><br><span class=\"line\">Mike [<span class=\"string\">'1993'</span>, <span class=\"string\">'70'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"“-”的用法\"><a href=\"#“-”的用法\" class=\"headerlink\" title=\"“_”的用法\"></a><strong>“_”的用法</strong></h2><p>当一些变量不用时，用<code>_</code>表示是更好的写法，可以让读代码的人知道这个元素是不要的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = (<span class=\"string\">'Bob'</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, (<span class=\"number\">11</span>,<span class=\"number\">20</span>,<span class=\"number\">2000</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, *_, (*_, year) = p</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>year</span><br><span class=\"line\"><span class=\"number\">2000</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多变量同时赋值\"><a href=\"#多变量同时赋值\" class=\"headerlink\" title=\"多变量同时赋值\"></a><strong>多变量同时赋值</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>下面用法都会报错<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*a = <span class=\"number\">1</span>, <span class=\"number\">3</span></span><br><span class=\"line\">a,b,c = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p><code>但是这种写法是可以的</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>*a, = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"“-”之可变参数\"><a href=\"#“-”之可变参数\" class=\"headerlink\" title=\"“*”之可变参数\"></a><strong>“*”之可变参数</strong></h2><p>函数定义时，我们使用*的可变参数，其实也是压包解包过程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>参数用<em>num表示，num变量就可以当成元组调用了。<br>其实这个过程相当于</em>num, = 1,2,5,6</p>\n<h2 id=\"“-”之关键字参数\"><a href=\"#“-”之关键字参数\" class=\"headerlink\" title=\"“*”之关键字参数\"></a><strong>“*”之关键字参数</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(**kw)</span>:</span></span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(name = <span class=\"string\">'Bob'</span>, age = <span class=\"number\">10</span>, weight = <span class=\"number\">60</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">'name'</span> = <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span> = <span class=\"number\">10</span>, <span class=\"string\">'weight'</span> = <span class=\"number\">60</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>键值对传入**kw，kw就可以表示相应字典。</p>\n<p><code>**</code>的用法只在函数定义中使用，<code>不能这样使用</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, **b = &#123;<span class=\"string\">'name'</span> = <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span> = <span class=\"number\">10</span>, <span class=\"string\">'weight'</span> = <span class=\"number\">60</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可变参数与关键字参数的细节问题\"><a href=\"#可变参数与关键字参数的细节问题\" class=\"headerlink\" title=\"可变参数与关键字参数的细节问题\"></a><strong>可变参数与关键字参数的细节问题</strong></h2><h3 id=\"函数传入实参时，可变参数-之前的参数不能指定参数名\"><a href=\"#函数传入实参时，可变参数-之前的参数不能指定参数名\" class=\"headerlink\" title=\"函数传入实参时，可变参数*之前的参数不能指定参数名\"></a>函数传入实参时，可变参数<code>*</code>之前的参数不能指定参数名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(a=<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">File <span class=\"string\">\"&lt;ipython-input-17-978eea76866e&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">  func(a=<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">           ^</span><br><span class=\"line\">SyntaxError: positional argument follows keyword argument</span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中\"><a href=\"#函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中\" class=\"headerlink\" title=\"函数传入实参时，可变参数*之后的参数必须指定参数名，否则就会被归到可变参数之中\"></a>函数传入实参时，可变参数<code>*</code>之后的参数必须指定参数名，否则就会被归到可变参数之中</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b, c = None)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,c=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(*, a, b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来</p>\n<h3 id=\"关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\"><a href=\"#关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\" class=\"headerlink\" title=\"关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\"></a>关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b, c, **d)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    print(c)</span><br><span class=\"line\">    print(d)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,c=<span class=\"number\">4</span>,m=<span class=\"number\">5</span>,n=<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">&#123;<span class=\"string\">'m'</span>: <span class=\"number\">5</span>, <span class=\"string\">'n'</span>:<span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变参数与关键词参数共同使用以表示任意参数\"><a href=\"#可变参数与关键词参数共同使用以表示任意参数\" class=\"headerlink\" title=\"可变参数与关键词参数共同使用以表示任意参数\"></a><code>可变参数与关键词参数共同使用以表示任意参数</code></h3><p>下面是这一点在装饰器当中的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mydecorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'i am using a decorator'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@mydecorator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(<span class=\"number\">1</span>, b = <span class=\"number\">2</span>)</span><br><span class=\"line\">i am using a decorator</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>wrapper函数使用<code>*args</code>, <code>**kw</code>作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用<code>*args</code>, <code>**kw</code>完全没有问题。</p>\n<h2 id=\"解包作为参数传入函数中\"><a href=\"#解包作为参数传入函数中\" class=\"headerlink\" title=\"解包作为参数传入函数中\"></a>解包作为参数传入函数中</h2><p>首先定义一个函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    print(a + b)</span><br></pre></td></tr></table></figure></p>\n<p>列表|元组的解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(*n)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>字典的解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mydict = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(**mydict)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(*mydict)</span><br><span class=\"line\"><span class=\"string\">'ab'</span></span><br></pre></td></tr></table></figure></p>\n<p>一个简单的应用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Bob = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;name&#125;'s age is &#123;age&#125;\"</span>.format(**Bob)</span><br><span class=\"line\"><span class=\"string\">\"Bob's age is 20\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多返回值函数\"><a href=\"#多返回值函数\" class=\"headerlink\" title=\"多返回值函数\"></a>多返回值函数</h2><p>下面过程也涉及到了解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> a+<span class=\"number\">1</span>, b+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m,n = myfun(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>其本身是一个元组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = myfun(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。</p>\n<h2 id=\"可迭代对象每个元素赋值给一个变量\"><a href=\"#可迭代对象每个元素赋值给一个变量\" class=\"headerlink\" title=\"可迭代对象每个元素赋值给一个变量\"></a><strong>可迭代对象每个元素赋值给一个变量</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, age, date = [<span class=\"string\">'Bob'</span>, <span class=\"number\">20</span>, <span class=\"string\">'2018-1-1'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>date</span><br><span class=\"line\"><span class=\"string\">'2018-1-1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = enumerate([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.items()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.values()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成器</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (x + <span class=\"number\">1</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"星号”-”的使用—解包\"><a href=\"#星号”-”的使用—解包\" class=\"headerlink\" title=\"星号”*”的使用—解包\"></a><strong>星号”*”的使用—解包</strong></h2><p>比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>small, *new, big = sorted([<span class=\"number\">93</span>,<span class=\"number\">12</span>,<span class=\"number\">33</span>,<span class=\"number\">55</span>,<span class=\"number\">99</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new</span><br><span class=\"line\">[<span class=\"number\">33</span>, <span class=\"number\">55</span>, <span class=\"number\">93</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"压包与解包\"><a href=\"#压包与解包\" class=\"headerlink\" title=\"压包与解包\"></a><strong>压包与解包</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">    print(i+j)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>分析以上代码：</p>\n<ol>\n<li>zip函数将a, b压包程一个可迭代对象</li>\n<li>对可迭代对象的每一个元素（(‘a’, 1)）进行解包（i, j = (‘a’, 1)）</li>\n<li>接下来可以分别调用i, j变量进行计算</li>\n</ol>\n<p>再举一个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l = [</span><br><span class=\"line\">    (<span class=\"string\">'Bob'</span>, <span class=\"string\">'1991'</span>, <span class=\"string\">'60'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'Bill'</span>, <span class=\"string\">'1992'</span>, <span class=\"string\">'65'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'Mike'</span>, <span class=\"string\">'1993'</span>, <span class=\"string\">'70'</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, *args <span class=\"keyword\">in</span> l:</span><br><span class=\"line\">    print(name, args)</span><br><span class=\"line\"></span><br><span class=\"line\">Bob [<span class=\"string\">'1991'</span>, <span class=\"string\">'60'</span>]</span><br><span class=\"line\">Bill [<span class=\"string\">'1992'</span>, <span class=\"string\">'65'</span>]</span><br><span class=\"line\">Mike [<span class=\"string\">'1993'</span>, <span class=\"string\">'70'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"“-”的用法\"><a href=\"#“-”的用法\" class=\"headerlink\" title=\"“_”的用法\"></a><strong>“_”的用法</strong></h2><p>当一些变量不用时，用<code>_</code>表示是更好的写法，可以让读代码的人知道这个元素是不要的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = (<span class=\"string\">'Bob'</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, (<span class=\"number\">11</span>,<span class=\"number\">20</span>,<span class=\"number\">2000</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, *_, (*_, year) = p</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>year</span><br><span class=\"line\"><span class=\"number\">2000</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多变量同时赋值\"><a href=\"#多变量同时赋值\" class=\"headerlink\" title=\"多变量同时赋值\"></a><strong>多变量同时赋值</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>下面用法都会报错<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*a = <span class=\"number\">1</span>, <span class=\"number\">3</span></span><br><span class=\"line\">a,b,c = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p><code>但是这种写法是可以的</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>*a, = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"“-”之可变参数\"><a href=\"#“-”之可变参数\" class=\"headerlink\" title=\"“*”之可变参数\"></a><strong>“*”之可变参数</strong></h2><p>函数定义时，我们使用*的可变参数，其实也是压包解包过程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>参数用<em>num表示，num变量就可以当成元组调用了。<br>其实这个过程相当于</em>num, = 1,2,5,6</p>\n<h2 id=\"“-”之关键字参数\"><a href=\"#“-”之关键字参数\" class=\"headerlink\" title=\"“*”之关键字参数\"></a><strong>“*”之关键字参数</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(**kw)</span>:</span></span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(name = <span class=\"string\">'Bob'</span>, age = <span class=\"number\">10</span>, weight = <span class=\"number\">60</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">'name'</span> = <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span> = <span class=\"number\">10</span>, <span class=\"string\">'weight'</span> = <span class=\"number\">60</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>键值对传入**kw，kw就可以表示相应字典。</p>\n<p><code>**</code>的用法只在函数定义中使用，<code>不能这样使用</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, **b = &#123;<span class=\"string\">'name'</span> = <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span> = <span class=\"number\">10</span>, <span class=\"string\">'weight'</span> = <span class=\"number\">60</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可变参数与关键字参数的细节问题\"><a href=\"#可变参数与关键字参数的细节问题\" class=\"headerlink\" title=\"可变参数与关键字参数的细节问题\"></a><strong>可变参数与关键字参数的细节问题</strong></h2><h3 id=\"函数传入实参时，可变参数-之前的参数不能指定参数名\"><a href=\"#函数传入实参时，可变参数-之前的参数不能指定参数名\" class=\"headerlink\" title=\"函数传入实参时，可变参数*之前的参数不能指定参数名\"></a>函数传入实参时，可变参数<code>*</code>之前的参数不能指定参数名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(a=<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">File <span class=\"string\">\"&lt;ipython-input-17-978eea76866e&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">  func(a=<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">           ^</span><br><span class=\"line\">SyntaxError: positional argument follows keyword argument</span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中\"><a href=\"#函数传入实参时，可变参数-之后的参数必须指定参数名，否则就会被归到可变参数之中\" class=\"headerlink\" title=\"函数传入实参时，可变参数*之后的参数必须指定参数名，否则就会被归到可变参数之中\"></a>函数传入实参时，可变参数<code>*</code>之后的参数必须指定参数名，否则就会被归到可变参数之中</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b, c = None)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,c=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>如果一个函数想要使用时必须明确指定参数名，可以将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名，如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(*, a, b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>可变参数的这两条特性，可以用于将 只需要按照位置赋值的参数 和 需要明确指定参数名的参数区分开来</p>\n<h3 id=\"关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\"><a href=\"#关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\" class=\"headerlink\" title=\"关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以\"></a>关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, *b, c, **d)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    print(c)</span><br><span class=\"line\">    print(d)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,c=<span class=\"number\">4</span>,m=<span class=\"number\">5</span>,n=<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">&#123;<span class=\"string\">'m'</span>: <span class=\"number\">5</span>, <span class=\"string\">'n'</span>:<span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变参数与关键词参数共同使用以表示任意参数\"><a href=\"#可变参数与关键词参数共同使用以表示任意参数\" class=\"headerlink\" title=\"可变参数与关键词参数共同使用以表示任意参数\"></a><code>可变参数与关键词参数共同使用以表示任意参数</code></h3><p>下面是这一点在装饰器当中的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mydecorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'i am using a decorator'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@mydecorator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(<span class=\"number\">1</span>, b = <span class=\"number\">2</span>)</span><br><span class=\"line\">i am using a decorator</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>wrapper函数使用<code>*args</code>, <code>**kw</code>作为参数，则被修饰的myfun函数需要的参数无论是什么样的，传入wrapper都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用<code>*args</code>, <code>**kw</code>完全没有问题。</p>\n<h2 id=\"解包作为参数传入函数中\"><a href=\"#解包作为参数传入函数中\" class=\"headerlink\" title=\"解包作为参数传入函数中\"></a>解包作为参数传入函数中</h2><p>首先定义一个函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    print(a + b)</span><br></pre></td></tr></table></figure></p>\n<p>列表|元组的解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(*n)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>字典的解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mydict = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(**mydict)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myfun(*mydict)</span><br><span class=\"line\"><span class=\"string\">'ab'</span></span><br></pre></td></tr></table></figure></p>\n<p>一个简单的应用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Bob = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;name&#125;'s age is &#123;age&#125;\"</span>.format(**Bob)</span><br><span class=\"line\"><span class=\"string\">\"Bob's age is 20\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多返回值函数\"><a href=\"#多返回值函数\" class=\"headerlink\" title=\"多返回值函数\"></a>多返回值函数</h2><p>下面过程也涉及到了解包<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfun</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> a+<span class=\"number\">1</span>, b+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m,n = myfun(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>其本身是一个元组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = myfun(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Apr 07 2018 01:14:14 GMT+0800 (China Standard Time)","title":"Python3 解包和压包","path":"2018/04/06/Python3-解包和压包/","eyeCatchImage":null,"excerpt":"<p>Python中的解包可以这样理解：一个可迭代对象是一个整体，想把可迭代对象中每个元素当成一个个个体剥离出来，这个过程就是解包。下面将举例说明。</p>\n<h2 id=\"可迭代对象每个元素赋值给一个变量\"><a href=\"#可迭代对象每个元素赋值给一个变量\" class=\"headerlink\" title=\"可迭代对象每个元素赋值给一个变量\"></a><strong>可迭代对象每个元素赋值给一个变量</strong></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, age, date = [<span class=\"string\">'Bob'</span>, <span class=\"number\">20</span>, <span class=\"string\">'2018-1-1'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>date</span><br><span class=\"line\"><span class=\"string\">'2018-1-1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = enumerate([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.items()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;.values()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成器</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c = (x + <span class=\"number\">1</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>","date":"2018-04-06T15:31:01.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python3 鸭子类型","date":"2018-03-02T17:52:21.000Z","_content":"\n## 来源和解释\nDuck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：\n\n>\" When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.\"\n\n中文：\n\n>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”\n\n“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。\n<!-- more -->\n\n鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持\"鸭子类型\"的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。\n\n`在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。` 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。\n\n`鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。`从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。\n\n\n## 不足\n\"鸭子类型\"没有任何静态检查，如类型检查、属性检查、方法签名检查等。\n\n“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。\n\n再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 \"鸭子测试\"，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。\n\n## 静态类型语言和动态类型语言的区别\n\n静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  \n\n`静态类型语言的优点`首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  \n\n`静态类型语言的缺点`首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  \n\n`动态类型语言的优点`是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。  \n`动态类型语言的缺点`是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。\n\n**动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。**\n\n## 面向接口编程\n\n动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助`超类型`的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。\n例如,\n1. 一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。\n2. 一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。\n3. 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。\n4. 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.\n\n鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。\n\n\n在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行`向上转型`。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在`类型检查系统`的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。\n\n## Python中的多态\n\n**Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。**  \n由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样---定义一个基类类型变量而隐藏了具体子类的细节。\n\n请看下面的例子和说明：\n```python\nclass AudioFile:\n    def __init__(self, filename):\n        if not filename.endswith(self.ext):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\nclass MP3File(AudioFile):\n    ext = \"mp3\"\n    def play(self):\n        print(\"Playing {} as mp3\".format(self.filename))\n\nclass WavFile(AudioFile):\n    ext = \"wav\"\n    def play(self):\n        print(\"Playing {} as wav\".format(self.filename))\n\nclass OggFile(AudioFile):\n    ext = \"ogg\"\n    def play(self):\n        print(\"Playing {} as ogg\".format(self.filename))\n\nclass FlacFile:\n    \"\"\"\n    Though FlacFile class doesn't inherit AudioFile class,\n    it also has the same interface as three subclass of AudioFile.\n\n    It is called duck typing.\n    \"\"\"\n    def __init__(self, filename):\n        if not filename.endswith(\".flac\"):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\n    def play(self):\n        print(\"Playing {} as flac\".format(self.filename))\n\n\n```\n>Though FlacFile class doesn't inherit AudioFile class,\n>it also has the same interface as three subclass of AudioFile.\n>It is called duck typing.\n\n上面的代码中，`MP3File`、`WavFile`、`OggFile`三个类型继承了`AudioFile`这一积累，而`FlacFile`没有扩展`AudioFile`，但是可以在python中使用完全相同的接口与之交互。  \n\n因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般`超类`的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。\n\n>作者：JasonDing\n>链接：https://www.jianshu.com/p/650485b78d11\n>來源：简书\n>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n## 参考\n1. https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\n2. https://www.jianshu.com/p/650485b78d11\n","source":"_posts/Python3-鸭子类型.md","raw":"---\ntitle: Python3 鸭子类型\ndate: 2018-03-03 01:52:21\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 鸭子类型\n---\n\n## 来源和解释\nDuck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：\n\n>\" When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.\"\n\n中文：\n\n>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”\n\n“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。\n<!-- more -->\n\n鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持\"鸭子类型\"的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。\n\n`在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。` 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。\n\n`鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。`从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。\n\n\n## 不足\n\"鸭子类型\"没有任何静态检查，如类型检查、属性检查、方法签名检查等。\n\n“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。\n\n再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 \"鸭子测试\"，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。\n\n## 静态类型语言和动态类型语言的区别\n\n静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  \n\n`静态类型语言的优点`首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  \n\n`静态类型语言的缺点`首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  \n\n`动态类型语言的优点`是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。  \n`动态类型语言的缺点`是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。\n\n**动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。**\n\n## 面向接口编程\n\n动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助`超类型`的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。\n例如,\n1. 一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。\n2. 一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。\n3. 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。\n4. 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.\n\n鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。\n\n\n在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行`向上转型`。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在`类型检查系统`的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。\n\n## Python中的多态\n\n**Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。**  \n由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样---定义一个基类类型变量而隐藏了具体子类的细节。\n\n请看下面的例子和说明：\n```python\nclass AudioFile:\n    def __init__(self, filename):\n        if not filename.endswith(self.ext):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\nclass MP3File(AudioFile):\n    ext = \"mp3\"\n    def play(self):\n        print(\"Playing {} as mp3\".format(self.filename))\n\nclass WavFile(AudioFile):\n    ext = \"wav\"\n    def play(self):\n        print(\"Playing {} as wav\".format(self.filename))\n\nclass OggFile(AudioFile):\n    ext = \"ogg\"\n    def play(self):\n        print(\"Playing {} as ogg\".format(self.filename))\n\nclass FlacFile:\n    \"\"\"\n    Though FlacFile class doesn't inherit AudioFile class,\n    it also has the same interface as three subclass of AudioFile.\n\n    It is called duck typing.\n    \"\"\"\n    def __init__(self, filename):\n        if not filename.endswith(\".flac\"):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\n    def play(self):\n        print(\"Playing {} as flac\".format(self.filename))\n\n\n```\n>Though FlacFile class doesn't inherit AudioFile class,\n>it also has the same interface as three subclass of AudioFile.\n>It is called duck typing.\n\n上面的代码中，`MP3File`、`WavFile`、`OggFile`三个类型继承了`AudioFile`这一积累，而`FlacFile`没有扩展`AudioFile`，但是可以在python中使用完全相同的接口与之交互。  \n\n因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般`超类`的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。\n\n>作者：JasonDing\n>链接：https://www.jianshu.com/p/650485b78d11\n>來源：简书\n>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n## 参考\n1. https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\n2. https://www.jianshu.com/p/650485b78d11\n","slug":"Python3-鸭子类型","published":1,"updated":"2018-03-03T05:40:54.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xc1007oexotcv11rjcu","content":"<h2 id=\"来源和解释\"><a href=\"#来源和解释\" class=\"headerlink\" title=\"来源和解释\"></a>来源和解释</h2><p>Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：</p>\n<blockquote>\n<p>“ When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”</p>\n</blockquote>\n<p>中文：</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<p>“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。<br><a id=\"more\"></a></p>\n<p>鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持”鸭子类型”的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。</p>\n<p><code>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。</code> 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。</p>\n<p><code>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。</code>从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>“鸭子类型”没有任何静态检查，如类型检查、属性检查、方法签名检查等。</p>\n<p>“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。</p>\n<p>再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 “鸭子测试”，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。</p>\n<h2 id=\"静态类型语言和动态类型语言的区别\"><a href=\"#静态类型语言和动态类型语言的区别\" class=\"headerlink\" title=\"静态类型语言和动态类型语言的区别\"></a>静态类型语言和动态类型语言的区别</h2><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  </p>\n<p><code>静态类型语言的优点</code>首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  </p>\n<p><code>静态类型语言的缺点</code>首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  </p>\n<p><code>动态类型语言的优点</code>是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。<br><code>动态类型语言的缺点</code>是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。</p>\n<p><strong>动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</strong></p>\n<h2 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h2><p>动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助<code>超类型</code>的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。<br>例如,</p>\n<ol>\n<li>一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。</li>\n<li>一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。</li>\n<li>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</li>\n<li>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</li>\n</ol>\n<p>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。</p>\n<p>在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行<code>向上转型</code>。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在<code>类型检查系统</code>的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。</p>\n<h2 id=\"Python中的多态\"><a href=\"#Python中的多态\" class=\"headerlink\" title=\"Python中的多态\"></a>Python中的多态</h2><p><strong>Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。</strong><br>由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样—定义一个基类类型变量而隐藏了具体子类的细节。</p>\n<p>请看下面的例子和说明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudioFile</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(self.ext):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MP3File</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"mp3\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as mp3\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WavFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"wav\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as wav\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OggFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"ogg\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as ogg\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlacFile</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Though FlacFile class doesn't inherit AudioFile class,</span></span><br><span class=\"line\"><span class=\"string\">    it also has the same interface as three subclass of AudioFile.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    It is called duck typing.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(<span class=\"string\">\".flac\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as flac\"</span>.format(self.filename))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Though FlacFile class doesn’t inherit AudioFile class,<br>it also has the same interface as three subclass of AudioFile.<br>It is called duck typing.</p>\n</blockquote>\n<p>上面的代码中，<code>MP3File</code>、<code>WavFile</code>、<code>OggFile</code>三个类型继承了<code>AudioFile</code>这一积累，而<code>FlacFile</code>没有扩展<code>AudioFile</code>，但是可以在python中使用完全相同的接口与之交互。  </p>\n<p>因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般<code>超类</code>的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。</p>\n<blockquote>\n<p>作者：JasonDing<br>链接：<a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin</a></li>\n<li><a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"来源和解释\"><a href=\"#来源和解释\" class=\"headerlink\" title=\"来源和解释\"></a>来源和解释</h2><p>Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：</p>\n<blockquote>\n<p>“ When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”</p>\n</blockquote>\n<p>中文：</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<p>“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。<br>","more":"</p>\n<p>鸭子类型是程序设计中的一种类型推断风格，这种风格适用于动态语言(比如PHP、Python、Ruby、Typescript、Perl、Objective-C、Lua、Julia、JavaScript、Java、Groovy、C#等)和某些静态语言(比如Golang,一般来说，静态类型语言在编译时便已确定了变量的类型，但是Golang的实现是：在编译时推断变量的类型)，支持”鸭子类型”的语言的解释器/编译器将会在解析(Parse)或编译时，推断对象的类型。</p>\n<p><code>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。</code> 例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。</p>\n<p><code>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。</code>从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>“鸭子类型”没有任何静态检查，如类型检查、属性检查、方法签名检查等。</p>\n<p>“鸭子类型”语言的程序可能会在运行时因为不具备某种特定的方法而抛出异常：如果一只小狗(对象)想加入合唱团(以对象会不会嘎嘎嘎叫的方法为检验标准)，也学鸭子那么嘎嘎嘎叫，好吧，它加入了，可是加入之后，却不会像鸭子那样走路，那么，迟早要出问题的。</p>\n<p>再举个例子：一只小老鼠被猫盯上了，情急之下，它学了狗叫，猫撤了之后，小老鼠的妈妈不无感叹的对它说：看吧，我让你学的这门儿外语多么重要啊。这虽然是个段子，但是，由于猫在思考时，使用了 “鸭子测试”，它以为会叫的就是狗，会对自己产生威胁，所以撤退了，也正是因为这个错误的判断，它误失了一次进食机会。</p>\n<h2 id=\"静态类型语言和动态类型语言的区别\"><a href=\"#静态类型语言和动态类型语言的区别\" class=\"headerlink\" title=\"静态类型语言和动态类型语言的区别\"></a>静态类型语言和动态类型语言的区别</h2><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。  </p>\n<p><code>静态类型语言的优点</code>首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。其次，如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。  </p>\n<p><code>静态类型语言的缺点</code>首先是迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产。其次，类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。  </p>\n<p><code>动态类型语言的优点</code>是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。<br><code>动态类型语言的缺点</code>是无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。</p>\n<p><strong>动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</strong></p>\n<h2 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h2><p>动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助<code>超类型</code>的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”。<br>例如,</p>\n<ol>\n<li>一个对象若有push和pop方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。</li>\n<li>一个对象如果有length属性，也可以依照下标来存取属性（最好还要拥有slice和splice等方法），这个对象就可以被当作数组来使用。</li>\n<li>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</li>\n<li>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</li>\n</ol>\n<p>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。</p>\n<p>在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行<code>向上转型</code>。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在<code>类型检查系统</code>的“监视”之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象多态性的价值。</p>\n<h2 id=\"Python中的多态\"><a href=\"#Python中的多态\" class=\"headerlink\" title=\"Python中的多态\"></a>Python中的多态</h2><p><strong>Python中的鸭子类型允许我们使用任何提供所需方法的对象，而不需要迫使它成为一个子类。</strong><br>由于python属于动态语言，当你定义了一个基类和基类中的方法，并编写几个继承该基类的子类时，由于python在定义变量时不指定变量的类型，而是由解释器根据变量内容推断变量类型的（也就是说变量的类型取决于所关联的对象），这就使得python的多态不像是c++或java中那样—定义一个基类类型变量而隐藏了具体子类的细节。</p>\n<p>请看下面的例子和说明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudioFile</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(self.ext):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MP3File</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"mp3\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as mp3\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WavFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"wav\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as wav\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OggFile</span><span class=\"params\">(AudioFile)</span>:</span></span><br><span class=\"line\">    ext = <span class=\"string\">\"ogg\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as ogg\"</span>.format(self.filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlacFile</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Though FlacFile class doesn't inherit AudioFile class,</span></span><br><span class=\"line\"><span class=\"string\">    it also has the same interface as three subclass of AudioFile.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    It is called duck typing.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filename.endswith(<span class=\"string\">\".flac\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid file format\"</span>)</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Playing &#123;&#125; as flac\"</span>.format(self.filename))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Though FlacFile class doesn’t inherit AudioFile class,<br>it also has the same interface as three subclass of AudioFile.<br>It is called duck typing.</p>\n</blockquote>\n<p>上面的代码中，<code>MP3File</code>、<code>WavFile</code>、<code>OggFile</code>三个类型继承了<code>AudioFile</code>这一积累，而<code>FlacFile</code>没有扩展<code>AudioFile</code>，但是可以在python中使用完全相同的接口与之交互。  </p>\n<p>因为任何提供正确接口的对象都可以在python中交替使用，它减少了多态的一般<code>超类</code>的需求。继承仍然可以用来共享代码，但是如果所有被共享的都是公共接口，鸭子类型就是所有所需的。这减少了继承的需要，同时也减少了多重继承的需要；通常，当多重继承似乎是一个有效方案的时候，我们只需要使用鸭子类型去模拟多个超类之一（定义和那个超类一样的接口和实现）就可以了。</p>\n<blockquote>\n<p>作者：JasonDing<br>链接：<a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/鸭子类型/10845665?fr=aladdin</a></li>\n<li><a href=\"https://www.jianshu.com/p/650485b78d11\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/650485b78d11</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 13:40:54 GMT+0800 (China Standard Time)","title":"Python3 鸭子类型","path":"2018/03/03/Python3-鸭子类型/","eyeCatchImage":null,"excerpt":"<h2 id=\"来源和解释\"><a href=\"#来源和解释\" class=\"headerlink\" title=\"来源和解释\"></a>来源和解释</h2><p>Duck typing 这个概念来源于美国印第安纳州的诗人詹姆斯·惠特科姆·莱利（James Whitcomb Riley,1849-1916）的诗句：</p>\n<blockquote>\n<p>“ When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”</p>\n</blockquote>\n<p>中文：</p>\n<blockquote>\n<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>\n</blockquote>\n<p>“鸭子类型”的语言是这么推断的：一只鸟走起来像鸭子、游起泳来像鸭子、叫起来也像鸭子，那它就可以被当做鸭子。也就是说，它不关注对象的类型，而是关注对象具有的行为(方法)。<br>","date":"2018-03-02T17:52:21.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 鸭子类型","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python中如何优雅的使用assert断言","date":"2019-11-14T09:04:42.000Z","_content":"\n### 什么是assert断言\n\n> Assert statements are a convenient way to insert debugging assertions into a program\n\n断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于`__debug__`这个内置变量的，其默认值为`True`。当`__debug__`为`True`时，assert语句才会被执行。\n\n对于一般的声明，assert expression等价于\n```Python\nif __debug__:\n    if not expression: raise AssertionError\n```\nassert可以同时声明两个个expression，例如**assert expression1, expression2**等价于\n```Python\nif __debug__:\n    if not expression1: raise AssertionError(expression2)\n```\n如果执行脚本文件时加上`-O`参数， `__debug__`则为`False`\n\n举一个例子，假设我们有一个脚本testAssert.py，内容为：\n```Python\nprint(__debug__)\nassert 1 > 2\n```\n<!-- more -->\n\n当使用`python assert.py`运行时，`__debug__`会输出True，assert 1 > 2语句会抛出AssertionError异常。\n\n当使用`python -O assert.py`运行时，`__debug__`会输出False，assert 1 > 2语句由于没有执行不会报任何异常。\n\n\n### 断言和异常的使用场景\n\n先说结论：\n\n> 检查`先验条件`使用断言，检查`后验条件`使用异常\n\n举个例子来说明一下，在开发中我们经常会遇到读取本地文件的场景。我们定义一个read_file方法。\n\n```python\ndef read_file(path):\n    assert is_instance(file_path, str)\n    ...\n```\nread_file函数要求在开始执行的时候满足一定条件：file_path必须是str类型，这个条件就是先验条件，如果不满足，就不能调用这个函数，如果真的出现了不满足条件的情况，证明代码中出现了bug，这时候我们就可以使用assert语句来对file_path的类型进行推断，提醒程序员修改代码，也可以使用if...raise...语句来实现assert，但是要繁琐很多。在很多优秀的Python项目中都会看到使用assert进行先验判断的情况，平时可以多多留意。\n\nread_file函数在被调用执行后，依然需要满足一定条件，比如file_path所指定的文件需要是存在的，并且当前用户有权限读取该文件，这些条件称为后验条件，对于后验条件的检查，我们需要使用异常来处理。\n\n```python\ndef read_file(file_path):\n    assert isinstance(file_path, str)\n    if not check_exist(file_path):\n        raise FileNotFoundError()\n    if not has_privilege(file_path):\n        raise PermissionError()\n```\n\n文件不存在和没有权限，这两种情况并不属于代码bug，是代码逻辑的一部分，上层代码捕获异常后可能会执行其他逻辑，因此我们不能接受这部分代码在生产环境中被忽略。并且，相比于assert语句只能抛出AssertionError，使用异常可以抛出更详细的错误，方便上层代码针对不同错误执行不同的逻辑。\n\n---\n[参考链接](https://juejin.im/post/5af02413f265da0b776f9e15)\n","source":"_posts/Python中如何优雅的使用assert断言.md","raw":"---\ntitle: Python中如何优雅的使用assert断言\ndate: 2019-11-14 17:04:42\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n### 什么是assert断言\n\n> Assert statements are a convenient way to insert debugging assertions into a program\n\n断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于`__debug__`这个内置变量的，其默认值为`True`。当`__debug__`为`True`时，assert语句才会被执行。\n\n对于一般的声明，assert expression等价于\n```Python\nif __debug__:\n    if not expression: raise AssertionError\n```\nassert可以同时声明两个个expression，例如**assert expression1, expression2**等价于\n```Python\nif __debug__:\n    if not expression1: raise AssertionError(expression2)\n```\n如果执行脚本文件时加上`-O`参数， `__debug__`则为`False`\n\n举一个例子，假设我们有一个脚本testAssert.py，内容为：\n```Python\nprint(__debug__)\nassert 1 > 2\n```\n<!-- more -->\n\n当使用`python assert.py`运行时，`__debug__`会输出True，assert 1 > 2语句会抛出AssertionError异常。\n\n当使用`python -O assert.py`运行时，`__debug__`会输出False，assert 1 > 2语句由于没有执行不会报任何异常。\n\n\n### 断言和异常的使用场景\n\n先说结论：\n\n> 检查`先验条件`使用断言，检查`后验条件`使用异常\n\n举个例子来说明一下，在开发中我们经常会遇到读取本地文件的场景。我们定义一个read_file方法。\n\n```python\ndef read_file(path):\n    assert is_instance(file_path, str)\n    ...\n```\nread_file函数要求在开始执行的时候满足一定条件：file_path必须是str类型，这个条件就是先验条件，如果不满足，就不能调用这个函数，如果真的出现了不满足条件的情况，证明代码中出现了bug，这时候我们就可以使用assert语句来对file_path的类型进行推断，提醒程序员修改代码，也可以使用if...raise...语句来实现assert，但是要繁琐很多。在很多优秀的Python项目中都会看到使用assert进行先验判断的情况，平时可以多多留意。\n\nread_file函数在被调用执行后，依然需要满足一定条件，比如file_path所指定的文件需要是存在的，并且当前用户有权限读取该文件，这些条件称为后验条件，对于后验条件的检查，我们需要使用异常来处理。\n\n```python\ndef read_file(file_path):\n    assert isinstance(file_path, str)\n    if not check_exist(file_path):\n        raise FileNotFoundError()\n    if not has_privilege(file_path):\n        raise PermissionError()\n```\n\n文件不存在和没有权限，这两种情况并不属于代码bug，是代码逻辑的一部分，上层代码捕获异常后可能会执行其他逻辑，因此我们不能接受这部分代码在生产环境中被忽略。并且，相比于assert语句只能抛出AssertionError，使用异常可以抛出更详细的错误，方便上层代码针对不同错误执行不同的逻辑。\n\n---\n[参考链接](https://juejin.im/post/5af02413f265da0b776f9e15)\n","slug":"Python中如何优雅的使用assert断言","published":1,"updated":"2019-11-15T01:10:55.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xc4007texote6osveyl","content":"<h3 id=\"什么是assert断言\"><a href=\"#什么是assert断言\" class=\"headerlink\" title=\"什么是assert断言\"></a>什么是assert断言</h3><blockquote>\n<p>Assert statements are a convenient way to insert debugging assertions into a program</p>\n</blockquote>\n<p>断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于<code>__debug__</code>这个内置变量的，其默认值为<code>True</code>。当<code>__debug__</code>为<code>True</code>时，assert语句才会被执行。</p>\n<p>对于一般的声明，assert expression等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression: <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>assert可以同时声明两个个expression，例如<strong>assert expression1, expression2</strong>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression1: <span class=\"keyword\">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure></p>\n<p>如果执行脚本文件时加上<code>-O</code>参数， <code>__debug__</code>则为<code>False</code></p>\n<p>举一个例子，假设我们有一个脚本testAssert.py，内容为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(__debug__)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>当使用<code>python assert.py</code>运行时，<code>__debug__</code>会输出True，assert 1 &gt; 2语句会抛出AssertionError异常。</p>\n<p>当使用<code>python -O assert.py</code>运行时，<code>__debug__</code>会输出False，assert 1 &gt; 2语句由于没有执行不会报任何异常。</p>\n<h3 id=\"断言和异常的使用场景\"><a href=\"#断言和异常的使用场景\" class=\"headerlink\" title=\"断言和异常的使用场景\"></a>断言和异常的使用场景</h3><p>先说结论：</p>\n<blockquote>\n<p>检查<code>先验条件</code>使用断言，检查<code>后验条件</code>使用异常</p>\n</blockquote>\n<p>举个例子来说明一下，在开发中我们经常会遇到读取本地文件的场景。我们定义一个read_file方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> is_instance(file_path, str)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>read_file函数要求在开始执行的时候满足一定条件：file_path必须是str类型，这个条件就是先验条件，如果不满足，就不能调用这个函数，如果真的出现了不满足条件的情况，证明代码中出现了bug，这时候我们就可以使用assert语句来对file_path的类型进行推断，提醒程序员修改代码，也可以使用if…raise…语句来实现assert，但是要繁琐很多。在很多优秀的Python项目中都会看到使用assert进行先验判断的情况，平时可以多多留意。</p>\n<p>read_file函数在被调用执行后，依然需要满足一定条件，比如file_path所指定的文件需要是存在的，并且当前用户有权限读取该文件，这些条件称为后验条件，对于后验条件的检查，我们需要使用异常来处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span><span class=\"params\">(file_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(file_path, str)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> check_exist(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> FileNotFoundError()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> has_privilege(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> PermissionError()</span><br></pre></td></tr></table></figure>\n<p>文件不存在和没有权限，这两种情况并不属于代码bug，是代码逻辑的一部分，上层代码捕获异常后可能会执行其他逻辑，因此我们不能接受这部分代码在生产环境中被忽略。并且，相比于assert语句只能抛出AssertionError，使用异常可以抛出更详细的错误，方便上层代码针对不同错误执行不同的逻辑。</p>\n<hr>\n<p><a href=\"https://juejin.im/post/5af02413f265da0b776f9e15\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是assert断言\"><a href=\"#什么是assert断言\" class=\"headerlink\" title=\"什么是assert断言\"></a>什么是assert断言</h3><blockquote>\n<p>Assert statements are a convenient way to insert debugging assertions into a program</p>\n</blockquote>\n<p>断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于<code>__debug__</code>这个内置变量的，其默认值为<code>True</code>。当<code>__debug__</code>为<code>True</code>时，assert语句才会被执行。</p>\n<p>对于一般的声明，assert expression等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression: <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>assert可以同时声明两个个expression，例如<strong>assert expression1, expression2</strong>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression1: <span class=\"keyword\">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure></p>\n<p>如果执行脚本文件时加上<code>-O</code>参数， <code>__debug__</code>则为<code>False</code></p>\n<p>举一个例子，假设我们有一个脚本testAssert.py，内容为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(__debug__)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>","more":"<p>当使用<code>python assert.py</code>运行时，<code>__debug__</code>会输出True，assert 1 &gt; 2语句会抛出AssertionError异常。</p>\n<p>当使用<code>python -O assert.py</code>运行时，<code>__debug__</code>会输出False，assert 1 &gt; 2语句由于没有执行不会报任何异常。</p>\n<h3 id=\"断言和异常的使用场景\"><a href=\"#断言和异常的使用场景\" class=\"headerlink\" title=\"断言和异常的使用场景\"></a>断言和异常的使用场景</h3><p>先说结论：</p>\n<blockquote>\n<p>检查<code>先验条件</code>使用断言，检查<code>后验条件</code>使用异常</p>\n</blockquote>\n<p>举个例子来说明一下，在开发中我们经常会遇到读取本地文件的场景。我们定义一个read_file方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> is_instance(file_path, str)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>read_file函数要求在开始执行的时候满足一定条件：file_path必须是str类型，这个条件就是先验条件，如果不满足，就不能调用这个函数，如果真的出现了不满足条件的情况，证明代码中出现了bug，这时候我们就可以使用assert语句来对file_path的类型进行推断，提醒程序员修改代码，也可以使用if…raise…语句来实现assert，但是要繁琐很多。在很多优秀的Python项目中都会看到使用assert进行先验判断的情况，平时可以多多留意。</p>\n<p>read_file函数在被调用执行后，依然需要满足一定条件，比如file_path所指定的文件需要是存在的，并且当前用户有权限读取该文件，这些条件称为后验条件，对于后验条件的检查，我们需要使用异常来处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span><span class=\"params\">(file_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(file_path, str)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> check_exist(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> FileNotFoundError()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> has_privilege(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> PermissionError()</span><br></pre></td></tr></table></figure>\n<p>文件不存在和没有权限，这两种情况并不属于代码bug，是代码逻辑的一部分，上层代码捕获异常后可能会执行其他逻辑，因此我们不能接受这部分代码在生产环境中被忽略。并且，相比于assert语句只能抛出AssertionError，使用异常可以抛出更详细的错误，方便上层代码针对不同错误执行不同的逻辑。</p>\n<hr>\n<p><a href=\"https://juejin.im/post/5af02413f265da0b776f9e15\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Nov 15 2019 09:10:55 GMT+0800 (China Standard Time)","title":"Python中如何优雅的使用assert断言","path":"2019/11/14/Python中如何优雅的使用assert断言/","eyeCatchImage":null,"excerpt":"<h3 id=\"什么是assert断言\"><a href=\"#什么是assert断言\" class=\"headerlink\" title=\"什么是assert断言\"></a>什么是assert断言</h3><blockquote>\n<p>Assert statements are a convenient way to insert debugging assertions into a program</p>\n</blockquote>\n<p>断言声明是用于程序调试的一个便捷方式。断言可以看做是一个debug工具，Python的实现也符合这个设计哲学，在Python中assert语句的执行是依赖于<code>__debug__</code>这个内置变量的，其默认值为<code>True</code>。当<code>__debug__</code>为<code>True</code>时，assert语句才会被执行。</p>\n<p>对于一般的声明，assert expression等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression: <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>assert可以同时声明两个个expression，例如<strong>assert expression1, expression2</strong>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __debug__:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression1: <span class=\"keyword\">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure></p>\n<p>如果执行脚本文件时加上<code>-O</code>参数， <code>__debug__</code>则为<code>False</code></p>\n<p>举一个例子，假设我们有一个脚本testAssert.py，内容为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(__debug__)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>","date":"2019-11-14T09:04:42.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python中append和extend效率","date":"2018-11-27T07:29:14.000Z","_content":"python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用`data.extend(other)`的输出结果与以下代码的输出结果相同。\n```Python\nfor elem in other:\n    data.append(elem)\n\n```\n在任何情况下，运行时间都正比于另一张列表的长度，并且之所以`摊销`，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。\n\n在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：\n\n1. 首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行\n2. 与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。\n3. `extend提升的效率来源更新列表的最终大小能提前计算出。`例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。\n\n<!-- more -->\n\n我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在\n实际效率上会有不同。\n\n在python中经常使用一个诸如`squares = [k*k for k in range(1, n+1)]`的例子作为\n```Python\nsquares = []\nfor k in range(1, n+1)\n    squares.append(k*k)\n\n```\n的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。\n\n类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如`[0]*100`生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高\n\n\n\n\n\n\n\n\n-------\n","source":"_posts/Python中append和extend效率.md","raw":"---\ntitle: Python中append和extend效率\ndate: 2018-11-27 15:29:14\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\npython提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用`data.extend(other)`的输出结果与以下代码的输出结果相同。\n```Python\nfor elem in other:\n    data.append(elem)\n\n```\n在任何情况下，运行时间都正比于另一张列表的长度，并且之所以`摊销`，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。\n\n在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：\n\n1. 首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行\n2. 与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。\n3. `extend提升的效率来源更新列表的最终大小能提前计算出。`例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。\n\n<!-- more -->\n\n我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在\n实际效率上会有不同。\n\n在python中经常使用一个诸如`squares = [k*k for k in range(1, n+1)]`的例子作为\n```Python\nsquares = []\nfor k in range(1, n+1)\n    squares.append(k*k)\n\n```\n的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。\n\n类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如`[0]*100`生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高\n\n\n\n\n\n\n\n\n-------\n","slug":"Python中append和extend效率","published":1,"updated":"2018-11-27T07:58:02.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xc7007wexots5bslox1","content":"<p>python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用<code>data.extend(other)</code>的输出结果与以下代码的输出结果相同。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> other:</span><br><span class=\"line\">    data.append(elem)</span><br></pre></td></tr></table></figure></p>\n<p>在任何情况下，运行时间都正比于另一张列表的长度，并且之所以<code>摊销</code>，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。</p>\n<p>在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：</p>\n<ol>\n<li>首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行</li>\n<li>与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。</li>\n<li><code>extend提升的效率来源更新列表的最终大小能提前计算出。</code>例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。</li>\n</ol>\n<a id=\"more\"></a>\n<p>我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在<br>实际效率上会有不同。</p>\n<p>在python中经常使用一个诸如<code>squares = [k*k for k in range(1, n+1)]</code>的例子作为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    squares.append(k*k)</span><br></pre></td></tr></table></figure></p>\n<p>的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。</p>\n<p>类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如<code>[0]*100</code>生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用<code>data.extend(other)</code>的输出结果与以下代码的输出结果相同。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> other:</span><br><span class=\"line\">    data.append(elem)</span><br></pre></td></tr></table></figure></p>\n<p>在任何情况下，运行时间都正比于另一张列表的长度，并且之所以<code>摊销</code>，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。</p>\n<p>在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：</p>\n<ol>\n<li>首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行</li>\n<li>与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。</li>\n<li><code>extend提升的效率来源更新列表的最终大小能提前计算出。</code>例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。</li>\n</ol>","more":"<p>我们所熟悉的构造新列表的语法，在几乎所有情况下，该行为的渐进效率在创建列表的长度方面是线性的。但是不同的方法在<br>实际效率上会有不同。</p>\n<p>在python中经常使用一个诸如<code>squares = [k*k for k in range(1, n+1)]</code>的例子作为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    squares.append(k*k)</span><br></pre></td></tr></table></figure></p>\n<p>的一种速记，并由此引入了列表推导式。实验可以证明用列表推导式语法比不断增添数据来创建列表速度更快。</p>\n<p>类似的，使用乘法操作初始化一个固定的列表，也是一种很常见的python风格，例如<code>[0]*100</code>生成一张长度为100的列表，这样做不但语法简单，而且比逐步构造这样的表效率更高</p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Nov 27 2018 15:58:02 GMT+0800 (China Standard Time)","title":"Python中append和extend效率","path":"2018/11/27/Python中append和extend效率/","eyeCatchImage":null,"excerpt":"<p>python提供了一个名为extend的方法，该方法将一个列表中的所有元素添加到另一个列表的结尾。在作用上，调用<code>data.extend(other)</code>的输出结果与以下代码的输出结果相同。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> other:</span><br><span class=\"line\">    data.append(elem)</span><br></pre></td></tr></table></figure></p>\n<p>在任何情况下，运行时间都正比于另一张列表的长度，并且之所以<code>摊销</code>，是因为第一张列表的底层数组需要调整打下以容纳增添的元素。</p>\n<p>在实践中，相对于重复调用append方法，我们更倾向于选择extend方法。原因是渐进分析中隐含的常数明显更小。extend方法效率更高体现在三个方面：</p>\n<ol>\n<li>首先，使用合适的python方法总会有一些优势，因为这些方法通常使用本地编译语言执行</li>\n<li>与调用很多独立的方法相比，调用一个函数完成所有工作的开销更小。</li>\n<li><code>extend提升的效率来源更新列表的最终大小能提前计算出。</code>例如第二个数据集是非常大的，当重复调用append时，底层动态数组会有很多次调整大小的风险，如果调用一次extend方法，最多执行一次调整工作。</li>\n</ol>","date":"2018-11-27T07:29:14.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python中如何生成一定格式的日期字符串","date":"2018-12-03T08:20:56.000Z","_content":"\n```python\nimport time\n\ntimeStamp = time.time()\ntimeArray = time.localtime(time.time())\nprint(timeArray)\n# time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)\n\nformatTime = time.strftime(\"%Y%m%d-%H:%M:%S\", timeArray)\nprint(formatTime)\n# 20181203-16:23:55\n\n```\n","source":"_posts/Python中如何生成一定格式的日期字符串.md","raw":"---\ntitle: Python中如何生成一定格式的日期字符串\ndate: 2018-12-03 16:20:56\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n```python\nimport time\n\ntimeStamp = time.time()\ntimeArray = time.localtime(time.time())\nprint(timeArray)\n# time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)\n\nformatTime = time.strftime(\"%Y%m%d-%H:%M:%S\", timeArray)\nprint(formatTime)\n# 20181203-16:23:55\n\n```\n","slug":"Python中如何生成一定格式的日期字符串","published":1,"updated":"2018-12-03T08:28:40.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xcf0081exotqgvanho5","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">timeStamp = time.time()</span><br><span class=\"line\">timeArray = time.localtime(time.time())</span><br><span class=\"line\">print(timeArray)</span><br><span class=\"line\"><span class=\"comment\"># time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">formatTime = time.strftime(<span class=\"string\">\"%Y%m%d-%H:%M:%S\"</span>, timeArray)</span><br><span class=\"line\">print(formatTime)</span><br><span class=\"line\"><span class=\"comment\"># 20181203-16:23:55</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">timeStamp = time.time()</span><br><span class=\"line\">timeArray = time.localtime(time.time())</span><br><span class=\"line\">print(timeArray)</span><br><span class=\"line\"><span class=\"comment\"># time.struct_time(tm_year=2018, tm_mon=12, tm_mday=3, tm_hour=16, tm_min=23, tm_sec=55, tm_wday=0, tm_yday=337, tm_isdst=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">formatTime = time.strftime(<span class=\"string\">\"%Y%m%d-%H:%M:%S\"</span>, timeArray)</span><br><span class=\"line\">print(formatTime)</span><br><span class=\"line\"><span class=\"comment\"># 20181203-16:23:55</span></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Dec 03 2018 16:28:40 GMT+0800 (China Standard Time)","title":"Python中如何生成一定格式的日期字符串","path":"2018/12/03/Python中如何生成一定格式的日期字符串/","eyeCatchImage":null,"excerpt":null,"date":"2018-12-03T08:20:56.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Redis之数据类型的内部编码","date":"2018-11-01T03:25:48.000Z","_content":"#### 哈希\n哈希类型内部编码有两种形式：\n\n1. `ziplist`(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于`hash-max-ziplist-entries`配置(默认512)、同时所有值都小于`hash-max-ziplist-value`配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。\n\n2. `hashtable`(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).\n\n\n<!-- more -->\n#### 列表\n从Redis3.2之后开始提供了`quicklist内部编码，它是一种将ziplist和linkedlist结合的一种编码方式`。\n\n1. `ziplist`(压缩列表):当列表的元素个数小于`list-max-ziplist-entries`配置(默认512个),同时列表中每个元素值都小于`list-max-ziplist-value`配置(默认64字节),Redis会选用ziplist来作为列表内部的实现来减小内存使用。\n2. `linkedlist`(链表):当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。\n\nRedis3.2之后提供了quicklist内部编码，简单的说它是一个ziplist为节点的linkedlist，它结合了两者的优势，为列表类型提供了一种更为优秀的内部编码实现。\n\n#### 集合\n集合类型的内部编码也有两种：\n\n1. `intset`(整数集合)：当集合中的元素都是`整数`且`元素个数小于set-max-intset-entries配置(默认512个)`，Redis会选用intset来作为集合的内部实现，从而减小内存的使用。\n2. `hashtable`(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。\n","source":"_posts/Redis之数据类型的内部编码.md","raw":"---\ntitle: Redis之数据类型的内部编码\ndate: 2018-11-01 11:25:48\ntags:\n  - Redis\ncategories:\n  - Redis\n  - 数据类型\n---\n#### 哈希\n哈希类型内部编码有两种形式：\n\n1. `ziplist`(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于`hash-max-ziplist-entries`配置(默认512)、同时所有值都小于`hash-max-ziplist-value`配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。\n\n2. `hashtable`(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).\n\n\n<!-- more -->\n#### 列表\n从Redis3.2之后开始提供了`quicklist内部编码，它是一种将ziplist和linkedlist结合的一种编码方式`。\n\n1. `ziplist`(压缩列表):当列表的元素个数小于`list-max-ziplist-entries`配置(默认512个),同时列表中每个元素值都小于`list-max-ziplist-value`配置(默认64字节),Redis会选用ziplist来作为列表内部的实现来减小内存使用。\n2. `linkedlist`(链表):当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。\n\nRedis3.2之后提供了quicklist内部编码，简单的说它是一个ziplist为节点的linkedlist，它结合了两者的优势，为列表类型提供了一种更为优秀的内部编码实现。\n\n#### 集合\n集合类型的内部编码也有两种：\n\n1. `intset`(整数集合)：当集合中的元素都是`整数`且`元素个数小于set-max-intset-entries配置(默认512个)`，Redis会选用intset来作为集合的内部实现，从而减小内存的使用。\n2. `hashtable`(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。\n","slug":"Redis之数据类型的内部编码","published":1,"updated":"2018-11-01T09:00:53.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xci0084exotvlzwg717","content":"<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><p>哈希类型内部编码有两种形式：</p>\n<ol>\n<li><p><code>ziplist</code>(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置(默认512)、同时所有值都小于<code>hash-max-ziplist-value</code>配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。</p>\n</li>\n<li><p><code>hashtable</code>(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>从Redis3.2之后开始提供了<code>quicklist内部编码，它是一种将ziplist和linkedlist结合的一种编码方式</code>。</p>\n<ol>\n<li><code>ziplist</code>(压缩列表):当列表的元素个数小于<code>list-max-ziplist-entries</code>配置(默认512个),同时列表中每个元素值都小于<code>list-max-ziplist-value</code>配置(默认64字节),Redis会选用ziplist来作为列表内部的实现来减小内存使用。</li>\n<li><code>linkedlist</code>(链表):当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。</li>\n</ol>\n<p>Redis3.2之后提供了quicklist内部编码，简单的说它是一个ziplist为节点的linkedlist，它结合了两者的优势，为列表类型提供了一种更为优秀的内部编码实现。</p>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合类型的内部编码也有两种：</p>\n<ol>\n<li><code>intset</code>(整数集合)：当集合中的元素都是<code>整数</code>且<code>元素个数小于set-max-intset-entries配置(默认512个)</code>，Redis会选用intset来作为集合的内部实现，从而减小内存的使用。</li>\n<li><code>hashtable</code>(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><p>哈希类型内部编码有两种形式：</p>\n<ol>\n<li><p><code>ziplist</code>(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置(默认512)、同时所有值都小于<code>hash-max-ziplist-value</code>配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。</p>\n</li>\n<li><p><code>hashtable</code>(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).</p>\n</li>\n</ol>","more":"<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>从Redis3.2之后开始提供了<code>quicklist内部编码，它是一种将ziplist和linkedlist结合的一种编码方式</code>。</p>\n<ol>\n<li><code>ziplist</code>(压缩列表):当列表的元素个数小于<code>list-max-ziplist-entries</code>配置(默认512个),同时列表中每个元素值都小于<code>list-max-ziplist-value</code>配置(默认64字节),Redis会选用ziplist来作为列表内部的实现来减小内存使用。</li>\n<li><code>linkedlist</code>(链表):当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。</li>\n</ol>\n<p>Redis3.2之后提供了quicklist内部编码，简单的说它是一个ziplist为节点的linkedlist，它结合了两者的优势，为列表类型提供了一种更为优秀的内部编码实现。</p>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合类型的内部编码也有两种：</p>\n<ol>\n<li><code>intset</code>(整数集合)：当集合中的元素都是<code>整数</code>且<code>元素个数小于set-max-intset-entries配置(默认512个)</code>，Redis会选用intset来作为集合的内部实现，从而减小内存的使用。</li>\n<li><code>hashtable</code>(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Nov 01 2018 17:00:53 GMT+0800 (China Standard Time)","title":"Redis之数据类型的内部编码","path":"2018/11/01/Redis之数据类型的内部编码/","eyeCatchImage":null,"excerpt":"<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><p>哈希类型内部编码有两种形式：</p>\n<ol>\n<li><p><code>ziplist</code>(压缩列表，感觉与python中的zip方法类似，有待验证。。。)：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置(默认512)、同时所有值都小于<code>hash-max-ziplist-value</code>配置(默认64字节)，Redis会使用ziplist作为哈希的内部实现。ziplist使用更加紧凑结构实现多个元素的连续存储，所以在节省内存方面比hashtable更有优势。</p>\n</li>\n<li><p><code>hashtable</code>(哈希表)：当哈希类型无法满足ziplist条件时，Redis会使用hashtable作为哈希的内部实现，因此此时ziplist读写效率会下降，hashtable读写的时间复杂度为O(1).</p>\n</li>\n</ol>","date":"2018-11-01T03:25:48.000Z","pv":0,"totalPV":0,"categories":"Redis > 数据类型","tags":["Redis"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Python中如何表示正负无穷大","date":"2019-03-15T08:12:43.000Z","_content":"\n#### cmath.inf\nFloating-point positive infinity. Equivalent to `float('inf')`.\n负无穷-float('-inf')\n\nNew in version 3.6.\n\n<!-- more -->\n#### cmath.pi\nThe mathematical constant π, as a float.\n\n#### cmath.e\nThe mathematical constant e, as a float.\n\n#### cmath.tau\nThe mathematical constant τ, as a float.\n\nNew in version 3.6.\n\n#### cmath.infj\nComplex number with zero real part and positive infinity imaginary part. Equivalent to `complex(0.0, float('inf'))`.\n\nNew in version 3.6.\n\n#### cmath.nan\nA floating-point “not a number” (NaN) value. Equivalent to `float('nan')`.\n\nNew in version 3.6.\n\n#### cmath.nanj\nComplex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float('nan')).\n\nNew in version 3.6.\n","source":"_posts/Python中如何表示正负无穷大.md","raw":"---\ntitle: Python中如何表示正负无穷大\ndate: 2019-03-15 16:12:43\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n#### cmath.inf\nFloating-point positive infinity. Equivalent to `float('inf')`.\n负无穷-float('-inf')\n\nNew in version 3.6.\n\n<!-- more -->\n#### cmath.pi\nThe mathematical constant π, as a float.\n\n#### cmath.e\nThe mathematical constant e, as a float.\n\n#### cmath.tau\nThe mathematical constant τ, as a float.\n\nNew in version 3.6.\n\n#### cmath.infj\nComplex number with zero real part and positive infinity imaginary part. Equivalent to `complex(0.0, float('inf'))`.\n\nNew in version 3.6.\n\n#### cmath.nan\nA floating-point “not a number” (NaN) value. Equivalent to `float('nan')`.\n\nNew in version 3.6.\n\n#### cmath.nanj\nComplex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float('nan')).\n\nNew in version 3.6.\n","slug":"Python中如何表示正负无穷大","published":1,"updated":"2019-03-15T08:17:59.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xcz0089exotlyf1wqby","content":"<h4 id=\"cmath-inf\"><a href=\"#cmath-inf\" class=\"headerlink\" title=\"cmath.inf\"></a>cmath.inf</h4><p>Floating-point positive infinity. Equivalent to <code>float(&#39;inf&#39;)</code>.<br>负无穷-float(‘-inf’)</p>\n<p>New in version 3.6.</p>\n<a id=\"more\"></a>\n<h4 id=\"cmath-pi\"><a href=\"#cmath-pi\" class=\"headerlink\" title=\"cmath.pi\"></a>cmath.pi</h4><p>The mathematical constant π, as a float.</p>\n<h4 id=\"cmath-e\"><a href=\"#cmath-e\" class=\"headerlink\" title=\"cmath.e\"></a>cmath.e</h4><p>The mathematical constant e, as a float.</p>\n<h4 id=\"cmath-tau\"><a href=\"#cmath-tau\" class=\"headerlink\" title=\"cmath.tau\"></a>cmath.tau</h4><p>The mathematical constant τ, as a float.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-infj\"><a href=\"#cmath-infj\" class=\"headerlink\" title=\"cmath.infj\"></a>cmath.infj</h4><p>Complex number with zero real part and positive infinity imaginary part. Equivalent to <code>complex(0.0, float(&#39;inf&#39;))</code>.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-nan\"><a href=\"#cmath-nan\" class=\"headerlink\" title=\"cmath.nan\"></a>cmath.nan</h4><p>A floating-point “not a number” (NaN) value. Equivalent to <code>float(&#39;nan&#39;)</code>.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-nanj\"><a href=\"#cmath-nanj\" class=\"headerlink\" title=\"cmath.nanj\"></a>cmath.nanj</h4><p>Complex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float(‘nan’)).</p>\n<p>New in version 3.6.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"cmath-inf\"><a href=\"#cmath-inf\" class=\"headerlink\" title=\"cmath.inf\"></a>cmath.inf</h4><p>Floating-point positive infinity. Equivalent to <code>float(&#39;inf&#39;)</code>.<br>负无穷-float(‘-inf’)</p>\n<p>New in version 3.6.</p>","more":"<h4 id=\"cmath-pi\"><a href=\"#cmath-pi\" class=\"headerlink\" title=\"cmath.pi\"></a>cmath.pi</h4><p>The mathematical constant π, as a float.</p>\n<h4 id=\"cmath-e\"><a href=\"#cmath-e\" class=\"headerlink\" title=\"cmath.e\"></a>cmath.e</h4><p>The mathematical constant e, as a float.</p>\n<h4 id=\"cmath-tau\"><a href=\"#cmath-tau\" class=\"headerlink\" title=\"cmath.tau\"></a>cmath.tau</h4><p>The mathematical constant τ, as a float.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-infj\"><a href=\"#cmath-infj\" class=\"headerlink\" title=\"cmath.infj\"></a>cmath.infj</h4><p>Complex number with zero real part and positive infinity imaginary part. Equivalent to <code>complex(0.0, float(&#39;inf&#39;))</code>.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-nan\"><a href=\"#cmath-nan\" class=\"headerlink\" title=\"cmath.nan\"></a>cmath.nan</h4><p>A floating-point “not a number” (NaN) value. Equivalent to <code>float(&#39;nan&#39;)</code>.</p>\n<p>New in version 3.6.</p>\n<h4 id=\"cmath-nanj\"><a href=\"#cmath-nanj\" class=\"headerlink\" title=\"cmath.nanj\"></a>cmath.nanj</h4><p>Complex number with zero real part and NaN imaginary part. Equivalent to complex(0.0, float(‘nan’)).</p>\n<p>New in version 3.6.</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 15 2019 16:17:59 GMT+0800 (China Standard Time)","title":"Python中如何表示正负无穷大","path":"2019/03/15/Python中如何表示正负无穷大/","eyeCatchImage":null,"excerpt":"<h4 id=\"cmath-inf\"><a href=\"#cmath-inf\" class=\"headerlink\" title=\"cmath.inf\"></a>cmath.inf</h4><p>Floating-point positive infinity. Equivalent to <code>float(&#39;inf&#39;)</code>.<br>负无穷-float(‘-inf’)</p>\n<p>New in version 3.6.</p>","date":"2019-03-15T08:12:43.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"SQL语法练习(一)","date":"2018-08-27T16:32:31.000Z","_content":"\n1. 查询学习课程\"python\"比课程 \"java\" 成绩高的学生的学号;\n-- 思路：\n-- 获取所有有python课程的人（学号，成绩） - 临时表\n-- 获取所有有java课程的人（学号，成绩） - 临时表\n-- 根据学号连接两个临时表：\n-- 学号 | 物理成绩 | 生物成绩\n-- 然后再进行筛选\n```SQL\nselect A.s_id from\n\t\t(select s_id, num as python from score left join course on score.c_id = course.c_id where course.c_name = 'python') as A\n\t\tleft join\n\t\t(select s_id, num as java   from score left join course on score.c_id = course.c_id where course.c_name = 'java')   as B\n\t\ton A.s_id = B.s_id where A.python > B.java;\n```\n<!-- more -->\n2. 查询平均成绩大于65分的同学的姓名和平均成绩(保留两位小数);\n```SQL\nSELECT student.s_name as names, round(AVG(score.num), 2) as average\nFROM student, score\nWHERE student.s_id = score.s_id\nGROUP BY student.s_name\nHAVING AVG(score.num) > 65;\n```\n\n3. 查询所有同学的姓名、选课数、总成绩\n```SQL\nSELECT student.s_name, COUNT(score.s_id) as course_num, SUM(score.num) as total_grades\nFROM student, score\nWHERE student.s_id = score.s_id\nGROUP BY student.s_name\nORDER BY student.s_name;\n```\n\n4. 查询所有的课程的名称以及对应的任课老师姓名;\n```SQL\nSELECT course.c_name, teacher.t_name  \nFROM course, teacher\nWHERE course.t_id = teacher.t_id;\n```\n\n5. 查询没学过“alex”老师课的同学的姓名;\n```SQL\nSELECT s_name\nFROM student\nWHERE student.s_id NOT IN (\n\t\t\tSELECT DISTINCT score.s_id\n\t\t\tFROM score, course, teacher\n\t\t\tWHERE course.c_id = score.c_id AND teacher.t_id = course.t_id AND teacher.t_name = 'alex'\n\t\t\t)\n```\n\n6. 查询学过'python'并且也学过编号'java'课程的同学的姓名\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id AND (course.c_name = 'python' OR course.c_name = 'java')) as B\nLEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) > 1;\n```\n\n7. 查询学过“alex”老师所教的全部课程的同学的姓名\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course, teacher\n\t\t WHERE score.c_id = course.c_id AND teacher.t_id = course.t_id AND teacher.t_name = 'alex') as B\n    LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(course.c_id) FROM\n\t\t\t\t\t\t\t\t\t\t\t\tcourse, teacher\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t\t\tteacher.t_id = course.t_id AND teacher.t_name='alex');\n```\n8. 查询挂科超过两门(包括两门)的学生姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id  AND (score.num < 60 OR score.num ISNULL)) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) > 1;\n```\n\n9. 查询有课程成绩小于60分的同学的姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id  AND score.num < 60) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name;\n```\n\n10. 查询选修了全部课程的学生姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(*) FROM course);\n\n\nSELECT s_name FROM\nstudent\nLEFT JOIN score ON student.s_id = score.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(*) FROM course)\n```\n\n11. 查询至少有一门课程与“貂蝉”同学所学课程相同的同学姓名；\n```SQL\nSELECT s_name\nFROM student, score\nWHERE student.s_id = score.s_id AND student.s_name != '貂蝉' AND score.c_id IN (SELECT c_id FROM score, student\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE score.s_id = student.s_id AND student.s_name = '貂蝉')\n\nGROUP BY s_name;\n```\n\n12. 查询学过'貂蝉'同学全部课程的其他同学姓名；\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course, student\n\t\t WHERE\n\t\t     score.c_id = course.c_id AND\n\t\t\t\t student.s_id = score.s_id AND\n\t\t\t\t student.s_name != '貂蝉' AND\n\t\t\t\t score.c_id in (SELECT c_id FROM score, student WHERE student.s_name = '貂蝉' AND student.s_id = score.s_id)\n\t\t) as B\nLEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) >= (SELECT COUNT(score.c_id) FROM score, student WHERE student.s_name = '貂蝉' AND student.s_id = score.s_id);\n```\n\n\n\n\n\n-- ——————————————————————————————————————————————————————————————\n-- INSERT INTO student VALUES (1, '鲁班', 12, '男');\n-- INSERT INTO student VALUES (2, '貂蝉', 20, '女');\n-- INSERT INTO student VALUES (3, '刘备', 35, '男');\n-- INSERT INTO student VALUES (4, '关羽', 34, '男');\n-- INSERT INTO student VALUES (5, '张飞', 33, '女');\n--\n--\n\n--\n-- INSERT INTO teacher VALUES (1, '大王');\n-- INSERT INTO teacher VALUES (2, 'alex');\n-- INSERT INTO teacher VALUES (3, 'egon');\n-- INSERT INTO teacher VALUES (4, 'peiqi');\n--\n\n\n-- INSERT INTO course VALUES (1, 'python', 1);\n-- INSERT INTO course VALUES (2, 'java', 2);\n-- INSERT INTO course VALUES (3, 'linux', 3);\n-- INSERT INTO course VALUES (4, 'go', 2);\n\n\n-- INSERT INTO score VALUES (1, 1, 1, 79);\n-- INSERT INTO score VALUES (2, 1, 2, 77);\n-- INSERT INTO score VALUES (3, 1, 3, 58);\n-- INSERT INTO score VALUES (4, 2, 2, 66);\n-- INSERT INTO score VALUES (5, 2, 3, 77);\n-- INSERT INTO score VALUES (6, 3, 1, 61);\n-- INSERT INTO score VALUES (7, 3, 2, 64);\n-- INSERT INTO score VALUES (8, 4, 3, 70);\n--\n","source":"_posts/SQL语法练习-一.md","raw":"---\ntitle: SQL语法练习(一)\ndate: 2018-08-28 00:32:31\ntags:\n  - SQL\ncategories:\n  - SQL\n---\n\n1. 查询学习课程\"python\"比课程 \"java\" 成绩高的学生的学号;\n-- 思路：\n-- 获取所有有python课程的人（学号，成绩） - 临时表\n-- 获取所有有java课程的人（学号，成绩） - 临时表\n-- 根据学号连接两个临时表：\n-- 学号 | 物理成绩 | 生物成绩\n-- 然后再进行筛选\n```SQL\nselect A.s_id from\n\t\t(select s_id, num as python from score left join course on score.c_id = course.c_id where course.c_name = 'python') as A\n\t\tleft join\n\t\t(select s_id, num as java   from score left join course on score.c_id = course.c_id where course.c_name = 'java')   as B\n\t\ton A.s_id = B.s_id where A.python > B.java;\n```\n<!-- more -->\n2. 查询平均成绩大于65分的同学的姓名和平均成绩(保留两位小数);\n```SQL\nSELECT student.s_name as names, round(AVG(score.num), 2) as average\nFROM student, score\nWHERE student.s_id = score.s_id\nGROUP BY student.s_name\nHAVING AVG(score.num) > 65;\n```\n\n3. 查询所有同学的姓名、选课数、总成绩\n```SQL\nSELECT student.s_name, COUNT(score.s_id) as course_num, SUM(score.num) as total_grades\nFROM student, score\nWHERE student.s_id = score.s_id\nGROUP BY student.s_name\nORDER BY student.s_name;\n```\n\n4. 查询所有的课程的名称以及对应的任课老师姓名;\n```SQL\nSELECT course.c_name, teacher.t_name  \nFROM course, teacher\nWHERE course.t_id = teacher.t_id;\n```\n\n5. 查询没学过“alex”老师课的同学的姓名;\n```SQL\nSELECT s_name\nFROM student\nWHERE student.s_id NOT IN (\n\t\t\tSELECT DISTINCT score.s_id\n\t\t\tFROM score, course, teacher\n\t\t\tWHERE course.c_id = score.c_id AND teacher.t_id = course.t_id AND teacher.t_name = 'alex'\n\t\t\t)\n```\n\n6. 查询学过'python'并且也学过编号'java'课程的同学的姓名\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id AND (course.c_name = 'python' OR course.c_name = 'java')) as B\nLEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) > 1;\n```\n\n7. 查询学过“alex”老师所教的全部课程的同学的姓名\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course, teacher\n\t\t WHERE score.c_id = course.c_id AND teacher.t_id = course.t_id AND teacher.t_name = 'alex') as B\n    LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(course.c_id) FROM\n\t\t\t\t\t\t\t\t\t\t\t\tcourse, teacher\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t\t\tteacher.t_id = course.t_id AND teacher.t_name='alex');\n```\n8. 查询挂科超过两门(包括两门)的学生姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id  AND (score.num < 60 OR score.num ISNULL)) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) > 1;\n```\n\n9. 查询有课程成绩小于60分的同学的姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id  AND score.num < 60) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name;\n```\n\n10. 查询选修了全部课程的学生姓名;\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course\n\t\t WHERE score.c_id = course.c_id) as B\n     LEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(*) FROM course);\n\n\nSELECT s_name FROM\nstudent\nLEFT JOIN score ON student.s_id = score.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) = (SELECT COUNT(*) FROM course)\n```\n\n11. 查询至少有一门课程与“貂蝉”同学所学课程相同的同学姓名；\n```SQL\nSELECT s_name\nFROM student, score\nWHERE student.s_id = score.s_id AND student.s_name != '貂蝉' AND score.c_id IN (SELECT c_id FROM score, student\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE score.s_id = student.s_id AND student.s_name = '貂蝉')\n\nGROUP BY s_name;\n```\n\n12. 查询学过'貂蝉'同学全部课程的其他同学姓名；\n```SQL\nSELECT s_name FROM\n\t\t(SELECT score.s_id as sid, score.c_id as cid\n\t\t FROM score, course, student\n\t\t WHERE\n\t\t     score.c_id = course.c_id AND\n\t\t\t\t student.s_id = score.s_id AND\n\t\t\t\t student.s_name != '貂蝉' AND\n\t\t\t\t score.c_id in (SELECT c_id FROM score, student WHERE student.s_name = '貂蝉' AND student.s_id = score.s_id)\n\t\t) as B\nLEFT JOIN student ON B.sid = student.s_id\nGROUP BY s_name\nHAVING COUNT(s_name) >= (SELECT COUNT(score.c_id) FROM score, student WHERE student.s_name = '貂蝉' AND student.s_id = score.s_id);\n```\n\n\n\n\n\n-- ——————————————————————————————————————————————————————————————\n-- INSERT INTO student VALUES (1, '鲁班', 12, '男');\n-- INSERT INTO student VALUES (2, '貂蝉', 20, '女');\n-- INSERT INTO student VALUES (3, '刘备', 35, '男');\n-- INSERT INTO student VALUES (4, '关羽', 34, '男');\n-- INSERT INTO student VALUES (5, '张飞', 33, '女');\n--\n--\n\n--\n-- INSERT INTO teacher VALUES (1, '大王');\n-- INSERT INTO teacher VALUES (2, 'alex');\n-- INSERT INTO teacher VALUES (3, 'egon');\n-- INSERT INTO teacher VALUES (4, 'peiqi');\n--\n\n\n-- INSERT INTO course VALUES (1, 'python', 1);\n-- INSERT INTO course VALUES (2, 'java', 2);\n-- INSERT INTO course VALUES (3, 'linux', 3);\n-- INSERT INTO course VALUES (4, 'go', 2);\n\n\n-- INSERT INTO score VALUES (1, 1, 1, 79);\n-- INSERT INTO score VALUES (2, 1, 2, 77);\n-- INSERT INTO score VALUES (3, 1, 3, 58);\n-- INSERT INTO score VALUES (4, 2, 2, 66);\n-- INSERT INTO score VALUES (5, 2, 3, 77);\n-- INSERT INTO score VALUES (6, 3, 1, 61);\n-- INSERT INTO score VALUES (7, 3, 2, 64);\n-- INSERT INTO score VALUES (8, 4, 3, 70);\n--\n","slug":"SQL语法练习-一","published":1,"updated":"2018-08-28T08:52:37.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xd0008cexot4ga0u4zf","content":"<ol>\n<li>查询学习课程”python”比课程 “java” 成绩高的学生的学号;<br>– 思路：<br>– 获取所有有python课程的人（学号，成绩） - 临时表<br>– 获取所有有java课程的人（学号，成绩） - 临时表<br>– 根据学号连接两个临时表：<br>– 学号 | 物理成绩 | 生物成绩<br>– 然后再进行筛选<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.s_id <span class=\"keyword\">from</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> python <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'python'</span>) <span class=\"keyword\">as</span> A</span><br><span class=\"line\">\t\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> <span class=\"keyword\">java</span>   <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'java'</span>)   <span class=\"keyword\">as</span> B</span><br><span class=\"line\">\t\t<span class=\"keyword\">on</span> A.s_id = B.s_id <span class=\"keyword\">where</span> A.python &gt; B.java;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>查询平均成绩大于65分的同学的姓名和平均成绩(保留两位小数);</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.s_name <span class=\"keyword\">as</span> <span class=\"keyword\">names</span>, <span class=\"keyword\">round</span>(<span class=\"keyword\">AVG</span>(score.num), <span class=\"number\">2</span>) <span class=\"keyword\">as</span> average</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> student.s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">AVG</span>(score.num) &gt; <span class=\"number\">65</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询所有同学的姓名、选课数、总成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.s_name, <span class=\"keyword\">COUNT</span>(score.s_id) <span class=\"keyword\">as</span> course_num, <span class=\"keyword\">SUM</span>(score.num) <span class=\"keyword\">as</span> total_grades</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> student.s_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> student.s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询所有的课程的名称以及对应的任课老师姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> course.c_name, teacher.t_name  </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> course, teacher</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> course.t_id = teacher.t_id;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询没学过“alex”老师课的同学的姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> score.s_id</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">FROM</span> score, course, teacher</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">WHERE</span> course.c_id = score.c_id <span class=\"keyword\">AND</span> teacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name = <span class=\"string\">'alex'</span></span><br><span class=\"line\">\t\t\t)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过’python’并且也学过编号’java’课程的同学的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id <span class=\"keyword\">AND</span> (course.c_name = <span class=\"string\">'python'</span> <span class=\"keyword\">OR</span> course.c_name = <span class=\"string\">'java'</span>)) <span class=\"keyword\">as</span> B</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt; <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过“alex”老师所教的全部课程的同学的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course, teacher</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id <span class=\"keyword\">AND</span> teacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name = <span class=\"string\">'alex'</span>) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">    <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(course.c_id) <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\tcourse, teacher</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\tteacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name=<span class=\"string\">'alex'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询挂科超过两门(包括两门)的学生姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id  <span class=\"keyword\">AND</span> (score.num &lt; <span class=\"number\">60</span> <span class=\"keyword\">OR</span> score.num <span class=\"keyword\">ISNULL</span>)) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt; <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询有课程成绩小于60分的同学的姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id  <span class=\"keyword\">AND</span> score.num &lt; <span class=\"number\">60</span>) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询选修了全部课程的学生姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> course);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">student</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> score <span class=\"keyword\">ON</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> course)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询至少有一门课程与“貂蝉”同学所学课程相同的同学姓名；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id <span class=\"keyword\">AND</span> student.s_name != <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> score.c_id <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> c_id <span class=\"keyword\">FROM</span> score, student</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"keyword\">WHERE</span> score.s_id = student.s_id <span class=\"keyword\">AND</span> student.s_name = <span class=\"string\">'貂蝉'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过’貂蝉’同学全部课程的其他同学姓名；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course, student</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\t\t     score.c_id = course.c_id <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t student.s_id = score.s_id <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t student.s_name != <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t score.c_id <span class=\"keyword\">in</span> (<span class=\"keyword\">SELECT</span> c_id <span class=\"keyword\">FROM</span> score, student <span class=\"keyword\">WHERE</span> student.s_name = <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> student.s_id = score.s_id)</span><br><span class=\"line\">\t\t) <span class=\"keyword\">as</span> B</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt;= (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(score.c_id) <span class=\"keyword\">FROM</span> score, student <span class=\"keyword\">WHERE</span> student.s_name = <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> student.s_id = score.s_id);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>– ——————————————————————————————————————————————————————————————<br>– INSERT INTO student VALUES (1, ‘鲁班’, 12, ‘男’);<br>– INSERT INTO student VALUES (2, ‘貂蝉’, 20, ‘女’);<br>– INSERT INTO student VALUES (3, ‘刘备’, 35, ‘男’);<br>– INSERT INTO student VALUES (4, ‘关羽’, 34, ‘男’);</p>\n<h2 id=\"–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’\"><a href=\"#–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’\" class=\"headerlink\" title=\"– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);\"></a>– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);</h2><p>–</p>\n<p>–<br>– INSERT INTO teacher VALUES (1, ‘大王’);<br>– INSERT INTO teacher VALUES (2, ‘alex’);<br>– INSERT INTO teacher VALUES (3, ‘egon’);</p>\n<h2 id=\"–-INSERT-INTO-teacher-VALUES-4-‘peiqi’\"><a href=\"#–-INSERT-INTO-teacher-VALUES-4-‘peiqi’\" class=\"headerlink\" title=\"– INSERT INTO teacher VALUES (4, ‘peiqi’);\"></a>– INSERT INTO teacher VALUES (4, ‘peiqi’);</h2><p>– INSERT INTO course VALUES (1, ‘python’, 1);<br>– INSERT INTO course VALUES (2, ‘java’, 2);<br>– INSERT INTO course VALUES (3, ‘linux’, 3);<br>– INSERT INTO course VALUES (4, ‘go’, 2);</p>\n<p>– INSERT INTO score VALUES (1, 1, 1, 79);<br>– INSERT INTO score VALUES (2, 1, 2, 77);<br>– INSERT INTO score VALUES (3, 1, 3, 58);<br>– INSERT INTO score VALUES (4, 2, 2, 66);<br>– INSERT INTO score VALUES (5, 2, 3, 77);<br>– INSERT INTO score VALUES (6, 3, 1, 61);<br>– INSERT INTO score VALUES (7, 3, 2, 64);</p>\n<h2 id=\"–-INSERT-INTO-score-VALUES-8-4-3-70\"><a href=\"#–-INSERT-INTO-score-VALUES-8-4-3-70\" class=\"headerlink\" title=\"– INSERT INTO score VALUES (8, 4, 3, 70);\"></a>– INSERT INTO score VALUES (8, 4, 3, 70);</h2>","site":{"data":{}},"excerpt":"<ol>\n<li>查询学习课程”python”比课程 “java” 成绩高的学生的学号;<br>– 思路：<br>– 获取所有有python课程的人（学号，成绩） - 临时表<br>– 获取所有有java课程的人（学号，成绩） - 临时表<br>– 根据学号连接两个临时表：<br>– 学号 | 物理成绩 | 生物成绩<br>– 然后再进行筛选<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.s_id <span class=\"keyword\">from</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> python <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'python'</span>) <span class=\"keyword\">as</span> A</span><br><span class=\"line\">\t\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> <span class=\"keyword\">java</span>   <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'java'</span>)   <span class=\"keyword\">as</span> B</span><br><span class=\"line\">\t\t<span class=\"keyword\">on</span> A.s_id = B.s_id <span class=\"keyword\">where</span> A.python &gt; B.java;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p>查询平均成绩大于65分的同学的姓名和平均成绩(保留两位小数);</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.s_name <span class=\"keyword\">as</span> <span class=\"keyword\">names</span>, <span class=\"keyword\">round</span>(<span class=\"keyword\">AVG</span>(score.num), <span class=\"number\">2</span>) <span class=\"keyword\">as</span> average</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> student.s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">AVG</span>(score.num) &gt; <span class=\"number\">65</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询所有同学的姓名、选课数、总成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.s_name, <span class=\"keyword\">COUNT</span>(score.s_id) <span class=\"keyword\">as</span> course_num, <span class=\"keyword\">SUM</span>(score.num) <span class=\"keyword\">as</span> total_grades</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> student.s_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> student.s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询所有的课程的名称以及对应的任课老师姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> course.c_name, teacher.t_name  </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> course, teacher</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> course.t_id = teacher.t_id;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询没学过“alex”老师课的同学的姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> score.s_id</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">FROM</span> score, course, teacher</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">WHERE</span> course.c_id = score.c_id <span class=\"keyword\">AND</span> teacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name = <span class=\"string\">'alex'</span></span><br><span class=\"line\">\t\t\t)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过’python’并且也学过编号’java’课程的同学的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id <span class=\"keyword\">AND</span> (course.c_name = <span class=\"string\">'python'</span> <span class=\"keyword\">OR</span> course.c_name = <span class=\"string\">'java'</span>)) <span class=\"keyword\">as</span> B</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt; <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过“alex”老师所教的全部课程的同学的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course, teacher</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id <span class=\"keyword\">AND</span> teacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name = <span class=\"string\">'alex'</span>) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">    <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(course.c_id) <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\tcourse, teacher</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\tteacher.t_id = course.t_id <span class=\"keyword\">AND</span> teacher.t_name=<span class=\"string\">'alex'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询挂科超过两门(包括两门)的学生姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id  <span class=\"keyword\">AND</span> (score.num &lt; <span class=\"number\">60</span> <span class=\"keyword\">OR</span> score.num <span class=\"keyword\">ISNULL</span>)) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt; <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询有课程成绩小于60分的同学的姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id  <span class=\"keyword\">AND</span> score.num &lt; <span class=\"number\">60</span>) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询选修了全部课程的学生姓名;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span> score.c_id = course.c_id) <span class=\"keyword\">as</span> B</span><br><span class=\"line\">     <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> course);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">student</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> score <span class=\"keyword\">ON</span> student.s_id = score.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> course)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询至少有一门课程与“貂蝉”同学所学课程相同的同学姓名；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student, score</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student.s_id = score.s_id <span class=\"keyword\">AND</span> student.s_name != <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> score.c_id <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> c_id <span class=\"keyword\">FROM</span> score, student</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"keyword\">WHERE</span> score.s_id = student.s_id <span class=\"keyword\">AND</span> student.s_name = <span class=\"string\">'貂蝉'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询学过’貂蝉’同学全部课程的其他同学姓名；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> s_name <span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">SELECT</span> score.s_id <span class=\"keyword\">as</span> <span class=\"keyword\">sid</span>, score.c_id <span class=\"keyword\">as</span> cid</span><br><span class=\"line\">\t\t <span class=\"keyword\">FROM</span> score, course, student</span><br><span class=\"line\">\t\t <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\t\t     score.c_id = course.c_id <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t student.s_id = score.s_id <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t student.s_name != <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">\t\t\t\t score.c_id <span class=\"keyword\">in</span> (<span class=\"keyword\">SELECT</span> c_id <span class=\"keyword\">FROM</span> score, student <span class=\"keyword\">WHERE</span> student.s_name = <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> student.s_id = score.s_id)</span><br><span class=\"line\">\t\t) <span class=\"keyword\">as</span> B</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> student <span class=\"keyword\">ON</span> B.sid = student.s_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> s_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(s_name) &gt;= (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(score.c_id) <span class=\"keyword\">FROM</span> score, student <span class=\"keyword\">WHERE</span> student.s_name = <span class=\"string\">'貂蝉'</span> <span class=\"keyword\">AND</span> student.s_id = score.s_id);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>– ——————————————————————————————————————————————————————————————<br>– INSERT INTO student VALUES (1, ‘鲁班’, 12, ‘男’);<br>– INSERT INTO student VALUES (2, ‘貂蝉’, 20, ‘女’);<br>– INSERT INTO student VALUES (3, ‘刘备’, 35, ‘男’);<br>– INSERT INTO student VALUES (4, ‘关羽’, 34, ‘男’);</p>\n<h2 id=\"–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’\"><a href=\"#–-INSERT-INTO-student-VALUES-5-‘张飞’-33-‘女’\" class=\"headerlink\" title=\"– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);\"></a>– INSERT INTO student VALUES (5, ‘张飞’, 33, ‘女’);</h2><p>–</p>\n<p>–<br>– INSERT INTO teacher VALUES (1, ‘大王’);<br>– INSERT INTO teacher VALUES (2, ‘alex’);<br>– INSERT INTO teacher VALUES (3, ‘egon’);</p>\n<h2 id=\"–-INSERT-INTO-teacher-VALUES-4-‘peiqi’\"><a href=\"#–-INSERT-INTO-teacher-VALUES-4-‘peiqi’\" class=\"headerlink\" title=\"– INSERT INTO teacher VALUES (4, ‘peiqi’);\"></a>– INSERT INTO teacher VALUES (4, ‘peiqi’);</h2><p>– INSERT INTO course VALUES (1, ‘python’, 1);<br>– INSERT INTO course VALUES (2, ‘java’, 2);<br>– INSERT INTO course VALUES (3, ‘linux’, 3);<br>– INSERT INTO course VALUES (4, ‘go’, 2);</p>\n<p>– INSERT INTO score VALUES (1, 1, 1, 79);<br>– INSERT INTO score VALUES (2, 1, 2, 77);<br>– INSERT INTO score VALUES (3, 1, 3, 58);<br>– INSERT INTO score VALUES (4, 2, 2, 66);<br>– INSERT INTO score VALUES (5, 2, 3, 77);<br>– INSERT INTO score VALUES (6, 3, 1, 61);<br>– INSERT INTO score VALUES (7, 3, 2, 64);</p>\n<h2 id=\"–-INSERT-INTO-score-VALUES-8-4-3-70\"><a href=\"#–-INSERT-INTO-score-VALUES-8-4-3-70\" class=\"headerlink\" title=\"– INSERT INTO score VALUES (8, 4, 3, 70);\"></a>– INSERT INTO score VALUES (8, 4, 3, 70);</h2>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Aug 28 2018 16:52:37 GMT+0800 (China Standard Time)","title":"SQL语法练习(一)","path":"2018/08/28/SQL语法练习-一/","eyeCatchImage":null,"excerpt":"<ol>\n<li>查询学习课程”python”比课程 “java” 成绩高的学生的学号;<br>– 思路：<br>– 获取所有有python课程的人（学号，成绩） - 临时表<br>– 获取所有有java课程的人（学号，成绩） - 临时表<br>– 根据学号连接两个临时表：<br>– 学号 | 物理成绩 | 生物成绩<br>– 然后再进行筛选<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.s_id <span class=\"keyword\">from</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> python <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'python'</span>) <span class=\"keyword\">as</span> A</span><br><span class=\"line\">\t\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\t\t(<span class=\"keyword\">select</span> s_id, <span class=\"keyword\">num</span> <span class=\"keyword\">as</span> <span class=\"keyword\">java</span>   <span class=\"keyword\">from</span> score <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course <span class=\"keyword\">on</span> score.c_id = course.c_id <span class=\"keyword\">where</span> course.c_name = <span class=\"string\">'java'</span>)   <span class=\"keyword\">as</span> B</span><br><span class=\"line\">\t\t<span class=\"keyword\">on</span> A.s_id = B.s_id <span class=\"keyword\">where</span> A.python &gt; B.java;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","date":"2018-08-27T16:32:31.000Z","pv":0,"totalPV":0,"categories":"SQL","tags":["SQL"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"TCP 套接字编程","date":"2018-07-25T12:50:59.000Z","_content":"\n\n![Screen Shot 2018-07-25 at 19.55.29.png](https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n\n## TCPClient.py\n```python\nfrom socket import *\n\nserverName = 'server.kunxiang.wang'\nserverPort = 12000\n\nclientSocket = socket(AF_INET, SOCK_STREAM)\n\n# 如果不绑定客户端进程端口，则自动选择端口\nclientSocket.bind(('', 34567))\n\nclientSocket.connect((serverName, serverPort))\n\nmsg = input('please input lowercase sentence: ').encode()\n\nclientSocket.send(msg)\n\nmodifiedMsg = clientSocket.recv(2048)\n\nprint(modifiedMsg)\n\n\nclientSocket.close()\n```\n\n## TCPServer.py\n```python\nfrom socket import *\n\nserverPort = 12000\n\nserverSocket = socket(AF_INET, SOCK_STREAM)\nserverSocket.bind(('', serverPort))\nserverSocket.listen(1)\n\nprint('the server is ready to receive')\n\nwhile True:\n    connectionSocket, clientAddress = serverSocket.accept()\n    print(connectionSocket, clientAddress)\n\n    msg = connectionSocket.recv(1024)\n    print(msg)\n\n    modifiedMsg = msg.upper()\n    connectionSocket.send(modifiedMsg)\n    connectionSocket.close()\n\n```","source":"_posts/TCP-套接字编程.md","raw":"---\ntitle: TCP 套接字编程\ndate: 2018-07-25 20:50:59\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\n\n![Screen Shot 2018-07-25 at 19.55.29.png](https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n\n## TCPClient.py\n```python\nfrom socket import *\n\nserverName = 'server.kunxiang.wang'\nserverPort = 12000\n\nclientSocket = socket(AF_INET, SOCK_STREAM)\n\n# 如果不绑定客户端进程端口，则自动选择端口\nclientSocket.bind(('', 34567))\n\nclientSocket.connect((serverName, serverPort))\n\nmsg = input('please input lowercase sentence: ').encode()\n\nclientSocket.send(msg)\n\nmodifiedMsg = clientSocket.recv(2048)\n\nprint(modifiedMsg)\n\n\nclientSocket.close()\n```\n\n## TCPServer.py\n```python\nfrom socket import *\n\nserverPort = 12000\n\nserverSocket = socket(AF_INET, SOCK_STREAM)\nserverSocket.bind(('', serverPort))\nserverSocket.listen(1)\n\nprint('the server is ready to receive')\n\nwhile True:\n    connectionSocket, clientAddress = serverSocket.accept()\n    print(connectionSocket, clientAddress)\n\n    msg = connectionSocket.recv(1024)\n    print(msg)\n\n    modifiedMsg = msg.upper()\n    connectionSocket.send(modifiedMsg)\n    connectionSocket.close()\n\n```","slug":"TCP-套接字编程","published":1,"updated":"2018-07-28T06:47:41.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xd3008hexotgk9pja79","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.55.29.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"TCPClient-py\"><a href=\"#TCPClient-py\" class=\"headerlink\" title=\"TCPClient.py\"></a>TCPClient.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">serverName = <span class=\"string\">'server.kunxiang.wang'</span></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class=\"line\">clientSocket.bind((<span class=\"string\">''</span>, <span class=\"number\">34567</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.connect((serverName, serverPort))</span><br><span class=\"line\"></span><br><span class=\"line\">msg = input(<span class=\"string\">'please input lowercase sentence: '</span>).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">modifiedMsg = clientSocket.recv(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(modifiedMsg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"TCPServer-py\"><a href=\"#TCPServer-py\" class=\"headerlink\" title=\"TCPServer.py\"></a>TCPServer.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">serverSocket.bind((<span class=\"string\">''</span>, serverPort))</span><br><span class=\"line\">serverSocket.listen(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'the server is ready to receive'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    connectionSocket, clientAddress = serverSocket.accept()</span><br><span class=\"line\">    print(connectionSocket, clientAddress)</span><br><span class=\"line\"></span><br><span class=\"line\">    msg = connectionSocket.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    print(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    modifiedMsg = msg.upper()</span><br><span class=\"line\">    connectionSocket.send(modifiedMsg)</span><br><span class=\"line\">    connectionSocket.close()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.55.29.png\"></p>","more":"<h2 id=\"TCPClient-py\"><a href=\"#TCPClient-py\" class=\"headerlink\" title=\"TCPClient.py\"></a>TCPClient.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">serverName = <span class=\"string\">'server.kunxiang.wang'</span></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class=\"line\">clientSocket.bind((<span class=\"string\">''</span>, <span class=\"number\">34567</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.connect((serverName, serverPort))</span><br><span class=\"line\"></span><br><span class=\"line\">msg = input(<span class=\"string\">'please input lowercase sentence: '</span>).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">modifiedMsg = clientSocket.recv(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(modifiedMsg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"TCPServer-py\"><a href=\"#TCPServer-py\" class=\"headerlink\" title=\"TCPServer.py\"></a>TCPServer.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">serverSocket.bind((<span class=\"string\">''</span>, serverPort))</span><br><span class=\"line\">serverSocket.listen(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'the server is ready to receive'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    connectionSocket, clientAddress = serverSocket.accept()</span><br><span class=\"line\">    print(connectionSocket, clientAddress)</span><br><span class=\"line\"></span><br><span class=\"line\">    msg = connectionSocket.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    print(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    modifiedMsg = msg.upper()</span><br><span class=\"line\">    connectionSocket.send(modifiedMsg)</span><br><span class=\"line\">    connectionSocket.close()</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Jul 28 2018 14:47:41 GMT+0800 (China Standard Time)","title":"TCP 套接字编程","path":"2018/07/25/TCP-套接字编程/","eyeCatchImage":null,"excerpt":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-016af56091643bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.55.29.png\"></p>","date":"2018-07-25T12:50:59.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"UDP 套接字编程","date":"2018-07-25T11:31:29.000Z","_content":"\n![Screen Shot 2018-07-25 at 19.54.43.png](https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n## UDPClient.py\n```python\nfrom socket import *\n\n# serverName = '140.143.38.125'\nserverName = 'server.kunxiang.wang'\nserverPort = 12000\n\n\nclientSocket = socket(AF_INET, SOCK_DGRAM)\n\n# 如果不绑定客户端进程端口，则自动选择端口\nclientSocket.bind(('', 34567))\n\nmsg = input('please input lowercase sentence: ').encode()\nclientSocket.sendto(msg, (serverName, serverPort))\n\nmodifiedMsg, serverAddress = clientSocket.recvfrom(2048)\n\nprint(modifiedMsg, serverAddress, end='\\n')\n\nclientSocket.close()\n```\n\n\n## UDPServer.py\n```python\nfrom socket import *\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_DGRAM)\nserverSocket.bind(('', serverPort))\nprint('The server is ready to receive')\nwhile True:\n    message, clientAddress = serverSocket.recvfrom(2048)\n    print(message)\n    print(clientAddress)\n    modifiedMessage = message.upper()\n    serverSocket.sendto(modifiedMessage, clientAddress)\n\n```\n","source":"_posts/UDP-套接字编程.md","raw":"---\ntitle: UDP 套接字编程\ndate: 2018-07-25 19:31:29\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\n![Screen Shot 2018-07-25 at 19.54.43.png](https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\n\n## UDPClient.py\n```python\nfrom socket import *\n\n# serverName = '140.143.38.125'\nserverName = 'server.kunxiang.wang'\nserverPort = 12000\n\n\nclientSocket = socket(AF_INET, SOCK_DGRAM)\n\n# 如果不绑定客户端进程端口，则自动选择端口\nclientSocket.bind(('', 34567))\n\nmsg = input('please input lowercase sentence: ').encode()\nclientSocket.sendto(msg, (serverName, serverPort))\n\nmodifiedMsg, serverAddress = clientSocket.recvfrom(2048)\n\nprint(modifiedMsg, serverAddress, end='\\n')\n\nclientSocket.close()\n```\n\n\n## UDPServer.py\n```python\nfrom socket import *\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_DGRAM)\nserverSocket.bind(('', serverPort))\nprint('The server is ready to receive')\nwhile True:\n    message, clientAddress = serverSocket.recvfrom(2048)\n    print(message)\n    print(clientAddress)\n    modifiedMessage = message.upper()\n    serverSocket.sendto(modifiedMessage, clientAddress)\n\n```\n","slug":"UDP-套接字编程","published":1,"updated":"2018-07-28T06:49:20.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xd5008kexoti4fqo79x","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.54.43.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"UDPClient-py\"><a href=\"#UDPClient-py\" class=\"headerlink\" title=\"UDPClient.py\"></a>UDPClient.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># serverName = '140.143.38.125'</span></span><br><span class=\"line\">serverName = <span class=\"string\">'server.kunxiang.wang'</span></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class=\"line\">clientSocket.bind((<span class=\"string\">''</span>, <span class=\"number\">34567</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">msg = input(<span class=\"string\">'please input lowercase sentence: '</span>).encode()</span><br><span class=\"line\">clientSocket.sendto(msg, (serverName, serverPort))</span><br><span class=\"line\"></span><br><span class=\"line\">modifiedMsg, serverAddress = clientSocket.recvfrom(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(modifiedMsg, serverAddress, end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"UDPServer-py\"><a href=\"#UDPServer-py\" class=\"headerlink\" title=\"UDPServer.py\"></a>UDPServer.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\">serverSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">serverSocket.bind((<span class=\"string\">''</span>, serverPort))</span><br><span class=\"line\">print(<span class=\"string\">'The server is ready to receive'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    message, clientAddress = serverSocket.recvfrom(<span class=\"number\">2048</span>)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\">    print(clientAddress)</span><br><span class=\"line\">    modifiedMessage = message.upper()</span><br><span class=\"line\">    serverSocket.sendto(modifiedMessage, clientAddress)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.54.43.png\"></p>","more":"<h2 id=\"UDPClient-py\"><a href=\"#UDPClient-py\" class=\"headerlink\" title=\"UDPClient.py\"></a>UDPClient.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># serverName = '140.143.38.125'</span></span><br><span class=\"line\">serverName = <span class=\"string\">'server.kunxiang.wang'</span></span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不绑定客户端进程端口，则自动选择端口</span></span><br><span class=\"line\">clientSocket.bind((<span class=\"string\">''</span>, <span class=\"number\">34567</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">msg = input(<span class=\"string\">'please input lowercase sentence: '</span>).encode()</span><br><span class=\"line\">clientSocket.sendto(msg, (serverName, serverPort))</span><br><span class=\"line\"></span><br><span class=\"line\">modifiedMsg, serverAddress = clientSocket.recvfrom(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(modifiedMsg, serverAddress, end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">clientSocket.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"UDPServer-py\"><a href=\"#UDPServer-py\" class=\"headerlink\" title=\"UDPServer.py\"></a>UDPServer.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\">serverPort = <span class=\"number\">12000</span></span><br><span class=\"line\">serverSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">serverSocket.bind((<span class=\"string\">''</span>, serverPort))</span><br><span class=\"line\">print(<span class=\"string\">'The server is ready to receive'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    message, clientAddress = serverSocket.recvfrom(<span class=\"number\">2048</span>)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\">    print(clientAddress)</span><br><span class=\"line\">    modifiedMessage = message.upper()</span><br><span class=\"line\">    serverSocket.sendto(modifiedMessage, clientAddress)</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Jul 28 2018 14:49:20 GMT+0800 (China Standard Time)","title":"UDP 套接字编程","path":"2018/07/25/UDP-套接字编程/","eyeCatchImage":null,"excerpt":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-0d1e97d91078ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-07-25 at 19.54.43.png\"></p>","date":"2018-07-25T11:31:29.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Tesseract的使用","date":"2018-03-12T04:35:36.000Z","_content":"\n## Running Tesseract with command-line\n\nTesseract is a command-line program, so first open a terminal or command prompt. The command is used like this:\n```bash    \ntesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile...]\n```\nSo basic usage to do OCR on an image called 'myscan.png' and save the result to 'out.txt' would be:\n```bash    \ntesseract myscan.png out\n```\nOr to do the same with German:\n```bash   \ntesseract myscan.png out -l deu\n```\nIt can even be used with multiple languages traineddata at a time eg. English and German:\n```bash\n     tesseract myscan.png out -l eng+deu\n```\n<!-- more -->\nTesseract also includes a hOCR mode, which produces a special HTML file with the coordinates of each word. This can be used to create a searchable pdf, using a tool such as [Hocr2PDF](https://exactcode.com/opensource/exactimage/). To use it, use the 'hocr' config option, like this:\n```bash    \ntesseract myscan.png out hocr\n```\nYou can also create a searchable pdf directly from tesseract ( versions >=3.03):\n```bash    \ntesseract myscan.png out pdf\n```\nMore information about the various options is available in the [Tesseract manpage](https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc).\n\n### Other Languages\n\nTesseract has been trained for [many languages](https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages), check for your language in the [Tessdata repository](https://github.com/tesseract-ocr/tessdata).\n\nFor example, if we want Tesseract support Chinese language, just put `chi_sim.traineddata` into the path `/usr/local/Cellar/tesseract/3.05.01/share/tessdata/`。\n\nIt can also be trained to support other languages and scripts; for more details see [TrainingTesseract](https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract).\n\n\n## Running Tesseract with Python\nPython-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and \"read\" the text embedded in images.\n\n### Usage\n** Quick start **\n```Python\ntry:\n    import Image\nexcept ImportError:\n    from PIL import Image\nimport pytesseract\n\npytesseract.pytesseract.tesseract_cmd = '<full_path_to_your_tesseract_executable>'\n# Include the above line, if you don't have tesseract executable in your PATH\n# Example tesseract_cmd: 'C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tesseract'\n\n# Simple image to string\nprint(pytesseract.image_to_string(Image.open('test.png')))\n\n# French text image to string\nprint(pytesseract.image_to_string(Image.open('test-european.jpg'), lang='fra'))\n\n# Get bounding box estimates\nprint(pytesseract.image_to_boxes(Image.open('test.png')))\n\n# Get verbose data including boxes, confidences, line and page numbers\nprint(pytesseract.image_to_data(Image.open('test.png')))\n```\nSupport for OpenCV image/NumPy array objects\n```python\nimport cv2\n\nimg = cv2.imread('/**path_to_image**/digits.png')\nprint(pytesseract.image_to_string(img))\n# OR explicit beforehand converting\nprint(pytesseract.image_to_string(Image.fromarray(img))\n```\nAdd the following config, if you have tessdata error like: \"Error opening data file...\"\n```python\ntessdata_dir_config = '--tessdata-dir \"<replace_with_your_tessdata_dir_path>\"'\n# Example config: '--tessdata-dir \"C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tessdata\"'\n# It's important to add double quotes around the dir path.\n\npytesseract.image_to_string(image, lang='chi_sim', config=tessdata_dir_config)\n\n```\n\n**Functions**\n\n- **image_to_string** Returns the result of a Tesseract OCR run on the image to string\n- **image_to_boxes** Returns result containing recognized characters and their box boundaries\n- **image_to_data** Returns result containing box boundaries, confidences, and other information. Requires Tesseract 3.05+. For more information, please check the [Tesseract TSV documentation](https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage#tsv-output-currently-available-in-305-dev-in-master-branch-on-github)\n\n**Parameters**\n\n`image_to_data(image, lang=None, config='', nice=0, output_type=Output.STRING)`\n\n- **image** Object, PIL Image/NumPy array of the image to be processed by Tesseract\n- **lang** String, Tesseract language code string\n- **config** String, Any additional configurations as a string, ex: `config='--psm 6'`\n- **nice** Integer, modifies the processor priority for the Tesseract run. Not supported on Windows. Nice adjusts the niceness of unix-like processes.\n- **output_type** Class attribute, specifies the type of the output, defaults to `string`. For the full list of all supported types, please check the definition of [pytesseract.Output](https://github.com/madmaze/pytesseract/blob/master/src/pytesseract.py) class.\n","source":"_posts/Tesseract的使用.md","raw":"---\ntitle: Tesseract的使用\ndate: 2018-03-12 12:35:36\ntags:\n  - Tesseract\ncategories:\n  - Tesseract\n---\n\n## Running Tesseract with command-line\n\nTesseract is a command-line program, so first open a terminal or command prompt. The command is used like this:\n```bash    \ntesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile...]\n```\nSo basic usage to do OCR on an image called 'myscan.png' and save the result to 'out.txt' would be:\n```bash    \ntesseract myscan.png out\n```\nOr to do the same with German:\n```bash   \ntesseract myscan.png out -l deu\n```\nIt can even be used with multiple languages traineddata at a time eg. English and German:\n```bash\n     tesseract myscan.png out -l eng+deu\n```\n<!-- more -->\nTesseract also includes a hOCR mode, which produces a special HTML file with the coordinates of each word. This can be used to create a searchable pdf, using a tool such as [Hocr2PDF](https://exactcode.com/opensource/exactimage/). To use it, use the 'hocr' config option, like this:\n```bash    \ntesseract myscan.png out hocr\n```\nYou can also create a searchable pdf directly from tesseract ( versions >=3.03):\n```bash    \ntesseract myscan.png out pdf\n```\nMore information about the various options is available in the [Tesseract manpage](https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc).\n\n### Other Languages\n\nTesseract has been trained for [many languages](https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages), check for your language in the [Tessdata repository](https://github.com/tesseract-ocr/tessdata).\n\nFor example, if we want Tesseract support Chinese language, just put `chi_sim.traineddata` into the path `/usr/local/Cellar/tesseract/3.05.01/share/tessdata/`。\n\nIt can also be trained to support other languages and scripts; for more details see [TrainingTesseract](https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract).\n\n\n## Running Tesseract with Python\nPython-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and \"read\" the text embedded in images.\n\n### Usage\n** Quick start **\n```Python\ntry:\n    import Image\nexcept ImportError:\n    from PIL import Image\nimport pytesseract\n\npytesseract.pytesseract.tesseract_cmd = '<full_path_to_your_tesseract_executable>'\n# Include the above line, if you don't have tesseract executable in your PATH\n# Example tesseract_cmd: 'C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tesseract'\n\n# Simple image to string\nprint(pytesseract.image_to_string(Image.open('test.png')))\n\n# French text image to string\nprint(pytesseract.image_to_string(Image.open('test-european.jpg'), lang='fra'))\n\n# Get bounding box estimates\nprint(pytesseract.image_to_boxes(Image.open('test.png')))\n\n# Get verbose data including boxes, confidences, line and page numbers\nprint(pytesseract.image_to_data(Image.open('test.png')))\n```\nSupport for OpenCV image/NumPy array objects\n```python\nimport cv2\n\nimg = cv2.imread('/**path_to_image**/digits.png')\nprint(pytesseract.image_to_string(img))\n# OR explicit beforehand converting\nprint(pytesseract.image_to_string(Image.fromarray(img))\n```\nAdd the following config, if you have tessdata error like: \"Error opening data file...\"\n```python\ntessdata_dir_config = '--tessdata-dir \"<replace_with_your_tessdata_dir_path>\"'\n# Example config: '--tessdata-dir \"C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tessdata\"'\n# It's important to add double quotes around the dir path.\n\npytesseract.image_to_string(image, lang='chi_sim', config=tessdata_dir_config)\n\n```\n\n**Functions**\n\n- **image_to_string** Returns the result of a Tesseract OCR run on the image to string\n- **image_to_boxes** Returns result containing recognized characters and their box boundaries\n- **image_to_data** Returns result containing box boundaries, confidences, and other information. Requires Tesseract 3.05+. For more information, please check the [Tesseract TSV documentation](https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage#tsv-output-currently-available-in-305-dev-in-master-branch-on-github)\n\n**Parameters**\n\n`image_to_data(image, lang=None, config='', nice=0, output_type=Output.STRING)`\n\n- **image** Object, PIL Image/NumPy array of the image to be processed by Tesseract\n- **lang** String, Tesseract language code string\n- **config** String, Any additional configurations as a string, ex: `config='--psm 6'`\n- **nice** Integer, modifies the processor priority for the Tesseract run. Not supported on Windows. Nice adjusts the niceness of unix-like processes.\n- **output_type** Class attribute, specifies the type of the output, defaults to `string`. For the full list of all supported types, please check the definition of [pytesseract.Output](https://github.com/madmaze/pytesseract/blob/master/src/pytesseract.py) class.\n","slug":"Tesseract的使用","published":1,"updated":"2018-03-12T06:34:34.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xdo008pexoto7x5u9u5","content":"<h2 id=\"Running-Tesseract-with-command-line\"><a href=\"#Running-Tesseract-with-command-line\" class=\"headerlink\" title=\"Running Tesseract with command-line\"></a>Running Tesseract with command-line</h2><p>Tesseract is a command-line program, so first open a terminal or command prompt. The command is used like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile...]</span><br></pre></td></tr></table></figure></p>\n<p>So basic usage to do OCR on an image called ‘myscan.png’ and save the result to ‘out.txt’ would be:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out</span><br></pre></td></tr></table></figure></p>\n<p>Or to do the same with German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l deu</span><br></pre></td></tr></table></figure></p>\n<p>It can even be used with multiple languages traineddata at a time eg. English and German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l eng+deu</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>Tesseract also includes a hOCR mode, which produces a special HTML file with the coordinates of each word. This can be used to create a searchable pdf, using a tool such as <a href=\"https://exactcode.com/opensource/exactimage/\" target=\"_blank\" rel=\"noopener\">Hocr2PDF</a>. To use it, use the ‘hocr’ config option, like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out hocr</span><br></pre></td></tr></table></figure></p>\n<p>You can also create a searchable pdf directly from tesseract ( versions &gt;=3.03):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out pdf</span><br></pre></td></tr></table></figure></p>\n<p>More information about the various options is available in the <a href=\"https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc\" target=\"_blank\" rel=\"noopener\">Tesseract manpage</a>.</p>\n<h3 id=\"Other-Languages\"><a href=\"#Other-Languages\" class=\"headerlink\" title=\"Other Languages\"></a>Other Languages</h3><p>Tesseract has been trained for <a href=\"https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages\" target=\"_blank\" rel=\"noopener\">many languages</a>, check for your language in the <a href=\"https://github.com/tesseract-ocr/tessdata\" target=\"_blank\" rel=\"noopener\">Tessdata repository</a>.</p>\n<p>For example, if we want Tesseract support Chinese language, just put <code>chi_sim.traineddata</code> into the path <code>/usr/local/Cellar/tesseract/3.05.01/share/tessdata/</code>。</p>\n<p>It can also be trained to support other languages and scripts; for more details see <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract\" target=\"_blank\" rel=\"noopener\">TrainingTesseract</a>.</p>\n<h2 id=\"Running-Tesseract-with-Python\"><a href=\"#Running-Tesseract-with-Python\" class=\"headerlink\" title=\"Running Tesseract with Python\"></a>Running Tesseract with Python</h2><p>Python-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and “read” the text embedded in images.</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><strong> Quick start </strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytesseract</span><br><span class=\"line\"></span><br><span class=\"line\">pytesseract.pytesseract.tesseract_cmd = <span class=\"string\">'&lt;full_path_to_your_tesseract_executable&gt;'</span></span><br><span class=\"line\"><span class=\"comment\"># Include the above line, if you don't have tesseract executable in your PATH</span></span><br><span class=\"line\"><span class=\"comment\"># Example tesseract_cmd: 'C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tesseract'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Simple image to string</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.open(<span class=\"string\">'test.png'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># French text image to string</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.open(<span class=\"string\">'test-european.jpg'</span>), lang=<span class=\"string\">'fra'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get bounding box estimates</span></span><br><span class=\"line\">print(pytesseract.image_to_boxes(Image.open(<span class=\"string\">'test.png'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get verbose data including boxes, confidences, line and page numbers</span></span><br><span class=\"line\">print(pytesseract.image_to_data(Image.open(<span class=\"string\">'test.png'</span>)))</span><br></pre></td></tr></table></figure></p>\n<p>Support for OpenCV image/NumPy array objects<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'/**path_to_image**/digits.png'</span>)</span><br><span class=\"line\">print(pytesseract.image_to_string(img))</span><br><span class=\"line\"><span class=\"comment\"># OR explicit beforehand converting</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.fromarray(img))</span><br></pre></td></tr></table></figure></p>\n<p>Add the following config, if you have tessdata error like: “Error opening data file…”<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tessdata_dir_config = <span class=\"string\">'--tessdata-dir \"&lt;replace_with_your_tessdata_dir_path&gt;\"'</span></span><br><span class=\"line\"><span class=\"comment\"># Example config: '--tessdata-dir \"C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tessdata\"'</span></span><br><span class=\"line\"><span class=\"comment\"># It's important to add double quotes around the dir path.</span></span><br><span class=\"line\"></span><br><span class=\"line\">pytesseract.image_to_string(image, lang=<span class=\"string\">'chi_sim'</span>, config=tessdata_dir_config)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Functions</strong></p>\n<ul>\n<li><strong>image_to_string</strong> Returns the result of a Tesseract OCR run on the image to string</li>\n<li><strong>image_to_boxes</strong> Returns result containing recognized characters and their box boundaries</li>\n<li><strong>image_to_data</strong> Returns result containing box boundaries, confidences, and other information. Requires Tesseract 3.05+. For more information, please check the <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage#tsv-output-currently-available-in-305-dev-in-master-branch-on-github\" target=\"_blank\" rel=\"noopener\">Tesseract TSV documentation</a></li>\n</ul>\n<p><strong>Parameters</strong></p>\n<p><code>image_to_data(image, lang=None, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p>\n<ul>\n<li><strong>image</strong> Object, PIL Image/NumPy array of the image to be processed by Tesseract</li>\n<li><strong>lang</strong> String, Tesseract language code string</li>\n<li><strong>config</strong> String, Any additional configurations as a string, ex: <code>config=&#39;--psm 6&#39;</code></li>\n<li><strong>nice</strong> Integer, modifies the processor priority for the Tesseract run. Not supported on Windows. Nice adjusts the niceness of unix-like processes.</li>\n<li><strong>output_type</strong> Class attribute, specifies the type of the output, defaults to <code>string</code>. For the full list of all supported types, please check the definition of <a href=\"https://github.com/madmaze/pytesseract/blob/master/src/pytesseract.py\" target=\"_blank\" rel=\"noopener\">pytesseract.Output</a> class.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Running-Tesseract-with-command-line\"><a href=\"#Running-Tesseract-with-command-line\" class=\"headerlink\" title=\"Running Tesseract with command-line\"></a>Running Tesseract with command-line</h2><p>Tesseract is a command-line program, so first open a terminal or command prompt. The command is used like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile...]</span><br></pre></td></tr></table></figure></p>\n<p>So basic usage to do OCR on an image called ‘myscan.png’ and save the result to ‘out.txt’ would be:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out</span><br></pre></td></tr></table></figure></p>\n<p>Or to do the same with German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l deu</span><br></pre></td></tr></table></figure></p>\n<p>It can even be used with multiple languages traineddata at a time eg. English and German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l eng+deu</span><br></pre></td></tr></table></figure></p>","more":"<p>Tesseract also includes a hOCR mode, which produces a special HTML file with the coordinates of each word. This can be used to create a searchable pdf, using a tool such as <a href=\"https://exactcode.com/opensource/exactimage/\" target=\"_blank\" rel=\"noopener\">Hocr2PDF</a>. To use it, use the ‘hocr’ config option, like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out hocr</span><br></pre></td></tr></table></figure></p>\n<p>You can also create a searchable pdf directly from tesseract ( versions &gt;=3.03):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out pdf</span><br></pre></td></tr></table></figure></p>\n<p>More information about the various options is available in the <a href=\"https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc\" target=\"_blank\" rel=\"noopener\">Tesseract manpage</a>.</p>\n<h3 id=\"Other-Languages\"><a href=\"#Other-Languages\" class=\"headerlink\" title=\"Other Languages\"></a>Other Languages</h3><p>Tesseract has been trained for <a href=\"https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages\" target=\"_blank\" rel=\"noopener\">many languages</a>, check for your language in the <a href=\"https://github.com/tesseract-ocr/tessdata\" target=\"_blank\" rel=\"noopener\">Tessdata repository</a>.</p>\n<p>For example, if we want Tesseract support Chinese language, just put <code>chi_sim.traineddata</code> into the path <code>/usr/local/Cellar/tesseract/3.05.01/share/tessdata/</code>。</p>\n<p>It can also be trained to support other languages and scripts; for more details see <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract\" target=\"_blank\" rel=\"noopener\">TrainingTesseract</a>.</p>\n<h2 id=\"Running-Tesseract-with-Python\"><a href=\"#Running-Tesseract-with-Python\" class=\"headerlink\" title=\"Running Tesseract with Python\"></a>Running Tesseract with Python</h2><p>Python-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and “read” the text embedded in images.</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><strong> Quick start </strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytesseract</span><br><span class=\"line\"></span><br><span class=\"line\">pytesseract.pytesseract.tesseract_cmd = <span class=\"string\">'&lt;full_path_to_your_tesseract_executable&gt;'</span></span><br><span class=\"line\"><span class=\"comment\"># Include the above line, if you don't have tesseract executable in your PATH</span></span><br><span class=\"line\"><span class=\"comment\"># Example tesseract_cmd: 'C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tesseract'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Simple image to string</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.open(<span class=\"string\">'test.png'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># French text image to string</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.open(<span class=\"string\">'test-european.jpg'</span>), lang=<span class=\"string\">'fra'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get bounding box estimates</span></span><br><span class=\"line\">print(pytesseract.image_to_boxes(Image.open(<span class=\"string\">'test.png'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get verbose data including boxes, confidences, line and page numbers</span></span><br><span class=\"line\">print(pytesseract.image_to_data(Image.open(<span class=\"string\">'test.png'</span>)))</span><br></pre></td></tr></table></figure></p>\n<p>Support for OpenCV image/NumPy array objects<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'/**path_to_image**/digits.png'</span>)</span><br><span class=\"line\">print(pytesseract.image_to_string(img))</span><br><span class=\"line\"><span class=\"comment\"># OR explicit beforehand converting</span></span><br><span class=\"line\">print(pytesseract.image_to_string(Image.fromarray(img))</span><br></pre></td></tr></table></figure></p>\n<p>Add the following config, if you have tessdata error like: “Error opening data file…”<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tessdata_dir_config = <span class=\"string\">'--tessdata-dir \"&lt;replace_with_your_tessdata_dir_path&gt;\"'</span></span><br><span class=\"line\"><span class=\"comment\"># Example config: '--tessdata-dir \"C:\\\\Program Files (x86)\\\\Tesseract-OCR\\\\tessdata\"'</span></span><br><span class=\"line\"><span class=\"comment\"># It's important to add double quotes around the dir path.</span></span><br><span class=\"line\"></span><br><span class=\"line\">pytesseract.image_to_string(image, lang=<span class=\"string\">'chi_sim'</span>, config=tessdata_dir_config)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Functions</strong></p>\n<ul>\n<li><strong>image_to_string</strong> Returns the result of a Tesseract OCR run on the image to string</li>\n<li><strong>image_to_boxes</strong> Returns result containing recognized characters and their box boundaries</li>\n<li><strong>image_to_data</strong> Returns result containing box boundaries, confidences, and other information. Requires Tesseract 3.05+. For more information, please check the <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage#tsv-output-currently-available-in-305-dev-in-master-branch-on-github\" target=\"_blank\" rel=\"noopener\">Tesseract TSV documentation</a></li>\n</ul>\n<p><strong>Parameters</strong></p>\n<p><code>image_to_data(image, lang=None, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p>\n<ul>\n<li><strong>image</strong> Object, PIL Image/NumPy array of the image to be processed by Tesseract</li>\n<li><strong>lang</strong> String, Tesseract language code string</li>\n<li><strong>config</strong> String, Any additional configurations as a string, ex: <code>config=&#39;--psm 6&#39;</code></li>\n<li><strong>nice</strong> Integer, modifies the processor priority for the Tesseract run. Not supported on Windows. Nice adjusts the niceness of unix-like processes.</li>\n<li><strong>output_type</strong> Class attribute, specifies the type of the output, defaults to <code>string</code>. For the full list of all supported types, please check the definition of <a href=\"https://github.com/madmaze/pytesseract/blob/master/src/pytesseract.py\" target=\"_blank\" rel=\"noopener\">pytesseract.Output</a> class.</li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 12 2018 14:34:34 GMT+0800 (China Standard Time)","title":"Tesseract的使用","path":"2018/03/12/Tesseract的使用/","eyeCatchImage":null,"excerpt":"<h2 id=\"Running-Tesseract-with-command-line\"><a href=\"#Running-Tesseract-with-command-line\" class=\"headerlink\" title=\"Running Tesseract with command-line\"></a>Running Tesseract with command-line</h2><p>Tesseract is a command-line program, so first open a terminal or command prompt. The command is used like this:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile...]</span><br></pre></td></tr></table></figure></p>\n<p>So basic usage to do OCR on an image called ‘myscan.png’ and save the result to ‘out.txt’ would be:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out</span><br></pre></td></tr></table></figure></p>\n<p>Or to do the same with German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l deu</span><br></pre></td></tr></table></figure></p>\n<p>It can even be used with multiple languages traineddata at a time eg. English and German:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract myscan.png out -l eng+deu</span><br></pre></td></tr></table></figure></p>","date":"2018-03-12T04:35:36.000Z","pv":0,"totalPV":0,"categories":"Tesseract","tags":["Tesseract"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"URL、URI和URN三者之间的区别","date":"2018-09-25T06:37:38.000Z","_content":"URL -- Uniform Resource Locator，统一资源定位符。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n\nURN -- Uniform Resource Name，统一资源命名。即通过名字来表示资源的。\n\nURI -- Uniform Resource Identifier，即统一资源标志符，用来唯一的标识一个资源。\n\nURL和URN都是URI的子集。\n\n一个用于理解这三者的例子。\n\n关于URL：\n\n> URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。\n\n关于URN：\n\n> URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下`讨论`资源。\n\n-----------\n\n<!-- more -->\n下面展示一个例子，非常简单清楚地告诉你在互联网中URI 、URL和URN之间的不同。\n\n\n这是一个`URI`:\n```bash\nhttp://bitpoetry.io/posts/hello.html#intro\n```\n其中：\n\n- `http://`:是定义如何访问资源的**方式**。\n\n- `bitpoetry.io/posts/hello.html`是资源存放的**位置**。\n\n- `#intro`是资源。\n\n\nURL是URI的一个子集，告诉我们访问网络位置的方式。在我们的例子中，`URL`应该如下所示：\n```bash\nhttp://bitpoetry.io/posts/hello.html\n```\n\n\n`URN`是URI的子集，包括名字（给定的命名空间内），但是不包括访问方式，如下所示：\n\n```bash\nbitpoetry.io/posts/hello.html#intro\n```\n\n\n至少要记住一件事：URI可以被分为URL、URN或两者的组合。如果你一直使用URI这个术语，绝对不会出错错。\n\n\n\n\n\n\n\n\n\n----------\n","source":"_posts/URL、URI和URN三者之间的区别.md","raw":"---\ntitle: URL、URI和URN三者之间的区别\ndate: 2018-09-25 14:37:38\ntags:\n  - 网络\ncategories:\n  - 网络\n---\nURL -- Uniform Resource Locator，统一资源定位符。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n\nURN -- Uniform Resource Name，统一资源命名。即通过名字来表示资源的。\n\nURI -- Uniform Resource Identifier，即统一资源标志符，用来唯一的标识一个资源。\n\nURL和URN都是URI的子集。\n\n一个用于理解这三者的例子。\n\n关于URL：\n\n> URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。\n\n关于URN：\n\n> URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下`讨论`资源。\n\n-----------\n\n<!-- more -->\n下面展示一个例子，非常简单清楚地告诉你在互联网中URI 、URL和URN之间的不同。\n\n\n这是一个`URI`:\n```bash\nhttp://bitpoetry.io/posts/hello.html#intro\n```\n其中：\n\n- `http://`:是定义如何访问资源的**方式**。\n\n- `bitpoetry.io/posts/hello.html`是资源存放的**位置**。\n\n- `#intro`是资源。\n\n\nURL是URI的一个子集，告诉我们访问网络位置的方式。在我们的例子中，`URL`应该如下所示：\n```bash\nhttp://bitpoetry.io/posts/hello.html\n```\n\n\n`URN`是URI的子集，包括名字（给定的命名空间内），但是不包括访问方式，如下所示：\n\n```bash\nbitpoetry.io/posts/hello.html#intro\n```\n\n\n至少要记住一件事：URI可以被分为URL、URN或两者的组合。如果你一直使用URI这个术语，绝对不会出错错。\n\n\n\n\n\n\n\n\n\n----------\n","slug":"URL、URI和URN三者之间的区别","published":1,"updated":"2018-09-25T12:14:14.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xea008sexot7ng7zoh0","content":"<p>URL – Uniform Resource Locator，统一资源定位符。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>\n<p>URN – Uniform Resource Name，统一资源命名。即通过名字来表示资源的。</p>\n<p>URI – Uniform Resource Identifier，即统一资源标志符，用来唯一的标识一个资源。</p>\n<p>URL和URN都是URI的子集。</p>\n<p>一个用于理解这三者的例子。</p>\n<p>关于URL：</p>\n<blockquote>\n<p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。</p>\n</blockquote>\n<p>关于URN：</p>\n<blockquote>\n<p>URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下<code>讨论</code>资源。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>下面展示一个例子，非常简单清楚地告诉你在互联网中URI 、URL和URN之间的不同。</p>\n<p>这是一个<code>URI</code>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://bitpoetry.io/posts/hello.html<span class=\"comment\">#intro</span></span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li><p><code>http://</code>:是定义如何访问资源的<strong>方式</strong>。</p>\n</li>\n<li><p><code>bitpoetry.io/posts/hello.html</code>是资源存放的<strong>位置</strong>。</p>\n</li>\n<li><p><code>#intro</code>是资源。</p>\n</li>\n</ul>\n<p>URL是URI的一个子集，告诉我们访问网络位置的方式。在我们的例子中，<code>URL</code>应该如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://bitpoetry.io/posts/hello.html</span><br></pre></td></tr></table></figure></p>\n<p><code>URN</code>是URI的子集，包括名字（给定的命名空间内），但是不包括访问方式，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitpoetry.io/posts/hello.html<span class=\"comment\">#intro</span></span><br></pre></td></tr></table></figure>\n<p>至少要记住一件事：URI可以被分为URL、URN或两者的组合。如果你一直使用URI这个术语，绝对不会出错错。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>URL – Uniform Resource Locator，统一资源定位符。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>\n<p>URN – Uniform Resource Name，统一资源命名。即通过名字来表示资源的。</p>\n<p>URI – Uniform Resource Identifier，即统一资源标志符，用来唯一的标识一个资源。</p>\n<p>URL和URN都是URI的子集。</p>\n<p>一个用于理解这三者的例子。</p>\n<p>关于URL：</p>\n<blockquote>\n<p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。</p>\n</blockquote>\n<p>关于URN：</p>\n<blockquote>\n<p>URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下<code>讨论</code>资源。</p>\n</blockquote>\n<hr>","more":"<p>下面展示一个例子，非常简单清楚地告诉你在互联网中URI 、URL和URN之间的不同。</p>\n<p>这是一个<code>URI</code>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://bitpoetry.io/posts/hello.html<span class=\"comment\">#intro</span></span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li><p><code>http://</code>:是定义如何访问资源的<strong>方式</strong>。</p>\n</li>\n<li><p><code>bitpoetry.io/posts/hello.html</code>是资源存放的<strong>位置</strong>。</p>\n</li>\n<li><p><code>#intro</code>是资源。</p>\n</li>\n</ul>\n<p>URL是URI的一个子集，告诉我们访问网络位置的方式。在我们的例子中，<code>URL</code>应该如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://bitpoetry.io/posts/hello.html</span><br></pre></td></tr></table></figure></p>\n<p><code>URN</code>是URI的子集，包括名字（给定的命名空间内），但是不包括访问方式，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitpoetry.io/posts/hello.html<span class=\"comment\">#intro</span></span><br></pre></td></tr></table></figure>\n<p>至少要记住一件事：URI可以被分为URL、URN或两者的组合。如果你一直使用URI这个术语，绝对不会出错错。</p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 25 2018 20:14:14 GMT+0800 (China Standard Time)","title":"URL、URI和URN三者之间的区别","path":"2018/09/25/URL、URI和URN三者之间的区别/","eyeCatchImage":null,"excerpt":"<p>URL – Uniform Resource Locator，统一资源定位符。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>\n<p>URN – Uniform Resource Name，统一资源命名。即通过名字来表示资源的。</p>\n<p>URI – Uniform Resource Identifier，即统一资源标志符，用来唯一的标识一个资源。</p>\n<p>URL和URN都是URI的子集。</p>\n<p>一个用于理解这三者的例子。</p>\n<p>关于URL：</p>\n<blockquote>\n<p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。</p>\n</blockquote>\n<p>关于URN：</p>\n<blockquote>\n<p>URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下<code>讨论</code>资源。</p>\n</blockquote>\n<hr>","date":"2018-09-25T06:37:38.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"What is the difference between “ is None ” and “ ==None ” --- Reprint","date":"2018-03-28T19:08:51.000Z","_content":"## Answer 1\nThe answer is explained [here](http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html).\n\nTo quote:\n\n> A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).\n\nPractically-speaking, there is not much difference since custom comparison operators are rare. But you should use `is None` as a general rule.\n\n`is None` is a bit (~50%) faster than `== None` :) – [Nas Banov](https://stackoverflow.com/users/226086/nas-banov)\n\n<!-- more -->\n## Answer 2\n`is` always returns `True` if it compares the same object instance\n\nWhereas `==` is ultimately determined by the `__eq__()` method\n\ni.e.\n\n```python\nclass Foo:\n    def __eq__(self,other):\n        return True\nfoo=Foo()\n\nprint(foo==None)\n# True\n\nprint(foo is None)\n# False\n```\n\n## Answer 3\nIn this case, they are the same. `None` is a singleton object (there only ever exists one `None`).\n\n`is` checks to see if the object is the same object, while == just checks if they are equivalent.\n\nFor example:\n```Python\np = [1]\nq = [1]\np is q # False because they are not the same actual object\np == q # True because they are equivalent\n\n```\nBut since there is only one `None`, they will always be the same, and `is` will return True.\n\n```Python\np = None\nq = None\np is q # True because they are both pointing to the same \"None\"\n```\n\n## Answer 4\n`(ob1 is ob2)` equal to `(id(ob1) == id(ob2))`\n\n... but (ob is ob2) is a LOT faster. Timeit says \"(a is b)\" is 0.0365 usec per loop and \"(id(a)==id(b))\" is 0.153 usec per loop. 4.2x faster! – [AKX](https://stackoverflow.com/users/51685/akx)\n\n`{} is {}` is false and `id({}) == id({})` can be (and **is** in CPython) true.\n\n\n## Reference\n\n1. [What is the difference between “ is None ” and “ ==None ”](https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none)\n2. [Is there any difference between “foo is None” and “foo == None”?](https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none)\n","source":"_posts/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint.md","raw":"---\ntitle: What is the difference between “ is None ” and “ ==None ” --- Reprint\ndate: 2018-03-29 03:08:51\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n## Answer 1\nThe answer is explained [here](http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html).\n\nTo quote:\n\n> A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).\n\nPractically-speaking, there is not much difference since custom comparison operators are rare. But you should use `is None` as a general rule.\n\n`is None` is a bit (~50%) faster than `== None` :) – [Nas Banov](https://stackoverflow.com/users/226086/nas-banov)\n\n<!-- more -->\n## Answer 2\n`is` always returns `True` if it compares the same object instance\n\nWhereas `==` is ultimately determined by the `__eq__()` method\n\ni.e.\n\n```python\nclass Foo:\n    def __eq__(self,other):\n        return True\nfoo=Foo()\n\nprint(foo==None)\n# True\n\nprint(foo is None)\n# False\n```\n\n## Answer 3\nIn this case, they are the same. `None` is a singleton object (there only ever exists one `None`).\n\n`is` checks to see if the object is the same object, while == just checks if they are equivalent.\n\nFor example:\n```Python\np = [1]\nq = [1]\np is q # False because they are not the same actual object\np == q # True because they are equivalent\n\n```\nBut since there is only one `None`, they will always be the same, and `is` will return True.\n\n```Python\np = None\nq = None\np is q # True because they are both pointing to the same \"None\"\n```\n\n## Answer 4\n`(ob1 is ob2)` equal to `(id(ob1) == id(ob2))`\n\n... but (ob is ob2) is a LOT faster. Timeit says \"(a is b)\" is 0.0365 usec per loop and \"(id(a)==id(b))\" is 0.153 usec per loop. 4.2x faster! – [AKX](https://stackoverflow.com/users/51685/akx)\n\n`{} is {}` is false and `id({}) == id({})` can be (and **is** in CPython) true.\n\n\n## Reference\n\n1. [What is the difference between “ is None ” and “ ==None ”](https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none)\n2. [Is there any difference between “foo is None” and “foo == None”?](https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none)\n","slug":"What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint","published":1,"updated":"2018-03-28T19:23:18.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xec008xexotujesg1iq","content":"<h2 id=\"Answer-1\"><a href=\"#Answer-1\" class=\"headerlink\" title=\"Answer 1\"></a>Answer 1</h2><p>The answer is explained <a href=\"http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>To quote:</p>\n<blockquote>\n<p>A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).</p>\n</blockquote>\n<p>Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use <code>is None</code> as a general rule.</p>\n<p><code>is None</code> is a bit (~50%) faster than <code>== None</code> :) – <a href=\"https://stackoverflow.com/users/226086/nas-banov\" target=\"_blank\" rel=\"noopener\">Nas Banov</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Answer-2\"><a href=\"#Answer-2\" class=\"headerlink\" title=\"Answer 2\"></a>Answer 2</h2><p><code>is</code> always returns <code>True</code> if it compares the same object instance</p>\n<p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p>\n<p>i.e.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self,other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">foo=Foo()</span><br><span class=\"line\"></span><br><span class=\"line\">print(foo==<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(foo <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer-3\"><a href=\"#Answer-3\" class=\"headerlink\" title=\"Answer 3\"></a>Answer 3</h2><p>In this case, they are the same. <code>None</code> is a singleton object (there only ever exists one <code>None</code>).</p>\n<p><code>is</code> checks to see if the object is the same object, while == just checks if they are equivalent.</p>\n<p>For example:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = [<span class=\"number\">1</span>]</span><br><span class=\"line\">q = [<span class=\"number\">1</span>]</span><br><span class=\"line\">p <span class=\"keyword\">is</span> q <span class=\"comment\"># False because they are not the same actual object</span></span><br><span class=\"line\">p == q <span class=\"comment\"># True because they are equivalent</span></span><br></pre></td></tr></table></figure></p>\n<p>But since there is only one <code>None</code>, they will always be the same, and <code>is</code> will return True.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"keyword\">None</span></span><br><span class=\"line\">q = <span class=\"keyword\">None</span></span><br><span class=\"line\">p <span class=\"keyword\">is</span> q <span class=\"comment\"># True because they are both pointing to the same \"None\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer-4\"><a href=\"#Answer-4\" class=\"headerlink\" title=\"Answer 4\"></a>Answer 4</h2><p><code>(ob1 is ob2)</code> equal to <code>(id(ob1) == id(ob2))</code></p>\n<p>… but (ob is ob2) is a LOT faster. Timeit says “(a is b)” is 0.0365 usec per loop and “(id(a)==id(b))” is 0.153 usec per loop. 4.2x faster! – <a href=\"https://stackoverflow.com/users/51685/akx\" target=\"_blank\" rel=\"noopener\">AKX</a></p>\n<p><code>{} is {}</code> is false and <code>id({}) == id({})</code> can be (and <strong>is</strong> in CPython) true.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none\" target=\"_blank\" rel=\"noopener\">What is the difference between “ is None ” and “ ==None ”</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\" target=\"_blank\" rel=\"noopener\">Is there any difference between “foo is None” and “foo == None”?</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Answer-1\"><a href=\"#Answer-1\" class=\"headerlink\" title=\"Answer 1\"></a>Answer 1</h2><p>The answer is explained <a href=\"http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>To quote:</p>\n<blockquote>\n<p>A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).</p>\n</blockquote>\n<p>Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use <code>is None</code> as a general rule.</p>\n<p><code>is None</code> is a bit (~50%) faster than <code>== None</code> :) – <a href=\"https://stackoverflow.com/users/226086/nas-banov\" target=\"_blank\" rel=\"noopener\">Nas Banov</a></p>","more":"<h2 id=\"Answer-2\"><a href=\"#Answer-2\" class=\"headerlink\" title=\"Answer 2\"></a>Answer 2</h2><p><code>is</code> always returns <code>True</code> if it compares the same object instance</p>\n<p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p>\n<p>i.e.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self,other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">foo=Foo()</span><br><span class=\"line\"></span><br><span class=\"line\">print(foo==<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(foo <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer-3\"><a href=\"#Answer-3\" class=\"headerlink\" title=\"Answer 3\"></a>Answer 3</h2><p>In this case, they are the same. <code>None</code> is a singleton object (there only ever exists one <code>None</code>).</p>\n<p><code>is</code> checks to see if the object is the same object, while == just checks if they are equivalent.</p>\n<p>For example:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = [<span class=\"number\">1</span>]</span><br><span class=\"line\">q = [<span class=\"number\">1</span>]</span><br><span class=\"line\">p <span class=\"keyword\">is</span> q <span class=\"comment\"># False because they are not the same actual object</span></span><br><span class=\"line\">p == q <span class=\"comment\"># True because they are equivalent</span></span><br></pre></td></tr></table></figure></p>\n<p>But since there is only one <code>None</code>, they will always be the same, and <code>is</code> will return True.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"keyword\">None</span></span><br><span class=\"line\">q = <span class=\"keyword\">None</span></span><br><span class=\"line\">p <span class=\"keyword\">is</span> q <span class=\"comment\"># True because they are both pointing to the same \"None\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer-4\"><a href=\"#Answer-4\" class=\"headerlink\" title=\"Answer 4\"></a>Answer 4</h2><p><code>(ob1 is ob2)</code> equal to <code>(id(ob1) == id(ob2))</code></p>\n<p>… but (ob is ob2) is a LOT faster. Timeit says “(a is b)” is 0.0365 usec per loop and “(id(a)==id(b))” is 0.153 usec per loop. 4.2x faster! – <a href=\"https://stackoverflow.com/users/51685/akx\" target=\"_blank\" rel=\"noopener\">AKX</a></p>\n<p><code>{} is {}</code> is false and <code>id({}) == id({})</code> can be (and <strong>is</strong> in CPython) true.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none\" target=\"_blank\" rel=\"noopener\">What is the difference between “ is None ” and “ ==None ”</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\" target=\"_blank\" rel=\"noopener\">Is there any difference between “foo is None” and “foo == None”?</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 29 2018 03:23:18 GMT+0800 (China Standard Time)","title":"What is the difference between “ is None ” and “ ==None ” --- Reprint","path":"2018/03/29/What-is-the-difference-between-“-is-None-”-and-“-None-”-Reprint/","eyeCatchImage":null,"excerpt":"<h2 id=\"Answer-1\"><a href=\"#Answer-1\" class=\"headerlink\" title=\"Answer 1\"></a>Answer 1</h2><p>The answer is explained <a href=\"http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>To quote:</p>\n<blockquote>\n<p>A class is free to implement comparison any way it chooses, and it can choose to make comparison against None mean something (which actually makes sense; if someone told you to implement the None object from scratch, how else would you get it to compare True against itself?).</p>\n</blockquote>\n<p>Practically-speaking, there is not much difference since custom comparison operators are rare. But you should use <code>is None</code> as a general rule.</p>\n<p><code>is None</code> is a bit (~50%) faster than <code>== None</code> :) – <a href=\"https://stackoverflow.com/users/226086/nas-banov\" target=\"_blank\" rel=\"noopener\">Nas Banov</a></p>","date":"2018-03-28T19:08:51.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n非常好的一篇markdown参考手册\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n非常好的一篇markdown参考手册\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-25T18:47:57.250Z","updated":"2018-02-27T06:43:43.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xer0090exot19e338hf","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>非常好的一篇markdown参考手册</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>非常好的一篇markdown参考手册</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Feb 27 2018 14:43:43 GMT+0800 (China Standard Time)","title":"Hello World","path":"2018/02/26/hello-world/","eyeCatchImage":null,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>非常好的一篇markdown参考手册</p>","date":"2018-02-25T18:47:57.250Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"if __name__ == '__main__': ?","date":"2018-03-01T11:50:06.000Z","_content":">Every Python module has it's `__name__` defined and if this is `'__main__'`, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.\n\n当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把`__name__`变量设置成`\"__main__\"`.如果只是引入其他的模块,`__name__`变量将会设置成模块的名字.\n<!-- more -->\n\n这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.\n\n直接上一个栗子：\n```python\n# Filename: using_name.py\n\nprint(__name__)\nif __name__ == '__main__':\n\tprint('This program is being run by itself')\nelse:\n\tprint('I am being imported from another module')\n\n```\n\n```Python\n\n$ python using_name.py\n__main__\nThis program is being run by itself\n\n$ python\n>>> import using_name\nusing_name\nI am being imported from another module\n>>>\n\n```\n","source":"_posts/if-name-main.md","raw":"---\ntitle: 'if __name__ == ''__main__'': ?'\ndate: 2018-03-01 19:50:06\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n>Every Python module has it's `__name__` defined and if this is `'__main__'`, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.\n\n当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把`__name__`变量设置成`\"__main__\"`.如果只是引入其他的模块,`__name__`变量将会设置成模块的名字.\n<!-- more -->\n\n这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.\n\n直接上一个栗子：\n```python\n# Filename: using_name.py\n\nprint(__name__)\nif __name__ == '__main__':\n\tprint('This program is being run by itself')\nelse:\n\tprint('I am being imported from another module')\n\n```\n\n```Python\n\n$ python using_name.py\n__main__\nThis program is being run by itself\n\n$ python\n>>> import using_name\nusing_name\nI am being imported from another module\n>>>\n\n```\n","slug":"if-name-main","published":1,"updated":"2018-03-01T12:13:18.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xey0095exotznd3hzfq","content":"<blockquote>\n<p>Every Python module has it’s <code>__name__</code> defined and if this is <code>&#39;__main__&#39;</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</p>\n</blockquote>\n<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<code>__name__</code>变量设置成<code>&quot;__main__&quot;</code>.如果只是引入其他的模块,<code>__name__</code>变量将会设置成模块的名字.<br><a id=\"more\"></a></p>\n<p>这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.</p>\n<p>直接上一个栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filename: using_name.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(__name__)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'This program is being run by itself'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ python using_name.py</span><br><span class=\"line\">__main__</span><br><span class=\"line\">This program <span class=\"keyword\">is</span> being run by itself</span><br><span class=\"line\"></span><br><span class=\"line\">$ python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> using_name</span><br><span class=\"line\">using_name</span><br><span class=\"line\">I am being imported <span class=\"keyword\">from</span> another module</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Every Python module has it’s <code>__name__</code> defined and if this is <code>&#39;__main__&#39;</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</p>\n</blockquote>\n<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<code>__name__</code>变量设置成<code>&quot;__main__&quot;</code>.如果只是引入其他的模块,<code>__name__</code>变量将会设置成模块的名字.<br>","more":"</p>\n<p>这么做的原因是有时你想让你的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.</p>\n<p>直接上一个栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filename: using_name.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(__name__)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'This program is being run by itself'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ python using_name.py</span><br><span class=\"line\">__main__</span><br><span class=\"line\">This program <span class=\"keyword\">is</span> being run by itself</span><br><span class=\"line\"></span><br><span class=\"line\">$ python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> using_name</span><br><span class=\"line\">using_name</span><br><span class=\"line\">I am being imported <span class=\"keyword\">from</span> another module</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 01 2018 20:13:18 GMT+0800 (China Standard Time)","title":"if __name__ == '__main__': ?","path":"2018/03/01/if-name-main/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>Every Python module has it’s <code>__name__</code> defined and if this is <code>&#39;__main__&#39;</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</p>\n</blockquote>\n<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<code>__name__</code>变量设置成<code>&quot;__main__&quot;</code>.如果只是引入其他的模块,<code>__name__</code>变量将会设置成模块的名字.<br>","date":"2018-03-01T11:50:06.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"java平台结构","date":"2018-09-04T02:09:58.000Z","_content":"\n![java平台结构](https://upload-images.jianshu.io/upload_images/2952111-f55b3fb6121e758c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/java平台结构.md","raw":"---\ntitle: java平台结构\ndate: 2018-09-04 10:09:58\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n![java平台结构](https://upload-images.jianshu.io/upload_images/2952111-f55b3fb6121e758c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"java平台结构","published":1,"updated":"2018-09-04T02:29:52.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xf60098exot3g8douyq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-f55b3fb6121e758c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"java平台结构\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-f55b3fb6121e758c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"java平台结构\"></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 04 2018 10:29:52 GMT+0800 (China Standard Time)","title":"java平台结构","path":"2018/09/04/java平台结构/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-04T02:09:58.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"java入门小知识","date":"2018-09-02T15:38:12.000Z","_content":"\n1. 关键字`public`称为`访问修饰符(access modifier)`,这些修饰符用于控制程序的其他部分对这段代码的访问级别。\n2. Java的命名规范为`大驼峰`命名。\n3. 源代码的文件名必须与公共类的名字相同，并用`.java`作为扩展名。\n4. 根据Java语言规范，`main方法必须声明为public`,java的main方法必须有一个外壳类。\n5. 在一个源文件中,只能有一个公有类，但可以有任意数目的非公有类。\n6. 构造器与类同名，在构造类对象时，构造器会运行，以便将实例域初始化为所需要的状态。构造器与一般的对象方法不同，构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。\n  - 构造器与类同名\n  - 每个类可以有一个以上的构造器\n  - 构造器可以有0个或多个参数\n  - 构造器没有返回值\n  - 构造器总是伴随着new使用\n\n<!-- more -->\n\n7. main方法不对任何对象进行操作。事实上，在启动程序时还没有任何一个对象。静态的main方法将执行并创建程序所需的对象。\n8. 如果在构造器中没有显式的给域赋初始值，那么就会被自动地赋为默认值：`数值为0，布尔值为false，对象引用为null`。然而，只有缺少程序设计经验的人才会这样做。\n9. 对于`访问修饰符public和private`，标记为public的部分可以被任意的类使用，标记为private的部分只能被定义它们的类使用。如果没有指定public或者private，那么这个部分(类、方法、变量)可以被同一个包中的所有方法访问。\n10. final修饰引用类型变量，表示该变量的引用的地址不能变，引用地址里的内容可以修改。\n11. `单例设计模式`：保证在整个应用中某一个类有且仅有一个实例（`一个类在堆内存只存在一个对象`），即所以指向该类型实例的引用都指向同一个内存空间。\n","source":"_posts/java入门小知识.md","raw":"---\ntitle: java入门小知识\ndate: 2018-09-02 23:38:12\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n1. 关键字`public`称为`访问修饰符(access modifier)`,这些修饰符用于控制程序的其他部分对这段代码的访问级别。\n2. Java的命名规范为`大驼峰`命名。\n3. 源代码的文件名必须与公共类的名字相同，并用`.java`作为扩展名。\n4. 根据Java语言规范，`main方法必须声明为public`,java的main方法必须有一个外壳类。\n5. 在一个源文件中,只能有一个公有类，但可以有任意数目的非公有类。\n6. 构造器与类同名，在构造类对象时，构造器会运行，以便将实例域初始化为所需要的状态。构造器与一般的对象方法不同，构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。\n  - 构造器与类同名\n  - 每个类可以有一个以上的构造器\n  - 构造器可以有0个或多个参数\n  - 构造器没有返回值\n  - 构造器总是伴随着new使用\n\n<!-- more -->\n\n7. main方法不对任何对象进行操作。事实上，在启动程序时还没有任何一个对象。静态的main方法将执行并创建程序所需的对象。\n8. 如果在构造器中没有显式的给域赋初始值，那么就会被自动地赋为默认值：`数值为0，布尔值为false，对象引用为null`。然而，只有缺少程序设计经验的人才会这样做。\n9. 对于`访问修饰符public和private`，标记为public的部分可以被任意的类使用，标记为private的部分只能被定义它们的类使用。如果没有指定public或者private，那么这个部分(类、方法、变量)可以被同一个包中的所有方法访问。\n10. final修饰引用类型变量，表示该变量的引用的地址不能变，引用地址里的内容可以修改。\n11. `单例设计模式`：保证在整个应用中某一个类有且仅有一个实例（`一个类在堆内存只存在一个对象`），即所以指向该类型实例的引用都指向同一个内存空间。\n","slug":"java入门小知识","published":1,"updated":"2018-10-30T03:30:27.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xf9009dexothynl24qg","content":"<ol>\n<li>关键字<code>public</code>称为<code>访问修饰符(access modifier)</code>,这些修饰符用于控制程序的其他部分对这段代码的访问级别。</li>\n<li>Java的命名规范为<code>大驼峰</code>命名。</li>\n<li>源代码的文件名必须与公共类的名字相同，并用<code>.java</code>作为扩展名。</li>\n<li>根据Java语言规范，<code>main方法必须声明为public</code>,java的main方法必须有一个外壳类。</li>\n<li>在一个源文件中,只能有一个公有类，但可以有任意数目的非公有类。</li>\n<li>构造器与类同名，在构造类对象时，构造器会运行，以便将实例域初始化为所需要的状态。构造器与一般的对象方法不同，构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。<ul>\n<li>构造器与类同名</li>\n<li>每个类可以有一个以上的构造器</li>\n<li>构造器可以有0个或多个参数</li>\n<li>构造器没有返回值</li>\n<li>构造器总是伴随着new使用</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>main方法不对任何对象进行操作。事实上，在启动程序时还没有任何一个对象。静态的main方法将执行并创建程序所需的对象。</li>\n<li>如果在构造器中没有显式的给域赋初始值，那么就会被自动地赋为默认值：<code>数值为0，布尔值为false，对象引用为null</code>。然而，只有缺少程序设计经验的人才会这样做。</li>\n<li>对于<code>访问修饰符public和private</code>，标记为public的部分可以被任意的类使用，标记为private的部分只能被定义它们的类使用。如果没有指定public或者private，那么这个部分(类、方法、变量)可以被同一个包中的所有方法访问。</li>\n<li>final修饰引用类型变量，表示该变量的引用的地址不能变，引用地址里的内容可以修改。</li>\n<li><code>单例设计模式</code>：保证在整个应用中某一个类有且仅有一个实例（<code>一个类在堆内存只存在一个对象</code>），即所以指向该类型实例的引用都指向同一个内存空间。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>关键字<code>public</code>称为<code>访问修饰符(access modifier)</code>,这些修饰符用于控制程序的其他部分对这段代码的访问级别。</li>\n<li>Java的命名规范为<code>大驼峰</code>命名。</li>\n<li>源代码的文件名必须与公共类的名字相同，并用<code>.java</code>作为扩展名。</li>\n<li>根据Java语言规范，<code>main方法必须声明为public</code>,java的main方法必须有一个外壳类。</li>\n<li>在一个源文件中,只能有一个公有类，但可以有任意数目的非公有类。</li>\n<li>构造器与类同名，在构造类对象时，构造器会运行，以便将实例域初始化为所需要的状态。构造器与一般的对象方法不同，构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。<ul>\n<li>构造器与类同名</li>\n<li>每个类可以有一个以上的构造器</li>\n<li>构造器可以有0个或多个参数</li>\n<li>构造器没有返回值</li>\n<li>构造器总是伴随着new使用</li>\n</ul>\n</li>\n</ol>","more":"<ol>\n<li>main方法不对任何对象进行操作。事实上，在启动程序时还没有任何一个对象。静态的main方法将执行并创建程序所需的对象。</li>\n<li>如果在构造器中没有显式的给域赋初始值，那么就会被自动地赋为默认值：<code>数值为0，布尔值为false，对象引用为null</code>。然而，只有缺少程序设计经验的人才会这样做。</li>\n<li>对于<code>访问修饰符public和private</code>，标记为public的部分可以被任意的类使用，标记为private的部分只能被定义它们的类使用。如果没有指定public或者private，那么这个部分(类、方法、变量)可以被同一个包中的所有方法访问。</li>\n<li>final修饰引用类型变量，表示该变量的引用的地址不能变，引用地址里的内容可以修改。</li>\n<li><code>单例设计模式</code>：保证在整个应用中某一个类有且仅有一个实例（<code>一个类在堆内存只存在一个对象</code>），即所以指向该类型实例的引用都指向同一个内存空间。</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Oct 30 2018 11:30:27 GMT+0800 (China Standard Time)","title":"java入门小知识","path":"2018/09/02/java入门小知识/","eyeCatchImage":null,"excerpt":"<ol>\n<li>关键字<code>public</code>称为<code>访问修饰符(access modifier)</code>,这些修饰符用于控制程序的其他部分对这段代码的访问级别。</li>\n<li>Java的命名规范为<code>大驼峰</code>命名。</li>\n<li>源代码的文件名必须与公共类的名字相同，并用<code>.java</code>作为扩展名。</li>\n<li>根据Java语言规范，<code>main方法必须声明为public</code>,java的main方法必须有一个外壳类。</li>\n<li>在一个源文件中,只能有一个公有类，但可以有任意数目的非公有类。</li>\n<li>构造器与类同名，在构造类对象时，构造器会运行，以便将实例域初始化为所需要的状态。构造器与一般的对象方法不同，构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。<ul>\n<li>构造器与类同名</li>\n<li>每个类可以有一个以上的构造器</li>\n<li>构造器可以有0个或多个参数</li>\n<li>构造器没有返回值</li>\n<li>构造器总是伴随着new使用</li>\n</ul>\n</li>\n</ol>","date":"2018-09-02T15:38:12.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"maven约定目录配置","date":"2018-09-19T05:36:26.000Z","_content":"Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。\n\n| 目录                               | 目的                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| ${basedir}                         | 存放pom.xml和所有的子目录                                    |\n| ${basedir}/src/main/java           | 项目的java源代码                                             |\n| ${basedir}/src/main/resources      | 项目的资源，比如说property文件，springmvc.xml                |\n| ${basedir}/src/test/java           | 项目的测试类，比如说Junit代码                                |\n| ${basedir}/src/test/resources      | 测试用用的资源                                               |\n| ${basedir}/src/main/webapp/WEB-INF | web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面 |\n| ${basedir}/target                  | 打包输出目录                                                 |\n| ${basedir}/target/classes          | 编译输出目录                                                 |\n| ${basedir}/target/test-classes     | 测试编译输出目录                                             |\n| Test.java                          | Maven只会自动运行符合该命名规则的测试类                      |\n| ~/.m2/repository                   | Maven默认的本地仓库目录位置                                  |\n","source":"_posts/maven约定目录配置.md","raw":"---\ntitle: maven约定目录配置\ndate: 2018-09-19 13:36:26\ntags:\n  - Java\ncategories:\n  - Java\n---\nMaven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。\n\n| 目录                               | 目的                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| ${basedir}                         | 存放pom.xml和所有的子目录                                    |\n| ${basedir}/src/main/java           | 项目的java源代码                                             |\n| ${basedir}/src/main/resources      | 项目的资源，比如说property文件，springmvc.xml                |\n| ${basedir}/src/test/java           | 项目的测试类，比如说Junit代码                                |\n| ${basedir}/src/test/resources      | 测试用用的资源                                               |\n| ${basedir}/src/main/webapp/WEB-INF | web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面 |\n| ${basedir}/target                  | 打包输出目录                                                 |\n| ${basedir}/target/classes          | 编译输出目录                                                 |\n| ${basedir}/target/test-classes     | 测试编译输出目录                                             |\n| Test.java                          | Maven只会自动运行符合该命名规则的测试类                      |\n| ~/.m2/repository                   | Maven默认的本地仓库目录位置                                  |\n","slug":"maven约定目录配置","published":1,"updated":"2018-09-22T08:15:16.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xfb009gexotjhskd2f6","content":"<p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${basedir}</td>\n<td>存放pom.xml和所有的子目录</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/java</td>\n<td>项目的java源代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/resources</td>\n<td>项目的资源，比如说property文件，springmvc.xml</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/java</td>\n<td>项目的测试类，比如说Junit代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/resources</td>\n<td>测试用用的资源</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/webapp/WEB-INF</td>\n<td>web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</td>\n</tr>\n<tr>\n<td>${basedir}/target</td>\n<td>打包输出目录</td>\n</tr>\n<tr>\n<td>${basedir}/target/classes</td>\n<td>编译输出目录</td>\n</tr>\n<tr>\n<td>${basedir}/target/test-classes</td>\n<td>测试编译输出目录</td>\n</tr>\n<tr>\n<td>Test.java</td>\n<td>Maven只会自动运行符合该命名规则的测试类</td>\n</tr>\n<tr>\n<td>~/.m2/repository</td>\n<td>Maven默认的本地仓库目录位置</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${basedir}</td>\n<td>存放pom.xml和所有的子目录</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/java</td>\n<td>项目的java源代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/resources</td>\n<td>项目的资源，比如说property文件，springmvc.xml</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/java</td>\n<td>项目的测试类，比如说Junit代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/resources</td>\n<td>测试用用的资源</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/webapp/WEB-INF</td>\n<td>web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</td>\n</tr>\n<tr>\n<td>${basedir}/target</td>\n<td>打包输出目录</td>\n</tr>\n<tr>\n<td>${basedir}/target/classes</td>\n<td>编译输出目录</td>\n</tr>\n<tr>\n<td>${basedir}/target/test-classes</td>\n<td>测试编译输出目录</td>\n</tr>\n<tr>\n<td>Test.java</td>\n<td>Maven只会自动运行符合该命名规则的测试类</td>\n</tr>\n<tr>\n<td>~/.m2/repository</td>\n<td>Maven默认的本地仓库目录位置</td>\n</tr>\n</tbody>\n</table>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Sep 22 2018 16:15:16 GMT+0800 (China Standard Time)","title":"maven约定目录配置","path":"2018/09/19/maven约定目录配置/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-19T05:36:26.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"python3 产生随机字符串","date":"2018-04-19T08:26:53.000Z","_content":"\n```python\nimport random\nimport string\n\n\n# 长度为16的随机字符串\nrand_str = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(16))\n\n```\n","source":"_posts/python3-产生随机字符串.md","raw":"---\ntitle: python3 产生随机字符串\ndate: 2018-04-19 16:26:53\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n---\n\n```python\nimport random\nimport string\n\n\n# 长度为16的随机字符串\nrand_str = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(16))\n\n```\n","slug":"python3-产生随机字符串","published":1,"updated":"2018-04-19T08:28:16.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xfk009kexotcn53pbzq","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长度为16的随机字符串</span></span><br><span class=\"line\">rand_str = <span class=\"string\">''</span>.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 长度为16的随机字符串</span></span><br><span class=\"line\">rand_str = <span class=\"string\">''</span>.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 19 2018 16:28:16 GMT+0800 (China Standard Time)","title":"python3 产生随机字符串","path":"2018/04/19/python3-产生随机字符串/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-19T08:26:53.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"python3 可迭代对象、迭代器和生成器","date":"2018-03-01T12:17:53.000Z","_content":"\n## 前言\n迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的`生成器`都是`迭代器`，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把`迭代器`和`生成器`视作同一概念。\n\n所有python程序员都知道，序列可迭代，下面说明具体原因。\n<!-- more -->\n## 序列可迭代的原因：iter函数\n解释器需要迭代对象x时，会自动调用`iter(x)`。\n内置的iter函数有以下作用。\n\n1. 检查对象是否实现了`__iter__`方法，如果实现了就调用它，获得一个迭代器。\n2. 如果没有实现`__iter__`方法，但是实现了`__getitem__`方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。\n3. 如果尝试失败，python会抛出`TypeError`异常，通常会提示\"C object is not iterable\",其中C是目标对象所属的类。\n\n任何Python序列都可迭代的原因是它们实现了`__getitem__`方法。其实标准的序列也都实现了`__iter__`方法。之所以对`__getitem__`方法做特殊处理是为了向后兼容。\n\n从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的`__getitem__`方法，而abc.Iterable类则不考虑。\n\n## 可迭代的对象与迭代器的对比\n\n### 可迭代对象\n\n**使用iter内置函数可以获取迭代器的对象。** 如果实现了能返回迭代器的`__iter__`方法，那么对象就是可迭代的。序列都可以迭代；实现了`__getitem__`方法，而且七参数是从零开始的索引，这种对象也是可迭代的。\n\n我们要明确可迭代对象和迭代器之间的关系：**Python从可迭代的对象中获取迭代器**\n\n标准的迭代器接口有两个方法，即：\n1. `__next__`:返回下一个可用元素，如果没有元素，抛出`StopIteration`异常\n2. `__iter__`:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。\n\n因为`迭代器`只需`__next__`和`__iter__`两个方法，所以除了调用next()方法，以及捕获`StopIteration`异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(...)，传入之前构建迭代器的可迭代对象。\n\n### 迭代器\n\n迭代器是这样的对象：实现了无参数的`__next__`方法，返回序列中的下一个元素；如果没有元素了，那么抛出`StopIteration`异常。Python迭代器还实现了`__iter__`方法，因此迭代器也可以迭代。\n\n构建`可迭代对象`和`迭代器`时经常会出现错误，原因是混淆了两者。要知道，`可迭代的对象`有个`__iter__`方法，每次都实例化一个新的迭代器；而`迭代器`要实现`__next__`方法，返回单个元素，此外还要实现`__iter__`方法，返回迭代器本身。因此，`迭代器`可以迭代，但是`可迭代的对象`不是迭代器。\n\n可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现`__iter__`方法，但不能实现`__next__`方法。另一方面，迭代器应该一直可以迭代，迭代器的`__iter__`方法应该返回自身。\n\n```python\na = [1,2,3]\n'__iter__' in dir(a)            # True\n'__iter__' in dir(iter(a))      # True\n\n```\n\n## 生成器函数\n\n只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有`yield`关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。\n### 生成器函数工作原理\n\n```python\ndef gen_123():  # 只要Python代码中包含yield，该函数就是生成器函数\n    yield 1    #生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n    yield 2\n    yield 3\n\nif __name__ == '__main__':\n    print(gen_123)    # 可以看出gen_123是函数对象\n    # <function gen_123 at 0x10be199d8>\n    print(gen_123())  # 函数调用时返回的是一个生成器对象\n    # <generator object gen_123 at 0x10be31ca8>\n\n    for i in gen_123(): # 生成器是迭代器，会生成传给yield关键字的表达式的值\n        print(i)    \n        # 1\n        # 2\n        # 3\n\n    g = gen_123() # 为了仔细检查，把生成器对象赋值给g\n    print(next(g))  # 1\n    print(next(g))  # 2\n    print(next(g))  # 3\n    print(next(g))   # 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n# Traceback (most recent call last):\n#   File \"test.py\", line 17, in <module>\n#     print(next(g))\n# StopIteration\n\n```\n\n如上述代码所示：\n1. 只要Python代码中包含yield，该函数就是生成器函数\n2. 生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n3. 可以看出gen_123是函数对象\n4. 函数调用时返回的是一个生成器对象\n5. 生成器是迭代器，会`生成`传给yield关键字的表达式的值\n6. 为了仔细检查，把生成器对象赋值给g\n7. 因为g是迭代器，所以调用nest(g)会获取yield`生成`的下一个元素\n8. 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n\n\n使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是`产出`或`生成`值。如果说生成器`返回`值，就会让人难以理解。\n>函数返回值; 调用生成器函数返回生成器; 生成器`产出`或`生成`值。生成器不会以常规方式`返回`值;\n\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            # 2\n    ...:     print('continue')\n    ...:     yield 'B'            # 3\n    ...:     print('end.')        # 4\n    ...:\n\nIn [67]: for c in gen_AB():       # 5\n    ...:     print('-->', c)      # 6\n    ...:\nstart       # 7\n--> A       # 8\ncontinue    # 9\n--> B       # 10\nend.        # 11\n\n```\n1. 定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字\n2. 在for循环中第一次隐式调用next()函数时（序号5），会打印'start'，然后停在第一个yield语句，生成值 'A'\n3. 在for循环第二次隐式调用next()函数时，会打印'continue'，然后停在第二个yield语句，生成值'B'\n4. 第三次调用 next()函数时，会打印'end.'，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常\n5. 迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)\n6. 循环打印 --> 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出\n7. 'start'是生成器函数定义体中print('start')输出的记过\n8. 生成器函数定义体中的yield 'A' 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出--> A\n9. 第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield 'A'前进到 yield 'B'。文本continue是由生成器函数定义体中的第二个print函数输出的\n10. 生成器函数定义体中的yield 'B' 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出--> B\n11. 第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。\n12. 到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。\n\n## 生成器表达式\n\n简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            \n    ...:     print('continue')\n    ...:     yield 'B'            \n    ...:     print('end.')        \n    ...:\n\nIn [67]: res1 = [x*3 for x in gen_AB()]  # 2\nstart\ncontinue\nend.\n\nIn [68]: for i in res1():       # 3\n    ...:     print('-->', i)      \n    ...:\nAAA\nBBB\n\nIn [69]: res2 = (x*3 for x in gen_AB())  # 4\n\nIn [70]: res2  # 5\n<generator object <genexpr> at 0x106a07620>\n\nIn [71]: for i in res2():       # 6\n    ...:     print('-->', i)\n    ...:\nstart   \n--> A   \ncontinue\n--> B       \nend.\n\n```\n1. 创建gen_AB函数\n2. 列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：'A'和'B'。注意。下面输出的是start、continue、end.。\n3. for循环迭代列表推导生成的res1列表\n4. 把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。\n5. 可以看出res2是一个生成器对象。\n6. 只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。\n\n生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。\n\n\n## 何时使用生成器表达式\n\n生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为`协程`使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。\n","source":"_posts/python3-可迭代对象、迭代器和生成器.md","raw":"---\ntitle: python3 可迭代对象、迭代器和生成器\ndate: 2018-03-01 20:17:53\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 迭代器和生成器\n---\n\n## 前言\n迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的`生成器`都是`迭代器`，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把`迭代器`和`生成器`视作同一概念。\n\n所有python程序员都知道，序列可迭代，下面说明具体原因。\n<!-- more -->\n## 序列可迭代的原因：iter函数\n解释器需要迭代对象x时，会自动调用`iter(x)`。\n内置的iter函数有以下作用。\n\n1. 检查对象是否实现了`__iter__`方法，如果实现了就调用它，获得一个迭代器。\n2. 如果没有实现`__iter__`方法，但是实现了`__getitem__`方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。\n3. 如果尝试失败，python会抛出`TypeError`异常，通常会提示\"C object is not iterable\",其中C是目标对象所属的类。\n\n任何Python序列都可迭代的原因是它们实现了`__getitem__`方法。其实标准的序列也都实现了`__iter__`方法。之所以对`__getitem__`方法做特殊处理是为了向后兼容。\n\n从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的`__getitem__`方法，而abc.Iterable类则不考虑。\n\n## 可迭代的对象与迭代器的对比\n\n### 可迭代对象\n\n**使用iter内置函数可以获取迭代器的对象。** 如果实现了能返回迭代器的`__iter__`方法，那么对象就是可迭代的。序列都可以迭代；实现了`__getitem__`方法，而且七参数是从零开始的索引，这种对象也是可迭代的。\n\n我们要明确可迭代对象和迭代器之间的关系：**Python从可迭代的对象中获取迭代器**\n\n标准的迭代器接口有两个方法，即：\n1. `__next__`:返回下一个可用元素，如果没有元素，抛出`StopIteration`异常\n2. `__iter__`:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。\n\n因为`迭代器`只需`__next__`和`__iter__`两个方法，所以除了调用next()方法，以及捕获`StopIteration`异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(...)，传入之前构建迭代器的可迭代对象。\n\n### 迭代器\n\n迭代器是这样的对象：实现了无参数的`__next__`方法，返回序列中的下一个元素；如果没有元素了，那么抛出`StopIteration`异常。Python迭代器还实现了`__iter__`方法，因此迭代器也可以迭代。\n\n构建`可迭代对象`和`迭代器`时经常会出现错误，原因是混淆了两者。要知道，`可迭代的对象`有个`__iter__`方法，每次都实例化一个新的迭代器；而`迭代器`要实现`__next__`方法，返回单个元素，此外还要实现`__iter__`方法，返回迭代器本身。因此，`迭代器`可以迭代，但是`可迭代的对象`不是迭代器。\n\n可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现`__iter__`方法，但不能实现`__next__`方法。另一方面，迭代器应该一直可以迭代，迭代器的`__iter__`方法应该返回自身。\n\n```python\na = [1,2,3]\n'__iter__' in dir(a)            # True\n'__iter__' in dir(iter(a))      # True\n\n```\n\n## 生成器函数\n\n只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有`yield`关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。\n### 生成器函数工作原理\n\n```python\ndef gen_123():  # 只要Python代码中包含yield，该函数就是生成器函数\n    yield 1    #生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n    yield 2\n    yield 3\n\nif __name__ == '__main__':\n    print(gen_123)    # 可以看出gen_123是函数对象\n    # <function gen_123 at 0x10be199d8>\n    print(gen_123())  # 函数调用时返回的是一个生成器对象\n    # <generator object gen_123 at 0x10be31ca8>\n\n    for i in gen_123(): # 生成器是迭代器，会生成传给yield关键字的表达式的值\n        print(i)    \n        # 1\n        # 2\n        # 3\n\n    g = gen_123() # 为了仔细检查，把生成器对象赋值给g\n    print(next(g))  # 1\n    print(next(g))  # 2\n    print(next(g))  # 3\n    print(next(g))   # 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n# Traceback (most recent call last):\n#   File \"test.py\", line 17, in <module>\n#     print(next(g))\n# StopIteration\n\n```\n\n如上述代码所示：\n1. 只要Python代码中包含yield，该函数就是生成器函数\n2. 生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield\n3. 可以看出gen_123是函数对象\n4. 函数调用时返回的是一个生成器对象\n5. 生成器是迭代器，会`生成`传给yield关键字的表达式的值\n6. 为了仔细检查，把生成器对象赋值给g\n7. 因为g是迭代器，所以调用nest(g)会获取yield`生成`的下一个元素\n8. 生成器函数的定义体执行完毕后，生成器对象会抛出异常。\n\n\n使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是`产出`或`生成`值。如果说生成器`返回`值，就会让人难以理解。\n>函数返回值; 调用生成器函数返回生成器; 生成器`产出`或`生成`值。生成器不会以常规方式`返回`值;\n\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            # 2\n    ...:     print('continue')\n    ...:     yield 'B'            # 3\n    ...:     print('end.')        # 4\n    ...:\n\nIn [67]: for c in gen_AB():       # 5\n    ...:     print('-->', c)      # 6\n    ...:\nstart       # 7\n--> A       # 8\ncontinue    # 9\n--> B       # 10\nend.        # 11\n\n```\n1. 定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字\n2. 在for循环中第一次隐式调用next()函数时（序号5），会打印'start'，然后停在第一个yield语句，生成值 'A'\n3. 在for循环第二次隐式调用next()函数时，会打印'continue'，然后停在第二个yield语句，生成值'B'\n4. 第三次调用 next()函数时，会打印'end.'，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常\n5. 迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)\n6. 循环打印 --> 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出\n7. 'start'是生成器函数定义体中print('start')输出的记过\n8. 生成器函数定义体中的yield 'A' 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出--> A\n9. 第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield 'A'前进到 yield 'B'。文本continue是由生成器函数定义体中的第二个print函数输出的\n10. 生成器函数定义体中的yield 'B' 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出--> B\n11. 第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。\n12. 到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。\n\n## 生成器表达式\n\n简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。\n\n```python\n\nIn [66]: def gen_AB():            # 1\n    ...:     print('start')       \n    ...:     yield 'A'            \n    ...:     print('continue')\n    ...:     yield 'B'            \n    ...:     print('end.')        \n    ...:\n\nIn [67]: res1 = [x*3 for x in gen_AB()]  # 2\nstart\ncontinue\nend.\n\nIn [68]: for i in res1():       # 3\n    ...:     print('-->', i)      \n    ...:\nAAA\nBBB\n\nIn [69]: res2 = (x*3 for x in gen_AB())  # 4\n\nIn [70]: res2  # 5\n<generator object <genexpr> at 0x106a07620>\n\nIn [71]: for i in res2():       # 6\n    ...:     print('-->', i)\n    ...:\nstart   \n--> A   \ncontinue\n--> B       \nend.\n\n```\n1. 创建gen_AB函数\n2. 列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：'A'和'B'。注意。下面输出的是start、continue、end.。\n3. for循环迭代列表推导生成的res1列表\n4. 把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。\n5. 可以看出res2是一个生成器对象。\n6. 只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。\n\n生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。\n\n\n## 何时使用生成器表达式\n\n生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为`协程`使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。\n","slug":"python3-可迭代对象、迭代器和生成器","published":1,"updated":"2018-03-02T04:55:21.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xfs009oexothfzsty6q","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的<code>生成器</code>都是<code>迭代器</code>，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把<code>迭代器</code>和<code>生成器</code>视作同一概念。</p>\n<p>所有python程序员都知道，序列可迭代，下面说明具体原因。<br><a id=\"more\"></a></p>\n<h2 id=\"序列可迭代的原因：iter函数\"><a href=\"#序列可迭代的原因：iter函数\" class=\"headerlink\" title=\"序列可迭代的原因：iter函数\"></a>序列可迭代的原因：iter函数</h2><p>解释器需要迭代对象x时，会自动调用<code>iter(x)</code>。<br>内置的iter函数有以下作用。</p>\n<ol>\n<li>检查对象是否实现了<code>__iter__</code>方法，如果实现了就调用它，获得一个迭代器。</li>\n<li>如果没有实现<code>__iter__</code>方法，但是实现了<code>__getitem__</code>方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。</li>\n<li>如果尝试失败，python会抛出<code>TypeError</code>异常，通常会提示”C object is not iterable”,其中C是目标对象所属的类。</li>\n</ol>\n<p>任何Python序列都可迭代的原因是它们实现了<code>__getitem__</code>方法。其实标准的序列也都实现了<code>__iter__</code>方法。之所以对<code>__getitem__</code>方法做特殊处理是为了向后兼容。</p>\n<p>从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的<code>__getitem__</code>方法，而abc.Iterable类则不考虑。</p>\n<h2 id=\"可迭代的对象与迭代器的对比\"><a href=\"#可迭代的对象与迭代器的对比\" class=\"headerlink\" title=\"可迭代的对象与迭代器的对比\"></a>可迭代的对象与迭代器的对比</h2><h3 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h3><p><strong>使用iter内置函数可以获取迭代器的对象。</strong> 如果实现了能返回迭代器的<code>__iter__</code>方法，那么对象就是可迭代的。序列都可以迭代；实现了<code>__getitem__</code>方法，而且七参数是从零开始的索引，这种对象也是可迭代的。</p>\n<p>我们要明确可迭代对象和迭代器之间的关系：<strong>Python从可迭代的对象中获取迭代器</strong></p>\n<p>标准的迭代器接口有两个方法，即：</p>\n<ol>\n<li><code>__next__</code>:返回下一个可用元素，如果没有元素，抛出<code>StopIteration</code>异常</li>\n<li><code>__iter__</code>:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。</li>\n</ol>\n<p>因为<code>迭代器</code>只需<code>__next__</code>和<code>__iter__</code>两个方法，所以除了调用next()方法，以及捕获<code>StopIteration</code>异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(…)，传入之前构建迭代器的可迭代对象。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是这样的对象：实现了无参数的<code>__next__</code>方法，返回序列中的下一个元素；如果没有元素了，那么抛出<code>StopIteration</code>异常。Python迭代器还实现了<code>__iter__</code>方法，因此迭代器也可以迭代。</p>\n<p>构建<code>可迭代对象</code>和<code>迭代器</code>时经常会出现错误，原因是混淆了两者。要知道，<code>可迭代的对象</code>有个<code>__iter__</code>方法，每次都实例化一个新的迭代器；而<code>迭代器</code>要实现<code>__next__</code>方法，返回单个元素，此外还要实现<code>__iter__</code>方法，返回迭代器本身。因此，<code>迭代器</code>可以迭代，但是<code>可迭代的对象</code>不是迭代器。</p>\n<p>可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现<code>__iter__</code>方法，但不能实现<code>__next__</code>方法。另一方面，迭代器应该一直可以迭代，迭代器的<code>__iter__</code>方法应该返回自身。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(a)            <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(iter(a))      <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n<p>普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有<code>yield</code>关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。</p>\n<h3 id=\"生成器函数工作原理\"><a href=\"#生成器函数工作原理\" class=\"headerlink\" title=\"生成器函数工作原理\"></a>生成器函数工作原理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_123</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 只要Python代码中包含yield，该函数就是生成器函数</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>    <span class=\"comment\">#生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(gen_123)    <span class=\"comment\"># 可以看出gen_123是函数对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;function gen_123 at 0x10be199d8&gt;</span></span><br><span class=\"line\">    print(gen_123())  <span class=\"comment\"># 函数调用时返回的是一个生成器对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;generator object gen_123 at 0x10be31ca8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_123(): <span class=\"comment\"># 生成器是迭代器，会生成传给yield关键字的表达式的值</span></span><br><span class=\"line\">        print(i)    </span><br><span class=\"line\">        <span class=\"comment\"># 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 2</span></span><br><span class=\"line\">        <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = gen_123() <span class=\"comment\"># 为了仔细检查，把生成器对象赋值给g</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 1</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 2</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">    print(next(g))   <span class=\"comment\"># 生成器函数的定义体执行完毕后，生成器对象会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"># Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"comment\">#   File \"test.py\", line 17, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#     print(next(g))</span></span><br><span class=\"line\"><span class=\"comment\"># StopIteration</span></span><br></pre></td></tr></table></figure>\n<p>如上述代码所示：</p>\n<ol>\n<li>只要Python代码中包含yield，该函数就是生成器函数</li>\n<li>生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</li>\n<li>可以看出gen_123是函数对象</li>\n<li>函数调用时返回的是一个生成器对象</li>\n<li>生成器是迭代器，会<code>生成</code>传给yield关键字的表达式的值</li>\n<li>为了仔细检查，把生成器对象赋值给g</li>\n<li>因为g是迭代器，所以调用nest(g)会获取yield<code>生成</code>的下一个元素</li>\n<li>生成器函数的定义体执行完毕后，生成器对象会抛出异常。</li>\n</ol>\n<p>使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是<code>产出</code>或<code>生成</code>值。如果说生成器<code>返回</code>值，就会让人难以理解。</p>\n<blockquote>\n<p>函数返回值; 调用生成器函数返回生成器; 生成器<code>产出</code>或<code>生成</code>值。生成器不会以常规方式<code>返回</code>值;</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            <span class=\"comment\"># 2</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        <span class=\"comment\"># 4</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> gen_AB():       <span class=\"comment\"># 5</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, c)      <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start       <span class=\"comment\"># 7</span></span><br><span class=\"line\">--&gt; A       # 8</span><br><span class=\"line\"><span class=\"keyword\">continue</span>    <span class=\"comment\"># 9</span></span><br><span class=\"line\">--&gt; B       # 10</span><br><span class=\"line\">end.        <span class=\"comment\"># 11</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字</li>\n<li>在for循环中第一次隐式调用next()函数时（序号5），会打印’start’，然后停在第一个yield语句，生成值 ‘A’</li>\n<li>在for循环第二次隐式调用next()函数时，会打印’continue’，然后停在第二个yield语句，生成值’B’</li>\n<li>第三次调用 next()函数时，会打印’end.’，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常</li>\n<li>迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)</li>\n<li>循环打印 –&gt; 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出</li>\n<li>‘start’是生成器函数定义体中print(‘start’)输出的记过</li>\n<li>生成器函数定义体中的yield ‘A’ 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出–&gt; A</li>\n<li>第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield ‘A’前进到 yield ‘B’。文本continue是由生成器函数定义体中的第二个print函数输出的</li>\n<li>生成器函数定义体中的yield ‘B’ 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出–&gt; B</li>\n<li>第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。</li>\n<li>到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><p>简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        </span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: res1 = [x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB()]  <span class=\"comment\"># 2</span></span><br><span class=\"line\">start</span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res1():       <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)      </span><br><span class=\"line\">    ...:</span><br><span class=\"line\">AAA</span><br><span class=\"line\">BBB</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: res2 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB())  <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: res2  <span class=\"comment\"># 5</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x106a07620</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res2():       <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start   </span><br><span class=\"line\">--&gt; A   </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">--&gt; B       </span><br><span class=\"line\">end.</span><br></pre></td></tr></table></figure>\n<ol>\n<li>创建gen_AB函数</li>\n<li>列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：’A’和’B’。注意。下面输出的是start、continue、end.。</li>\n<li>for循环迭代列表推导生成的res1列表</li>\n<li>把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。</li>\n<li>可以看出res2是一个生成器对象。</li>\n<li>只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。</li>\n</ol>\n<p>生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。</p>\n<h2 id=\"何时使用生成器表达式\"><a href=\"#何时使用生成器表达式\" class=\"headerlink\" title=\"何时使用生成器表达式\"></a>何时使用生成器表达式</h2><p>生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为<code>协程</code>使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的<code>生成器</code>都是<code>迭代器</code>，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把<code>迭代器</code>和<code>生成器</code>视作同一概念。</p>\n<p>所有python程序员都知道，序列可迭代，下面说明具体原因。<br>","more":"</p>\n<h2 id=\"序列可迭代的原因：iter函数\"><a href=\"#序列可迭代的原因：iter函数\" class=\"headerlink\" title=\"序列可迭代的原因：iter函数\"></a>序列可迭代的原因：iter函数</h2><p>解释器需要迭代对象x时，会自动调用<code>iter(x)</code>。<br>内置的iter函数有以下作用。</p>\n<ol>\n<li>检查对象是否实现了<code>__iter__</code>方法，如果实现了就调用它，获得一个迭代器。</li>\n<li>如果没有实现<code>__iter__</code>方法，但是实现了<code>__getitem__</code>方法，python会创建一个迭代器，尝试按顺序（从索引0开始）获取元素。</li>\n<li>如果尝试失败，python会抛出<code>TypeError</code>异常，通常会提示”C object is not iterable”,其中C是目标对象所属的类。</li>\n</ol>\n<p>任何Python序列都可迭代的原因是它们实现了<code>__getitem__</code>方法。其实标准的序列也都实现了<code>__iter__</code>方法。之所以对<code>__getitem__</code>方法做特殊处理是为了向后兼容。</p>\n<p>从Python3.4开始，检查x能否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeError异常。这比使用isinstance(x, abc.Iterable)更准确，因为iter(x)函数会考虑到遗留的<code>__getitem__</code>方法，而abc.Iterable类则不考虑。</p>\n<h2 id=\"可迭代的对象与迭代器的对比\"><a href=\"#可迭代的对象与迭代器的对比\" class=\"headerlink\" title=\"可迭代的对象与迭代器的对比\"></a>可迭代的对象与迭代器的对比</h2><h3 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h3><p><strong>使用iter内置函数可以获取迭代器的对象。</strong> 如果实现了能返回迭代器的<code>__iter__</code>方法，那么对象就是可迭代的。序列都可以迭代；实现了<code>__getitem__</code>方法，而且七参数是从零开始的索引，这种对象也是可迭代的。</p>\n<p>我们要明确可迭代对象和迭代器之间的关系：<strong>Python从可迭代的对象中获取迭代器</strong></p>\n<p>标准的迭代器接口有两个方法，即：</p>\n<ol>\n<li><code>__next__</code>:返回下一个可用元素，如果没有元素，抛出<code>StopIteration</code>异常</li>\n<li><code>__iter__</code>:返回self,以便在应该使用可迭代对象的地方使用迭代器，比如for循环中。</li>\n</ol>\n<p>因为<code>迭代器</code>只需<code>__next__</code>和<code>__iter__</code>两个方法，所以除了调用next()方法，以及捕获<code>StopIteration</code>异常之外，没有办法检查是否还有遗留的元素。此外，也没有办法还原迭代器。如果想再次迭代，那就要调用iter(…)，传入之前构建迭代器的可迭代对象。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是这样的对象：实现了无参数的<code>__next__</code>方法，返回序列中的下一个元素；如果没有元素了，那么抛出<code>StopIteration</code>异常。Python迭代器还实现了<code>__iter__</code>方法，因此迭代器也可以迭代。</p>\n<p>构建<code>可迭代对象</code>和<code>迭代器</code>时经常会出现错误，原因是混淆了两者。要知道，<code>可迭代的对象</code>有个<code>__iter__</code>方法，每次都实例化一个新的迭代器；而<code>迭代器</code>要实现<code>__next__</code>方法，返回单个元素，此外还要实现<code>__iter__</code>方法，返回迭代器本身。因此，<code>迭代器</code>可以迭代，但是<code>可迭代的对象</code>不是迭代器。</p>\n<p>可迭代的对象一定不是自身的迭代器。也就是说，可迭代的对象必须实现<code>__iter__</code>方法，但不能实现<code>__next__</code>方法。另一方面，迭代器应该一直可以迭代，迭代器的<code>__iter__</code>方法应该返回自身。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(a)            <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'__iter__'</span> <span class=\"keyword\">in</span> dir(iter(a))      <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>只要Python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n<p>普通的函数与生成器函数在句法上的唯一区别是，在后者的定义体中有<code>yield</code>关键字。有些人认为定义生成器函数应该使用一个新的关键字，例如gen，而不是def，但是Guido不同意。</p>\n<h3 id=\"生成器函数工作原理\"><a href=\"#生成器函数工作原理\" class=\"headerlink\" title=\"生成器函数工作原理\"></a>生成器函数工作原理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_123</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 只要Python代码中包含yield，该函数就是生成器函数</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>    <span class=\"comment\">#生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(gen_123)    <span class=\"comment\"># 可以看出gen_123是函数对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;function gen_123 at 0x10be199d8&gt;</span></span><br><span class=\"line\">    print(gen_123())  <span class=\"comment\"># 函数调用时返回的是一个生成器对象</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;generator object gen_123 at 0x10be31ca8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_123(): <span class=\"comment\"># 生成器是迭代器，会生成传给yield关键字的表达式的值</span></span><br><span class=\"line\">        print(i)    </span><br><span class=\"line\">        <span class=\"comment\"># 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 2</span></span><br><span class=\"line\">        <span class=\"comment\"># 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = gen_123() <span class=\"comment\"># 为了仔细检查，把生成器对象赋值给g</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 1</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 2</span></span><br><span class=\"line\">    print(next(g))  <span class=\"comment\"># 3</span></span><br><span class=\"line\">    print(next(g))   <span class=\"comment\"># 生成器函数的定义体执行完毕后，生成器对象会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"># Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"comment\">#   File \"test.py\", line 17, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#     print(next(g))</span></span><br><span class=\"line\"><span class=\"comment\"># StopIteration</span></span><br></pre></td></tr></table></figure>\n<p>如上述代码所示：</p>\n<ol>\n<li>只要Python代码中包含yield，该函数就是生成器函数</li>\n<li>生成器函数的定义体中通常都有循环，不过这不是必要条件；此处重复使用了3次yield</li>\n<li>可以看出gen_123是函数对象</li>\n<li>函数调用时返回的是一个生成器对象</li>\n<li>生成器是迭代器，会<code>生成</code>传给yield关键字的表达式的值</li>\n<li>为了仔细检查，把生成器对象赋值给g</li>\n<li>因为g是迭代器，所以调用nest(g)会获取yield<code>生成</code>的下一个元素</li>\n<li>生成器函数的定义体执行完毕后，生成器对象会抛出异常。</li>\n</ol>\n<p>使用准确的词语描述从生成器中获取结果的过程有助于理解生成器。注意，此处说的是<code>产出</code>或<code>生成</code>值。如果说生成器<code>返回</code>值，就会让人难以理解。</p>\n<blockquote>\n<p>函数返回值; 调用生成器函数返回生成器; 生成器<code>产出</code>或<code>生成</code>值。生成器不会以常规方式<code>返回</code>值;</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            <span class=\"comment\"># 2</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        <span class=\"comment\"># 4</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> gen_AB():       <span class=\"comment\"># 5</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, c)      <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start       <span class=\"comment\"># 7</span></span><br><span class=\"line\">--&gt; A       # 8</span><br><span class=\"line\"><span class=\"keyword\">continue</span>    <span class=\"comment\"># 9</span></span><br><span class=\"line\">--&gt; B       # 10</span><br><span class=\"line\">end.        <span class=\"comment\"># 11</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>定义生成的器函数的方式与普通函数无异，只不过要使用yield关键字</li>\n<li>在for循环中第一次隐式调用next()函数时（序号5），会打印’start’，然后停在第一个yield语句，生成值 ‘A’</li>\n<li>在for循环第二次隐式调用next()函数时，会打印’continue’，然后停在第二个yield语句，生成值’B’</li>\n<li>第三次调用 next()函数时，会打印’end.’，然后到达函数定义体末尾。导致生成器对象抛出StopIteration异常</li>\n<li>迭代时, for 机制的作用与g = iter(gen_AB())一样，用于获取生成器对象，然后每次迭代时调用next(g)</li>\n<li>循环打印 –&gt; 与 next(g)返回的值。但是，生成器函数中的print函数输出结果之后才会看到这个输出</li>\n<li>‘start’是生成器函数定义体中print(‘start’)输出的记过</li>\n<li>生成器函数定义体中的yield ‘A’ 语句会生成值 A，提供给for循环使用，而A会赋值给变量c，最终输出–&gt; A</li>\n<li>第二次调用next(g)，继续迭代，生成器函数定义体中的代码由yield ‘A’前进到 yield ‘B’。文本continue是由生成器函数定义体中的第二个print函数输出的</li>\n<li>生成器函数定义体中的yield ‘B’ 语句会生成值 B，提供给for循环使用，而B会赋值给变量c，最终输出–&gt; B</li>\n<li>第三次调用next(g)，继续迭代，前进到生成器函数的结尾。文本 end. 是由生成器函数定义体中第三个print函数输出的。</li>\n<li>到达生成器函数定义体结尾时，生成器对象抛出StopIteration异常。for 机制会捕捉异常，因此循环终止没有报错。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><p>简单的生成器函数，可以替换成生成器表达式。生成器表达式可以理解为列表推导的惰性版本：不会迫切的构建列表，而是返回一个生成器，按需惰性生成元素。也就是说，如果列表推导是制造工厂的列表，那么生成器表达式就是制造生成器的工厂。如下演示了一个简单的生成器表达式，并且与列表推导做了对比。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_AB</span><span class=\"params\">()</span>:</span>            <span class=\"comment\"># 1</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'start'</span>)       </span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'continue'</span>)</span><br><span class=\"line\">    ...:     <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>            </span><br><span class=\"line\">    ...:     print(<span class=\"string\">'end.'</span>)        </span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: res1 = [x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB()]  <span class=\"comment\"># 2</span></span><br><span class=\"line\">start</span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res1():       <span class=\"comment\"># 3</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)      </span><br><span class=\"line\">    ...:</span><br><span class=\"line\">AAA</span><br><span class=\"line\">BBB</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: res2 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> gen_AB())  <span class=\"comment\"># 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: res2  <span class=\"comment\"># 5</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x106a07620</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res2():       <span class=\"comment\"># 6</span></span><br><span class=\"line\">    ...:     print(<span class=\"string\">'--&gt;'</span>, i)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">start   </span><br><span class=\"line\">--&gt; A   </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\">--&gt; B       </span><br><span class=\"line\">end.</span><br></pre></td></tr></table></figure>\n<ol>\n<li>创建gen_AB函数</li>\n<li>列表推到迫切的迭代gen_AB()函数生成的生成器对象产出的元素：’A’和’B’。注意。下面输出的是start、continue、end.。</li>\n<li>for循环迭代列表推导生成的res1列表</li>\n<li>把生成器表达式返回的值赋值给res2。只需调用gen_AB()函数，虽然调用时会返回一个生成器，但是这里并不使用。</li>\n<li>可以看出res2是一个生成器对象。</li>\n<li>只有for循环迭代res2时，gen_AB函数的定义体才会真正执行。for循环每次迭代时会隐式调用next(res2)，前进到gen_AB函数中的下一个yield语句。注意，gen_AB函数的输出与for循环中print函数的输出夹杂在一起。</li>\n</ol>\n<p>生成器表达式会产出生成器，因此可以使用生成器表达式进一步减少代码量。生成器表达式是一种语法糖，完全可以替换成生成器函数，不过有时候使用生成器表达式更便利。</p>\n<h2 id=\"何时使用生成器表达式\"><a href=\"#何时使用生成器表达式\" class=\"headerlink\" title=\"何时使用生成器表达式\"></a>何时使用生成器表达式</h2><p>生成器表达式是创建生成器的简洁句法，这样无需定义函数再调用。不过，生成器函数灵活的多，可以使用多个语句实现复杂的逻辑，也可以作为<code>协程</code>使用。遇到简单的情况时，可以使用生成器表达式，因为这样扫一眼就知道代码的作用。其实选择那种句法很容易判断：如果生成器表达式需要分行写，倾向于定义成生成器函数，以便提高可读性。此外生成器函数有名称，因此可以重用。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 02 2018 12:55:21 GMT+0800 (China Standard Time)","title":"python3 可迭代对象、迭代器和生成器","path":"2018/03/01/python3-可迭代对象、迭代器和生成器/","eyeCatchImage":null,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>迭代是数据处理的基石。扫描内存中放不下数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项，这就是迭代器模式（iterator pattern）。所有的<code>生成器</code>都是<code>迭代器</code>，因为生成器完全实现了迭代器接口。在python社区中，大多数时候都把<code>迭代器</code>和<code>生成器</code>视作同一概念。</p>\n<p>所有python程序员都知道，序列可迭代，下面说明具体原因。<br>","date":"2018-03-01T12:17:53.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 迭代器和生成器","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"一次完整的HTTP请求流程","date":"2018-03-19T17:34:08.000Z","_content":"\nHTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：\n\n## 1. 建立TCP连接：\n\n在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，\n\n即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，\n\n因此，首先要建立TCP连接，一般TCP连接的端口号是80。\n\n## 2. Web浏览器向Web服务器发送请求命令： \n\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n\n## 3. Web浏览器发送请求头信息 ：\n\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n\n## 4. Web服务器应答 ：\n\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。\n\n## 5. Web服务器发送应答头信息： \n\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n\n## 6. Web服务器向浏览器发送数据： \n\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n\n## 7. Web服务器关闭TCP连接 ：\n\n一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；\n\nTCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。\n\n<!-- more -->\n![http请求.jpg](https://upload-images.jianshu.io/upload_images/2952111-d8db37f9da639c61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/一次完整的HTTP请求流程.md","raw":"---\ntitle: 一次完整的HTTP请求流程\ndate: 2018-03-20 01:34:08\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\nHTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：\n\n## 1. 建立TCP连接：\n\n在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，\n\n即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，\n\n因此，首先要建立TCP连接，一般TCP连接的端口号是80。\n\n## 2. Web浏览器向Web服务器发送请求命令： \n\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n\n## 3. Web浏览器发送请求头信息 ：\n\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n\n## 4. Web服务器应答 ：\n\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。\n\n## 5. Web服务器发送应答头信息： \n\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n\n## 6. Web服务器向浏览器发送数据： \n\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n\n## 7. Web服务器关闭TCP连接 ：\n\n一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；\n\nTCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。\n\n<!-- more -->\n![http请求.jpg](https://upload-images.jianshu.io/upload_images/2952111-d8db37f9da639c61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"一次完整的HTTP请求流程","published":1,"updated":"2018-03-19T18:00:53.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xg5009sexotx84ep9h4","content":"<p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p>\n<h2 id=\"1-建立TCP连接：\"><a href=\"#1-建立TCP连接：\" class=\"headerlink\" title=\"1. 建立TCP连接：\"></a>1. 建立TCP连接：</h2><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，</p>\n<p>即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，</p>\n<p>因此，首先要建立TCP连接，一般TCP连接的端口号是80。</p>\n<h2 id=\"2-Web浏览器向Web服务器发送请求命令：\"><a href=\"#2-Web浏览器向Web服务器发送请求命令：\" class=\"headerlink\" title=\"2. Web浏览器向Web服务器发送请求命令：\"></a>2. Web浏览器向Web服务器发送请求命令：</h2><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</p>\n<h2 id=\"3-Web浏览器发送请求头信息-：\"><a href=\"#3-Web浏览器发送请求头信息-：\" class=\"headerlink\" title=\"3. Web浏览器发送请求头信息 ：\"></a>3. Web浏览器发送请求头信息 ：</h2><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p>\n<h2 id=\"4-Web服务器应答-：\"><a href=\"#4-Web服务器应答-：\" class=\"headerlink\" title=\"4. Web服务器应答 ：\"></a>4. Web服务器应答 ：</h2><p>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</p>\n<h2 id=\"5-Web服务器发送应答头信息：\"><a href=\"#5-Web服务器发送应答头信息：\" class=\"headerlink\" title=\"5. Web服务器发送应答头信息：\"></a>5. Web服务器发送应答头信息：</h2><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p>\n<h2 id=\"6-Web服务器向浏览器发送数据：\"><a href=\"#6-Web服务器向浏览器发送数据：\" class=\"headerlink\" title=\"6. Web服务器向浏览器发送数据：\"></a>6. Web服务器向浏览器发送数据：</h2><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p>\n<h2 id=\"7-Web服务器关闭TCP连接-：\"><a href=\"#7-Web服务器关闭TCP连接-：\" class=\"headerlink\" title=\"7. Web服务器关闭TCP连接 ：\"></a>7. Web服务器关闭TCP连接 ：</h2><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；</p>\n<p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d8db37f9da639c61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"http请求.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p>\n<h2 id=\"1-建立TCP连接：\"><a href=\"#1-建立TCP连接：\" class=\"headerlink\" title=\"1. 建立TCP连接：\"></a>1. 建立TCP连接：</h2><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，</p>\n<p>即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，</p>\n<p>因此，首先要建立TCP连接，一般TCP连接的端口号是80。</p>\n<h2 id=\"2-Web浏览器向Web服务器发送请求命令：\"><a href=\"#2-Web浏览器向Web服务器发送请求命令：\" class=\"headerlink\" title=\"2. Web浏览器向Web服务器发送请求命令：\"></a>2. Web浏览器向Web服务器发送请求命令：</h2><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</p>\n<h2 id=\"3-Web浏览器发送请求头信息-：\"><a href=\"#3-Web浏览器发送请求头信息-：\" class=\"headerlink\" title=\"3. Web浏览器发送请求头信息 ：\"></a>3. Web浏览器发送请求头信息 ：</h2><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p>\n<h2 id=\"4-Web服务器应答-：\"><a href=\"#4-Web服务器应答-：\" class=\"headerlink\" title=\"4. Web服务器应答 ：\"></a>4. Web服务器应答 ：</h2><p>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</p>\n<h2 id=\"5-Web服务器发送应答头信息：\"><a href=\"#5-Web服务器发送应答头信息：\" class=\"headerlink\" title=\"5. Web服务器发送应答头信息：\"></a>5. Web服务器发送应答头信息：</h2><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p>\n<h2 id=\"6-Web服务器向浏览器发送数据：\"><a href=\"#6-Web服务器向浏览器发送数据：\" class=\"headerlink\" title=\"6. Web服务器向浏览器发送数据：\"></a>6. Web服务器向浏览器发送数据：</h2><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p>\n<h2 id=\"7-Web服务器关闭TCP连接-：\"><a href=\"#7-Web服务器关闭TCP连接-：\" class=\"headerlink\" title=\"7. Web服务器关闭TCP连接 ：\"></a>7. Web服务器关闭TCP连接 ：</h2><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；</p>\n<p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-d8db37f9da639c61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"http请求.jpg\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 20 2018 02:00:53 GMT+0800 (China Standard Time)","title":"一次完整的HTTP请求流程","path":"2018/03/20/一次完整的HTTP请求流程/","eyeCatchImage":null,"excerpt":"<p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p>\n<h2 id=\"1-建立TCP连接：\"><a href=\"#1-建立TCP连接：\" class=\"headerlink\" title=\"1. 建立TCP连接：\"></a>1. 建立TCP连接：</h2><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，</p>\n<p>即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，</p>\n<p>因此，首先要建立TCP连接，一般TCP连接的端口号是80。</p>\n<h2 id=\"2-Web浏览器向Web服务器发送请求命令：\"><a href=\"#2-Web浏览器向Web服务器发送请求命令：\" class=\"headerlink\" title=\"2. Web浏览器向Web服务器发送请求命令：\"></a>2. Web浏览器向Web服务器发送请求命令：</h2><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</p>\n<h2 id=\"3-Web浏览器发送请求头信息-：\"><a href=\"#3-Web浏览器发送请求头信息-：\" class=\"headerlink\" title=\"3. Web浏览器发送请求头信息 ：\"></a>3. Web浏览器发送请求头信息 ：</h2><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p>\n<h2 id=\"4-Web服务器应答-：\"><a href=\"#4-Web服务器应答-：\" class=\"headerlink\" title=\"4. Web服务器应答 ：\"></a>4. Web服务器应答 ：</h2><p>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</p>\n<h2 id=\"5-Web服务器发送应答头信息：\"><a href=\"#5-Web服务器发送应答头信息：\" class=\"headerlink\" title=\"5. Web服务器发送应答头信息：\"></a>5. Web服务器发送应答头信息：</h2><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p>\n<h2 id=\"6-Web服务器向浏览器发送数据：\"><a href=\"#6-Web服务器向浏览器发送数据：\" class=\"headerlink\" title=\"6. Web服务器向浏览器发送数据：\"></a>6. Web服务器向浏览器发送数据：</h2><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p>\n<h2 id=\"7-Web服务器关闭TCP连接-：\"><a href=\"#7-Web服务器关闭TCP连接-：\" class=\"headerlink\" title=\"7. Web服务器关闭TCP连接 ：\"></a>7. Web服务器关闭TCP连接 ：</h2><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：Connection:keep-alive；</p>\n<p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>","date":"2018-03-19T17:34:08.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"python3 如何用一个表达式合并两个字典","date":"2018-03-02T17:00:28.000Z","_content":"\n有两个Python字典,写一个表达式来返回两个字典的合并。`update()`方法返回的是空值而不是返回合并后的对象.\n```python    \n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = x.update(y)\n>>> print z\nNone\n>>> x\n{'a': 1, 'b': 10, 'c': 11}\n```\n如何才能让值保存在z而不是x?\n<!-- more -->\n\n对于python2可以用下面的方法:\n```python    \nz = dict(x.items() + y.items())\n```\n最后就是你想要的最终结果保存在字典z中,而键`b`的值会被第二个字典的值覆盖.\n```python\n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = dict(x.items() + y.items())\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n对于Python3：\n```python\n>>> z = dict(list(x.items()) + list(y.items()))\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n还可以这样:\n```python\nz = x.copy()\nz.update(y)\n```\n","source":"_posts/python3-如何用一个表达式合并两个字典.md","raw":"---\ntitle: python3 如何用一个表达式合并两个字典\ndate: 2018-03-03 01:00:28\ntags:\n  - Python3\ncategories:\n  - Python3 进阶\n  - Python3 数据结构\n---\n\n有两个Python字典,写一个表达式来返回两个字典的合并。`update()`方法返回的是空值而不是返回合并后的对象.\n```python    \n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = x.update(y)\n>>> print z\nNone\n>>> x\n{'a': 1, 'b': 10, 'c': 11}\n```\n如何才能让值保存在z而不是x?\n<!-- more -->\n\n对于python2可以用下面的方法:\n```python    \nz = dict(x.items() + y.items())\n```\n最后就是你想要的最终结果保存在字典z中,而键`b`的值会被第二个字典的值覆盖.\n```python\n>>> x = {'a':1, 'b': 2}\n>>> y = {'b':10, 'c': 11}\n>>> z = dict(x.items() + y.items())\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n对于Python3：\n```python\n>>> z = dict(list(x.items()) + list(y.items()))\n>>> z\n{'a': 1, 'c': 11, 'b': 10}\n```\n\n还可以这样:\n```python\nz = x.copy()\nz.update(y)\n```\n","slug":"python3-如何用一个表达式合并两个字典","published":1,"updated":"2018-03-02T17:11:37.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xg8009wexotdgal8c7o","content":"<p>有两个Python字典,写一个表达式来返回两个字典的合并。<code>update()</code>方法返回的是空值而不是返回合并后的对象.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = x.update(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> z</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如何才能让值保存在z而不是x?<br><a id=\"more\"></a></p>\n<p>对于python2可以用下面的方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = dict(x.items() + y.items())</span><br></pre></td></tr></table></figure></p>\n<p>最后就是你想要的最终结果保存在字典z中,而键<code>b</code>的值会被第二个字典的值覆盖.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于Python3：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(list(x.items()) + list(y.items()))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以这样:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = x.copy()</span><br><span class=\"line\">z.update(y)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>有两个Python字典,写一个表达式来返回两个字典的合并。<code>update()</code>方法返回的是空值而不是返回合并后的对象.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = x.update(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> z</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如何才能让值保存在z而不是x?<br>","more":"</p>\n<p>对于python2可以用下面的方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = dict(x.items() + y.items())</span><br></pre></td></tr></table></figure></p>\n<p>最后就是你想要的最终结果保存在字典z中,而键<code>b</code>的值会被第二个字典的值覆盖.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(x.items() + y.items())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于Python3：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = dict(list(x.items()) + list(y.items()))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以这样:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = x.copy()</span><br><span class=\"line\">z.update(y)</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 03 2018 01:11:37 GMT+0800 (China Standard Time)","title":"python3 如何用一个表达式合并两个字典","path":"2018/03/03/python3-如何用一个表达式合并两个字典/","eyeCatchImage":null,"excerpt":"<p>有两个Python字典,写一个表达式来返回两个字典的合并。<code>update()</code>方法返回的是空值而不是返回合并后的对象.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = &#123;<span class=\"string\">'b'</span>:<span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>z = x.update(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> z</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">10</span>, <span class=\"string\">'c'</span>: <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如何才能让值保存在z而不是x?<br>","date":"2018-03-02T17:00:28.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶 > Python3 数据结构","tags":["Python3"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"三次握手 | 四次挥手","date":"2018-03-19T15:30:52.000Z","_content":"## 三次握手\n**第一次握手**\n\n建立连接时，客户端发送`syn包（syn=j）`到服务器，并进入SYN_SENT状态，等待服务器确认；\nSYN即`同步序列编号`(synchronize sequence numbers)。\n\n**第二次握手**\n\n服务器收到`syn包`，必须确认客户的SYN（ack = j+1）,同时自己也发送一个SYN包（syn=k），即发`送SYN和ACK包`，此时服务器进入`SYN_RECV`状态。\n\n\n**第三次握手**\n\n客户端收到服务器的`SYN+ACK包`，向服务器发送确认`包ACK（ack=k+1）`，此包发送完毕，客户端和服务器进入`ESTABLISHED`状态，TCP连接成功，完成三次握手。\n\n完成上述三次握手后，客户端和服务器开始传送数据。\n\n\n## 四次挥手\n对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的字段）。TCP关闭连接的步骤如下\n\n1. 当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN=finish）\n2. 当主机B收到这个FIN报文段之后，并不立即用FIN报文回复主机A，而是想主机A发送一个确认序号ACK，同时通知自己的应用程序：对方要求关闭连接。【先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文】\n3. 主机B的应用程序告诉TCP：我要彻底关闭连接，TCP向主机A发送一个FIN报文段。\n4. 主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。\n","source":"_posts/三次握手 | 四次挥手.md","raw":"---\ntitle: 三次握手 | 四次挥手\ndate: 2018-03-19 23:30:52\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n## 三次握手\n**第一次握手**\n\n建立连接时，客户端发送`syn包（syn=j）`到服务器，并进入SYN_SENT状态，等待服务器确认；\nSYN即`同步序列编号`(synchronize sequence numbers)。\n\n**第二次握手**\n\n服务器收到`syn包`，必须确认客户的SYN（ack = j+1）,同时自己也发送一个SYN包（syn=k），即发`送SYN和ACK包`，此时服务器进入`SYN_RECV`状态。\n\n\n**第三次握手**\n\n客户端收到服务器的`SYN+ACK包`，向服务器发送确认`包ACK（ack=k+1）`，此包发送完毕，客户端和服务器进入`ESTABLISHED`状态，TCP连接成功，完成三次握手。\n\n完成上述三次握手后，客户端和服务器开始传送数据。\n\n\n## 四次挥手\n对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的字段）。TCP关闭连接的步骤如下\n\n1. 当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN=finish）\n2. 当主机B收到这个FIN报文段之后，并不立即用FIN报文回复主机A，而是想主机A发送一个确认序号ACK，同时通知自己的应用程序：对方要求关闭连接。【先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文】\n3. 主机B的应用程序告诉TCP：我要彻底关闭连接，TCP向主机A发送一个FIN报文段。\n4. 主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。\n","slug":"三次握手 | 四次挥手","published":1,"updated":"2018-03-19T16:01:53.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgb00a0exotkobzaa83","content":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><strong>第一次握手</strong></p>\n<p>建立连接时，客户端发送<code>syn包（syn=j）</code>到服务器，并进入SYN_SENT状态，等待服务器确认；<br>SYN即<code>同步序列编号</code>(synchronize sequence numbers)。</p>\n<p><strong>第二次握手</strong></p>\n<p>服务器收到<code>syn包</code>，必须确认客户的SYN（ack = j+1）,同时自己也发送一个SYN包（syn=k），即发<code>送SYN和ACK包</code>，此时服务器进入<code>SYN_RECV</code>状态。</p>\n<p><strong>第三次握手</strong></p>\n<p>客户端收到服务器的<code>SYN+ACK包</code>，向服务器发送确认<code>包ACK（ack=k+1）</code>，此包发送完毕，客户端和服务器进入<code>ESTABLISHED</code>状态，TCP连接成功，完成三次握手。</p>\n<p>完成上述三次握手后，客户端和服务器开始传送数据。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的字段）。TCP关闭连接的步骤如下</p>\n<ol>\n<li>当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN=finish）</li>\n<li>当主机B收到这个FIN报文段之后，并不立即用FIN报文回复主机A，而是想主机A发送一个确认序号ACK，同时通知自己的应用程序：对方要求关闭连接。【先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文】</li>\n<li>主机B的应用程序告诉TCP：我要彻底关闭连接，TCP向主机A发送一个FIN报文段。</li>\n<li>主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><strong>第一次握手</strong></p>\n<p>建立连接时，客户端发送<code>syn包（syn=j）</code>到服务器，并进入SYN_SENT状态，等待服务器确认；<br>SYN即<code>同步序列编号</code>(synchronize sequence numbers)。</p>\n<p><strong>第二次握手</strong></p>\n<p>服务器收到<code>syn包</code>，必须确认客户的SYN（ack = j+1）,同时自己也发送一个SYN包（syn=k），即发<code>送SYN和ACK包</code>，此时服务器进入<code>SYN_RECV</code>状态。</p>\n<p><strong>第三次握手</strong></p>\n<p>客户端收到服务器的<code>SYN+ACK包</code>，向服务器发送确认<code>包ACK（ack=k+1）</code>，此包发送完毕，客户端和服务器进入<code>ESTABLISHED</code>状态，TCP连接成功，完成三次握手。</p>\n<p>完成上述三次握手后，客户端和服务器开始传送数据。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的字段）。TCP关闭连接的步骤如下</p>\n<ol>\n<li>当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN=finish）</li>\n<li>当主机B收到这个FIN报文段之后，并不立即用FIN报文回复主机A，而是想主机A发送一个确认序号ACK，同时通知自己的应用程序：对方要求关闭连接。【先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文】</li>\n<li>主机B的应用程序告诉TCP：我要彻底关闭连接，TCP向主机A发送一个FIN报文段。</li>\n<li>主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 20 2018 00:01:53 GMT+0800 (China Standard Time)","title":"三次握手 | 四次挥手","path":"2018/03/19/三次握手 | 四次挥手/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-19T15:30:52.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"一种Git保留两个repo的commit信息进行合并的方法","date":"2018-02-27T06:46:37.000Z","_content":"\n以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：\n\n<!--more-->\n\n比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：\n```Bash\n$ git remote add other git@github.com:ByiProX/****.git\n$ git fetch other\n$ git checkout -b repo1 other/mster\n$ git checkout master\n$ git merge repo1 --allow-unrelated-histories\n```\n\n![](http://img.blog.csdn.net/20180213030000117)\n\n接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接\n\n\n```Bash\n$ git mergetool # 解决merge冲突  \n```\n```bash\n\n$ git remote rm other # 删除远程连接  \n$ git branch -d repo1 # 删除分支操作  \n```\n","source":"_posts/一种Git保留两个repo的commit信息进行合并的方法.md","raw":"---\ntitle: 一种Git保留两个repo的commit信息进行合并的方法\ndate: 2018-02-27 14:46:37\ntags:\n  - Git\ncategories:\n  - Git\n\n---\n\n以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：\n\n<!--more-->\n\n比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：\n```Bash\n$ git remote add other git@github.com:ByiProX/****.git\n$ git fetch other\n$ git checkout -b repo1 other/mster\n$ git checkout master\n$ git merge repo1 --allow-unrelated-histories\n```\n\n![](http://img.blog.csdn.net/20180213030000117)\n\n接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接\n\n\n```Bash\n$ git mergetool # 解决merge冲突  \n```\n```bash\n\n$ git remote rm other # 删除远程连接  \n$ git branch -d repo1 # 删除分支操作  \n```\n","slug":"一种Git保留两个repo的commit信息进行合并的方法","published":1,"updated":"2018-02-27T07:19:42.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgh00a4exott92awrus","content":"<p>以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：</p>\n<a id=\"more\"></a>\n<p>比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add other git@github.com:ByiProX/****.git</span><br><span class=\"line\">$ git fetch other</span><br><span class=\"line\">$ git checkout -b repo1 other/mster</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge repo1 --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180213030000117\" alt=\"\"></p>\n<p>接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mergetool <span class=\"comment\"># 解决merge冲突</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git remote rm other <span class=\"comment\"># 删除远程连接  </span></span><br><span class=\"line\">$ git branch -d repo1 <span class=\"comment\"># 删除分支操作</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：</p>","more":"<p>比如要将DownloadPicsBySeleniumAndPhantomJS这个项目合并到Web-Spider中，终端中执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add other git@github.com:ByiProX/****.git</span><br><span class=\"line\">$ git fetch other</span><br><span class=\"line\">$ git checkout -b repo1 other/mster</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge repo1 --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180213030000117\" alt=\"\"></p>\n<p>接下来解决merge冲突即可（可以尝试使用mergetool），如有需要可以删除多余分支和远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mergetool <span class=\"comment\"># 解决merge冲突</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git remote rm other <span class=\"comment\"># 删除远程连接  </span></span><br><span class=\"line\">$ git branch -d repo1 <span class=\"comment\"># 删除分支操作</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Feb 27 2018 15:19:42 GMT+0800 (China Standard Time)","title":"一种Git保留两个repo的commit信息进行合并的方法","path":"2018/02/27/一种Git保留两个repo的commit信息进行合并的方法/","eyeCatchImage":null,"excerpt":"<p>以往的合并时首先要删除repo的.git文件夹，然后重新add-commit-push。带来的问题是会丢失某一个仓库的提交信息，不利于时光倒退。经过摸索终于实现了保留两个仓库提交信息的合并方法。介绍如下：</p>","date":"2018-02-27T06:46:37.000Z","pv":0,"totalPV":0,"categories":"Git","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"三种多路复用IO实现方式：select，poll，epoll","date":"2018-03-07T07:43:44.000Z","_content":"\nselect，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。\n\n在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。\n\n简单来讲\nselect有3个缺点:\n\n1. 连接数受限\n2. 查找配对速度慢\n3. 数据由内核拷贝到用户态\n\npoll改善了第一个缺点\nepoll改了三个缺点.\n\n<!-- more -->\n## 使用场景\n\nIO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合：\n\n1. 当客户处理多个描述符时（一般是交互式输入和网络套接口），必须使用I/O复用。\n\n2. 当一个客户同时处理多个套接口时，这种情况是可能的，但很少出现。\n\n3. 如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。\n\n4. 如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。\n\n5. 如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。\n\n\n## select、poll、epoll简介\n\n### select\n\n**基本原理：**select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。\n\n**基本流程，如图所示：**\n\n**![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172125064-1263315531.png)**\n\n \n\n　　select目前几乎在所有的平台上支持，`其良好跨平台支持也是它的一个优点`。`select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制`，在Linux上一般为1024，`可以通过修改宏定义甚至重新编译内核的方式提升这一限制`，但是这样也会造成效率的降低。\n\n \n\n`select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理`。这样所带来的缺点是：\n\n1、select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。\n\n　　一般来说这个数目和系统内存关系很大，`具体数目可以cat /proc/sys/fs/file-max察看`。32位机默认是1024个。64位机默认是2048.\n\n2、对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。\n\n　　当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。`如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询`，这正是epoll与kqueue做的。\n\n`3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。`\n\n \n### poll\n\n**基本原理：**`poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间`，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。\n\n**它没有最大连接数的限制，`原因是它是基于链表来存储的`，但是同样有一个缺点：**\n\n`1）大量的fd的数组被整体复制于用户态和内核地址空间之间`，而不管这样的复制是不是有意义。\n\n`2）poll还有一个特点是“水平触发”`，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。\n\n**注意：**从上面看，select和poll都需要在返回后，`通过遍历文件描述符来获取已经就绪的socket`。事实上，`同时连接的大量客户端在一时刻可能只有很少的处于就绪状态`，因此随着监视的描述符数量的增长，其效率也会线性下降。\n\n### epoll\n\n　　epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。`epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次`。\n\n \n\n**基本原理：**`epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次`。还有一个特点是，`epoll使用“事件”的就绪通知方式`，通过epoll_ctl注册fd，`一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd`，epoll_wait便可以收到通知。\n\n\n**epoll的优点：**\n\n`1、没有最大并发连接的限制`，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。\n\n`2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降`。\n\n　　只有活跃可用的FD才会调用callback函数；`即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关`，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。\n\n`3、内存拷贝`，利用mmap()文件映射内存加速与内核空间的消息传递；`即epoll使用mmap减少复制开销`。\n\n\nepoll对文件描述符的操作有两种模式：`LT（level trigger）和ET（edge trigger）`。LT模式是默认模式，LT模式与ET模式的区别如下：\n\nLT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序可以不立即处理该事件`。下次调用epoll_wait时，会再次响应应用程序并通知此事件。\n\nET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序必须立即处理该事件`。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。\n\n\n## select、poll、epoll对比\n### **1、支持一个进程所能打开的最大连接数**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172727142-152295964.png)\n\n### **2、FD剧增后带来的IO效率问题**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426173035611-62395960.png)\n\n### **3、消息传递方式**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172915283-1257843409.png)\n\n\n综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：\n\n1、表面上看epoll的性能最好，`但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好`，毕竟epoll的通知机制需要很多函数回调。\n\n`2、select低效是因为每次它都需要轮询`。但低效也是相对的，视情况而定，也可通过良好的设计改善。\n\n\n## 参考\n1. https://www.cnblogs.com/jeakeven/p/5435916.html\n2. http://blog.csdn.net/davidsguo008/article/details/73556811\n3. https://www.cnblogs.com/wangyufu/p/6593515.html\n","source":"_posts/三种多路复用IO实现方式：select，poll，epoll.md","raw":"---\ntitle: 三种多路复用IO实现方式：select，poll，epoll\ndate: 2018-03-07 15:43:44\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n\nselect，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。\n\n在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。\n\n简单来讲\nselect有3个缺点:\n\n1. 连接数受限\n2. 查找配对速度慢\n3. 数据由内核拷贝到用户态\n\npoll改善了第一个缺点\nepoll改了三个缺点.\n\n<!-- more -->\n## 使用场景\n\nIO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合：\n\n1. 当客户处理多个描述符时（一般是交互式输入和网络套接口），必须使用I/O复用。\n\n2. 当一个客户同时处理多个套接口时，这种情况是可能的，但很少出现。\n\n3. 如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。\n\n4. 如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。\n\n5. 如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。\n\n\n## select、poll、epoll简介\n\n### select\n\n**基本原理：**select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。\n\n**基本流程，如图所示：**\n\n**![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172125064-1263315531.png)**\n\n \n\n　　select目前几乎在所有的平台上支持，`其良好跨平台支持也是它的一个优点`。`select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制`，在Linux上一般为1024，`可以通过修改宏定义甚至重新编译内核的方式提升这一限制`，但是这样也会造成效率的降低。\n\n \n\n`select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理`。这样所带来的缺点是：\n\n1、select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。\n\n　　一般来说这个数目和系统内存关系很大，`具体数目可以cat /proc/sys/fs/file-max察看`。32位机默认是1024个。64位机默认是2048.\n\n2、对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。\n\n　　当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。`如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询`，这正是epoll与kqueue做的。\n\n`3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。`\n\n \n### poll\n\n**基本原理：**`poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间`，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。\n\n**它没有最大连接数的限制，`原因是它是基于链表来存储的`，但是同样有一个缺点：**\n\n`1）大量的fd的数组被整体复制于用户态和内核地址空间之间`，而不管这样的复制是不是有意义。\n\n`2）poll还有一个特点是“水平触发”`，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。\n\n**注意：**从上面看，select和poll都需要在返回后，`通过遍历文件描述符来获取已经就绪的socket`。事实上，`同时连接的大量客户端在一时刻可能只有很少的处于就绪状态`，因此随着监视的描述符数量的增长，其效率也会线性下降。\n\n### epoll\n\n　　epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。`epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次`。\n\n \n\n**基本原理：**`epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次`。还有一个特点是，`epoll使用“事件”的就绪通知方式`，通过epoll_ctl注册fd，`一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd`，epoll_wait便可以收到通知。\n\n\n**epoll的优点：**\n\n`1、没有最大并发连接的限制`，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。\n\n`2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降`。\n\n　　只有活跃可用的FD才会调用callback函数；`即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关`，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。\n\n`3、内存拷贝`，利用mmap()文件映射内存加速与内核空间的消息传递；`即epoll使用mmap减少复制开销`。\n\n\nepoll对文件描述符的操作有两种模式：`LT（level trigger）和ET（edge trigger）`。LT模式是默认模式，LT模式与ET模式的区别如下：\n\nLT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序可以不立即处理该事件`。下次调用epoll_wait时，会再次响应应用程序并通知此事件。\n\nET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序必须立即处理该事件`。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。\n\n\n## select、poll、epoll对比\n### **1、支持一个进程所能打开的最大连接数**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172727142-152295964.png)\n\n### **2、FD剧增后带来的IO效率问题**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426173035611-62395960.png)\n\n### **3、消息传递方式**\n\n![](https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172915283-1257843409.png)\n\n\n综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：\n\n1、表面上看epoll的性能最好，`但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好`，毕竟epoll的通知机制需要很多函数回调。\n\n`2、select低效是因为每次它都需要轮询`。但低效也是相对的，视情况而定，也可通过良好的设计改善。\n\n\n## 参考\n1. https://www.cnblogs.com/jeakeven/p/5435916.html\n2. http://blog.csdn.net/davidsguo008/article/details/73556811\n3. https://www.cnblogs.com/wangyufu/p/6593515.html\n","slug":"三种多路复用IO实现方式：select，poll，epoll","published":1,"updated":"2018-03-07T10:40:20.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgj00a7exotly9p4nbh","content":"<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>\n<p>在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。</p>\n<p>简单来讲<br>select有3个缺点:</p>\n<ol>\n<li>连接数受限</li>\n<li>查找配对速度慢</li>\n<li>数据由内核拷贝到用户态</li>\n</ol>\n<p>poll改善了第一个缺点<br>epoll改了三个缺点.</p>\n<a id=\"more\"></a>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合：</p>\n<ol>\n<li><p>当客户处理多个描述符时（一般是交互式输入和网络套接口），必须使用I/O复用。</p>\n</li>\n<li><p>当一个客户同时处理多个套接口时，这种情况是可能的，但很少出现。</p>\n</li>\n<li><p>如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。</p>\n</li>\n<li><p>如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。</p>\n</li>\n<li><p>如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。</p>\n</li>\n</ol>\n<h2 id=\"select、poll、epoll简介\"><a href=\"#select、poll、epoll简介\" class=\"headerlink\" title=\"select、poll、epoll简介\"></a>select、poll、epoll简介</h2><h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p><strong>基本原理：</strong>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p>\n<p><strong>基本流程，如图所示：</strong></p>\n<p><strong><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172125064-1263315531.png\" alt=\"\"></strong></p>\n<p>　　select目前几乎在所有的平台上支持，<code>其良好跨平台支持也是它的一个优点</code>。<code>select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制</code>，在Linux上一般为1024，<code>可以通过修改宏定义甚至重新编译内核的方式提升这一限制</code>，但是这样也会造成效率的降低。</p>\n<p><code>select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理</code>。这样所带来的缺点是：</p>\n<p>1、select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。</p>\n<p>　　一般来说这个数目和系统内存关系很大，<code>具体数目可以cat /proc/sys/fs/file-max察看</code>。32位机默认是1024个。64位机默认是2048.</p>\n<p>2、对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。</p>\n<p>　　当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。<code>如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询</code>，这正是epoll与kqueue做的。</p>\n<p><code>3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</code></p>\n<h3 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h3><p><strong>基本原理：</strong><code>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间</code>，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。</p>\n<p><strong>它没有最大连接数的限制，<code>原因是它是基于链表来存储的</code>，但是同样有一个缺点：</strong></p>\n<p><code>1）大量的fd的数组被整体复制于用户态和内核地址空间之间</code>，而不管这样的复制是不是有意义。</p>\n<p><code>2）poll还有一个特点是“水平触发”</code>，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</p>\n<p><strong>注意：</strong>从上面看，select和poll都需要在返回后，<code>通过遍历文件描述符来获取已经就绪的socket</code>。事实上，<code>同时连接的大量客户端在一时刻可能只有很少的处于就绪状态</code>，因此随着监视的描述符数量的增长，其效率也会线性下降。</p>\n<h3 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h3><p>　　epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。<code>epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次</code>。</p>\n<p><strong>基本原理：</strong><code>epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次</code>。还有一个特点是，<code>epoll使用“事件”的就绪通知方式</code>，通过epoll_ctl注册fd，<code>一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd</code>，epoll_wait便可以收到通知。</p>\n<p><strong>epoll的优点：</strong></p>\n<p><code>1、没有最大并发连接的限制</code>，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。</p>\n<p><code>2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降</code>。</p>\n<p>　　只有活跃可用的FD才会调用callback函数；<code>即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关</code>，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p>\n<p><code>3、内存拷贝</code>，利用mmap()文件映射内存加速与内核空间的消息传递；<code>即epoll使用mmap减少复制开销</code>。</p>\n<p>epoll对文件描述符的操作有两种模式：<code>LT（level trigger）和ET（edge trigger）</code>。LT模式是默认模式，LT模式与ET模式的区别如下：</p>\n<p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</p>\n<p>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序必须立即处理该事件</code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p>\n<h2 id=\"select、poll、epoll对比\"><a href=\"#select、poll、epoll对比\" class=\"headerlink\" title=\"select、poll、epoll对比\"></a>select、poll、epoll对比</h2><h3 id=\"1、支持一个进程所能打开的最大连接数\"><a href=\"#1、支持一个进程所能打开的最大连接数\" class=\"headerlink\" title=\"1、支持一个进程所能打开的最大连接数\"></a><strong>1、支持一个进程所能打开的最大连接数</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172727142-152295964.png\" alt=\"\"></p>\n<h3 id=\"2、FD剧增后带来的IO效率问题\"><a href=\"#2、FD剧增后带来的IO效率问题\" class=\"headerlink\" title=\"2、FD剧增后带来的IO效率问题\"></a><strong>2、FD剧增后带来的IO效率问题</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426173035611-62395960.png\" alt=\"\"></p>\n<h3 id=\"3、消息传递方式\"><a href=\"#3、消息传递方式\" class=\"headerlink\" title=\"3、消息传递方式\"></a><strong>3、消息传递方式</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172915283-1257843409.png\" alt=\"\"></p>\n<p>综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：</p>\n<p>1、表面上看epoll的性能最好，<code>但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好</code>，毕竟epoll的通知机制需要很多函数回调。</p>\n<p><code>2、select低效是因为每次它都需要轮询</code>。但低效也是相对的，视情况而定，也可通过良好的设计改善。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/jeakeven/p/5435916.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jeakeven/p/5435916.html</a></li>\n<li><a href=\"http://blog.csdn.net/davidsguo008/article/details/73556811\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/davidsguo008/article/details/73556811</a></li>\n<li><a href=\"https://www.cnblogs.com/wangyufu/p/6593515.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wangyufu/p/6593515.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>\n<p>在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。</p>\n<p>简单来讲<br>select有3个缺点:</p>\n<ol>\n<li>连接数受限</li>\n<li>查找配对速度慢</li>\n<li>数据由内核拷贝到用户态</li>\n</ol>\n<p>poll改善了第一个缺点<br>epoll改了三个缺点.</p>","more":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合：</p>\n<ol>\n<li><p>当客户处理多个描述符时（一般是交互式输入和网络套接口），必须使用I/O复用。</p>\n</li>\n<li><p>当一个客户同时处理多个套接口时，这种情况是可能的，但很少出现。</p>\n</li>\n<li><p>如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。</p>\n</li>\n<li><p>如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。</p>\n</li>\n<li><p>如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。</p>\n</li>\n</ol>\n<h2 id=\"select、poll、epoll简介\"><a href=\"#select、poll、epoll简介\" class=\"headerlink\" title=\"select、poll、epoll简介\"></a>select、poll、epoll简介</h2><h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p><strong>基本原理：</strong>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p>\n<p><strong>基本流程，如图所示：</strong></p>\n<p><strong><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172125064-1263315531.png\" alt=\"\"></strong></p>\n<p>　　select目前几乎在所有的平台上支持，<code>其良好跨平台支持也是它的一个优点</code>。<code>select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制</code>，在Linux上一般为1024，<code>可以通过修改宏定义甚至重新编译内核的方式提升这一限制</code>，但是这样也会造成效率的降低。</p>\n<p><code>select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理</code>。这样所带来的缺点是：</p>\n<p>1、select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。</p>\n<p>　　一般来说这个数目和系统内存关系很大，<code>具体数目可以cat /proc/sys/fs/file-max察看</code>。32位机默认是1024个。64位机默认是2048.</p>\n<p>2、对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。</p>\n<p>　　当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。<code>如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询</code>，这正是epoll与kqueue做的。</p>\n<p><code>3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</code></p>\n<h3 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h3><p><strong>基本原理：</strong><code>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间</code>，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。</p>\n<p><strong>它没有最大连接数的限制，<code>原因是它是基于链表来存储的</code>，但是同样有一个缺点：</strong></p>\n<p><code>1）大量的fd的数组被整体复制于用户态和内核地址空间之间</code>，而不管这样的复制是不是有意义。</p>\n<p><code>2）poll还有一个特点是“水平触发”</code>，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</p>\n<p><strong>注意：</strong>从上面看，select和poll都需要在返回后，<code>通过遍历文件描述符来获取已经就绪的socket</code>。事实上，<code>同时连接的大量客户端在一时刻可能只有很少的处于就绪状态</code>，因此随着监视的描述符数量的增长，其效率也会线性下降。</p>\n<h3 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h3><p>　　epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。<code>epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次</code>。</p>\n<p><strong>基本原理：</strong><code>epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次</code>。还有一个特点是，<code>epoll使用“事件”的就绪通知方式</code>，通过epoll_ctl注册fd，<code>一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd</code>，epoll_wait便可以收到通知。</p>\n<p><strong>epoll的优点：</strong></p>\n<p><code>1、没有最大并发连接的限制</code>，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。</p>\n<p><code>2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降</code>。</p>\n<p>　　只有活跃可用的FD才会调用callback函数；<code>即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关</code>，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p>\n<p><code>3、内存拷贝</code>，利用mmap()文件映射内存加速与内核空间的消息传递；<code>即epoll使用mmap减少复制开销</code>。</p>\n<p>epoll对文件描述符的操作有两种模式：<code>LT（level trigger）和ET（edge trigger）</code>。LT模式是默认模式，LT模式与ET模式的区别如下：</p>\n<p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</p>\n<p>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序必须立即处理该事件</code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p>\n<h2 id=\"select、poll、epoll对比\"><a href=\"#select、poll、epoll对比\" class=\"headerlink\" title=\"select、poll、epoll对比\"></a>select、poll、epoll对比</h2><h3 id=\"1、支持一个进程所能打开的最大连接数\"><a href=\"#1、支持一个进程所能打开的最大连接数\" class=\"headerlink\" title=\"1、支持一个进程所能打开的最大连接数\"></a><strong>1、支持一个进程所能打开的最大连接数</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172727142-152295964.png\" alt=\"\"></p>\n<h3 id=\"2、FD剧增后带来的IO效率问题\"><a href=\"#2、FD剧增后带来的IO效率问题\" class=\"headerlink\" title=\"2、FD剧增后带来的IO效率问题\"></a><strong>2、FD剧增后带来的IO效率问题</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426173035611-62395960.png\" alt=\"\"></p>\n<h3 id=\"3、消息传递方式\"><a href=\"#3、消息传递方式\" class=\"headerlink\" title=\"3、消息传递方式\"></a><strong>3、消息传递方式</strong></h3><p><img src=\"https://images2015.cnblogs.com/blog/667911/201604/667911-20160426172915283-1257843409.png\" alt=\"\"></p>\n<p>综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：</p>\n<p>1、表面上看epoll的性能最好，<code>但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好</code>，毕竟epoll的通知机制需要很多函数回调。</p>\n<p><code>2、select低效是因为每次它都需要轮询</code>。但低效也是相对的，视情况而定，也可通过良好的设计改善。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/jeakeven/p/5435916.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jeakeven/p/5435916.html</a></li>\n<li><a href=\"http://blog.csdn.net/davidsguo008/article/details/73556811\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/davidsguo008/article/details/73556811</a></li>\n<li><a href=\"https://www.cnblogs.com/wangyufu/p/6593515.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wangyufu/p/6593515.html</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 18:40:20 GMT+0800 (China Standard Time)","title":"三种多路复用IO实现方式：select，poll，epoll","path":"2018/03/07/三种多路复用IO实现方式：select，poll，epoll/","eyeCatchImage":null,"excerpt":"<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>\n<p>在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。</p>\n<p>简单来讲<br>select有3个缺点:</p>\n<ol>\n<li>连接数受限</li>\n<li>查找配对速度慢</li>\n<li>数据由内核拷贝到用户态</li>\n</ol>\n<p>poll改善了第一个缺点<br>epoll改了三个缺点.</p>","date":"2018-03-07T07:43:44.000Z","pv":0,"totalPV":0,"categories":"操作系统 > 多任务处理","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"从零开始学爬虫-01","date":"2018-02-27T16:37:37.000Z","_content":"\n### 本节关键字\n*urllib | chardet*\n\n### urllib 简介\n在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：\n<!-- more -->\n\n>1.urllib.request模块是用来打开和读取URLs的；\n\n>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；\n\n>3.urllib.parse模块包含了一些解析URLs的方法；\n\n>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。\n\n\n使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。\nurlopen有一些可选参数，具体信息可以查阅Python自带的documentation。\n\n### urllib 测试\n了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    print(html)\n```\n\nurllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。\n\n浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。\n\n我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com/\")\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：\n\n\n当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。\n\n这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。\n\n我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nimport chardet\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    charset = chardet.detect(html)\n    print(charset)\n```\n","source":"_posts/从零开始学爬虫-01.md","raw":"---\ntitle: 从零开始学爬虫-01\ndate: 2018-02-28 00:37:37\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n### 本节关键字\n*urllib | chardet*\n\n### urllib 简介\n在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：\n<!-- more -->\n\n>1.urllib.request模块是用来打开和读取URLs的；\n\n>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；\n\n>3.urllib.parse模块包含了一些解析URLs的方法；\n\n>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。\n\n\n使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。\nurlopen有一些可选参数，具体信息可以查阅Python自带的documentation。\n\n### urllib 测试\n了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    print(html)\n```\n\nurllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。\n\n浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。\n\n我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com/\")\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：\n\n\n当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。\n\n这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。\n\n我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nimport chardet\n\nif __name__ == \"__main__\":\n    response = request.urlopen(\"http://fanyi.baidu.com\")\n    html = response.read()\n    charset = chardet.detect(html)\n    print(charset)\n```\n","slug":"从零开始学爬虫-01","published":1,"updated":"2018-02-27T17:04:40.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgp00acexot3s9rge8l","content":"<h3 id=\"本节关键字\"><a href=\"#本节关键字\" class=\"headerlink\" title=\"本节关键字\"></a>本节关键字</h3><p><em>urllib | chardet</em></p>\n<h3 id=\"urllib-简介\"><a href=\"#urllib-简介\" class=\"headerlink\" title=\"urllib 简介\"></a>urllib 简介</h3><p>在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>1.urllib.request模块是用来打开和读取URLs的；</p>\n</blockquote>\n<blockquote>\n<p>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；</p>\n</blockquote>\n<blockquote>\n<p>3.urllib.parse模块包含了一些解析URLs的方法；</p>\n</blockquote>\n<blockquote>\n<p>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。</p>\n</blockquote>\n<p>使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。<br>urlopen有一些可选参数，具体信息可以查阅Python自带的documentation。</p>\n<h3 id=\"urllib-测试\"><a href=\"#urllib-测试\" class=\"headerlink\" title=\"urllib 测试\"></a>urllib 测试</h3><p>了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>urllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。</p>\n<p>浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。</p>\n<p>我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：</p>\n<p>当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。</p>\n<p>这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。</p>\n<p>我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    charset = chardet.detect(html)</span><br><span class=\"line\">    print(charset)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"本节关键字\"><a href=\"#本节关键字\" class=\"headerlink\" title=\"本节关键字\"></a>本节关键字</h3><p><em>urllib | chardet</em></p>\n<h3 id=\"urllib-简介\"><a href=\"#urllib-简介\" class=\"headerlink\" title=\"urllib 简介\"></a>urllib 简介</h3><p>在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：<br>","more":"</p>\n<blockquote>\n<p>1.urllib.request模块是用来打开和读取URLs的；</p>\n</blockquote>\n<blockquote>\n<p>2.urllib.error模块包含一些有urllib.request产生的错误，可以使用try进行捕捉处理；</p>\n</blockquote>\n<blockquote>\n<p>3.urllib.parse模块包含了一些解析URLs的方法；</p>\n</blockquote>\n<blockquote>\n<p>4.urllib.robotparser模块用来解析robots.txt文本文件.它提供了一个单独的RobotFileParser类，通过该类提供的can_fetch()方法测试爬虫是否可以下载一个页面。</p>\n</blockquote>\n<p>使用urllib.request.urlopen()这个接口函数就可以访问一个网站，读取并打印信息。<br>urlopen有一些可选参数，具体信息可以查阅Python自带的documentation。</p>\n<h3 id=\"urllib-测试\"><a href=\"#urllib-测试\" class=\"headerlink\" title=\"urllib 测试\"></a>urllib 测试</h3><p>了解到这些，我们就可以写一个最简单的程序，文件名为urllib_test01.py，感受一个urllib库的魅力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>urllib使用使用request.urlopen()访问和读取URLs信息，返回的对象response如同一个文本对象，我们可以调用read()，进行读取。再通过print()屏幕打印。</p>\n<p>浏览器就是作为客户端从服务器端获取信息，然后将信息解析，再展示给我们的。但是显然他们都是二进制的乱码。</p>\n<p>我们可以通过简单的decode()命令将网页的信息进行解码，并显示出来，我们新创建一个文件，命名为urllib_test02.py，编写如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到这样的结果，显然解码后的信息看起来工整和舒服多了：</p>\n<p>当然这个前提是我们已经知道了这个网页是使用utf-8编码的，怎么查看网页的编码方式呢？非常简单的方法是使用使用浏览器审查元素，只需要找到head标签开始位置的chareset，就知道网页是采用何种编码。</p>\n<p>这样我们就知道了这个网站的编码方式，但是这需要我们每次都打开浏览器，并找下编码方式，显然有些费事，使用几行代码解决更加省事并且显得酷一些。</p>\n<p>我们需要安装第三方库chardet，它是用来判断编码的模块。安装好后，我们就可以使用chardet.detect()方法，判断网页的编码方式了。至此，我们就可以编写一个小程序判断网页的编码方式了，新建文件名为chardet_test01.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    response = request.urlopen(<span class=\"string\">\"http://fanyi.baidu.com\"</span>)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    charset = chardet.detect(html)</span><br><span class=\"line\">    print(charset)</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 01:04:40 GMT+0800 (China Standard Time)","title":"从零开始学爬虫-01","path":"2018/02/28/从零开始学爬虫-01/","eyeCatchImage":null,"excerpt":"<h3 id=\"本节关键字\"><a href=\"#本节关键字\" class=\"headerlink\" title=\"本节关键字\"></a>本节关键字</h3><p><em>urllib | chardet</em></p>\n<h3 id=\"urllib-简介\"><a href=\"#urllib-简介\" class=\"headerlink\" title=\"urllib 简介\"></a>urllib 简介</h3><p>在Python3.x中，我们可以使用urlib这个组件抓取网页，urllib是一个URL处理包，这个包中集合了一些处理URL的模块，如下：<br>","date":"2018-02-27T16:37:37.000Z","pv":0,"totalPV":0,"categories":"Spider > Urllib","tags":["Python3","Spider","Urllib"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"从零开始学爬虫-02","date":"2018-02-27T16:48:24.000Z","_content":"\n### 一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\n为什么把url里的 \"_o\" 删掉后就可以正常爬取呢？\n<!-- more -->\n### urlopen的url参数 Agent\n\n\nurl不仅可以是一个字符串，例如:http://www.baidu.com。\n\nurl也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。\n\nurlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。\n\n\n\n- geturl()返回的是一个url的字符串；\n\n- info()返回的是一些meta标记的元信息，包括一些服务器的信息；\n\n- getcode()返回的是HTTP的状态码，如果返回200表示请求成功。\n\n关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。\n\n\n了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    print(\"geturl打印信息：%s\"%(response.geturl()))\n    print('**********************************************')\n    print(\"info打印信息：%s\"%(response.info()))\n    print('**********************************************')\n    print(\"getcode打印信息：%s\"%(response.getcode()))\n\n```\n\n\n### urlopen的data参数\n\n我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：\n\n从客户端向服务器提交数据使用POST；\n\n从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。\n\n如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。\n\ndata参数有自己的格式，它是一个基于application/x-www.form-urlencoded的格式，具体格式我们不用了解， 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。\n\n### 发送data实例\n\n向有道翻译发送data，得到翻译结果。\n####  (1).打开有道翻译界面，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (2).鼠标右键检查，也就是审查元素，如下图所示：\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (3).选择右侧出现的Network，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (4).在左侧输入翻译内容，输入Jack，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\n![image](http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n####  (6).点击上图红框中的内容，查看它的信息，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (7).记住这些信息，这是我们一会儿写程序需要用到的。\n\n  新建文件translate_test.py，编写如下代码：\n ```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import parse\nimport json\n\nif __name__ == \"__main__\":\n    #对应上图的Request URL\n    Request_URL = 'http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule&sessionFrom=null'\n    #创建Form_Data字典，存储上图的Form Data\n    Form_Data = {}\n    Form_Data['type'] = 'AUTO'\n    Form_Data['i'] = 'Jack'\n    Form_Data['doctype'] = 'json'\n    Form_Data['xmlVersion'] = '1.8'\n    Form_Data['keyfrom'] = 'fanyi.web'\n    Form_Data['ue'] = 'ue:UTF-8'\n    Form_Data['action'] = 'FY_BY_CLICKBUTTON'\n    #使用urlencode方法转换标准格式\n    data = parse.urlencode(Form_Data).encode('utf-8')\n    #传递Request对象和转换完格式的数据\n    response = request.urlopen(Request_URL,data)\n    #读取信息并解码\n    html = response.read().decode('utf-8')\n    #使用JSON\n    translate_results = json.loads(html)\n    #找到翻译结果\n    translate_results = translate_results['translateResult'][0][0]['tgt']\n    #打印翻译信息\n    print(\"翻译的结果是：%s\" % translate_results)\n```\n\n运行查看翻译结果\n","source":"_posts/从零开始学爬虫-02.md","raw":"---\ntitle: 从零开始学爬虫-02\ndate: 2018-02-28 00:48:24\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n### 一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\n为什么把url里的 \"_o\" 删掉后就可以正常爬取呢？\n<!-- more -->\n### urlopen的url参数 Agent\n\n\nurl不仅可以是一个字符串，例如:http://www.baidu.com。\n\nurl也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    html = response.read()\n    html = html.decode(\"utf-8\")\n    print(html)\n```\n\n同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。\n\nurlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。\n\n\n\n- geturl()返回的是一个url的字符串；\n\n- info()返回的是一些meta标记的元信息，包括一些服务器的信息；\n\n- getcode()返回的是HTTP的状态码，如果返回200表示请求成功。\n\n关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。\n\n\n了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    req = request.Request(\"http://fanyi.baidu.com/\")\n    response = request.urlopen(req)\n    print(\"geturl打印信息：%s\"%(response.geturl()))\n    print('**********************************************')\n    print(\"info打印信息：%s\"%(response.info()))\n    print('**********************************************')\n    print(\"getcode打印信息：%s\"%(response.getcode()))\n\n```\n\n\n### urlopen的data参数\n\n我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：\n\n从客户端向服务器提交数据使用POST；\n\n从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。\n\n如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。\n\ndata参数有自己的格式，它是一个基于application/x-www.form-urlencoded的格式，具体格式我们不用了解， 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。\n\n### 发送data实例\n\n向有道翻译发送data，得到翻译结果。\n####  (1).打开有道翻译界面，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (2).鼠标右键检查，也就是审查元素，如下图所示：\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (3).选择右侧出现的Network，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (4).在左侧输入翻译内容，输入Jack，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\n![image](http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n####  (6).点击上图红框中的内容，查看它的信息，如下图所示：\n\n ![image](http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n####  (7).记住这些信息，这是我们一会儿写程序需要用到的。\n\n  新建文件translate_test.py，编写如下代码：\n ```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import parse\nimport json\n\nif __name__ == \"__main__\":\n    #对应上图的Request URL\n    Request_URL = 'http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule&sessionFrom=null'\n    #创建Form_Data字典，存储上图的Form Data\n    Form_Data = {}\n    Form_Data['type'] = 'AUTO'\n    Form_Data['i'] = 'Jack'\n    Form_Data['doctype'] = 'json'\n    Form_Data['xmlVersion'] = '1.8'\n    Form_Data['keyfrom'] = 'fanyi.web'\n    Form_Data['ue'] = 'ue:UTF-8'\n    Form_Data['action'] = 'FY_BY_CLICKBUTTON'\n    #使用urlencode方法转换标准格式\n    data = parse.urlencode(Form_Data).encode('utf-8')\n    #传递Request对象和转换完格式的数据\n    response = request.urlopen(Request_URL,data)\n    #读取信息并解码\n    html = response.read().decode('utf-8')\n    #使用JSON\n    translate_results = json.loads(html)\n    #找到翻译结果\n    translate_results = translate_results['translateResult'][0][0]['tgt']\n    #打印翻译信息\n    print(\"翻译的结果是：%s\" % translate_results)\n```\n\n运行查看翻译结果\n","slug":"从零开始学爬虫-02","published":1,"updated":"2018-02-27T17:04:42.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgt00afexotcahrdj5x","content":"<h3 id=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"><a href=\"#一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\" class=\"headerlink\" title=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"></a>一个疑问尚未解决疑问，小弟在此跪求大牛解答一下</h3><p>为什么把url里的 “_o” 删掉后就可以正常爬取呢？<br><a id=\"more\"></a></p>\n<h3 id=\"urlopen的url参数-Agent\"><a href=\"#urlopen的url参数-Agent\" class=\"headerlink\" title=\"urlopen的url参数 Agent\"></a>urlopen的url参数 Agent</h3><p>url不仅可以是一个字符串，例如:<a href=\"http://www.baidu.com。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com。</a></p>\n<p>url也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。</p>\n<p>urlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。</p>\n<ul>\n<li><p>geturl()返回的是一个url的字符串；</p>\n</li>\n<li><p>info()返回的是一些meta标记的元信息，包括一些服务器的信息；</p>\n</li>\n<li><p>getcode()返回的是HTTP的状态码，如果返回200表示请求成功。</p>\n</li>\n</ul>\n<p>关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。</p>\n<p>了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    print(<span class=\"string\">\"geturl打印信息：%s\"</span>%(response.geturl()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"info打印信息：%s\"</span>%(response.info()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"getcode打印信息：%s\"</span>%(response.getcode()))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"urlopen的data参数\"><a href=\"#urlopen的data参数\" class=\"headerlink\" title=\"urlopen的data参数\"></a>urlopen的data参数</h3><p>我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：</p>\n<p>从客户端向服务器提交数据使用POST；</p>\n<p>从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。</p>\n<p>如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。</p>\n<p>data参数有自己的格式，它是一个基于application/x-<a href=\"http://www.form-urlencoded的格式，具体格式我们不用了解，\" target=\"_blank\" rel=\"noopener\">www.form-urlencoded的格式，具体格式我们不用了解，</a> 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。</p>\n<h3 id=\"发送data实例\"><a href=\"#发送data实例\" class=\"headerlink\" title=\"发送data实例\"></a>发送data实例</h3><p>向有道翻译发送data，得到翻译结果。</p>\n<h4 id=\"1-打开有道翻译界面，如下图所示：\"><a href=\"#1-打开有道翻译界面，如下图所示：\" class=\"headerlink\" title=\"(1).打开有道翻译界面，如下图所示：\"></a>(1).打开有道翻译界面，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"2-鼠标右键检查，也就是审查元素，如下图所示：\"><a href=\"#2-鼠标右键检查，也就是审查元素，如下图所示：\" class=\"headerlink\" title=\"(2).鼠标右键检查，也就是审查元素，如下图所示：\"></a>(2).鼠标右键检查，也就是审查元素，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"3-选择右侧出现的Network，如下图所示：\"><a href=\"#3-选择右侧出现的Network，如下图所示：\" class=\"headerlink\" title=\"(3).选择右侧出现的Network，如下图所示：\"></a>(3).选择右侧出现的Network，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"4-在左侧输入翻译内容，输入Jack，如下图所示：\"><a href=\"#4-在左侧输入翻译内容，输入Jack，如下图所示：\" class=\"headerlink\" title=\"(4).在左侧输入翻译内容，输入Jack，如下图所示：\"></a>(4).在左侧输入翻译内容，输入Jack，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"><a href=\"#5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\" class=\"headerlink\" title=\"(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"></a>(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"6-点击上图红框中的内容，查看它的信息，如下图所示：\"><a href=\"#6-点击上图红框中的内容，查看它的信息，如下图所示：\" class=\"headerlink\" title=\"(6).点击上图红框中的内容，查看它的信息，如下图所示：\"></a>(6).点击上图红框中的内容，查看它的信息，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"7-记住这些信息，这是我们一会儿写程序需要用到的。\"><a href=\"#7-记住这些信息，这是我们一会儿写程序需要用到的。\" class=\"headerlink\" title=\"(7).记住这些信息，这是我们一会儿写程序需要用到的。\"></a>(7).记住这些信息，这是我们一会儿写程序需要用到的。</h4><p>  新建文件translate_test.py，编写如下代码：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#对应上图的Request URL</span></span><br><span class=\"line\">    Request_URL = <span class=\"string\">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;sessionFrom=null'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Form_Data字典，存储上图的Form Data</span></span><br><span class=\"line\">    Form_Data = &#123;&#125;</span><br><span class=\"line\">    Form_Data[<span class=\"string\">'type'</span>] = <span class=\"string\">'AUTO'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'i'</span>] = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'doctype'</span>] = <span class=\"string\">'json'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'xmlVersion'</span>] = <span class=\"string\">'1.8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'keyfrom'</span>] = <span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'ue'</span>] = <span class=\"string\">'ue:UTF-8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    data = parse.urlencode(Form_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传递Request对象和转换完格式的数据</span></span><br><span class=\"line\">    response = request.urlopen(Request_URL,data)</span><br><span class=\"line\">    <span class=\"comment\">#读取信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#使用JSON</span></span><br><span class=\"line\">    translate_results = json.loads(html)</span><br><span class=\"line\">    <span class=\"comment\">#找到翻译结果</span></span><br><span class=\"line\">    translate_results = translate_results[<span class=\"string\">'translateResult'</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"string\">'tgt'</span>]</span><br><span class=\"line\">    <span class=\"comment\">#打印翻译信息</span></span><br><span class=\"line\">    print(<span class=\"string\">\"翻译的结果是：%s\"</span> % translate_results)</span><br></pre></td></tr></table></figure></p>\n<p>运行查看翻译结果</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"><a href=\"#一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\" class=\"headerlink\" title=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"></a>一个疑问尚未解决疑问，小弟在此跪求大牛解答一下</h3><p>为什么把url里的 “_o” 删掉后就可以正常爬取呢？<br>","more":"</p>\n<h3 id=\"urlopen的url参数-Agent\"><a href=\"#urlopen的url参数-Agent\" class=\"headerlink\" title=\"urlopen的url参数 Agent\"></a>urlopen的url参数 Agent</h3><p>url不仅可以是一个字符串，例如:<a href=\"http://www.baidu.com。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com。</a></p>\n<p>url也可以是一个Request对象，这就需要我们先定义一个Request对象，然后将这个Request对象作为urlopen的参数使用，方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    html = response.read()</span><br><span class=\"line\">    html = html.decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure>\n<p>同样，运行这段代码同样可以得到网页信息。可以看一下这段代码和上个笔记中代码的不同，对比一下就明白了。</p>\n<p>urlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。</p>\n<ul>\n<li><p>geturl()返回的是一个url的字符串；</p>\n</li>\n<li><p>info()返回的是一些meta标记的元信息，包括一些服务器的信息；</p>\n</li>\n<li><p>getcode()返回的是HTTP的状态码，如果返回200表示请求成功。</p>\n</li>\n</ul>\n<p>关于META标签和HTTP状态码的内容可以自行百度百科，里面有很详细的介绍。</p>\n<p>了解到这些，我们就可以进行新一轮的测试，新建文件名urllib_test04.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    req = request.Request(<span class=\"string\">\"http://fanyi.baidu.com/\"</span>)</span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    print(<span class=\"string\">\"geturl打印信息：%s\"</span>%(response.geturl()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"info打印信息：%s\"</span>%(response.info()))</span><br><span class=\"line\">    print(<span class=\"string\">'**********************************************'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"getcode打印信息：%s\"</span>%(response.getcode()))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"urlopen的data参数\"><a href=\"#urlopen的data参数\" class=\"headerlink\" title=\"urlopen的data参数\"></a>urlopen的data参数</h3><p>我们可以使用data参数，向服务器发送数据。根据HTTP规范，GET用于信息获取，POST是向服务器提交数据的一种请求，再换句话说：</p>\n<p>从客户端向服务器提交数据使用POST；</p>\n<p>从服务器获得数据到客户端使用GET(GET也可以提交，暂不考虑)。</p>\n<p>如果没有设置urlopen()函数的data参数，HTTP请求采用GET方式，也就是我们从服务器获取信息，如果我们设置data参数，HTTP请求采用POST方式，也就是我们向服务器传递数据。</p>\n<p>data参数有自己的格式，它是一个基于application/x-<a href=\"http://www.form-urlencoded的格式，具体格式我们不用了解，\" target=\"_blank\" rel=\"noopener\">www.form-urlencoded的格式，具体格式我们不用了解，</a> 因为我们可以使用urllib.parse.urlencode()函数将字符串自动转换成上面所说的格式。</p>\n<h3 id=\"发送data实例\"><a href=\"#发送data实例\" class=\"headerlink\" title=\"发送data实例\"></a>发送data实例</h3><p>向有道翻译发送data，得到翻译结果。</p>\n<h4 id=\"1-打开有道翻译界面，如下图所示：\"><a href=\"#1-打开有道翻译界面，如下图所示：\" class=\"headerlink\" title=\"(1).打开有道翻译界面，如下图所示：\"></a>(1).打开有道翻译界面，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-31f629ec53534a43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"2-鼠标右键检查，也就是审查元素，如下图所示：\"><a href=\"#2-鼠标右键检查，也就是审查元素，如下图所示：\" class=\"headerlink\" title=\"(2).鼠标右键检查，也就是审查元素，如下图所示：\"></a>(2).鼠标右键检查，也就是审查元素，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-f199c9cbcd80b40f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"3-选择右侧出现的Network，如下图所示：\"><a href=\"#3-选择右侧出现的Network，如下图所示：\" class=\"headerlink\" title=\"(3).选择右侧出现的Network，如下图所示：\"></a>(3).选择右侧出现的Network，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-4354c17b0169d4b9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"4-在左侧输入翻译内容，输入Jack，如下图所示：\"><a href=\"#4-在左侧输入翻译内容，输入Jack，如下图所示：\" class=\"headerlink\" title=\"(4).在左侧输入翻译内容，输入Jack，如下图所示：\"></a>(4).在左侧输入翻译内容，输入Jack，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-1a5e4f785e7bbccf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"><a href=\"#5-点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\" class=\"headerlink\" title=\"(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：\"></a>(5).点击自动翻译按钮，我们就可以看到右侧出现的内容，如下图所示：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-37b47520ec88de2e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"6-点击上图红框中的内容，查看它的信息，如下图所示：\"><a href=\"#6-点击上图红框中的内容，查看它的信息，如下图所示：\" class=\"headerlink\" title=\"(6).点击上图红框中的内容，查看它的信息，如下图所示：\"></a>(6).点击上图红框中的内容，查看它的信息，如下图所示：</h4><p> <img src=\"http://upload-images.jianshu.io/upload_images/2952111-9b692ceecf538fd5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-1dc2354ec47dc6ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"7-记住这些信息，这是我们一会儿写程序需要用到的。\"><a href=\"#7-记住这些信息，这是我们一会儿写程序需要用到的。\" class=\"headerlink\" title=\"(7).记住这些信息，这是我们一会儿写程序需要用到的。\"></a>(7).记住这些信息，这是我们一会儿写程序需要用到的。</h4><p>  新建文件translate_test.py，编写如下代码：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#对应上图的Request URL</span></span><br><span class=\"line\">    Request_URL = <span class=\"string\">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;sessionFrom=null'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Form_Data字典，存储上图的Form Data</span></span><br><span class=\"line\">    Form_Data = &#123;&#125;</span><br><span class=\"line\">    Form_Data[<span class=\"string\">'type'</span>] = <span class=\"string\">'AUTO'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'i'</span>] = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'doctype'</span>] = <span class=\"string\">'json'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'xmlVersion'</span>] = <span class=\"string\">'1.8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'keyfrom'</span>] = <span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'ue'</span>] = <span class=\"string\">'ue:UTF-8'</span></span><br><span class=\"line\">    Form_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    data = parse.urlencode(Form_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传递Request对象和转换完格式的数据</span></span><br><span class=\"line\">    response = request.urlopen(Request_URL,data)</span><br><span class=\"line\">    <span class=\"comment\">#读取信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#使用JSON</span></span><br><span class=\"line\">    translate_results = json.loads(html)</span><br><span class=\"line\">    <span class=\"comment\">#找到翻译结果</span></span><br><span class=\"line\">    translate_results = translate_results[<span class=\"string\">'translateResult'</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"string\">'tgt'</span>]</span><br><span class=\"line\">    <span class=\"comment\">#打印翻译信息</span></span><br><span class=\"line\">    print(<span class=\"string\">\"翻译的结果是：%s\"</span> % translate_results)</span><br></pre></td></tr></table></figure></p>\n<p>运行查看翻译结果</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 01:04:42 GMT+0800 (China Standard Time)","title":"从零开始学爬虫-02","path":"2018/02/28/从零开始学爬虫-02/","eyeCatchImage":null,"excerpt":"<h3 id=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"><a href=\"#一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\" class=\"headerlink\" title=\"一个疑问尚未解决疑问，小弟在此跪求大牛解答一下\"></a>一个疑问尚未解决疑问，小弟在此跪求大牛解答一下</h3><p>为什么把url里的 “_o” 删掉后就可以正常爬取呢？<br>","date":"2018-02-27T16:48:24.000Z","pv":0,"totalPV":0,"categories":"Spider > Urllib","tags":["Python3","Spider","Urllib"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"什么是Socket(转)","date":"2018-03-12T16:49:26.000Z","_content":"对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：\n1. 什么是TCP/IP、UDP？\n2. Socket在哪里呢？\n3. Socket是什么呢？\n4. 你会使用它们吗？\n\n## 什么是TCP/IP、UDP\n\nTCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。\nUDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。\n\n![1.jpg](https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\nTCP/IP协议族包括运输层、网络层、链路层。由上图可以知道TCP/IP与UDP的关系。\n\n## Socket在哪里\n![2.jpg](https://upload-images.jianshu.io/upload_images/2952111-1dd2ce6b61d08816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Socket是什么\nSocket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。\n\n## 如何使用\n前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。\n一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。    \n生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。\n\n![3.jpg](https://upload-images.jianshu.io/upload_images/2952111-99ebc49204f5b380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。\n\n在这里我就举个简单的例子，我们走的是TCP协议这条路（见图2）。例子用MFC编写，运行的界面如下：\n\n\n![4.jpg](https://upload-images.jianshu.io/upload_images/2952111-36073682cf397e4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![5.jpg](https://upload-images.jianshu.io/upload_images/2952111-61b92a5dbbb8bf69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在客户端输入服务器端的IP地址和发送的数据，然后按发送按钮，服务器端接收到数据，然后回应客户端。客户端读取回应的数据，显示在界面上。\n\n客户端就一个函数完成了一次通信。在这里IP地址为何用127.0.0.1呢？使用这个IP地址，服务器端和客户端就能运行在同一台机器上，这样调试方便多了。当然你可以在你朋友的机器上运行Server程序(本人在局域网中测试过)，在自己的机器上运行Client程序，当然输入的IP地址就该是你朋友机器的IP地址了。\n\n## 参考\n1. http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml\n","source":"_posts/什么是Socket-转.md","raw":"---\ntitle: 什么是Socket(转)\ndate: 2018-03-13 00:49:26\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：\n1. 什么是TCP/IP、UDP？\n2. Socket在哪里呢？\n3. Socket是什么呢？\n4. 你会使用它们吗？\n\n## 什么是TCP/IP、UDP\n\nTCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。\nUDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。\n\n![1.jpg](https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!-- more -->\nTCP/IP协议族包括运输层、网络层、链路层。由上图可以知道TCP/IP与UDP的关系。\n\n## Socket在哪里\n![2.jpg](https://upload-images.jianshu.io/upload_images/2952111-1dd2ce6b61d08816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Socket是什么\nSocket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。\n\n## 如何使用\n前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。\n一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。    \n生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。\n\n![3.jpg](https://upload-images.jianshu.io/upload_images/2952111-99ebc49204f5b380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。\n\n在这里我就举个简单的例子，我们走的是TCP协议这条路（见图2）。例子用MFC编写，运行的界面如下：\n\n\n![4.jpg](https://upload-images.jianshu.io/upload_images/2952111-36073682cf397e4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![5.jpg](https://upload-images.jianshu.io/upload_images/2952111-61b92a5dbbb8bf69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在客户端输入服务器端的IP地址和发送的数据，然后按发送按钮，服务器端接收到数据，然后回应客户端。客户端读取回应的数据，显示在界面上。\n\n客户端就一个函数完成了一次通信。在这里IP地址为何用127.0.0.1呢？使用这个IP地址，服务器端和客户端就能运行在同一台机器上，这样调试方便多了。当然你可以在你朋友的机器上运行Server程序(本人在局域网中测试过)，在自己的机器上运行Client程序，当然输入的IP地址就该是你朋友机器的IP地址了。\n\n## 参考\n1. http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml\n","slug":"什么是Socket-转","published":1,"updated":"2018-03-12T17:03:47.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xgz00ajexot1shupstq","content":"<p>对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：</p>\n<ol>\n<li>什么是TCP/IP、UDP？</li>\n<li>Socket在哪里呢？</li>\n<li>Socket是什么呢？</li>\n<li>你会使用它们吗？</li>\n</ol>\n<h2 id=\"什么是TCP-IP、UDP\"><a href=\"#什么是TCP-IP、UDP\" class=\"headerlink\" title=\"什么是TCP/IP、UDP\"></a>什么是TCP/IP、UDP</h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.jpg\"></p>\n<a id=\"more\"></a>\n<p>TCP/IP协议族包括运输层、网络层、链路层。由上图可以知道TCP/IP与UDP的关系。</p>\n<h2 id=\"Socket在哪里\"><a href=\"#Socket在哪里\" class=\"headerlink\" title=\"Socket在哪里\"></a>Socket在哪里</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-1dd2ce6b61d08816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.jpg\"></p>\n<h2 id=\"Socket是什么\"><a href=\"#Socket是什么\" class=\"headerlink\" title=\"Socket是什么\"></a>Socket是什么</h2><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。<br>一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。<br>生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-99ebc49204f5b380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"3.jpg\"></p>\n<p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p>\n<p>在这里我就举个简单的例子，我们走的是TCP协议这条路（见图2）。例子用MFC编写，运行的界面如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-36073682cf397e4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-61b92a5dbbb8bf69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"5.jpg\"></p>\n<p>在客户端输入服务器端的IP地址和发送的数据，然后按发送按钮，服务器端接收到数据，然后回应客户端。客户端读取回应的数据，显示在界面上。</p>\n<p>客户端就一个函数完成了一次通信。在这里IP地址为何用127.0.0.1呢？使用这个IP地址，服务器端和客户端就能运行在同一台机器上，这样调试方便多了。当然你可以在你朋友的机器上运行Server程序(本人在局域网中测试过)，在自己的机器上运行Client程序，当然输入的IP地址就该是你朋友机器的IP地址了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：</p>\n<ol>\n<li>什么是TCP/IP、UDP？</li>\n<li>Socket在哪里呢？</li>\n<li>Socket是什么呢？</li>\n<li>你会使用它们吗？</li>\n</ol>\n<h2 id=\"什么是TCP-IP、UDP\"><a href=\"#什么是TCP-IP、UDP\" class=\"headerlink\" title=\"什么是TCP/IP、UDP\"></a>什么是TCP/IP、UDP</h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.jpg\"></p>","more":"<p>TCP/IP协议族包括运输层、网络层、链路层。由上图可以知道TCP/IP与UDP的关系。</p>\n<h2 id=\"Socket在哪里\"><a href=\"#Socket在哪里\" class=\"headerlink\" title=\"Socket在哪里\"></a>Socket在哪里</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-1dd2ce6b61d08816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.jpg\"></p>\n<h2 id=\"Socket是什么\"><a href=\"#Socket是什么\" class=\"headerlink\" title=\"Socket是什么\"></a>Socket是什么</h2><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。<br>一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。<br>生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-99ebc49204f5b380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"3.jpg\"></p>\n<p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p>\n<p>在这里我就举个简单的例子，我们走的是TCP协议这条路（见图2）。例子用MFC编写，运行的界面如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-36073682cf397e4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-61b92a5dbbb8bf69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"5.jpg\"></p>\n<p>在客户端输入服务器端的IP地址和发送的数据，然后按发送按钮，服务器端接收到数据，然后回应客户端。客户端读取回应的数据，显示在界面上。</p>\n<p>客户端就一个函数完成了一次通信。在这里IP地址为何用127.0.0.1呢？使用这个IP地址，服务器端和客户端就能运行在同一台机器上，这样调试方便多了。当然你可以在你朋友的机器上运行Server程序(本人在局域网中测试过)，在自己的机器上运行Client程序，当然输入的IP地址就该是你朋友机器的IP地址了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 13 2018 01:03:47 GMT+0800 (China Standard Time)","title":"什么是Socket(转)","path":"2018/03/13/什么是Socket-转/","eyeCatchImage":null,"excerpt":"<p>对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。那么我想问：</p>\n<ol>\n<li>什么是TCP/IP、UDP？</li>\n<li>Socket在哪里呢？</li>\n<li>Socket是什么呢？</li>\n<li>你会使用它们吗？</li>\n</ol>\n<h2 id=\"什么是TCP-IP、UDP\"><a href=\"#什么是TCP-IP、UDP\" class=\"headerlink\" title=\"什么是TCP/IP、UDP\"></a>什么是TCP/IP、UDP</h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-571c60b933d42028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.jpg\"></p>","date":"2018-03-12T16:49:26.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"四种方法实现交换两个变量的值","date":"2018-10-25T01:38:37.000Z","_content":"\n#### 方法1 位运算\n```C\na = a ^ b\nb = a ^ b\na = a ^ b\n\n原理：a^b^b == a\n```\n#### 方法2 栈实现\n```C\nstack S\n\nS.push(x)\nS.push(y)\nx = S.pop()\ny = S.pop()\n```\n\n#### 方法3 借助第三变量\n\n#### 方法4 算术运算\n","source":"_posts/四种方法实现交换两个变量的值.md","raw":"---\ntitle: 四种方法实现交换两个变量的值\ndate: 2018-10-25 09:38:37\ntags: Funny\n---\n\n#### 方法1 位运算\n```C\na = a ^ b\nb = a ^ b\na = a ^ b\n\n原理：a^b^b == a\n```\n#### 方法2 栈实现\n```C\nstack S\n\nS.push(x)\nS.push(y)\nx = S.pop()\ny = S.pop()\n```\n\n#### 方法3 借助第三变量\n\n#### 方法4 算术运算\n","slug":"四种方法实现交换两个变量的值","published":1,"updated":"2018-10-26T03:07:50.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xh300anexotog5c50bn","content":"<h4 id=\"方法1-位运算\"><a href=\"#方法1-位运算\" class=\"headerlink\" title=\"方法1 位运算\"></a>方法1 位运算</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a ^ b</span><br><span class=\"line\">b = a ^ b</span><br><span class=\"line\">a = a ^ b</span><br><span class=\"line\"></span><br><span class=\"line\">原理：a^b^b == a</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-栈实现\"><a href=\"#方法2-栈实现\" class=\"headerlink\" title=\"方法2 栈实现\"></a>方法2 栈实现</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stack</span> S</span><br><span class=\"line\"></span><br><span class=\"line\">S.push(x)</span><br><span class=\"line\">S.push(y)</span><br><span class=\"line\">x = S.pop()</span><br><span class=\"line\">y = S.pop()</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法3-借助第三变量\"><a href=\"#方法3-借助第三变量\" class=\"headerlink\" title=\"方法3 借助第三变量\"></a>方法3 借助第三变量</h4><h4 id=\"方法4-算术运算\"><a href=\"#方法4-算术运算\" class=\"headerlink\" title=\"方法4 算术运算\"></a>方法4 算术运算</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"方法1-位运算\"><a href=\"#方法1-位运算\" class=\"headerlink\" title=\"方法1 位运算\"></a>方法1 位运算</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a ^ b</span><br><span class=\"line\">b = a ^ b</span><br><span class=\"line\">a = a ^ b</span><br><span class=\"line\"></span><br><span class=\"line\">原理：a^b^b == a</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-栈实现\"><a href=\"#方法2-栈实现\" class=\"headerlink\" title=\"方法2 栈实现\"></a>方法2 栈实现</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stack</span> S</span><br><span class=\"line\"></span><br><span class=\"line\">S.push(x)</span><br><span class=\"line\">S.push(y)</span><br><span class=\"line\">x = S.pop()</span><br><span class=\"line\">y = S.pop()</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法3-借助第三变量\"><a href=\"#方法3-借助第三变量\" class=\"headerlink\" title=\"方法3 借助第三变量\"></a>方法3 借助第三变量</h4><h4 id=\"方法4-算术运算\"><a href=\"#方法4-算术运算\" class=\"headerlink\" title=\"方法4 算术运算\"></a>方法4 算术运算</h4>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Oct 26 2018 11:07:50 GMT+0800 (China Standard Time)","title":"四种方法实现交换两个变量的值","path":"2018/10/25/四种方法实现交换两个变量的值/","eyeCatchImage":null,"excerpt":null,"date":"2018-10-25T01:38:37.000Z","pv":0,"totalPV":0,"categories":"","tags":["Funny"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"从零开始学爬虫-04","date":"2018-02-27T17:06:56.000Z","_content":"\n## 说在前面\n\nurllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制\n\n## (一)、为何要设置User Agent\n\n有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。\n\nUser Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。\n\nPython允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。\n<!-- more -->\n\n## (二)、常见的User Agent\n\n### (1).Android\n\n  - Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19\n  - Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n  - Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\n\n### (2).Firefox\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\n  - Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0\n\n### (3).Google Chrome\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36\n  - Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19\n\n### (4).iOS\n\n  - Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\n  - Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3\n\n上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。\n\n## (三)、设置User Agent的方法\n\n先看下urllib.request.Request()\n\n ![1](http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：\n\n- 1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；\n\n- 2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。\n\n### 方法一\n\n创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    url = 'http://www.csdn.net/'\n    head = {}\n    #写入User Agent信息\n    head['User-Agent'] = 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'\n    #创建Request对象\n    req = request.Request(url, headers=head)\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n\n ![2](http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 方法二\n\n创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #以CSDN为例，CSDN不更改User Agent是无法访问的\n    url = 'http://www.csdn.net/'\n    #创建Request对象\n    req = request.Request(url)\n    #传入headers\n    req.add_header('User-Agent', 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19')\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果和上一个方法是一样的。\n\n## (四)、IP代理的使用\n\n### (1).为何使用IP代理\n\nUser Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。\n\n### (2).一般步骤说明\n\n一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：\n\n**(1)** 调用urlib.request.ProxyHandler()，proxies参数为一个字典。\n\n ![4](http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(2)** 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)\n\n![5](http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(3)** 安装Opener\n\n![引用容](http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。\n\n### (3).代理IP选取\n\n在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。\n\nURL：[http://www.xicidaili.com/](http://www.xicidaili.com/)\n\n注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。\n\n从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)\n\n ![6](http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n编写代码访问[http://www.whatismyip.com.tw/](http://www.whatismyip.com.tw/)，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。\n\n### (4).代码实例\n\n创建文件urllib_test10.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #访问网址\n    url = 'http://www.whatismyip.com.tw/'\n    #这是代理IP\n    proxy = {'http':'106.46.136.112:808'}\n    #创建ProxyHandler\n    proxy_support = request.ProxyHandler(proxy)\n    #创建Opener\n    opener = request.build_opener(proxy_support)\n    #添加User Angent\n    opener.addheaders = [('User-Agent','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')]\n    #安装OPener\n    request.install_opener(opener)\n    #使用自己安装好的Opener\n    response = request.urlopen(url)\n    #读取相应信息并解码\n    html = response.read().decode(\"utf-8\")\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n![7](http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，访问的IP已经伪装成了106.46.136.112。\n","source":"_posts/从零开始学爬虫-04.md","raw":"---\ntitle: 从零开始学爬虫-04\ndate: 2018-02-28 01:06:56\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## 说在前面\n\nurllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制\n\n## (一)、为何要设置User Agent\n\n有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。\n\nUser Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。\n\nPython允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。\n<!-- more -->\n\n## (二)、常见的User Agent\n\n### (1).Android\n\n  - Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19\n  - Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n  - Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\n\n### (2).Firefox\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\n  - Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0\n\n### (3).Google Chrome\n\n  - Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36\n  - Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19\n\n### (4).iOS\n\n  - Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\n  - Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3\n\n上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。\n\n## (三)、设置User Agent的方法\n\n先看下urllib.request.Request()\n\n ![1](http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：\n\n- 1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；\n\n- 2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。\n\n### 方法一\n\n创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    url = 'http://www.csdn.net/'\n    head = {}\n    #写入User Agent信息\n    head['User-Agent'] = 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'\n    #创建Request对象\n    req = request.Request(url, headers=head)\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n\n ![2](http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 方法二\n\n创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：\n```Python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #以CSDN为例，CSDN不更改User Agent是无法访问的\n    url = 'http://www.csdn.net/'\n    #创建Request对象\n    req = request.Request(url)\n    #传入headers\n    req.add_header('User-Agent', 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19')\n    #传入创建好的Request对象\n    response = request.urlopen(req)\n    #读取响应信息并解码\n    html = response.read().decode('utf-8')\n    #打印信息\n    print(html)\n```\n\n运行结果和上一个方法是一样的。\n\n## (四)、IP代理的使用\n\n### (1).为何使用IP代理\n\nUser Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。\n\n### (2).一般步骤说明\n\n一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：\n\n**(1)** 调用urlib.request.ProxyHandler()，proxies参数为一个字典。\n\n ![4](http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(2)** 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)\n\n![5](http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**(3)** 安装Opener\n\n![引用容](http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。\n\n### (3).代理IP选取\n\n在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。\n\nURL：[http://www.xicidaili.com/](http://www.xicidaili.com/)\n\n注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。\n\n从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)\n\n ![6](http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n编写代码访问[http://www.whatismyip.com.tw/](http://www.whatismyip.com.tw/)，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。\n\n### (4).代码实例\n\n创建文件urllib_test10.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\n\nif __name__ == \"__main__\":\n    #访问网址\n    url = 'http://www.whatismyip.com.tw/'\n    #这是代理IP\n    proxy = {'http':'106.46.136.112:808'}\n    #创建ProxyHandler\n    proxy_support = request.ProxyHandler(proxy)\n    #创建Opener\n    opener = request.build_opener(proxy_support)\n    #添加User Angent\n    opener.addheaders = [('User-Agent','Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')]\n    #安装OPener\n    request.install_opener(opener)\n    #使用自己安装好的Opener\n    response = request.urlopen(url)\n    #读取相应信息并解码\n    html = response.read().decode(\"utf-8\")\n    #打印信息\n    print(html)\n```\n\n运行结果如下：\n![7](http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，访问的IP已经伪装成了106.46.136.112。\n","slug":"从零开始学爬虫-04","published":1,"updated":"2018-02-27T17:18:25.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xh500arexot4lz9tq0i","content":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>urllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制</p>\n<h2 id=\"一-、为何要设置User-Agent\"><a href=\"#一-、为何要设置User-Agent\" class=\"headerlink\" title=\"(一)、为何要设置User Agent\"></a>(一)、为何要设置User Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p>\n<p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p>\n<p>Python允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。<br><a id=\"more\"></a></p>\n<h2 id=\"二-、常见的User-Agent\"><a href=\"#二-、常见的User-Agent\" class=\"headerlink\" title=\"(二)、常见的User Agent\"></a>(二)、常见的User Agent</h2><h3 id=\"1-Android\"><a href=\"#1-Android\" class=\"headerlink\" title=\"(1).Android\"></a>(1).Android</h3><ul>\n<li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>\n<li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>\n<li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>\n</ul>\n<h3 id=\"2-Firefox\"><a href=\"#2-Firefox\" class=\"headerlink\" title=\"(2).Firefox\"></a>(2).Firefox</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>\n<li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>\n</ul>\n<h3 id=\"3-Google-Chrome\"><a href=\"#3-Google-Chrome\" class=\"headerlink\" title=\"(3).Google Chrome\"></a>(3).Google Chrome</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>\n<li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>\n</ul>\n<h3 id=\"4-iOS\"><a href=\"#4-iOS\" class=\"headerlink\" title=\"(4).iOS\"></a>(4).iOS</h3><ul>\n<li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>\n<li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>\n</ul>\n<p>上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。</p>\n<h2 id=\"三-、设置User-Agent的方法\"><a href=\"#三-、设置User-Agent的方法\" class=\"headerlink\" title=\"(三)、设置User Agent的方法\"></a>(三)、设置User Agent的方法</h2><p>先看下urllib.request.Request()</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"1\"></p>\n<p>从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：</p>\n<ul>\n<li><p>1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；</p>\n</li>\n<li><p>2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。</p>\n</li>\n</ul>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    head = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#写入User Agent信息</span></span><br><span class=\"line\">    head[<span class=\"string\">'User-Agent'</span>] = <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url, headers=head)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"2\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#以CSDN为例，CSDN不更改User Agent是无法访问的</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"comment\">#传入headers</span></span><br><span class=\"line\">    req.add_header(<span class=\"string\">'User-Agent'</span>, <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果和上一个方法是一样的。</p>\n<h2 id=\"四-、IP代理的使用\"><a href=\"#四-、IP代理的使用\" class=\"headerlink\" title=\"(四)、IP代理的使用\"></a>(四)、IP代理的使用</h2><h3 id=\"1-为何使用IP代理\"><a href=\"#1-为何使用IP代理\" class=\"headerlink\" title=\"(1).为何使用IP代理\"></a>(1).为何使用IP代理</h3><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p>\n<h3 id=\"2-一般步骤说明\"><a href=\"#2-一般步骤说明\" class=\"headerlink\" title=\"(2).一般步骤说明\"></a>(2).一般步骤说明</h3><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p>\n<p><strong>(1)</strong> 调用urlib.request.ProxyHandler()，proxies参数为一个字典。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"4\"></p>\n<p><strong>(2)</strong> 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"5\"></p>\n<p><strong>(3)</strong> 安装Opener</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用容\"></p>\n<p>使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。</p>\n<h3 id=\"3-代理IP选取\"><a href=\"#3-代理IP选取\" class=\"headerlink\" title=\"(3).代理IP选取\"></a>(3).代理IP选取</h3><p>在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。</p>\n<p>URL：<a href=\"http://www.xicidaili.com/\" target=\"_blank\" rel=\"noopener\">http://www.xicidaili.com/</a></p>\n<p>注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。</p>\n<p>从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"6\"></p>\n<p>编写代码访问<a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">http://www.whatismyip.com.tw/</a>，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。</p>\n<h3 id=\"4-代码实例\"><a href=\"#4-代码实例\" class=\"headerlink\" title=\"(4).代码实例\"></a>(4).代码实例</h3><p>创建文件urllib_test10.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#访问网址</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.whatismyip.com.tw/'</span></span><br><span class=\"line\">    <span class=\"comment\">#这是代理IP</span></span><br><span class=\"line\">    proxy = &#123;<span class=\"string\">'http'</span>:<span class=\"string\">'106.46.136.112:808'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#创建ProxyHandler</span></span><br><span class=\"line\">    proxy_support = request.ProxyHandler(proxy)</span><br><span class=\"line\">    <span class=\"comment\">#创建Opener</span></span><br><span class=\"line\">    opener = request.build_opener(proxy_support)</span><br><span class=\"line\">    <span class=\"comment\">#添加User Angent</span></span><br><span class=\"line\">    opener.addheaders = [(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#安装OPener</span></span><br><span class=\"line\">    request.install_opener(opener)</span><br><span class=\"line\">    <span class=\"comment\">#使用自己安装好的Opener</span></span><br><span class=\"line\">    response = request.urlopen(url)</span><br><span class=\"line\">    <span class=\"comment\">#读取相应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"7\"></p>\n<p>从上图可以看出，访问的IP已经伪装成了106.46.136.112。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>urllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制</p>\n<h2 id=\"一-、为何要设置User-Agent\"><a href=\"#一-、为何要设置User-Agent\" class=\"headerlink\" title=\"(一)、为何要设置User Agent\"></a>(一)、为何要设置User Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p>\n<p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p>\n<p>Python允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。<br>","more":"</p>\n<h2 id=\"二-、常见的User-Agent\"><a href=\"#二-、常见的User-Agent\" class=\"headerlink\" title=\"(二)、常见的User Agent\"></a>(二)、常见的User Agent</h2><h3 id=\"1-Android\"><a href=\"#1-Android\" class=\"headerlink\" title=\"(1).Android\"></a>(1).Android</h3><ul>\n<li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>\n<li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>\n<li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>\n</ul>\n<h3 id=\"2-Firefox\"><a href=\"#2-Firefox\" class=\"headerlink\" title=\"(2).Firefox\"></a>(2).Firefox</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>\n<li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>\n</ul>\n<h3 id=\"3-Google-Chrome\"><a href=\"#3-Google-Chrome\" class=\"headerlink\" title=\"(3).Google Chrome\"></a>(3).Google Chrome</h3><ul>\n<li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>\n<li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>\n</ul>\n<h3 id=\"4-iOS\"><a href=\"#4-iOS\" class=\"headerlink\" title=\"(4).iOS\"></a>(4).iOS</h3><ul>\n<li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>\n<li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>\n</ul>\n<p>上面列举了Andriod、Firefox、Google Chrome、iOS的一些User Agent，直接copy就能用。</p>\n<h2 id=\"三-、设置User-Agent的方法\"><a href=\"#三-、设置User-Agent的方法\" class=\"headerlink\" title=\"(三)、设置User Agent的方法\"></a>(三)、设置User Agent的方法</h2><p>先看下urllib.request.Request()</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123244632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"1\"></p>\n<p>从上图可以看出，在创建Request对象的时候，可以传入headers参数。因此，想要设置User Agent，有两种方法：</p>\n<ul>\n<li><p>1.在创建Request对象的时候，填入headers参数(包含User Agent信息)，这个Headers参数要求为字典；</p>\n</li>\n<li><p>2.在创建Request对象的时候不添加headers参数，在创建完成之后，使用add_header()的方法，添加headers。</p>\n</li>\n</ul>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>创建文件urllib_test08.py，使用上面提到的Android的第一个User Agent，在创建Request对象的时候传入headers参数，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    head = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#写入User Agent信息</span></span><br><span class=\"line\">    head[<span class=\"string\">'User-Agent'</span>] = <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url, headers=head)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303123738649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"2\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>创建文件urllib_test09.py，使用上面提到的Android的第一个User Agent，在创建Request对象时不传入headers参数，创建之后使用add_header()方法，添加headers，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#以CSDN为例，CSDN不更改User Agent是无法访问的</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.csdn.net/'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"comment\">#传入headers</span></span><br><span class=\"line\">    req.add_header(<span class=\"string\">'User-Agent'</span>, <span class=\"string\">'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#传入创建好的Request对象</span></span><br><span class=\"line\">    response = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"comment\">#读取响应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果和上一个方法是一样的。</p>\n<h2 id=\"四-、IP代理的使用\"><a href=\"#四-、IP代理的使用\" class=\"headerlink\" title=\"(四)、IP代理的使用\"></a>(四)、IP代理的使用</h2><h3 id=\"1-为何使用IP代理\"><a href=\"#1-为何使用IP代理\" class=\"headerlink\" title=\"(1).为何使用IP代理\"></a>(1).为何使用IP代理</h3><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p>\n<h3 id=\"2-一般步骤说明\"><a href=\"#2-一般步骤说明\" class=\"headerlink\" title=\"(2).一般步骤说明\"></a>(2).一般步骤说明</h3><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p>\n<p><strong>(1)</strong> 调用urlib.request.ProxyHandler()，proxies参数为一个字典。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124421012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"4\"></p>\n<p><strong>(2)</strong> 创建Opener(类似于urlopen，这个代开方式是我们自己定制的)</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124447169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"5\"></p>\n<p><strong>(3)</strong> 安装Opener</p>\n<p><img src=\"http://img.blog.csdn.net/20170303124507044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用容\"></p>\n<p>使用install_opener方法之后，会将程序默认的urlopen方法替换掉。也就是说，如果使用install_opener之后，在该文件中，再次调用urlopen会使用自己创建好的opener。如果不想替换掉，只是想临时使用一下，可以使用opener.open(url)，这样就不会对程序默认的urlopen有影响。</p>\n<h3 id=\"3-代理IP选取\"><a href=\"#3-代理IP选取\" class=\"headerlink\" title=\"(3).代理IP选取\"></a>(3).代理IP选取</h3><p>在写代码之前，先在代理IP网站选好一个IP地址，推荐西刺代理IP。</p>\n<p>URL：<a href=\"http://www.xicidaili.com/\" target=\"_blank\" rel=\"noopener\">http://www.xicidaili.com/</a></p>\n<p>注意：当然也可以写个正则表达式从网站直接爬取IP，但是要记住不要太频繁爬取，加个延时什么的，太频繁给服务器带来压力了，服务器会直接把你block，不让你访问的，我就被封了两天。</p>\n<p>从西刺网站选出信号好的IP，我的选择如下：(106.46.136.112:808)</p>\n<p> <img src=\"http://img.blog.csdn.net/20170303124651091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"6\"></p>\n<p>编写代码访问<a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">http://www.whatismyip.com.tw/</a>，该网站是测试自己IP为多少的网址，服务器会返回访问者的IP。</p>\n<h3 id=\"4-代码实例\"><a href=\"#4-代码实例\" class=\"headerlink\" title=\"(4).代码实例\"></a>(4).代码实例</h3><p>创建文件urllib_test10.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#访问网址</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://www.whatismyip.com.tw/'</span></span><br><span class=\"line\">    <span class=\"comment\">#这是代理IP</span></span><br><span class=\"line\">    proxy = &#123;<span class=\"string\">'http'</span>:<span class=\"string\">'106.46.136.112:808'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#创建ProxyHandler</span></span><br><span class=\"line\">    proxy_support = request.ProxyHandler(proxy)</span><br><span class=\"line\">    <span class=\"comment\">#创建Opener</span></span><br><span class=\"line\">    opener = request.build_opener(proxy_support)</span><br><span class=\"line\">    <span class=\"comment\">#添加User Angent</span></span><br><span class=\"line\">    opener.addheaders = [(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class=\"line\">    <span class=\"comment\">#安装OPener</span></span><br><span class=\"line\">    request.install_opener(opener)</span><br><span class=\"line\">    <span class=\"comment\">#使用自己安装好的Opener</span></span><br><span class=\"line\">    response = request.urlopen(url)</span><br><span class=\"line\">    <span class=\"comment\">#读取相应信息并解码</span></span><br><span class=\"line\">    html = response.read().decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(html)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://img.blog.csdn.net/20170303124823038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"7\"></p>\n<p>从上图可以看出，访问的IP已经伪装成了106.46.136.112。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 01:18:25 GMT+0800 (China Standard Time)","title":"从零开始学爬虫-04","path":"2018/02/28/从零开始学爬虫-04/","eyeCatchImage":null,"excerpt":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>urllib_test10.py已经无法爬取了，因为原网站已经添加了防爬虫机制</p>\n<h2 id=\"一-、为何要设置User-Agent\"><a href=\"#一-、为何要设置User-Agent\" class=\"headerlink\" title=\"(一)、为何要设置User Agent\"></a>(一)、为何要设置User Agent</h2><p>有一些网站不喜欢被爬虫程序访问，所以会检测连接对象，如果是爬虫程序，也就是非人点击访问，它就会不让你继续访问，所以为了要让程序可以正常运行，需要隐藏自己的爬虫程序的身份。此时，我们就可以通过设置User Agent的来达到隐藏身份的目的，User Agent的中文名为用户代理，简称UA。</p>\n<p>User Agent存放于Headers中，服务器就是通过查看Headers中的User Agent来判断是谁在访问。在Python中，如果不设置User Agent，程序将使用默认的参数，那么这个User Agent就会有Python的字样，如果服务器检查User Agent，那么没有设置User Agent的Python程序将无法正常访问网站。</p>\n<p>Python允许我们修改这个User Agent来模拟浏览器访问，它的强大毋庸置疑。<br>","date":"2018-02-27T17:06:56.000Z","pv":0,"totalPV":0,"categories":"Spider > Urllib","tags":["Python3","Spider","Urllib"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"原码、反码、补码","date":"2018-03-27T08:10:24.000Z","_content":"## 机器数和真值\n\n在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念\n### 机器数\n\n一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.\n\n>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 `00000011`。如果是 -3 ，就是 `10000011` 。那么，这里的 >`00000011` 和 `10000011` 就是机器数。\n\n### 真值\n\n因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 `10000011`，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（`10000011` 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。\n\n>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1\n\n在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念\n<!-- more -->\n## 原码\n原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:\n\n> [+1]原 = 0000 0001\n\n> [-1]原 = 1000 0001\n\n因为第一位是符号位, 所以 8 位二进制数的取值范围就是:\n\n> [1111 1111 , 0111 1111] 即 [-127 , 127]\n\n原码是人脑最容易理解和计算的表示方式.\n\n## 反码\n反码的表示方法是:  **正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。**\n>[+1] = [00000001]原 = [00000001]反\n\n>[-1] = [10000001]原 = [11111110]反\n\n可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.\n\n## 补码\n补码的表示方法是:  **正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. `(即在反码的基础上 +1)`**\n>[+1] = [00000001]原 = [00000001]反 = [00000001]补\n\n>[-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.\n\n## 为何要使用原码, 反码和补码\n现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:\n> [+1] = [00000001]原 = [00000001]反 = [00000001]补\n\n是对于负数:\n\n> [-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?\n\n首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别\"符号位\"显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以`机器可以只有加法而没有减法`, 这样计算机运算的设计就更简单了.\n\n于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:\n\n> // 计算十进制的表达式: 1 - 1 = 0\n\n> 1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2\n\n如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.`这也就是为何计算机内部不使用原码表示一个数`。\n\n**为了解决原码做减法的问题, 出现了反码:**\n\n>// 计算十进制的表达式: 1 - 1 = 0\n\n>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0\n\n发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在\"0\"这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 `[0000 0000]原` 和 `[1000 0000]原` 两个编码表示 0.\n\n**于是补码的出现, 解决了0的符号以及两个编码的问题:**\n\n>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\n\n这样 0 用 `[0000 0000]` 表示, 而以前出现问题的 -0 则不存在了.而且可以用`[1000 0000]`表示 -128:\n\n>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补\n\n-1-127 的结果应该是 -128, 在用补码运算的结果中, `[1000 0000]补` 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, **所以 -128 并没有原码和反码表示** (对 -128 的补码表示 `[1000 0000]补` 算出来的原码是`[0000 0000]原` , 这是不正确的)\n\n使用补码, `不仅仅修复了 0 的符号以及存在两个编码的问题`, 而且`还能够多表示一个最低数`. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].\n\n**故机器的存储是使用补码**, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.`而使用补码表示时又可以多保存一个最小值。`\n\n\n\n## 参考\n1. https://www.jianshu.com/p/279d9eba0985\n","source":"_posts/原码、反码、补码.md","raw":"---\ntitle: 原码、反码、补码\ndate: 2018-03-27 16:10:24\ntags: 计算机基础\n---\n## 机器数和真值\n\n在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念\n### 机器数\n\n一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.\n\n>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 `00000011`。如果是 -3 ，就是 `10000011` 。那么，这里的 >`00000011` 和 `10000011` 就是机器数。\n\n### 真值\n\n因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 `10000011`，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（`10000011` 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。\n\n>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1\n\n在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念\n<!-- more -->\n## 原码\n原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:\n\n> [+1]原 = 0000 0001\n\n> [-1]原 = 1000 0001\n\n因为第一位是符号位, 所以 8 位二进制数的取值范围就是:\n\n> [1111 1111 , 0111 1111] 即 [-127 , 127]\n\n原码是人脑最容易理解和计算的表示方式.\n\n## 反码\n反码的表示方法是:  **正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。**\n>[+1] = [00000001]原 = [00000001]反\n\n>[-1] = [10000001]原 = [11111110]反\n\n可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.\n\n## 补码\n补码的表示方法是:  **正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. `(即在反码的基础上 +1)`**\n>[+1] = [00000001]原 = [00000001]反 = [00000001]补\n\n>[-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.\n\n## 为何要使用原码, 反码和补码\n现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:\n> [+1] = [00000001]原 = [00000001]反 = [00000001]补\n\n是对于负数:\n\n> [-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?\n\n首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别\"符号位\"显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以`机器可以只有加法而没有减法`, 这样计算机运算的设计就更简单了.\n\n于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:\n\n> // 计算十进制的表达式: 1 - 1 = 0\n\n> 1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2\n\n如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.`这也就是为何计算机内部不使用原码表示一个数`。\n\n**为了解决原码做减法的问题, 出现了反码:**\n\n>// 计算十进制的表达式: 1 - 1 = 0\n\n>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0\n\n发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在\"0\"这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 `[0000 0000]原` 和 `[1000 0000]原` 两个编码表示 0.\n\n**于是补码的出现, 解决了0的符号以及两个编码的问题:**\n\n>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\n\n这样 0 用 `[0000 0000]` 表示, 而以前出现问题的 -0 则不存在了.而且可以用`[1000 0000]`表示 -128:\n\n>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补\n\n-1-127 的结果应该是 -128, 在用补码运算的结果中, `[1000 0000]补` 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, **所以 -128 并没有原码和反码表示** (对 -128 的补码表示 `[1000 0000]补` 算出来的原码是`[0000 0000]原` , 这是不正确的)\n\n使用补码, `不仅仅修复了 0 的符号以及存在两个编码的问题`, 而且`还能够多表示一个最低数`. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].\n\n**故机器的存储是使用补码**, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.`而使用补码表示时又可以多保存一个最小值。`\n\n\n\n## 参考\n1. https://www.jianshu.com/p/279d9eba0985\n","slug":"原码、反码、补码","published":1,"updated":"2018-03-27T13:05:48.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xhe00avexot5gc7xp3t","content":"<h2 id=\"机器数和真值\"><a href=\"#机器数和真值\" class=\"headerlink\" title=\"机器数和真值\"></a>机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念</p>\n<h3 id=\"机器数\"><a href=\"#机器数\" class=\"headerlink\" title=\"机器数\"></a>机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p>\n<blockquote>\n<p>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 <code>00000011</code>。如果是 -3 ，就是 <code>10000011</code> 。那么，这里的 &gt;<code>00000011</code> 和 <code>10000011</code> 就是机器数。</p>\n</blockquote>\n<h3 id=\"真值\"><a href=\"#真值\" class=\"headerlink\" title=\"真值\"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 <code>10000011</code>，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（<code>10000011</code> 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>\n<blockquote>\n<p>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1</p>\n</blockquote>\n<p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念<br><a id=\"more\"></a></p>\n<h2 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h2><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:</p>\n<blockquote>\n<p>[+1]原 = 0000 0001</p>\n</blockquote>\n<blockquote>\n<p>[-1]原 = 1000 0001</p>\n</blockquote>\n<p>因为第一位是符号位, 所以 8 位二进制数的取值范围就是:</p>\n<blockquote>\n<p>[1111 1111 , 0111 1111] 即 [-127 , 127]</p>\n</blockquote>\n<p>原码是人脑最容易理解和计算的表示方式.</p>\n<h2 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h2><p>反码的表示方法是:  <strong>正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</strong></p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反</p>\n</blockquote>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反</p>\n</blockquote>\n<p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>补码的表示方法是:  <strong>正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. <code>(即在反码的基础上 +1)</code></strong></p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>\n</blockquote>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>\n</blockquote>\n<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>\n<h2 id=\"为何要使用原码-反码和补码\"><a href=\"#为何要使用原码-反码和补码\" class=\"headerlink\" title=\"为何要使用原码, 反码和补码\"></a>为何要使用原码, 反码和补码</h2><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:</p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>\n</blockquote>\n<p>是对于负数:</p>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>\n</blockquote>\n<p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>\n<p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以<code>机器可以只有加法而没有减法</code>, 这样计算机运算的设计就更简单了.</p>\n<p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>\n<blockquote>\n<p>// 计算十进制的表达式: 1 - 1 = 0</p>\n</blockquote>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p>\n</blockquote>\n<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.<code>这也就是为何计算机内部不使用原码表示一个数</code>。</p>\n<p><strong>为了解决原码做减法的问题, 出现了反码:</strong></p>\n<blockquote>\n<p>// 计算十进制的表达式: 1 - 1 = 0</p>\n</blockquote>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p>\n</blockquote>\n<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 <code>[0000 0000]原</code> 和 <code>[1000 0000]原</code> 两个编码表示 0.</p>\n<p><strong>于是补码的出现, 解决了0的符号以及两个编码的问题:</strong></p>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p>\n</blockquote>\n<p>这样 0 用 <code>[0000 0000]</code> 表示, 而以前出现问题的 -0 则不存在了.而且可以用<code>[1000 0000]</code>表示 -128:</p>\n<blockquote>\n<p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p>\n</blockquote>\n<p>-1-127 的结果应该是 -128, 在用补码运算的结果中, <code>[1000 0000]补</code> 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, <strong>所以 -128 并没有原码和反码表示</strong> (对 -128 的补码表示 <code>[1000 0000]补</code> 算出来的原码是<code>[0000 0000]原</code> , 这是不正确的)</p>\n<p>使用补码, <code>不仅仅修复了 0 的符号以及存在两个编码的问题</code>, 而且<code>还能够多表示一个最低数</code>. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].</p>\n<p><strong>故机器的存储是使用补码</strong>, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.<code>而使用补码表示时又可以多保存一个最小值。</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.jianshu.com/p/279d9eba0985\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/279d9eba0985</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"机器数和真值\"><a href=\"#机器数和真值\" class=\"headerlink\" title=\"机器数和真值\"></a>机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念</p>\n<h3 id=\"机器数\"><a href=\"#机器数\" class=\"headerlink\" title=\"机器数\"></a>机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p>\n<blockquote>\n<p>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 <code>00000011</code>。如果是 -3 ，就是 <code>10000011</code> 。那么，这里的 &gt;<code>00000011</code> 和 <code>10000011</code> 就是机器数。</p>\n</blockquote>\n<h3 id=\"真值\"><a href=\"#真值\" class=\"headerlink\" title=\"真值\"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 <code>10000011</code>，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（<code>10000011</code> 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>\n<blockquote>\n<p>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1</p>\n</blockquote>\n<p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念<br>","more":"</p>\n<h2 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h2><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是 8 位二进制:</p>\n<blockquote>\n<p>[+1]原 = 0000 0001</p>\n</blockquote>\n<blockquote>\n<p>[-1]原 = 1000 0001</p>\n</blockquote>\n<p>因为第一位是符号位, 所以 8 位二进制数的取值范围就是:</p>\n<blockquote>\n<p>[1111 1111 , 0111 1111] 即 [-127 , 127]</p>\n</blockquote>\n<p>原码是人脑最容易理解和计算的表示方式.</p>\n<h2 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h2><p>反码的表示方法是:  <strong>正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</strong></p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反</p>\n</blockquote>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反</p>\n</blockquote>\n<p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>补码的表示方法是:  <strong>正数的补码就是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后 +1. <code>(即在反码的基础上 +1)</code></strong></p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>\n</blockquote>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>\n</blockquote>\n<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>\n<h2 id=\"为何要使用原码-反码和补码\"><a href=\"#为何要使用原码-反码和补码\" class=\"headerlink\" title=\"为何要使用原码, 反码和补码\"></a>为何要使用原码, 反码和补码</h2><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数三种编码方式的结果都相同:</p>\n<blockquote>\n<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>\n</blockquote>\n<p>是对于负数:</p>\n<blockquote>\n<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>\n</blockquote>\n<p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>\n<p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以<code>机器可以只有加法而没有减法</code>, 这样计算机运算的设计就更简单了.</p>\n<p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>\n<blockquote>\n<p>// 计算十进制的表达式: 1 - 1 = 0</p>\n</blockquote>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p>\n</blockquote>\n<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.<code>这也就是为何计算机内部不使用原码表示一个数</code>。</p>\n<p><strong>为了解决原码做减法的问题, 出现了反码:</strong></p>\n<blockquote>\n<p>// 计算十进制的表达式: 1 - 1 = 0</p>\n</blockquote>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p>\n</blockquote>\n<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上 + 0和 -0 是一样的, 但是 0 带符号是没有任何意义的. 而且会有 <code>[0000 0000]原</code> 和 <code>[1000 0000]原</code> 两个编码表示 0.</p>\n<p><strong>于是补码的出现, 解决了0的符号以及两个编码的问题:</strong></p>\n<blockquote>\n<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p>\n</blockquote>\n<p>这样 0 用 <code>[0000 0000]</code> 表示, 而以前出现问题的 -0 则不存在了.而且可以用<code>[1000 0000]</code>表示 -128:</p>\n<blockquote>\n<p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p>\n</blockquote>\n<p>-1-127 的结果应该是 -128, 在用补码运算的结果中, <code>[1000 0000]补</code> 就是 -128. 但是注意因为实际上是使用以前的-0的补码来表示 -128, <strong>所以 -128 并没有原码和反码表示</strong> (对 -128 的补码表示 <code>[1000 0000]补</code> 算出来的原码是<code>[0000 0000]原</code> , 这是不正确的)</p>\n<p>使用补码, <code>不仅仅修复了 0 的符号以及存在两个编码的问题</code>, 而且<code>还能够多表示一个最低数</code>. 这就是为什么 8 位二进制, 使用原码或反码表示的范围为 [-127, +127], 而使用补码表示的范围为 [-128, 127].</p>\n<p><strong>故机器的存储是使用补码</strong>, 所以对于编程中常用到的 32 位 int 类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.<code>而使用补码表示时又可以多保存一个最小值。</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.jianshu.com/p/279d9eba0985\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/279d9eba0985</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 27 2018 21:05:48 GMT+0800 (China Standard Time)","title":"原码、反码、补码","path":"2018/03/27/原码、反码、补码/","eyeCatchImage":null,"excerpt":"<h2 id=\"机器数和真值\"><a href=\"#机器数和真值\" class=\"headerlink\" title=\"机器数和真值\"></a>机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念</p>\n<h3 id=\"机器数\"><a href=\"#机器数\" class=\"headerlink\" title=\"机器数\"></a>机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p>\n<blockquote>\n<p>比如，十进制中的数 +3 ，假设计算机字长为8位，转换成二进制就是 <code>00000011</code>。如果是 -3 ，就是 <code>10000011</code> 。那么，这里的 &gt;<code>00000011</code> 和 <code>10000011</code> 就是机器数。</p>\n</blockquote>\n<h3 id=\"真值\"><a href=\"#真值\" class=\"headerlink\" title=\"真值\"></a>真值</h3><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 <code>10000011</code>，其最高位 1 代表负，其真正数值是 -3 而不是形式值131（<code>10000011</code> 转换成十进制等于 131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>\n<blockquote>\n<p>例：0000 0001 的真值 = +000 0001 = +1，1000 0001 的真值 = –000 0001 = –1</p>\n</blockquote>\n<p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念<br>","date":"2018-03-27T08:10:24.000Z","pv":0,"totalPV":0,"categories":"","tags":["计算机基础"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"从零开始学爬虫-03","date":"2018-02-27T16:57:01.000Z","_content":"\n## urllib.error\n\nurllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：\n![Screen Shot 2018-02-12 at 14.39.09.png](http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nURLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。\n<!-- more -->\n\n### (1).URLError\n\n让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.dskfclyfiydl.com/\"\n    req = request.Request(url)\n    try:\n        response = request.urlopen(req)\n        html = response.read().decode('utf-8')\n        print(html)\n    except error.URLError as e:\n        print(e.reason)\n```\n\n可以看到如下运行结果：\n\n![Screen Shot 2018-02-12 at 14.35.56.png](http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (2).HTTPError\n\n再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n        # html = responese.read()\n    except error.HTTPError as e:\n        print(e.code, '\\n' ,e.reason, '\\n', e.headers)\n```\n\n运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，www.douyu.com 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。\n\n![Screen Shot 2018-02-12 at 14.36.07.png](http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (3).URLError和HTTPError混合使用\n\n最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError\")\n            print(e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError\")\n            print(e.reason)\n```\n\n运行结果如下：\n\n![Screen Shot 2018-02-12 at 14.37.39.png](http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/从零开始学爬虫-03.md","raw":"---\ntitle: 从零开始学爬虫-03\ndate: 2018-02-28 00:57:01\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## urllib.error\n\nurllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：\n![Screen Shot 2018-02-12 at 14.39.09.png](http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nURLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。\n<!-- more -->\n\n### (1).URLError\n\n让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.dskfclyfiydl.com/\"\n    req = request.Request(url)\n    try:\n        response = request.urlopen(req)\n        html = response.read().decode('utf-8')\n        print(html)\n    except error.URLError as e:\n        print(e.reason)\n```\n\n可以看到如下运行结果：\n\n![Screen Shot 2018-02-12 at 14.35.56.png](http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (2).HTTPError\n\n再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n        # html = responese.read()\n    except error.HTTPError as e:\n        print(e.code, '\\n' ,e.reason, '\\n', e.headers)\n```\n\n运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，www.douyu.com 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。\n\n![Screen Shot 2018-02-12 at 14.36.07.png](http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### (3).URLError和HTTPError混合使用\n\n最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。\n\n![image](http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\n\nif __name__ == \"__main__\":\n    #一个不存在的连接\n    url = \"http://www.douyu.com/wkx.html\"\n    req = request.Request(url)\n    try:\n        responese = request.urlopen(req)\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError\")\n            print(e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError\")\n            print(e.reason)\n```\n\n运行结果如下：\n\n![Screen Shot 2018-02-12 at 14.37.39.png](http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"从零开始学爬虫-03","published":1,"updated":"2018-02-27T17:04:43.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xhi00azexot4vqhsfyw","content":"<h2 id=\"urllib-error\"><a href=\"#urllib-error\" class=\"headerlink\" title=\"urllib.error\"></a>urllib.error</h2><p>urllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.39.09.png\"></p>\n<p>URLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。<br><a id=\"more\"></a></p>\n<h3 id=\"1-URLError\"><a href=\"#1-URLError\" class=\"headerlink\" title=\"(1).URLError\"></a>(1).URLError</h3><p>让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.dskfclyfiydl.com/\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = request.urlopen(req)</span><br><span class=\"line\">        html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        print(html)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如下运行结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.35.56.png\"></p>\n<h3 id=\"2-HTTPError\"><a href=\"#2-HTTPError\" class=\"headerlink\" title=\"(2).HTTPError\"></a>(2).HTTPError</h3><p>再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">        <span class=\"comment\"># html = responese.read()</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.HTTPError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.code, <span class=\"string\">'\\n'</span> ,e.reason, <span class=\"string\">'\\n'</span>, e.headers)</span><br></pre></td></tr></table></figure></p>\n<p>运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，<a href=\"http://www.douyu.com\" target=\"_blank\" rel=\"noopener\">www.douyu.com</a> 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.36.07.png\"></p>\n<h3 id=\"3-URLError和HTTPError混合使用\"><a href=\"#3-URLError和HTTPError混合使用\" class=\"headerlink\" title=\"(3).URLError和HTTPError混合使用\"></a>(3).URLError和HTTPError混合使用</h3><p>最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError\"</span>)</span><br><span class=\"line\">            print(e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError\"</span>)</span><br><span class=\"line\">            print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.37.39.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"urllib-error\"><a href=\"#urllib-error\" class=\"headerlink\" title=\"urllib.error\"></a>urllib.error</h2><p>urllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.39.09.png\"></p>\n<p>URLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。<br>","more":"</p>\n<h3 id=\"1-URLError\"><a href=\"#1-URLError\" class=\"headerlink\" title=\"(1).URLError\"></a>(1).URLError</h3><p>让我们先看下URLError的异常，创建文件urllib_test05.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.dskfclyfiydl.com/\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = request.urlopen(req)</span><br><span class=\"line\">        html = response.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        print(html)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如下运行结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-5e9dfdc6af1af203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.35.56.png\"></p>\n<h3 id=\"2-HTTPError\"><a href=\"#2-HTTPError\" class=\"headerlink\" title=\"(2).HTTPError\"></a>(2).HTTPError</h3><p>再看下HTTPError异常，创建文件urllib_test06.py，编写如下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">        <span class=\"comment\"># html = responese.read()</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.HTTPError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e.code, <span class=\"string\">'\\n'</span> ,e.reason, <span class=\"string\">'\\n'</span>, e.headers)</span><br></pre></td></tr></table></figure></p>\n<p>运行之后，我们可以看到404，这说明请求的资源没有在服务器上找到，<a href=\"http://www.douyu.com\" target=\"_blank\" rel=\"noopener\">www.douyu.com</a> 这个服务器是存在的，但是我们要查找的 Jack_Cui.html 资源是没有的，所以抛出404异常。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-877b52f32e81d2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.36.07.png\"></p>\n<h3 id=\"3-URLError和HTTPError混合使用\"><a href=\"#3-URLError和HTTPError混合使用\" class=\"headerlink\" title=\"(3).URLError和HTTPError混合使用\"></a>(3).URLError和HTTPError混合使用</h3><p>最后值得注意的一点是，如果想用HTTPError和URLError一起捕获异常，那么需要将HTTPError放在URLError的前面，因为HTTPError是URLError的一个子类。如果URLError放在前面，出现HTTP异常会先响应URLError，这样HTTPError就捕获不到错误信息了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-81c31b50ef0e4f0d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果不用上面的方法，也可以使用hasattr函数判断URLError含有的属性，如果含有reason属性表明是URLError，如果含有code属性表明是HTTPError。创建文件urllib_test07.py，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#一个不存在的连接</span></span><br><span class=\"line\">    url = <span class=\"string\">\"http://www.douyu.com/wkx.html\"</span></span><br><span class=\"line\">    req = request.Request(url)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        responese = request.urlopen(req)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError\"</span>)</span><br><span class=\"line\">            print(e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError\"</span>)</span><br><span class=\"line\">            print(e.reason)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2952111-9105667f71cd7051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.37.39.png\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 01:04:43 GMT+0800 (China Standard Time)","title":"从零开始学爬虫-03","path":"2018/02/28/从零开始学爬虫-03/","eyeCatchImage":null,"excerpt":"<h2 id=\"urllib-error\"><a href=\"#urllib-error\" class=\"headerlink\" title=\"urllib.error\"></a>urllib.error</h2><p>urllib.error可以接收有urllib.request产生的异常。urllib.error有两个方法，URLError和HTTPError。如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/2952111-165a6b7bb4f6e5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2018-02-12 at 14.39.09.png\"></p>\n<p>URLError是OSError的一个子类，HTTPError是URLError的一个子类，服务器上HTTP的响应会返回一个状态码，根据这个HTTP状态码，我们可以知道我们的访问是否成功。例如第二个笔记中提到的200状态码，表示请求成功，再比如常见的404错误等。<br>","date":"2018-02-27T16:57:01.000Z","pv":0,"totalPV":0,"categories":"Spider > Urllib","tags":["Python3","Spider","Urllib"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"如何理解操作系统中的同步和异步、阻塞和非阻塞","date":"2018-03-06T17:29:38.000Z","_content":"\n## 同步\n所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大多数函数都是同步调用（例如sin, isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。\n\n同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。\n\n最常见的例子就是 SendMessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的 LRESULT值返回给调用者。\n\n## 异步\n异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。由另外的并行程序执行这段代码，处理完这个调用的部件在完成后，通过状态、通知和回调来通知调用者。以CAsycSocket类为例（注意，CSocket从CAsyncSocket派生，但是起功能已经由异步转化为同步），当一个客户端通过调用 Connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。\n\n这里提到执行部件和调用者通过三种途径返回结果：`状态、通知和回调`。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用`通知`的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。\n\n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。\n\n<!-- more -->\n## 同步和异步类比\n同步，就是实时处理，比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。\n\n异步，就是分时处理，服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。异步如收发收短信，对比打电话，打电话我一定要在电话的旁边听着，保证双方都在线，而收发短信，对方不用保证此刻我一定在手机旁，同时，我也不用时刻留意手机有没有来短信。这样的话，我看着视频，然后来了短信，我就处理短信（也可以不处理），接着再看视频。\n\n对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。\n\n同步在一定程度上可以看做是单线程，这个线程请求一个方法后就待这个方法给他回复，否则他不往下执行（死心眼）。\n异步在一定程度上可以看做是多线程的（废话，一个线程怎么叫异步），请求一个方法后，就不管了，继续执行其他的方法。\n\n## 阻塞\n阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。\n\n有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。例如，我们在CSocket中调用Receive函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。如果主窗口和调用函数在同一个线程中，除非你在特殊的界面操作函数中调用，其实主界面还是应该可以刷新。\n\nsocket接收数据的另外一个函数recv则是一个阻塞调用的例子。当socket工作在阻塞模式的时候，如果没有数据的情况下调用该函数，则当前线程就会被挂起，直到有数据为止。\n\n## 非阻塞\n非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。\n\n### 对象的阻塞模式和阻塞函数调用\n\n对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。\n","source":"_posts/如何理解操作系统中的同步和异步、阻塞和非阻塞.md","raw":"---\ntitle: 如何理解操作系统中的同步和异步、阻塞和非阻塞\ndate: 2018-03-07 01:29:38\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n\n## 同步\n所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大多数函数都是同步调用（例如sin, isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。\n\n同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。\n\n最常见的例子就是 SendMessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的 LRESULT值返回给调用者。\n\n## 异步\n异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。由另外的并行程序执行这段代码，处理完这个调用的部件在完成后，通过状态、通知和回调来通知调用者。以CAsycSocket类为例（注意，CSocket从CAsyncSocket派生，但是起功能已经由异步转化为同步），当一个客户端通过调用 Connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。\n\n这里提到执行部件和调用者通过三种途径返回结果：`状态、通知和回调`。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用`通知`的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。\n\n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。\n\n<!-- more -->\n## 同步和异步类比\n同步，就是实时处理，比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。\n\n异步，就是分时处理，服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。异步如收发收短信，对比打电话，打电话我一定要在电话的旁边听着，保证双方都在线，而收发短信，对方不用保证此刻我一定在手机旁，同时，我也不用时刻留意手机有没有来短信。这样的话，我看着视频，然后来了短信，我就处理短信（也可以不处理），接着再看视频。\n\n对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。\n\n同步在一定程度上可以看做是单线程，这个线程请求一个方法后就待这个方法给他回复，否则他不往下执行（死心眼）。\n异步在一定程度上可以看做是多线程的（废话，一个线程怎么叫异步），请求一个方法后，就不管了，继续执行其他的方法。\n\n## 阻塞\n阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。\n\n有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。例如，我们在CSocket中调用Receive函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。如果主窗口和调用函数在同一个线程中，除非你在特殊的界面操作函数中调用，其实主界面还是应该可以刷新。\n\nsocket接收数据的另外一个函数recv则是一个阻塞调用的例子。当socket工作在阻塞模式的时候，如果没有数据的情况下调用该函数，则当前线程就会被挂起，直到有数据为止。\n\n## 非阻塞\n非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。\n\n### 对象的阻塞模式和阻塞函数调用\n\n对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。\n","slug":"如何理解操作系统中的同步和异步、阻塞和非阻塞","published":1,"updated":"2018-03-09T06:28:47.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xhm00b3exot5s7ov62d","content":"<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大多数函数都是同步调用（例如sin, isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p>\n<p>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。</p>\n<p>最常见的例子就是 SendMessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的 LRESULT值返回给调用者。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。由另外的并行程序执行这段代码，处理完这个调用的部件在完成后，通过状态、通知和回调来通知调用者。以CAsycSocket类为例（注意，CSocket从CAsyncSocket派生，但是起功能已经由异步转化为同步），当一个客户端通过调用 Connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。</p>\n<p>这里提到执行部件和调用者通过三种途径返回结果：<code>状态、通知和回调</code>。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用<code>通知</code>的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</p>\n<p>异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。</p>\n<a id=\"more\"></a>\n<h2 id=\"同步和异步类比\"><a href=\"#同步和异步类比\" class=\"headerlink\" title=\"同步和异步类比\"></a>同步和异步类比</h2><p>同步，就是实时处理，比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。</p>\n<p>异步，就是分时处理，服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。异步如收发收短信，对比打电话，打电话我一定要在电话的旁边听着，保证双方都在线，而收发短信，对方不用保证此刻我一定在手机旁，同时，我也不用时刻留意手机有没有来短信。这样的话，我看着视频，然后来了短信，我就处理短信（也可以不处理），接着再看视频。</p>\n<p>对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。</p>\n<p>同步在一定程度上可以看做是单线程，这个线程请求一个方法后就待这个方法给他回复，否则他不往下执行（死心眼）。<br>异步在一定程度上可以看做是多线程的（废话，一个线程怎么叫异步），请求一个方法后，就不管了，继续执行其他的方法。</p>\n<h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。</p>\n<p>有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。例如，我们在CSocket中调用Receive函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。如果主窗口和调用函数在同一个线程中，除非你在特殊的界面操作函数中调用，其实主界面还是应该可以刷新。</p>\n<p>socket接收数据的另外一个函数recv则是一个阻塞调用的例子。当socket工作在阻塞模式的时候，如果没有数据的情况下调用该函数，则当前线程就会被挂起，直到有数据为止。</p>\n<h2 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h2><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p>\n<h3 id=\"对象的阻塞模式和阻塞函数调用\"><a href=\"#对象的阻塞模式和阻塞函数调用\" class=\"headerlink\" title=\"对象的阻塞模式和阻塞函数调用\"></a>对象的阻塞模式和阻塞函数调用</h3><p>对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大多数函数都是同步调用（例如sin, isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p>\n<p>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。</p>\n<p>最常见的例子就是 SendMessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的 LRESULT值返回给调用者。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。由另外的并行程序执行这段代码，处理完这个调用的部件在完成后，通过状态、通知和回调来通知调用者。以CAsycSocket类为例（注意，CSocket从CAsyncSocket派生，但是起功能已经由异步转化为同步），当一个客户端通过调用 Connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。</p>\n<p>这里提到执行部件和调用者通过三种途径返回结果：<code>状态、通知和回调</code>。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用<code>通知</code>的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</p>\n<p>异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。</p>","more":"<h2 id=\"同步和异步类比\"><a href=\"#同步和异步类比\" class=\"headerlink\" title=\"同步和异步类比\"></a>同步和异步类比</h2><p>同步，就是实时处理，比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。</p>\n<p>异步，就是分时处理，服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。异步如收发收短信，对比打电话，打电话我一定要在电话的旁边听着，保证双方都在线，而收发短信，对方不用保证此刻我一定在手机旁，同时，我也不用时刻留意手机有没有来短信。这样的话，我看着视频，然后来了短信，我就处理短信（也可以不处理），接着再看视频。</p>\n<p>对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。</p>\n<p>同步在一定程度上可以看做是单线程，这个线程请求一个方法后就待这个方法给他回复，否则他不往下执行（死心眼）。<br>异步在一定程度上可以看做是多线程的（废话，一个线程怎么叫异步），请求一个方法后，就不管了，继续执行其他的方法。</p>\n<h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。</p>\n<p>有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。例如，我们在CSocket中调用Receive函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。如果主窗口和调用函数在同一个线程中，除非你在特殊的界面操作函数中调用，其实主界面还是应该可以刷新。</p>\n<p>socket接收数据的另外一个函数recv则是一个阻塞调用的例子。当socket工作在阻塞模式的时候，如果没有数据的情况下调用该函数，则当前线程就会被挂起，直到有数据为止。</p>\n<h2 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h2><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p>\n<h3 id=\"对象的阻塞模式和阻塞函数调用\"><a href=\"#对象的阻塞模式和阻塞函数调用\" class=\"headerlink\" title=\"对象的阻塞模式和阻塞函数调用\"></a>对象的阻塞模式和阻塞函数调用</h3><p>对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 09 2018 14:28:47 GMT+0800 (China Standard Time)","title":"如何理解操作系统中的同步和异步、阻塞和非阻塞","path":"2018/03/07/如何理解操作系统中的同步和异步、阻塞和非阻塞/","eyeCatchImage":null,"excerpt":"<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大多数函数都是同步调用（例如sin, isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p>\n<p>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。</p>\n<p>最常见的例子就是 SendMessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的 LRESULT值返回给调用者。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。由另外的并行程序执行这段代码，处理完这个调用的部件在完成后，通过状态、通知和回调来通知调用者。以CAsycSocket类为例（注意，CSocket从CAsyncSocket派生，但是起功能已经由异步转化为同步），当一个客户端通过调用 Connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。</p>\n<p>这里提到执行部件和调用者通过三种途径返回结果：<code>状态、通知和回调</code>。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用<code>通知</code>的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</p>\n<p>异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。</p>","date":"2018-03-06T17:29:38.000Z","pv":0,"totalPV":0,"categories":"操作系统 > 多任务处理","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"子网掩码的作用(详细介绍)","date":"2018-09-01T05:18:00.000Z","_content":"子网掩码的作用是什么?掩码用于说明子网域在一个IP地址中的位置。子网掩码主要用于说明如何进行子网的划分。掩码是由32位组成的，很像IP地址。对于三类IP地址来说，有一些自然的或缺省的固定掩码。下面详细来看看吧。\n\nIP地址和网络掩码为了简便起见，通常会被写成`无类型域间选路(Classless-Inter-Domain-Routing, CIDR)`。在这种形势下，一个完整的IP地址后面会有一个左斜杠`/`，以及一个用来表示IP地址中`网路部分位数`的数字。举例说明，IP地址`10.10.1.22`和网络掩码`255.255.0.0`，在CIDR表示法下就会被写成`10.10.1.22/16`的形式。\n\n<!-- more -->\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R316262Ta.jpg)\n\n#### 子网掩码的作用一: 分割网络\n但由于计算机数量不断增加，人们发展IP地址数量很快要不够用了，而有类IP的IP分类方法会造成许多IP地址的浪费，如某公司申请到一个A类IP地址范围，其有效IP数量可达2^24-2，即1600万之多，而公司中不可能有什么多电脑。于是人们想把着能不能把一个大的网络分割为若干个小网络。那如何来区别不同IP地址是否在同一网络呢?这里就需要使用子网掩码了，子网掩码与IP地址一样也是一个32位的二进制数，每个IP都规定一定子网掩码，把IP地址与子网掩码进行二进位的`与`，得到的就是网络号，如果网络号相同就表示二台电脑在同一网段，可以直接通讯，不需要路由器帮忙。这时的IP地址由于需要靠子网掩码来计算网络号，已经不再存在A、B、C类网络的概念了，这时的网络叫无类网络。我们也可以这样理解，需要靠IP地址的第一个字节数据的范围来区别网络号的称有类网络，靠子网掩码来计算得到网络号的叫无类网络。目前我的WINXP和LINUX在指定IP的同时都必须要指定一个子网掩码，所以都属于有类网络。\n\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R3162A3b0.jpg)\n\n\n#### 子网掩码的作用二: 计算网络号\n- 例1：A电脑IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑IP地址为192.168.1.2，子网掩码为255.255.225.0。大家都知道这二台电脑在同一网段，相互能PING通。\n\n- 例2：A电脑的IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑的IP地址为192.168.2.1，子网掩码为255.255.0.0。大家分析一下二台电脑能相互PING通吗?\n\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R3162G3R1.jpg)\n\n分析：这个问题需要大家理解子网掩码在网络通讯时的作用。不能简单的认为A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段，所以不能PING通。正确的分析应该如下：\n\n- ⑴　每台电脑事先会把自己IP和自己的子网掩码进行“与”操作，得到自己的网段号，如A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段。\n\n- ⑵　B电脑向A电脑发数据包时，会把A电脑的IP与B电脑的子网掩码进行“与”操作，得到网络号是192.168.0.0，B电脑会认为A电脑与自己在同一网段，所以数据包会顺利发出。\n\n- ⑶　A电脑由于与B电脑在同一网段，肯定能收到B电脑发出的数据包，由于PING操作要求A电脑回应一个响应包。这样A电脑会把B电脑的IP与A电脑的子网掩码进行“与”操作，得到网络号192.168.2.0，A电脑发现网络号与自己所处的192.168.1.0不在同一网段，由于A电脑目前没有设置默认网关，所以对该数据包将进行丢弃操作，结果B电脑当然就无法收到A电脑的回应包，所以B电脑上会显示“Request timed out”，即网络超时。\n\n- ⑷　如果在A电脑上去PING　B电脑，根据前面的分析，A电脑会认为B电脑与A电脑不在网段，而A电脑又没有设置默认网关，所以会显示“Destination host unreachable”，即目标主机不可达。\n\n\n[转载：子网掩码的作用(详细介绍)](http://www.dngsw.cn/news/jq-1751.html)\n","source":"_posts/子网掩码的作用-详细介绍.md","raw":"---\ntitle: 子网掩码的作用(详细介绍)\ndate: 2018-09-01 13:18:00\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n子网掩码的作用是什么?掩码用于说明子网域在一个IP地址中的位置。子网掩码主要用于说明如何进行子网的划分。掩码是由32位组成的，很像IP地址。对于三类IP地址来说，有一些自然的或缺省的固定掩码。下面详细来看看吧。\n\nIP地址和网络掩码为了简便起见，通常会被写成`无类型域间选路(Classless-Inter-Domain-Routing, CIDR)`。在这种形势下，一个完整的IP地址后面会有一个左斜杠`/`，以及一个用来表示IP地址中`网路部分位数`的数字。举例说明，IP地址`10.10.1.22`和网络掩码`255.255.0.0`，在CIDR表示法下就会被写成`10.10.1.22/16`的形式。\n\n<!-- more -->\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R316262Ta.jpg)\n\n#### 子网掩码的作用一: 分割网络\n但由于计算机数量不断增加，人们发展IP地址数量很快要不够用了，而有类IP的IP分类方法会造成许多IP地址的浪费，如某公司申请到一个A类IP地址范围，其有效IP数量可达2^24-2，即1600万之多，而公司中不可能有什么多电脑。于是人们想把着能不能把一个大的网络分割为若干个小网络。那如何来区别不同IP地址是否在同一网络呢?这里就需要使用子网掩码了，子网掩码与IP地址一样也是一个32位的二进制数，每个IP都规定一定子网掩码，把IP地址与子网掩码进行二进位的`与`，得到的就是网络号，如果网络号相同就表示二台电脑在同一网段，可以直接通讯，不需要路由器帮忙。这时的IP地址由于需要靠子网掩码来计算网络号，已经不再存在A、B、C类网络的概念了，这时的网络叫无类网络。我们也可以这样理解，需要靠IP地址的第一个字节数据的范围来区别网络号的称有类网络，靠子网掩码来计算得到网络号的叫无类网络。目前我的WINXP和LINUX在指定IP的同时都必须要指定一个子网掩码，所以都属于有类网络。\n\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R3162A3b0.jpg)\n\n\n#### 子网掩码的作用二: 计算网络号\n- 例1：A电脑IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑IP地址为192.168.1.2，子网掩码为255.255.225.0。大家都知道这二台电脑在同一网段，相互能PING通。\n\n- 例2：A电脑的IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑的IP地址为192.168.2.1，子网掩码为255.255.0.0。大家分析一下二台电脑能相互PING通吗?\n\n![](http://www.dngsw.cn/uploads/allimg/150823/2-150R3162G3R1.jpg)\n\n分析：这个问题需要大家理解子网掩码在网络通讯时的作用。不能简单的认为A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段，所以不能PING通。正确的分析应该如下：\n\n- ⑴　每台电脑事先会把自己IP和自己的子网掩码进行“与”操作，得到自己的网段号，如A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段。\n\n- ⑵　B电脑向A电脑发数据包时，会把A电脑的IP与B电脑的子网掩码进行“与”操作，得到网络号是192.168.0.0，B电脑会认为A电脑与自己在同一网段，所以数据包会顺利发出。\n\n- ⑶　A电脑由于与B电脑在同一网段，肯定能收到B电脑发出的数据包，由于PING操作要求A电脑回应一个响应包。这样A电脑会把B电脑的IP与A电脑的子网掩码进行“与”操作，得到网络号192.168.2.0，A电脑发现网络号与自己所处的192.168.1.0不在同一网段，由于A电脑目前没有设置默认网关，所以对该数据包将进行丢弃操作，结果B电脑当然就无法收到A电脑的回应包，所以B电脑上会显示“Request timed out”，即网络超时。\n\n- ⑷　如果在A电脑上去PING　B电脑，根据前面的分析，A电脑会认为B电脑与A电脑不在网段，而A电脑又没有设置默认网关，所以会显示“Destination host unreachable”，即目标主机不可达。\n\n\n[转载：子网掩码的作用(详细介绍)](http://www.dngsw.cn/news/jq-1751.html)\n","slug":"子网掩码的作用-详细介绍","published":1,"updated":"2018-09-21T08:11:52.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xho00b7exotql2bb9ck","content":"<p>子网掩码的作用是什么?掩码用于说明子网域在一个IP地址中的位置。子网掩码主要用于说明如何进行子网的划分。掩码是由32位组成的，很像IP地址。对于三类IP地址来说，有一些自然的或缺省的固定掩码。下面详细来看看吧。</p>\n<p>IP地址和网络掩码为了简便起见，通常会被写成<code>无类型域间选路(Classless-Inter-Domain-Routing, CIDR)</code>。在这种形势下，一个完整的IP地址后面会有一个左斜杠<code>/</code>，以及一个用来表示IP地址中<code>网路部分位数</code>的数字。举例说明，IP地址<code>10.10.1.22</code>和网络掩码<code>255.255.0.0</code>，在CIDR表示法下就会被写成<code>10.10.1.22/16</code>的形式。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R316262Ta.jpg\" alt=\"\"></p>\n<h4 id=\"子网掩码的作用一-分割网络\"><a href=\"#子网掩码的作用一-分割网络\" class=\"headerlink\" title=\"子网掩码的作用一: 分割网络\"></a>子网掩码的作用一: 分割网络</h4><p>但由于计算机数量不断增加，人们发展IP地址数量很快要不够用了，而有类IP的IP分类方法会造成许多IP地址的浪费，如某公司申请到一个A类IP地址范围，其有效IP数量可达2^24-2，即1600万之多，而公司中不可能有什么多电脑。于是人们想把着能不能把一个大的网络分割为若干个小网络。那如何来区别不同IP地址是否在同一网络呢?这里就需要使用子网掩码了，子网掩码与IP地址一样也是一个32位的二进制数，每个IP都规定一定子网掩码，把IP地址与子网掩码进行二进位的<code>与</code>，得到的就是网络号，如果网络号相同就表示二台电脑在同一网段，可以直接通讯，不需要路由器帮忙。这时的IP地址由于需要靠子网掩码来计算网络号，已经不再存在A、B、C类网络的概念了，这时的网络叫无类网络。我们也可以这样理解，需要靠IP地址的第一个字节数据的范围来区别网络号的称有类网络，靠子网掩码来计算得到网络号的叫无类网络。目前我的WINXP和LINUX在指定IP的同时都必须要指定一个子网掩码，所以都属于有类网络。</p>\n<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R3162A3b0.jpg\" alt=\"\"></p>\n<h4 id=\"子网掩码的作用二-计算网络号\"><a href=\"#子网掩码的作用二-计算网络号\" class=\"headerlink\" title=\"子网掩码的作用二: 计算网络号\"></a>子网掩码的作用二: 计算网络号</h4><ul>\n<li><p>例1：A电脑IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑IP地址为192.168.1.2，子网掩码为255.255.225.0。大家都知道这二台电脑在同一网段，相互能PING通。</p>\n</li>\n<li><p>例2：A电脑的IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑的IP地址为192.168.2.1，子网掩码为255.255.0.0。大家分析一下二台电脑能相互PING通吗?</p>\n</li>\n</ul>\n<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R3162G3R1.jpg\" alt=\"\"></p>\n<p>分析：这个问题需要大家理解子网掩码在网络通讯时的作用。不能简单的认为A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段，所以不能PING通。正确的分析应该如下：</p>\n<ul>\n<li><p>⑴　每台电脑事先会把自己IP和自己的子网掩码进行“与”操作，得到自己的网段号，如A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段。</p>\n</li>\n<li><p>⑵　B电脑向A电脑发数据包时，会把A电脑的IP与B电脑的子网掩码进行“与”操作，得到网络号是192.168.0.0，B电脑会认为A电脑与自己在同一网段，所以数据包会顺利发出。</p>\n</li>\n<li><p>⑶　A电脑由于与B电脑在同一网段，肯定能收到B电脑发出的数据包，由于PING操作要求A电脑回应一个响应包。这样A电脑会把B电脑的IP与A电脑的子网掩码进行“与”操作，得到网络号192.168.2.0，A电脑发现网络号与自己所处的192.168.1.0不在同一网段，由于A电脑目前没有设置默认网关，所以对该数据包将进行丢弃操作，结果B电脑当然就无法收到A电脑的回应包，所以B电脑上会显示“Request timed out”，即网络超时。</p>\n</li>\n<li><p>⑷　如果在A电脑上去PING　B电脑，根据前面的分析，A电脑会认为B电脑与A电脑不在网段，而A电脑又没有设置默认网关，所以会显示“Destination host unreachable”，即目标主机不可达。</p>\n</li>\n</ul>\n<p><a href=\"http://www.dngsw.cn/news/jq-1751.html\" target=\"_blank\" rel=\"noopener\">转载：子网掩码的作用(详细介绍)</a></p>\n","site":{"data":{}},"excerpt":"<p>子网掩码的作用是什么?掩码用于说明子网域在一个IP地址中的位置。子网掩码主要用于说明如何进行子网的划分。掩码是由32位组成的，很像IP地址。对于三类IP地址来说，有一些自然的或缺省的固定掩码。下面详细来看看吧。</p>\n<p>IP地址和网络掩码为了简便起见，通常会被写成<code>无类型域间选路(Classless-Inter-Domain-Routing, CIDR)</code>。在这种形势下，一个完整的IP地址后面会有一个左斜杠<code>/</code>，以及一个用来表示IP地址中<code>网路部分位数</code>的数字。举例说明，IP地址<code>10.10.1.22</code>和网络掩码<code>255.255.0.0</code>，在CIDR表示法下就会被写成<code>10.10.1.22/16</code>的形式。</p>","more":"<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R316262Ta.jpg\" alt=\"\"></p>\n<h4 id=\"子网掩码的作用一-分割网络\"><a href=\"#子网掩码的作用一-分割网络\" class=\"headerlink\" title=\"子网掩码的作用一: 分割网络\"></a>子网掩码的作用一: 分割网络</h4><p>但由于计算机数量不断增加，人们发展IP地址数量很快要不够用了，而有类IP的IP分类方法会造成许多IP地址的浪费，如某公司申请到一个A类IP地址范围，其有效IP数量可达2^24-2，即1600万之多，而公司中不可能有什么多电脑。于是人们想把着能不能把一个大的网络分割为若干个小网络。那如何来区别不同IP地址是否在同一网络呢?这里就需要使用子网掩码了，子网掩码与IP地址一样也是一个32位的二进制数，每个IP都规定一定子网掩码，把IP地址与子网掩码进行二进位的<code>与</code>，得到的就是网络号，如果网络号相同就表示二台电脑在同一网段，可以直接通讯，不需要路由器帮忙。这时的IP地址由于需要靠子网掩码来计算网络号，已经不再存在A、B、C类网络的概念了，这时的网络叫无类网络。我们也可以这样理解，需要靠IP地址的第一个字节数据的范围来区别网络号的称有类网络，靠子网掩码来计算得到网络号的叫无类网络。目前我的WINXP和LINUX在指定IP的同时都必须要指定一个子网掩码，所以都属于有类网络。</p>\n<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R3162A3b0.jpg\" alt=\"\"></p>\n<h4 id=\"子网掩码的作用二-计算网络号\"><a href=\"#子网掩码的作用二-计算网络号\" class=\"headerlink\" title=\"子网掩码的作用二: 计算网络号\"></a>子网掩码的作用二: 计算网络号</h4><ul>\n<li><p>例1：A电脑IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑IP地址为192.168.1.2，子网掩码为255.255.225.0。大家都知道这二台电脑在同一网段，相互能PING通。</p>\n</li>\n<li><p>例2：A电脑的IP地址为192.168.1.1，子网掩码为255.255.255.0;B电脑的IP地址为192.168.2.1，子网掩码为255.255.0.0。大家分析一下二台电脑能相互PING通吗?</p>\n</li>\n</ul>\n<p><img src=\"http://www.dngsw.cn/uploads/allimg/150823/2-150R3162G3R1.jpg\" alt=\"\"></p>\n<p>分析：这个问题需要大家理解子网掩码在网络通讯时的作用。不能简单的认为A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段，所以不能PING通。正确的分析应该如下：</p>\n<ul>\n<li><p>⑴　每台电脑事先会把自己IP和自己的子网掩码进行“与”操作，得到自己的网段号，如A电脑处在192.168.1.0网段，B电脑处在192.168.0.0网段。</p>\n</li>\n<li><p>⑵　B电脑向A电脑发数据包时，会把A电脑的IP与B电脑的子网掩码进行“与”操作，得到网络号是192.168.0.0，B电脑会认为A电脑与自己在同一网段，所以数据包会顺利发出。</p>\n</li>\n<li><p>⑶　A电脑由于与B电脑在同一网段，肯定能收到B电脑发出的数据包，由于PING操作要求A电脑回应一个响应包。这样A电脑会把B电脑的IP与A电脑的子网掩码进行“与”操作，得到网络号192.168.2.0，A电脑发现网络号与自己所处的192.168.1.0不在同一网段，由于A电脑目前没有设置默认网关，所以对该数据包将进行丢弃操作，结果B电脑当然就无法收到A电脑的回应包，所以B电脑上会显示“Request timed out”，即网络超时。</p>\n</li>\n<li><p>⑷　如果在A电脑上去PING　B电脑，根据前面的分析，A电脑会认为B电脑与A电脑不在网段，而A电脑又没有设置默认网关，所以会显示“Destination host unreachable”，即目标主机不可达。</p>\n</li>\n</ul>\n<p><a href=\"http://www.dngsw.cn/news/jq-1751.html\" target=\"_blank\" rel=\"noopener\">转载：子网掩码的作用(详细介绍)</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Sep 21 2018 16:11:52 GMT+0800 (China Standard Time)","title":"子网掩码的作用(详细介绍)","path":"2018/09/01/子网掩码的作用-详细介绍/","eyeCatchImage":null,"excerpt":"<p>子网掩码的作用是什么?掩码用于说明子网域在一个IP地址中的位置。子网掩码主要用于说明如何进行子网的划分。掩码是由32位组成的，很像IP地址。对于三类IP地址来说，有一些自然的或缺省的固定掩码。下面详细来看看吧。</p>\n<p>IP地址和网络掩码为了简便起见，通常会被写成<code>无类型域间选路(Classless-Inter-Domain-Routing, CIDR)</code>。在这种形势下，一个完整的IP地址后面会有一个左斜杠<code>/</code>，以及一个用来表示IP地址中<code>网路部分位数</code>的数字。举例说明，IP地址<code>10.10.1.22</code>和网络掩码<code>255.255.0.0</code>，在CIDR表示法下就会被写成<code>10.10.1.22/16</code>的形式。</p>","date":"2018-09-01T05:18:00.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"从零开始学爬虫-05","date":"2018-02-27T17:17:37.000Z","_content":"\n## 为什么要使用Cookie\n\nCookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。   \n比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。   \n使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。\n\n![](http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!-- more -->\n\nhttp.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。\n\n**它们的关系：** CookieJar–派生–>FileCookieJar–派生–>MozillaCookieJar和LWPCookieJar\n\n**工作原理：** 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。\n\n同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。\n\n## 实战\n\n### (1).背景介绍\n\n在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。\n\n**URL:** [http://date.jobbole.com/](http://date.jobbole.com/)\n\n它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果登陆了账号，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。\n\n在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。\n\n### (2).过程分析\n\n在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，真正请求的url是\n\n [http://www.jobbole.com/wp-admin/admin-ajax.php](http://www.jobbole.com/wp-admin/admin-ajax.php)\n\nForm Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。\n\n在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，此刻真正请求的url是\n\n [http://date.jobbole.com/wp-admin/admin-ajax.php](http://date.jobbole.com/wp-admin/admin-ajax.php)\n\n同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是[http://date.jobbole.com/4128/](http://date.jobbole.com/4128/)，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析[http://date.jobbole.com/](http://date.jobbole.com/)返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。\n\n### (3).测试\n\n**1)将Cookie保存到变量中**\n\n首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印cookie信息\n    for item in cookie:\n        print('Name = %s' % item.name)\n        print('Value = %s' % item.value)\n```\n\n我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:\n\n![](http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2)保存Cookie到文件**\n\n在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n\n    #设置保存cookie的文件，同级目录下的cookie.txt\n    filename = 'cookie.txt'\n    #声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件\n    cookie = cookiejar.MozillaCookieJar(filename)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #保存cookie到文件\n    cookie.save(ignore_discard=True, ignore_expires=True)\n```\n\ncookie.save的参数说明：\n\n  * ignore_discard的意思是即使cookies将被丢弃也将它保存下来；\n\n  * ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。\n\n在这里，我们将这两个全部设置为True。\n\n运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。\n\n**3)从文件中获取Cookie并访问**\n\n我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #设置保存cookie的文件的文件名,相对路径,也就是同级目录下\n    filename = 'cookie.txt'\n    #创建MozillaCookieJar实例对象\n    cookie = cookiejar.MozillaCookieJar()\n    #从文件中读取cookie内容到变量\n    cookie.load(filename, ignore_discard=True, ignore_expires=True)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此用opener的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印信息\n    print(response.read().decode('utf-8'))\n```\n\n了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。\n\n### (4).编写代码\n\n我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。\n\n创建cookie_test.py文件，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\nfrom urllib import parse\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #登陆地址\n    login_url = 'http://www.jobbole.com/wp-admin/admin-ajax.php'    \n    #User-Agent信息                   \n    user_agent = r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'\n    #Headers信息\n    head = {'User-Agnet': user_agent, 'Connection': 'keep-alive'}\n    #登陆Form_Data信息\n    Login_Data = {}\n    Login_Data['action'] = 'user_login'\n    Login_Data['redirect_url'] = 'http://www.jobbole.com/'\n    Login_Data['remember_me'] = '0'         #是否一个月内自动登陆\n    Login_Data['user_login'] = '********'       #改成你自己的用户名\n    Login_Data['user_pass'] = '********'        #改成你自己的密码\n    #使用urlencode方法转换标准格式\n    logingpostdata = parse.urlencode(Login_Data).encode('utf-8')\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    cookie_support = request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(cookie_support)\n    #创建Request对象\n    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)\n\n    #面向对象地址\n    date_url = 'http://date.jobbole.com/wp-admin/admin-ajax.php'\n    #面向对象\n    Date_Data = {}\n    Date_Data['action'] = 'get_date_contact'\n    Date_Data['postId'] = '4128'\n    #使用urlencode方法转换标准格式\n    datepostdata = parse.urlencode(Date_Data).encode('utf-8')\n    req2 = request.Request(url=date_url, data=datepostdata, headers=head)\n    try:\n        #使用自己创建的opener的open方法\n        response1 = opener.open(req1)\n        response2 = opener.open(req2)\n        html = response2.read().decode('utf-8')\n        index = html.find('jb_contact_email')\n        #打印查询结果\n        print('联系邮箱:%s' % html[index+19:-2])\n\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError:%d\" % e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError:%s\" % e.reason)\n```\n\n\n### (5).运行结果如下\n\n![](http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n。\n","source":"_posts/从零开始学爬虫-05.md","raw":"---\ntitle: 从零开始学爬虫-05\ndate: 2018-02-28 01:17:37\ntags:\n  - Spider\n  - Urllib\n  - Python3\ncategories:\n  - Spider\n  - Urllib\n---\n\n## 为什么要使用Cookie\n\nCookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。   \n比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。   \n使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。\n\n![](http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!-- more -->\n\nhttp.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。\n\n**它们的关系：** CookieJar–派生–>FileCookieJar–派生–>MozillaCookieJar和LWPCookieJar\n\n**工作原理：** 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。\n\n同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。\n\n## 实战\n\n### (1).背景介绍\n\n在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。\n\n**URL:** [http://date.jobbole.com/](http://date.jobbole.com/)\n\n它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果登陆了账号，获取联系方式的地方是这个样子的：\n\n![](http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。\n\n在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：\n\n![](http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。\n\n### (2).过程分析\n\n在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，真正请求的url是\n\n [http://www.jobbole.com/wp-admin/admin-ajax.php](http://www.jobbole.com/wp-admin/admin-ajax.php)\n\nForm Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。\n\n在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：\n\n![](http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上图可以看出，此刻真正请求的url是\n\n [http://date.jobbole.com/wp-admin/admin-ajax.php](http://date.jobbole.com/wp-admin/admin-ajax.php)\n\n同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是[http://date.jobbole.com/4128/](http://date.jobbole.com/4128/)，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析[http://date.jobbole.com/](http://date.jobbole.com/)返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。\n\n### (3).测试\n\n**1)将Cookie保存到变量中**\n\n首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：\n\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印cookie信息\n    for item in cookie:\n        print('Name = %s' % item.name)\n        print('Value = %s' % item.value)\n```\n\n我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:\n\n![](http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2)保存Cookie到文件**\n\n在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n\n    #设置保存cookie的文件，同级目录下的cookie.txt\n    filename = 'cookie.txt'\n    #声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件\n    cookie = cookiejar.MozillaCookieJar(filename)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此处的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #保存cookie到文件\n    cookie.save(ignore_discard=True, ignore_expires=True)\n```\n\ncookie.save的参数说明：\n\n  * ignore_discard的意思是即使cookies将被丢弃也将它保存下来；\n\n  * ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。\n\n在这里，我们将这两个全部设置为True。\n\n运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。\n\n**3)从文件中获取Cookie并访问**\n\n我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #设置保存cookie的文件的文件名,相对路径,也就是同级目录下\n    filename = 'cookie.txt'\n    #创建MozillaCookieJar实例对象\n    cookie = cookiejar.MozillaCookieJar()\n    #从文件中读取cookie内容到变量\n    cookie.load(filename, ignore_discard=True, ignore_expires=True)\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    handler=request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(handler)\n    #此用opener的open方法打开网页\n    response = opener.open('http://www.baidu.com')\n    #打印信息\n    print(response.read().decode('utf-8'))\n```\n\n了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。\n\n### (4).编写代码\n\n我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。\n\n创建cookie_test.py文件，编写代码如下：\n```python\n# -*- coding: UTF-8 -*-\nfrom urllib import request\nfrom urllib import error\nfrom urllib import parse\nfrom http import cookiejar\n\nif __name__ == '__main__':\n    #登陆地址\n    login_url = 'http://www.jobbole.com/wp-admin/admin-ajax.php'    \n    #User-Agent信息                   \n    user_agent = r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'\n    #Headers信息\n    head = {'User-Agnet': user_agent, 'Connection': 'keep-alive'}\n    #登陆Form_Data信息\n    Login_Data = {}\n    Login_Data['action'] = 'user_login'\n    Login_Data['redirect_url'] = 'http://www.jobbole.com/'\n    Login_Data['remember_me'] = '0'         #是否一个月内自动登陆\n    Login_Data['user_login'] = '********'       #改成你自己的用户名\n    Login_Data['user_pass'] = '********'        #改成你自己的密码\n    #使用urlencode方法转换标准格式\n    logingpostdata = parse.urlencode(Login_Data).encode('utf-8')\n    #声明一个CookieJar对象实例来保存cookie\n    cookie = cookiejar.CookieJar()\n    #利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler\n    cookie_support = request.HTTPCookieProcessor(cookie)\n    #通过CookieHandler创建opener\n    opener = request.build_opener(cookie_support)\n    #创建Request对象\n    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)\n\n    #面向对象地址\n    date_url = 'http://date.jobbole.com/wp-admin/admin-ajax.php'\n    #面向对象\n    Date_Data = {}\n    Date_Data['action'] = 'get_date_contact'\n    Date_Data['postId'] = '4128'\n    #使用urlencode方法转换标准格式\n    datepostdata = parse.urlencode(Date_Data).encode('utf-8')\n    req2 = request.Request(url=date_url, data=datepostdata, headers=head)\n    try:\n        #使用自己创建的opener的open方法\n        response1 = opener.open(req1)\n        response2 = opener.open(req2)\n        html = response2.read().decode('utf-8')\n        index = html.find('jb_contact_email')\n        #打印查询结果\n        print('联系邮箱:%s' % html[index+19:-2])\n\n    except error.URLError as e:\n        if hasattr(e, 'code'):\n            print(\"HTTPError:%d\" % e.code)\n        elif hasattr(e, 'reason'):\n            print(\"URLError:%s\" % e.reason)\n```\n\n\n### (5).运行结果如下\n\n![](http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n。\n","slug":"从零开始学爬虫-05","published":1,"updated":"2018-02-27T17:22:51.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xhr00bbexotuog72ion","content":"<h2 id=\"为什么要使用Cookie\"><a href=\"#为什么要使用Cookie\" class=\"headerlink\" title=\"为什么要使用Cookie\"></a>为什么要使用Cookie</h2><p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。<br>比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。<br>使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>http.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>\n<p><strong>它们的关系：</strong> CookieJar–派生–&gt;FileCookieJar–派生–&gt;MozillaCookieJar和LWPCookieJar</p>\n<p><strong>工作原理：</strong> 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。</p>\n<p>同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"(1).背景介绍\"></a>(1).背景介绍</h3><p>在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。</p>\n<p><strong>URL:</strong> <a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a></p>\n<p>它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>如果登陆了账号，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。</p>\n<p>在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。</p>\n<h3 id=\"2-过程分析\"><a href=\"#2-过程分析\" class=\"headerlink\" title=\"(2).过程分析\"></a>(2).过程分析</h3><p>在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，真正请求的url是</p>\n<p> <a href=\"http://www.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://www.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>Form Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。</p>\n<p>在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，此刻真正请求的url是</p>\n<p> <a href=\"http://date.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是<a href=\"http://date.jobbole.com/4128/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/4128/</a>，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析<a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a>返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"(3).测试\"></a>(3).测试</h3><p><strong>1)将Cookie保存到变量中</strong></p>\n<p>首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印cookie信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> cookie:</span><br><span class=\"line\">        print(<span class=\"string\">'Name = %s'</span> % item.name)</span><br><span class=\"line\">        print(<span class=\"string\">'Value = %s'</span> % item.value)</span><br></pre></td></tr></table></figure>\n<p>我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><strong>2)保存Cookie到文件</strong></p>\n<p>在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件，同级目录下的cookie.txt</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar(filename)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#保存cookie到文件</span></span><br><span class=\"line\">    cookie.save(ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>cookie.save的参数说明：</p>\n<ul>\n<li><p>ignore_discard的意思是即使cookies将被丢弃也将它保存下来；</p>\n</li>\n<li><p>ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。</p>\n</li>\n</ul>\n<p>在这里，我们将这两个全部设置为True。</p>\n<p>运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。</p>\n<p><strong>3)从文件中获取Cookie并访问</strong></p>\n<p>我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件的文件名,相对路径,也就是同级目录下</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建MozillaCookieJar实例对象</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#从文件中读取cookie内容到变量</span></span><br><span class=\"line\">    cookie.load(filename, ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此用opener的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。</p>\n<h3 id=\"4-编写代码\"><a href=\"#4-编写代码\" class=\"headerlink\" title=\"(4).编写代码\"></a>(4).编写代码</h3><p>我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。</p>\n<p>创建cookie_test.py文件，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#登陆地址</span></span><br><span class=\"line\">    login_url = <span class=\"string\">'http://www.jobbole.com/wp-admin/admin-ajax.php'</span>    </span><br><span class=\"line\">    <span class=\"comment\">#User-Agent信息                   </span></span><br><span class=\"line\">    user_agent = <span class=\"string\">r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'</span></span><br><span class=\"line\">    <span class=\"comment\">#Headers信息</span></span><br><span class=\"line\">    head = &#123;<span class=\"string\">'User-Agnet'</span>: user_agent, <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#登陆Form_Data信息</span></span><br><span class=\"line\">    Login_Data = &#123;&#125;</span><br><span class=\"line\">    Login_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'user_login'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'redirect_url'</span>] = <span class=\"string\">'http://www.jobbole.com/'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'remember_me'</span>] = <span class=\"string\">'0'</span>         <span class=\"comment\">#是否一个月内自动登陆</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_login'</span>] = <span class=\"string\">'********'</span>       <span class=\"comment\">#改成你自己的用户名</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_pass'</span>] = <span class=\"string\">'********'</span>        <span class=\"comment\">#改成你自己的密码</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    logingpostdata = parse.urlencode(Login_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    cookie_support = request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(cookie_support)</span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#面向对象地址</span></span><br><span class=\"line\">    date_url = <span class=\"string\">'http://date.jobbole.com/wp-admin/admin-ajax.php'</span></span><br><span class=\"line\">    <span class=\"comment\">#面向对象</span></span><br><span class=\"line\">    Date_Data = &#123;&#125;</span><br><span class=\"line\">    Date_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'get_date_contact'</span></span><br><span class=\"line\">    Date_Data[<span class=\"string\">'postId'</span>] = <span class=\"string\">'4128'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    datepostdata = parse.urlencode(Date_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    req2 = request.Request(url=date_url, data=datepostdata, headers=head)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#使用自己创建的opener的open方法</span></span><br><span class=\"line\">        response1 = opener.open(req1)</span><br><span class=\"line\">        response2 = opener.open(req2)</span><br><span class=\"line\">        html = response2.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        index = html.find(<span class=\"string\">'jb_contact_email'</span>)</span><br><span class=\"line\">        <span class=\"comment\">#打印查询结果</span></span><br><span class=\"line\">        print(<span class=\"string\">'联系邮箱:%s'</span> % html[index+<span class=\"number\">19</span>:<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError:%d\"</span> % e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError:%s\"</span> % e.reason)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-运行结果如下\"><a href=\"#5-运行结果如下\" class=\"headerlink\" title=\"(5).运行结果如下\"></a>(5).运行结果如下</h3><p><img src=\"http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要使用Cookie\"><a href=\"#为什么要使用Cookie\" class=\"headerlink\" title=\"为什么要使用Cookie\"></a>为什么要使用Cookie</h2><p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。<br>比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。<br>使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>","more":"</p>\n<p>http.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>\n<p><strong>它们的关系：</strong> CookieJar–派生–&gt;FileCookieJar–派生–&gt;MozillaCookieJar和LWPCookieJar</p>\n<p><strong>工作原理：</strong> 创建一个带有cookie的opener，在访问登录的URL时，将登录后的cookie保存下来，然后利用这个cookie来访问其他网址。查看登录之后才能看到的信息。</p>\n<p>同样，我们以实例进行讲解，爬取伯乐在线的面向对象的漂亮MM的邮箱联系方式。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"(1).背景介绍\"></a>(1).背景介绍</h3><p>在伯乐在线有这么一个有趣的模块，面向对象，它说白了就是提供了一个程序员(媛)网上相亲的平台。</p>\n<p><strong>URL:</strong> <a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a></p>\n<p>它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144753813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，这里有很多的相亲贴，随便点进去就会有网上相亲MM的详细信息，想获取MM的联系方式，需要积分，积分可以通过签到的方式获取。如果没有登陆账户，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144912938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>如果登陆了账号，获取联系方式的地方是这个样子的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144955289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>想要爬取MM的联系邮箱，就需要用到我们本次讲到的知识，Cookie的使用。当然，首先你积分也得够。</p>\n<p>在讲解之前，推荐一款抓包工具–Fiddler，可以在Google Chrome的Google商店下载这个插件，它的样子是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145106869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>可以看到，通过这个插件，我们可以很容易找到Post的Form Data等信息，很方便，当然也可以用之前讲得浏览器审查元素的方式查看这些信息。</p>\n<h3 id=\"2-过程分析\"><a href=\"#2-过程分析\" class=\"headerlink\" title=\"(2).过程分析\"></a>(2).过程分析</h3><p>在伯乐在线首页点击登陆的按钮，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145240590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，真正请求的url是</p>\n<p> <a href=\"http://www.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://www.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>Form Data的内容记住，这些是我们编程需要用到的。user_login是用户名，user_pass是用户密码。</p>\n<p>在点击取得联系邮箱按钮的时候，Fiddler的抓包内容如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145403065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>从上图可以看出，此刻真正请求的url是</p>\n<p> <a href=\"http://date.jobbole.com/wp-admin/admin-ajax.php\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/wp-admin/admin-ajax.php</a></p>\n<p>同样Form Data中内容要记下来。postId是每个帖子的id。例如，打开一个相亲贴，它的URL是<a href=\"http://date.jobbole.com/4128/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/4128/</a>，那么它的这个postId就是4128。为了简化程序，这里就不讲解如何自动获取这个postId了，本实例直接指定postId。如果想要自动获取，可以使用beautifulsoup解析<a href=\"http://date.jobbole.com/\" target=\"_blank\" rel=\"noopener\">http://date.jobbole.com/</a>返回的信息。beautifulsoup的使用。有机会的话，会在后面的爬虫笔记中进行讲解。</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"(3).测试\"></a>(3).测试</h3><p><strong>1)将Cookie保存到变量中</strong></p>\n<p>首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中，先来感受一下,执行文件cookie01.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印cookie信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> cookie:</span><br><span class=\"line\">        print(<span class=\"string\">'Name = %s'</span> % item.name)</span><br><span class=\"line\">        print(<span class=\"string\">'Value = %s'</span> % item.value)</span><br></pre></td></tr></table></figure>\n<p>我们使用以上方法将cookie保存到变量中，然后打印出了cookie中的值，运行结果如下:</p>\n<p><img src=\"http://img.blog.csdn.net/20170409145652613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><strong>2)保存Cookie到文件</strong></p>\n<p>在上面的方法中，我们将cookie保存到了cookie这个变量中，如果我们想将cookie保存到文件中该怎么做呢？方便以后直接读取文件使用，这时，我们就要用到FileCookieJar这个对象了，在这里我们使用它的子类MozillaCookieJar来实现Cookie的保存，编写代码如下,文件为cookie02.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件，同级目录下的cookie.txt</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar(filename)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此处的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#保存cookie到文件</span></span><br><span class=\"line\">    cookie.save(ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>cookie.save的参数说明：</p>\n<ul>\n<li><p>ignore_discard的意思是即使cookies将被丢弃也将它保存下来；</p>\n</li>\n<li><p>ignore_expires的意思是如果在该文件中cookies已经存在，则覆盖原文件写入。</p>\n</li>\n</ul>\n<p>在这里，我们将这两个全部设置为True。</p>\n<p>运行之后，cookies将被保存到cookie.txt文件中。我们可以查看自己查看下cookie.txt这个文件的内容。</p>\n<p><strong>3)从文件中获取Cookie并访问</strong></p>\n<p>我们已经做到把Cookie保存到文件中了，如果以后想使用，可以利用下面的方法来读取cookie并访问网站，感受一下cookie03.py：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#设置保存cookie的文件的文件名,相对路径,也就是同级目录下</span></span><br><span class=\"line\">    filename = <span class=\"string\">'cookie.txt'</span></span><br><span class=\"line\">    <span class=\"comment\">#创建MozillaCookieJar实例对象</span></span><br><span class=\"line\">    cookie = cookiejar.MozillaCookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#从文件中读取cookie内容到变量</span></span><br><span class=\"line\">    cookie.load(filename, ignore_discard=<span class=\"keyword\">True</span>, ignore_expires=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    handler=request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(handler)</span><br><span class=\"line\">    <span class=\"comment\">#此用opener的open方法打开网页</span></span><br><span class=\"line\">    response = opener.open(<span class=\"string\">'http://www.baidu.com'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#打印信息</span></span><br><span class=\"line\">    print(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>了解到以上内容，我们那就可以开始正式编写模拟登陆伯乐在线的程序了。同时，我们也可以获取相亲MM的联系方式。</p>\n<h3 id=\"4-编写代码\"><a href=\"#4-编写代码\" class=\"headerlink\" title=\"(4).编写代码\"></a>(4).编写代码</h3><p>我们利用CookieJar对象实现获取cookie的功能，存储到变量中。然后使用这个cookie变量创建opener，使用这个设置好cookie的opener即可模拟登陆，同笔记四中讲到的IP代理的使用方法类似。</p>\n<p>创建cookie_test.py文件，编写代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> error</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> http <span class=\"keyword\">import</span> cookiejar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#登陆地址</span></span><br><span class=\"line\">    login_url = <span class=\"string\">'http://www.jobbole.com/wp-admin/admin-ajax.php'</span>    </span><br><span class=\"line\">    <span class=\"comment\">#User-Agent信息                   </span></span><br><span class=\"line\">    user_agent = <span class=\"string\">r'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'</span></span><br><span class=\"line\">    <span class=\"comment\">#Headers信息</span></span><br><span class=\"line\">    head = &#123;<span class=\"string\">'User-Agnet'</span>: user_agent, <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">#登陆Form_Data信息</span></span><br><span class=\"line\">    Login_Data = &#123;&#125;</span><br><span class=\"line\">    Login_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'user_login'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'redirect_url'</span>] = <span class=\"string\">'http://www.jobbole.com/'</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'remember_me'</span>] = <span class=\"string\">'0'</span>         <span class=\"comment\">#是否一个月内自动登陆</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_login'</span>] = <span class=\"string\">'********'</span>       <span class=\"comment\">#改成你自己的用户名</span></span><br><span class=\"line\">    Login_Data[<span class=\"string\">'user_pass'</span>] = <span class=\"string\">'********'</span>        <span class=\"comment\">#改成你自己的密码</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    logingpostdata = parse.urlencode(Login_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#声明一个CookieJar对象实例来保存cookie</span></span><br><span class=\"line\">    cookie = cookiejar.CookieJar()</span><br><span class=\"line\">    <span class=\"comment\">#利用urllib.request库的HTTPCookieProcessor对象来创建cookie处理器,也就CookieHandler</span></span><br><span class=\"line\">    cookie_support = request.HTTPCookieProcessor(cookie)</span><br><span class=\"line\">    <span class=\"comment\">#通过CookieHandler创建opener</span></span><br><span class=\"line\">    opener = request.build_opener(cookie_support)</span><br><span class=\"line\">    <span class=\"comment\">#创建Request对象</span></span><br><span class=\"line\">    req1 = request.Request(url=login_url, data=logingpostdata, headers=head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#面向对象地址</span></span><br><span class=\"line\">    date_url = <span class=\"string\">'http://date.jobbole.com/wp-admin/admin-ajax.php'</span></span><br><span class=\"line\">    <span class=\"comment\">#面向对象</span></span><br><span class=\"line\">    Date_Data = &#123;&#125;</span><br><span class=\"line\">    Date_Data[<span class=\"string\">'action'</span>] = <span class=\"string\">'get_date_contact'</span></span><br><span class=\"line\">    Date_Data[<span class=\"string\">'postId'</span>] = <span class=\"string\">'4128'</span></span><br><span class=\"line\">    <span class=\"comment\">#使用urlencode方法转换标准格式</span></span><br><span class=\"line\">    datepostdata = parse.urlencode(Date_Data).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    req2 = request.Request(url=date_url, data=datepostdata, headers=head)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#使用自己创建的opener的open方法</span></span><br><span class=\"line\">        response1 = opener.open(req1)</span><br><span class=\"line\">        response2 = opener.open(req2)</span><br><span class=\"line\">        html = response2.read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        index = html.find(<span class=\"string\">'jb_contact_email'</span>)</span><br><span class=\"line\">        <span class=\"comment\">#打印查询结果</span></span><br><span class=\"line\">        print(<span class=\"string\">'联系邮箱:%s'</span> % html[index+<span class=\"number\">19</span>:<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> error.URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'code'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"HTTPError:%d\"</span> % e.code)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(e, <span class=\"string\">'reason'</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"URLError:%s\"</span> % e.reason)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-运行结果如下\"><a href=\"#5-运行结果如下\" class=\"headerlink\" title=\"(5).运行结果如下\"></a>(5).运行结果如下</h3><p><img src=\"http://img.blog.csdn.net/20170409150252854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 28 2018 01:22:51 GMT+0800 (China Standard Time)","title":"从零开始学爬虫-05","path":"2018/02/28/从零开始学爬虫-05/","eyeCatchImage":null,"excerpt":"<h2 id=\"为什么要使用Cookie\"><a href=\"#为什么要使用Cookie\" class=\"headerlink\" title=\"为什么要使用Cookie\"></a>为什么要使用Cookie</h2><p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密)。<br>比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容，登陆前与登陆后是不同的，或者不允许的。<br>使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。</p>\n<p><img src=\"http://img.blog.csdn.net/20170409144243654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYzQwNjQ5NTc2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>","date":"2018-02-27T17:17:37.000Z","pv":0,"totalPV":0,"categories":"Spider > Urllib","tags":["Python3","Spider","Urllib"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"数据库事务的四个特性及四个隔离级别","date":"2018-09-26T13:52:11.000Z","_content":"\n\n#### 事务的四大特性（ACID）\n1. 原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。\n2. 一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。\n3. 隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。\n4. 持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。\n\n#### 四个隔离级别\n数据库事务的隔离级别有4种，由低到高分别为`Read uncommitted` 、`Read committed` 、`Repeatable read` 、`Serializable` 。而且，在事务的并发操作中可能会出现**脏读**,**不可重复读**，**幻读**。下面通过事例一一阐述它们的概念与联系。\n\n<!-- more -->\n##### Read uncommitted\n读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。\n`事例`：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。\n`分析`：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。\n那怎么解决脏读呢？`Read committed！读提交，能解决脏读问题`。\n\n###### Read committed\n读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。\n`事例`：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…\n`分析`：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。\n`那怎么解决不可重复读问题？Repeatable read ！`\n\n##### Repeatable read\n重复读，就是在开始读取数据（事务开启）时，不再允许修改操作\n`事例`：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。\n`分析`：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，`不可重复读对应的是修改，即UPDATE操作`。`但是可能还会有幻读问题。因为**幻读问题对应的是插入INSERT操作**，而不是UPDATE操作。`\n\n什么时候会出现幻读？\n`事例`：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即`新增INSERT`了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。\n那怎么解决幻读问题？Serializable！\n\n##### Serializable 序列化\nSerializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。\n值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server ,\nOracle。MySQL的默认隔离级别是Repeatable read。\n\n\n---------------------\n\n本文来自 csdnxingyuntian 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy\n","source":"_posts/数据库事务的四个特性及四个隔离级别.md","raw":"---\ntitle: 数据库事务的四个特性及四个隔离级别\ndate: 2018-09-26 21:52:11\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n\n#### 事务的四大特性（ACID）\n1. 原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。\n2. 一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。\n3. 隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。\n4. 持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。\n\n#### 四个隔离级别\n数据库事务的隔离级别有4种，由低到高分别为`Read uncommitted` 、`Read committed` 、`Repeatable read` 、`Serializable` 。而且，在事务的并发操作中可能会出现**脏读**,**不可重复读**，**幻读**。下面通过事例一一阐述它们的概念与联系。\n\n<!-- more -->\n##### Read uncommitted\n读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。\n`事例`：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。\n`分析`：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。\n那怎么解决脏读呢？`Read committed！读提交，能解决脏读问题`。\n\n###### Read committed\n读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。\n`事例`：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…\n`分析`：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。\n`那怎么解决不可重复读问题？Repeatable read ！`\n\n##### Repeatable read\n重复读，就是在开始读取数据（事务开启）时，不再允许修改操作\n`事例`：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。\n`分析`：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，`不可重复读对应的是修改，即UPDATE操作`。`但是可能还会有幻读问题。因为**幻读问题对应的是插入INSERT操作**，而不是UPDATE操作。`\n\n什么时候会出现幻读？\n`事例`：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即`新增INSERT`了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。\n那怎么解决幻读问题？Serializable！\n\n##### Serializable 序列化\nSerializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。\n值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server ,\nOracle。MySQL的默认隔离级别是Repeatable read。\n\n\n---------------------\n\n本文来自 csdnxingyuntian 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy\n","slug":"数据库事务的四个特性及四个隔离级别","published":1,"updated":"2018-09-26T13:59:40.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xi200bfexotoitw2o9f","content":"<h4 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h4><ol>\n<li>原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。</li>\n<li>一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。</li>\n<li>隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li>持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</li>\n</ol>\n<h4 id=\"四个隔离级别\"><a href=\"#四个隔离级别\" class=\"headerlink\" title=\"四个隔离级别\"></a>四个隔离级别</h4><p>数据库事务的隔离级别有4种，由低到高分别为<code>Read uncommitted</code> 、<code>Read committed</code> 、<code>Repeatable read</code> 、<code>Serializable</code> 。而且，在事务的并发操作中可能会出现<strong>脏读</strong>,<strong>不可重复读</strong>，<strong>幻读</strong>。下面通过事例一一阐述它们的概念与联系。</p>\n<a id=\"more\"></a>\n<h5 id=\"Read-uncommitted\"><a href=\"#Read-uncommitted\" class=\"headerlink\" title=\"Read uncommitted\"></a>Read uncommitted</h5><p>读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。<br><code>事例</code>：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。<br><code>分析</code>：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。<br>那怎么解决脏读呢？<code>Read committed！读提交，能解决脏读问题</code>。</p>\n<h6 id=\"Read-committed\"><a href=\"#Read-committed\" class=\"headerlink\" title=\"Read committed\"></a>Read committed</h6><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。<br><code>事例</code>：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…<br><code>分析</code>：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。<br><code>那怎么解决不可重复读问题？Repeatable read ！</code></p>\n<h5 id=\"Repeatable-read\"><a href=\"#Repeatable-read\" class=\"headerlink\" title=\"Repeatable read\"></a>Repeatable read</h5><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作<br><code>事例</code>：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。<br><code>分析</code>：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，<code>不可重复读对应的是修改，即UPDATE操作</code>。<code>但是可能还会有幻读问题。因为**幻读问题对应的是插入INSERT操作**，而不是UPDATE操作。</code></p>\n<p>什么时候会出现幻读？<br><code>事例</code>：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即<code>新增INSERT</code>了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。<br>那怎么解决幻读问题？Serializable！</p>\n<h5 id=\"Serializable-序列化\"><a href=\"#Serializable-序列化\" class=\"headerlink\" title=\"Serializable 序列化\"></a>Serializable 序列化</h5><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。<br>值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server ,<br>Oracle。MySQL的默认隔离级别是Repeatable read。</p>\n<hr>\n<p>本文来自 csdnxingyuntian 的CSDN 博客 ，全文地址请点击：<a href=\"https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h4><ol>\n<li>原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。</li>\n<li>一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。</li>\n<li>隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li>持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</li>\n</ol>\n<h4 id=\"四个隔离级别\"><a href=\"#四个隔离级别\" class=\"headerlink\" title=\"四个隔离级别\"></a>四个隔离级别</h4><p>数据库事务的隔离级别有4种，由低到高分别为<code>Read uncommitted</code> 、<code>Read committed</code> 、<code>Repeatable read</code> 、<code>Serializable</code> 。而且，在事务的并发操作中可能会出现<strong>脏读</strong>,<strong>不可重复读</strong>，<strong>幻读</strong>。下面通过事例一一阐述它们的概念与联系。</p>","more":"<h5 id=\"Read-uncommitted\"><a href=\"#Read-uncommitted\" class=\"headerlink\" title=\"Read uncommitted\"></a>Read uncommitted</h5><p>读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。<br><code>事例</code>：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。<br><code>分析</code>：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。<br>那怎么解决脏读呢？<code>Read committed！读提交，能解决脏读问题</code>。</p>\n<h6 id=\"Read-committed\"><a href=\"#Read-committed\" class=\"headerlink\" title=\"Read committed\"></a>Read committed</h6><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。<br><code>事例</code>：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…<br><code>分析</code>：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。<br><code>那怎么解决不可重复读问题？Repeatable read ！</code></p>\n<h5 id=\"Repeatable-read\"><a href=\"#Repeatable-read\" class=\"headerlink\" title=\"Repeatable read\"></a>Repeatable read</h5><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作<br><code>事例</code>：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。<br><code>分析</code>：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，<code>不可重复读对应的是修改，即UPDATE操作</code>。<code>但是可能还会有幻读问题。因为**幻读问题对应的是插入INSERT操作**，而不是UPDATE操作。</code></p>\n<p>什么时候会出现幻读？<br><code>事例</code>：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即<code>新增INSERT</code>了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。<br>那怎么解决幻读问题？Serializable！</p>\n<h5 id=\"Serializable-序列化\"><a href=\"#Serializable-序列化\" class=\"headerlink\" title=\"Serializable 序列化\"></a>Serializable 序列化</h5><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。<br>值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server ,<br>Oracle。MySQL的默认隔离级别是Repeatable read。</p>\n<hr>\n<p>本文来自 csdnxingyuntian 的CSDN 博客 ，全文地址请点击：<a href=\"https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdnxingyuntian/article/details/57081233?utm_source=copy</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 21:59:40 GMT+0800 (China Standard Time)","title":"数据库事务的四个特性及四个隔离级别","path":"2018/09/26/数据库事务的四个特性及四个隔离级别/","eyeCatchImage":null,"excerpt":"<h4 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h4><ol>\n<li>原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。</li>\n<li>一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。</li>\n<li>隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li>持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</li>\n</ol>\n<h4 id=\"四个隔离级别\"><a href=\"#四个隔离级别\" class=\"headerlink\" title=\"四个隔离级别\"></a>四个隔离级别</h4><p>数据库事务的隔离级别有4种，由低到高分别为<code>Read uncommitted</code> 、<code>Read committed</code> 、<code>Repeatable read</code> 、<code>Serializable</code> 。而且，在事务的并发操作中可能会出现<strong>脏读</strong>,<strong>不可重复读</strong>，<strong>幻读</strong>。下面通过事例一一阐述它们的概念与联系。</p>","date":"2018-09-26T13:52:11.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"搭建Git服务器的一种方法","date":"2019-02-11T05:43:13.000Z","_content":"\n### 1. 确保自己的服务器上安装有Git和ssh\n```bash\nyum install ssh\nyum install git\n```\n\n### 2. 配置git用户\n#### 新建git用户\n主要是为了让大家在上传代码时登录使用，一般使用：git\n```bash\nadduser git\n```\n\n<!-- more -->\n#### 配置git用户的ssh登录\n```bash\ncd /home/git    //进入git用户文件夹\nsudo mkdir .ssh    //创建 .ssh 文件夹\nsudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥\n```\n`authorized_keys` 是公钥保存文件，`客户端的私钥`与`服务器的公钥`配对成功，则可以登录。`之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）`。\n\n客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 `pub` 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用`ssh-keygen`命令生成后复制粘贴即可。\n\n### 3. 初始化裸仓库来保存项目\n在`/home/git`下\n```bash\nsudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos\ncd repos    //进入repos文件夹\nsudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample\n```\nrepos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。\n\n1. 如果本地没有初始代码，可以直接从服务器克隆仓库到本地：\n```bash\ngit clone git@server:repos/sample.git\n```\n\n git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。\n\n2. 如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：\n```bash\ngit init    //创建git仓库\ngit add .    //添加所有文件\ngit commit -m \"your remark\"    //将代码提交到本地仓库\ngit remote add origin git@server:repos/sample.git    //添加远程仓库地址\ngit push --set-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支\n```\n\n有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：\n```bash\ngit remote rm origin\n```\n\n\n\n\n\n\n\n\n\n------\n","source":"_posts/搭建Git服务器的一种方法.md","raw":"---\ntitle: 搭建Git服务器的一种方法\ndate: 2019-02-11 13:43:13\ntags:\n  - Git\n  - Github\ncategories:\n  - Git\n---\n\n### 1. 确保自己的服务器上安装有Git和ssh\n```bash\nyum install ssh\nyum install git\n```\n\n### 2. 配置git用户\n#### 新建git用户\n主要是为了让大家在上传代码时登录使用，一般使用：git\n```bash\nadduser git\n```\n\n<!-- more -->\n#### 配置git用户的ssh登录\n```bash\ncd /home/git    //进入git用户文件夹\nsudo mkdir .ssh    //创建 .ssh 文件夹\nsudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥\n```\n`authorized_keys` 是公钥保存文件，`客户端的私钥`与`服务器的公钥`配对成功，则可以登录。`之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）`。\n\n客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 `pub` 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用`ssh-keygen`命令生成后复制粘贴即可。\n\n### 3. 初始化裸仓库来保存项目\n在`/home/git`下\n```bash\nsudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos\ncd repos    //进入repos文件夹\nsudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample\n```\nrepos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。\n\n1. 如果本地没有初始代码，可以直接从服务器克隆仓库到本地：\n```bash\ngit clone git@server:repos/sample.git\n```\n\n git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。\n\n2. 如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：\n```bash\ngit init    //创建git仓库\ngit add .    //添加所有文件\ngit commit -m \"your remark\"    //将代码提交到本地仓库\ngit remote add origin git@server:repos/sample.git    //添加远程仓库地址\ngit push --set-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支\n```\n\n有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：\n```bash\ngit remote rm origin\n```\n\n\n\n\n\n\n\n\n\n------\n","slug":"搭建Git服务器的一种方法","published":1,"updated":"2019-02-11T06:11:23.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xie00bjexotcs8w9o3m","content":"<h3 id=\"1-确保自己的服务器上安装有Git和ssh\"><a href=\"#1-确保自己的服务器上安装有Git和ssh\" class=\"headerlink\" title=\"1. 确保自己的服务器上安装有Git和ssh\"></a>1. 确保自己的服务器上安装有Git和ssh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ssh</span><br><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置git用户\"><a href=\"#2-配置git用户\" class=\"headerlink\" title=\"2. 配置git用户\"></a>2. 配置git用户</h3><h4 id=\"新建git用户\"><a href=\"#新建git用户\" class=\"headerlink\" title=\"新建git用户\"></a>新建git用户</h4><p>主要是为了让大家在上传代码时登录使用，一般使用：git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"配置git用户的ssh登录\"><a href=\"#配置git用户的ssh登录\" class=\"headerlink\" title=\"配置git用户的ssh登录\"></a>配置git用户的ssh登录</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/git    //进入git用户文件夹</span><br><span class=\"line\">sudo mkdir .ssh    //创建 .ssh 文件夹</span><br><span class=\"line\">sudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥</span><br></pre></td></tr></table></figure>\n<p><code>authorized_keys</code> 是公钥保存文件，<code>客户端的私钥</code>与<code>服务器的公钥</code>配对成功，则可以登录。<code>之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）</code>。</p>\n<p>客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 <code>pub</code> 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用<code>ssh-keygen</code>命令生成后复制粘贴即可。</p>\n<h3 id=\"3-初始化裸仓库来保存项目\"><a href=\"#3-初始化裸仓库来保存项目\" class=\"headerlink\" title=\"3. 初始化裸仓库来保存项目\"></a>3. 初始化裸仓库来保存项目</h3><p>在<code>/home/git</code>下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos</span><br><span class=\"line\"><span class=\"built_in\">cd</span> repos    //进入repos文件夹</span><br><span class=\"line\">sudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample</span><br></pre></td></tr></table></figure></p>\n<p>repos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。</p>\n<ol>\n<li><p>如果本地没有初始代码，可以直接从服务器克隆仓库到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:repos/sample.git</span><br></pre></td></tr></table></figure>\n<p>git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。</p>\n</li>\n<li><p>如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init    //创建git仓库</span><br><span class=\"line\">git add .    //添加所有文件</span><br><span class=\"line\">git commit -m <span class=\"string\">\"your remark\"</span>    //将代码提交到本地仓库</span><br><span class=\"line\">git remote add origin git@server:repos/sample.git    //添加远程仓库地址</span><br><span class=\"line\">git push --<span class=\"built_in\">set</span>-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-确保自己的服务器上安装有Git和ssh\"><a href=\"#1-确保自己的服务器上安装有Git和ssh\" class=\"headerlink\" title=\"1. 确保自己的服务器上安装有Git和ssh\"></a>1. 确保自己的服务器上安装有Git和ssh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ssh</span><br><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置git用户\"><a href=\"#2-配置git用户\" class=\"headerlink\" title=\"2. 配置git用户\"></a>2. 配置git用户</h3><h4 id=\"新建git用户\"><a href=\"#新建git用户\" class=\"headerlink\" title=\"新建git用户\"></a>新建git用户</h4><p>主要是为了让大家在上传代码时登录使用，一般使用：git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure></p>","more":"<h4 id=\"配置git用户的ssh登录\"><a href=\"#配置git用户的ssh登录\" class=\"headerlink\" title=\"配置git用户的ssh登录\"></a>配置git用户的ssh登录</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/git    //进入git用户文件夹</span><br><span class=\"line\">sudo mkdir .ssh    //创建 .ssh 文件夹</span><br><span class=\"line\">sudo touch .ssh/authorized_keys    //创建authorized_keys文件，用以保存公钥</span><br></pre></td></tr></table></figure>\n<p><code>authorized_keys</code> 是公钥保存文件，<code>客户端的私钥</code>与<code>服务器的公钥</code>配对成功，则可以登录。<code>之后将需要使用这个git服务器的成员的公钥复制粘贴到这个文件中（每个占一行）</code>。</p>\n<p>客户端电脑进入 /users/用户名/.ssh 文件夹，如果已经有自己的秘钥，直接打开 <code>pub</code> 文件，复制里面的公钥信息，进入服务器，粘贴到 authorized_keys 文件中，如果没有，使用<code>ssh-keygen</code>命令生成后复制粘贴即可。</p>\n<h3 id=\"3-初始化裸仓库来保存项目\"><a href=\"#3-初始化裸仓库来保存项目\" class=\"headerlink\" title=\"3. 初始化裸仓库来保存项目\"></a>3. 初始化裸仓库来保存项目</h3><p>在<code>/home/git</code>下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir repos    //创建repos文件夹，用于保存git仓库，名字随各人喜好，这里使用repos</span><br><span class=\"line\"><span class=\"built_in\">cd</span> repos    //进入repos文件夹</span><br><span class=\"line\">sudo git init --bare sample.git    //创建一个裸仓库，名字按自己需要选择，这里使用sample</span><br></pre></td></tr></table></figure></p>\n<p>repos文件夹中会创建 sample.git 文件夹。那么，剩下的事情，就是将本地代码上传到服务器的仓库中。</p>\n<ol>\n<li><p>如果本地没有初始代码，可以直接从服务器克隆仓库到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server:repos/sample.git</span><br></pre></td></tr></table></figure>\n<p>git@server是登录服务器使用的用户名（git）和IP地址（server），登录之后有默认进入用户文件夹（/home/git），后面的路径就是用户文件夹下的仓库路径，也就是 repos/sample.git 。</p>\n</li>\n<li><p>如果本地有一些初始代码，需要直接同步到服务器的仓库，可以进入本地代码文件夹，创建并将代码保存到git仓库后同步至服务器仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init    //创建git仓库</span><br><span class=\"line\">git add .    //添加所有文件</span><br><span class=\"line\">git commit -m <span class=\"string\">\"your remark\"</span>    //将代码提交到本地仓库</span><br><span class=\"line\">git remote add origin git@server:repos/sample.git    //添加远程仓库地址</span><br><span class=\"line\">git push --<span class=\"built_in\">set</span>-upstream origin master    //将代码上传到远程仓库并把本地上传的代码设为master分支</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>有时会出现git远程仓库配置写错的情况，或者需要修改远程仓库，可以使用以下命令删除原有的远程仓库配置后重新配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure></p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Feb 11 2019 14:11:23 GMT+0800 (China Standard Time)","title":"搭建Git服务器的一种方法","path":"2019/02/11/搭建Git服务器的一种方法/","eyeCatchImage":null,"excerpt":"<h3 id=\"1-确保自己的服务器上安装有Git和ssh\"><a href=\"#1-确保自己的服务器上安装有Git和ssh\" class=\"headerlink\" title=\"1. 确保自己的服务器上安装有Git和ssh\"></a>1. 确保自己的服务器上安装有Git和ssh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ssh</span><br><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置git用户\"><a href=\"#2-配置git用户\" class=\"headerlink\" title=\"2. 配置git用户\"></a>2. 配置git用户</h3><h4 id=\"新建git用户\"><a href=\"#新建git用户\" class=\"headerlink\" title=\"新建git用户\"></a>新建git用户</h4><p>主要是为了让大家在上传代码时登录使用，一般使用：git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure></p>","date":"2019-02-11T05:43:13.000Z","pv":0,"totalPV":0,"categories":"Git","tags":["Git","Github"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"异常的分类","date":"2019-02-20T07:24:54.000Z","_content":"\n异常可以分为四类：`中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)`.\n\n\n| 类别     | 原因       | 异步/同步 | 返回行为 |\n| ------- | ---------- | ---- |   --------   |\n|中断|来自I/O设备的信号|异步|总是返回下一条指令|\n|陷阱| 有意的异常|同步|总是返回下一条指令|\n|故障|潜在可恢复的错误|同步|可能返回到当前指令|\n|终止|不可恢复的错误|同步|不会返回|\n\n异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。\n\n<!-- more -->\n## 中断\n中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。\n\n## 陷阱\n`陷阱`最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做`系统调用`\n从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在`用户模式`中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在`内核模式`中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。\n\n## 故障\n故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。\n\n一个经典的故障示例是`缺页异常`，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。\n\n## 终止\n终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。\n\n\n----\n参考资料：《深入理解计算机系统》第三版P504\n","source":"_posts/异常的分类.md","raw":"---\ntitle: 异常的分类\ndate: 2019-02-20 15:24:54\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n---\n\n异常可以分为四类：`中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)`.\n\n\n| 类别     | 原因       | 异步/同步 | 返回行为 |\n| ------- | ---------- | ---- |   --------   |\n|中断|来自I/O设备的信号|异步|总是返回下一条指令|\n|陷阱| 有意的异常|同步|总是返回下一条指令|\n|故障|潜在可恢复的错误|同步|可能返回到当前指令|\n|终止|不可恢复的错误|同步|不会返回|\n\n异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。\n\n<!-- more -->\n## 中断\n中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。\n\n## 陷阱\n`陷阱`最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做`系统调用`\n从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在`用户模式`中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在`内核模式`中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。\n\n## 故障\n故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。\n\n一个经典的故障示例是`缺页异常`，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。\n\n## 终止\n终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。\n\n\n----\n参考资料：《深入理解计算机系统》第三版P504\n","slug":"异常的分类","published":1,"updated":"2019-02-20T08:03:36.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xik00bnexothrij8u3f","content":"<p>异常可以分为四类：<code>中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)</code>.</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>原因</th>\n<th>异步/同步</th>\n<th>返回行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中断</td>\n<td>来自I/O设备的信号</td>\n<td>异步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>陷阱</td>\n<td>有意的异常</td>\n<td>同步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>故障</td>\n<td>潜在可恢复的错误</td>\n<td>同步</td>\n<td>可能返回到当前指令</td>\n</tr>\n<tr>\n<td>终止</td>\n<td>不可恢复的错误</td>\n<td>同步</td>\n<td>不会返回</td>\n</tr>\n</tbody>\n</table>\n<p>异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。</p>\n<a id=\"more\"></a>\n<h2 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h2><p>中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。</p>\n<h2 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h2><p><code>陷阱</code>最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做<code>系统调用</code><br>从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在<code>用户模式</code>中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在<code>内核模式</code>中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。</p>\n<h2 id=\"故障\"><a href=\"#故障\" class=\"headerlink\" title=\"故障\"></a>故障</h2><p>故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。</p>\n<p>一个经典的故障示例是<code>缺页异常</code>，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。</p>\n<h2 id=\"终止\"><a href=\"#终止\" class=\"headerlink\" title=\"终止\"></a>终止</h2><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。</p>\n<hr>\n<p>参考资料：《深入理解计算机系统》第三版P504</p>\n","site":{"data":{}},"excerpt":"<p>异常可以分为四类：<code>中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)</code>.</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>原因</th>\n<th>异步/同步</th>\n<th>返回行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中断</td>\n<td>来自I/O设备的信号</td>\n<td>异步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>陷阱</td>\n<td>有意的异常</td>\n<td>同步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>故障</td>\n<td>潜在可恢复的错误</td>\n<td>同步</td>\n<td>可能返回到当前指令</td>\n</tr>\n<tr>\n<td>终止</td>\n<td>不可恢复的错误</td>\n<td>同步</td>\n<td>不会返回</td>\n</tr>\n</tbody>\n</table>\n<p>异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。</p>","more":"<h2 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h2><p>中断时异步发生的，来自处理器外部的I/O设备的信号结果。剩下的异常类型是同步发生的，是执行当前指令的结果，我们把这类指令叫做故障指令。</p>\n<h2 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h2><p><code>陷阱</code>最重要的用途是用在用户程序和内核之间提供一个像过程一样的接口，叫做<code>系统调用</code><br>从程序员的角度看，系统调用和普通的函数调用是一样的。然而，它们的实现非常不同。普通函数运行在<code>用户模式</code>中，用户模式限制了函数可以执行的指令的类型，而且它们只能访问与调用函数相同的栈。系统调用在<code>内核模式</code>中，内核模式允许系统调用执行特权指令，并访问定义在内核中的栈。</p>\n<h2 id=\"故障\"><a href=\"#故障\" class=\"headerlink\" title=\"故障\"></a>故障</h2><p>故障由错误引起，它可能能够被故障处理程序修正。根据故障是否能够被修复，故障处理程序要么重新执行引起故障的指令，要么终止。</p>\n<p>一个经典的故障示例是<code>缺页异常</code>，当指令引用一个虚拟地址，而与该地址相对应的物理页面不在内存中，因此必须从磁盘中读取时，就会发生故障。一个页面就是虚拟内存中的一个连续的块（典型的是4KB），缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行是，相应的物理页面已经驻留在内存中了，指令就可以没有故障的运行完成了。</p>\n<h2 id=\"终止\"><a href=\"#终止\" class=\"headerlink\" title=\"终止\"></a>终止</h2><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，处理程序将控制返回给一个abort例程，该例程会终止这个应用程序。</p>\n<hr>\n<p>参考资料：《深入理解计算机系统》第三版P504</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Feb 20 2019 16:03:36 GMT+0800 (China Standard Time)","title":"异常的分类","path":"2019/02/20/异常的分类/","eyeCatchImage":null,"excerpt":"<p>异常可以分为四类：<code>中断(interrupt)、陷阱(trap)、故障(fault)、终止(abort)</code>.</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>原因</th>\n<th>异步/同步</th>\n<th>返回行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中断</td>\n<td>来自I/O设备的信号</td>\n<td>异步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>陷阱</td>\n<td>有意的异常</td>\n<td>同步</td>\n<td>总是返回下一条指令</td>\n</tr>\n<tr>\n<td>故障</td>\n<td>潜在可恢复的错误</td>\n<td>同步</td>\n<td>可能返回到当前指令</td>\n</tr>\n<tr>\n<td>终止</td>\n<td>不可恢复的错误</td>\n<td>同步</td>\n<td>不会返回</td>\n</tr>\n</tbody>\n</table>\n<p>异步异常时由处理器外部的I/O设备中的事件产生的。同步异常是执行一条指令的直接产物。</p>","date":"2019-02-20T07:24:54.000Z","pv":0,"totalPV":0,"categories":"操作系统","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"布尔环","date":"2019-02-15T02:07:21.000Z","_content":"布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)`-x`, 使得`x+(-x)=0`。布尔环也有类似的属性，这里的加法运算时`^`,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，`a^a=0`, 这里用0表示全0的位向量。\n\n相同道理还有一个有意思的属性，即`(a^b)^a=b`，该属性可以用来交换两个元素的值，而不需要第三方变量。\n\n\n```python\na = a ^ b\nb = a ^ b\na = a ^ b\n```\n","source":"_posts/布尔环.md","raw":"---\ntitle: 布尔环\ndate: 2019-02-15 10:07:21\ntags: 计算机基础\n---\n布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)`-x`, 使得`x+(-x)=0`。布尔环也有类似的属性，这里的加法运算时`^`,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，`a^a=0`, 这里用0表示全0的位向量。\n\n相同道理还有一个有意思的属性，即`(a^b)^a=b`，该属性可以用来交换两个元素的值，而不需要第三方变量。\n\n\n```python\na = a ^ b\nb = a ^ b\na = a ^ b\n```\n","slug":"布尔环","published":1,"updated":"2019-02-15T02:19:32.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xix00brexotk589n2zt","content":"<p>布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)<code>-x</code>, 使得<code>x+(-x)=0</code>。布尔环也有类似的属性，这里的加法运算时<code>^</code>,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，<code>a^a=0</code>, 这里用0表示全0的位向量。</p>\n<p>相同道理还有一个有意思的属性，即<code>(a^b)^a=b</code>，该属性可以用来交换两个元素的值，而不需要第三方变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a ^ b</span><br><span class=\"line\">b = a ^ b</span><br><span class=\"line\">a = a ^ b</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>布尔环与整数运算有很多相同属性。例如整数运算的一个属性是每个值x都有一个加法逆元(additive-inverse)<code>-x</code>, 使得<code>x+(-x)=0</code>。布尔环也有类似的属性，这里的加法运算时<code>^</code>,不过这时每个元素的加法逆元是它自己本身。也就是说，对于任何值a来说，<code>a^a=0</code>, 这里用0表示全0的位向量。</p>\n<p>相同道理还有一个有意思的属性，即<code>(a^b)^a=b</code>，该属性可以用来交换两个元素的值，而不需要第三方变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a ^ b</span><br><span class=\"line\">b = a ^ b</span><br><span class=\"line\">a = a ^ b</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Feb 15 2019 10:19:32 GMT+0800 (China Standard Time)","title":"布尔环","path":"2019/02/15/布尔环/","eyeCatchImage":null,"excerpt":null,"date":"2019-02-15T02:07:21.000Z","pv":0,"totalPV":0,"categories":"","tags":["计算机基础"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"数据库范式","date":"2018-09-26T14:44:54.000Z","_content":"#### 第一范式（1NF）\n`所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项`，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。`简而言之，第一范式就是无重复的域。`\n说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。\n\n<!-- more -->\n\n#### 第二范式（2NF）\n在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。`第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分`。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）\n`第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性`，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。`简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。`\n\n#### 第三范式（3NF）\n在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。`简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。`例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。\n","source":"_posts/数据库范式.md","raw":"---\ntitle: 数据库范式\ndate: 2018-09-26 22:44:54\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n#### 第一范式（1NF）\n`所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项`，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。`简而言之，第一范式就是无重复的域。`\n说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。\n\n<!-- more -->\n\n#### 第二范式（2NF）\n在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。`第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分`。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）\n`第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性`，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。`简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。`\n\n#### 第三范式（3NF）\n在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。`简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。`例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。\n","slug":"数据库范式","published":1,"updated":"2018-09-26T14:54:27.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xiz00bvexot3dky1uvt","content":"<h4 id=\"第一范式（1NF）\"><a href=\"#第一范式（1NF）\" class=\"headerlink\" title=\"第一范式（1NF）\"></a>第一范式（1NF）</h4><p><code>所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项</code>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。<code>简而言之，第一范式就是无重复的域。</code><br>说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。</p>\n<a id=\"more\"></a>\n<h4 id=\"第二范式（2NF）\"><a href=\"#第二范式（2NF）\" class=\"headerlink\" title=\"第二范式（2NF）\"></a>第二范式（2NF）</h4><p>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<code>第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分</code>。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）<br><code>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</code>，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。<code>简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</code></p>\n<h4 id=\"第三范式（3NF）\"><a href=\"#第三范式（3NF）\" class=\"headerlink\" title=\"第三范式（3NF）\"></a>第三范式（3NF）</h4><p>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）<br>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。<code>简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。</code>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"第一范式（1NF）\"><a href=\"#第一范式（1NF）\" class=\"headerlink\" title=\"第一范式（1NF）\"></a>第一范式（1NF）</h4><p><code>所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项</code>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。<code>简而言之，第一范式就是无重复的域。</code><br>说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。</p>","more":"<h4 id=\"第二范式（2NF）\"><a href=\"#第二范式（2NF）\" class=\"headerlink\" title=\"第二范式（2NF）\"></a>第二范式（2NF）</h4><p>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<code>第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分</code>。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）<br><code>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</code>，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。<code>简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</code></p>\n<h4 id=\"第三范式（3NF）\"><a href=\"#第三范式（3NF）\" class=\"headerlink\" title=\"第三范式（3NF）\"></a>第三范式（3NF）</h4><p>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）<br>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。<code>简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。</code>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 22:54:27 GMT+0800 (China Standard Time)","title":"数据库范式","path":"2018/09/26/数据库范式/","eyeCatchImage":null,"excerpt":"<h4 id=\"第一范式（1NF）\"><a href=\"#第一范式（1NF）\" class=\"headerlink\" title=\"第一范式（1NF）\"></a>第一范式（1NF）</h4><p><code>所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项</code>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。<code>简而言之，第一范式就是无重复的域。</code><br>说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。</p>","date":"2018-09-26T14:44:54.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"正向代理和反向代理","date":"2018-03-26T07:11:57.000Z","_content":"\n正向代理（forward proxy）代理客户端，隐藏真实客户端，\n反向代理（reverse proxy）代理服务器，隐藏真实服务端。\n\n<!-- more -->\n## 反向代理\n举例:用户想访问：\"http://ooxx.me/readme\"，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me 这个域名对应的服务器就设置了反向代理功能。\n\n结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。\n\n在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。\n### 反向代理用途\n1. 保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。\n2. 负载均衡，通过反向代理服务器来优化网站的负载\n\n### 反向代理的实现\n1. 需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上\n2. 服务器返回自己的服务到负载均衡设备\n3. 负载均衡将服务器的服务返回用户\n\n以上的潜台词是：用户和负载均衡设备直接通信，也意味着`用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP`，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。\n\n\n## 正向代理\n正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。\n\n正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。\n\n### 正向代理的用途\n1. 访问原来无法访问的资源，如google\n2. 可以做缓存，加速访问资源\n3. 对客户端访问授权，上网进行认证\n4. 代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n\n为了便于理解，摘自[阿笠博士的回答](https://www.zhihu.com/question/24723688/answer/48369770),\n![代理.jpg](https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。\n\n## 正向代理和反向代理的区别\n\n从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。\n\n从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。\n\n打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。\n\n## 参考\n1. https://www.zhihu.com/question/24723688/answer/160252724\n2. https://blog.csdn.net/andyzhaojianhui/article/details/48247969\n3. https://www.cnblogs.com/Anker/p/6056540.html\n","source":"_posts/正向代理和反向代理.md","raw":"---\ntitle: 正向代理和反向代理\ndate: 2018-03-26 15:11:57\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\n正向代理（forward proxy）代理客户端，隐藏真实客户端，\n反向代理（reverse proxy）代理服务器，隐藏真实服务端。\n\n<!-- more -->\n## 反向代理\n举例:用户想访问：\"http://ooxx.me/readme\"，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me 这个域名对应的服务器就设置了反向代理功能。\n\n结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。\n\n在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。\n### 反向代理用途\n1. 保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。\n2. 负载均衡，通过反向代理服务器来优化网站的负载\n\n### 反向代理的实现\n1. 需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上\n2. 服务器返回自己的服务到负载均衡设备\n3. 负载均衡将服务器的服务返回用户\n\n以上的潜台词是：用户和负载均衡设备直接通信，也意味着`用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP`，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。\n\n\n## 正向代理\n正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。\n\n正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。\n\n### 正向代理的用途\n1. 访问原来无法访问的资源，如google\n2. 可以做缓存，加速访问资源\n3. 对客户端访问授权，上网进行认证\n4. 代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n\n为了便于理解，摘自[阿笠博士的回答](https://www.zhihu.com/question/24723688/answer/48369770),\n![代理.jpg](https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。\n\n## 正向代理和反向代理的区别\n\n从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。\n\n从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。\n\n打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。\n\n## 参考\n1. https://www.zhihu.com/question/24723688/answer/160252724\n2. https://blog.csdn.net/andyzhaojianhui/article/details/48247969\n3. https://www.cnblogs.com/Anker/p/6056540.html\n","slug":"正向代理和反向代理","published":1,"updated":"2018-03-26T08:26:56.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xj700bzexotoxjpjiet","content":"<p>正向代理（forward proxy）代理客户端，隐藏真实客户端，<br>反向代理（reverse proxy）代理服务器，隐藏真实服务端。</p>\n<a id=\"more\"></a>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>举例:用户想访问：”<a href=\"http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me\" target=\"_blank\" rel=\"noopener\">http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me</a> 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p>\n<p>在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。</p>\n<h3 id=\"反向代理用途\"><a href=\"#反向代理用途\" class=\"headerlink\" title=\"反向代理用途\"></a>反向代理用途</h3><ol>\n<li>保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</li>\n<li>负载均衡，通过反向代理服务器来优化网站的负载</li>\n</ol>\n<h3 id=\"反向代理的实现\"><a href=\"#反向代理的实现\" class=\"headerlink\" title=\"反向代理的实现\"></a>反向代理的实现</h3><ol>\n<li>需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上</li>\n<li>服务器返回自己的服务到负载均衡设备</li>\n<li>负载均衡将服务器的服务返回用户</li>\n</ol>\n<p>以上的潜台词是：用户和负载均衡设备直接通信，也意味着<code>用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP</code>，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。</p>\n<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。</p>\n<p>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>\n<h3 id=\"正向代理的用途\"><a href=\"#正向代理的用途\" class=\"headerlink\" title=\"正向代理的用途\"></a>正向代理的用途</h3><ol>\n<li>访问原来无法访问的资源，如google</li>\n<li>可以做缓存，加速访问资源</li>\n<li>对客户端访问授权，上网进行认证</li>\n<li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li>\n</ol>\n<p>为了便于理解，摘自<a href=\"https://www.zhihu.com/question/24723688/answer/48369770\" target=\"_blank\" rel=\"noopener\">阿笠博士的回答</a>,<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"代理.jpg\"><br>正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p>\n<h2 id=\"正向代理和反向代理的区别\"><a href=\"#正向代理和反向代理的区别\" class=\"headerlink\" title=\"正向代理和反向代理的区别\"></a>正向代理和反向代理的区别</h2><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p>\n<p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p>\n<p>打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.zhihu.com/question/24723688/answer/160252724\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24723688/answer/160252724</a></li>\n<li><a href=\"https://blog.csdn.net/andyzhaojianhui/article/details/48247969\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/andyzhaojianhui/article/details/48247969</a></li>\n<li><a href=\"https://www.cnblogs.com/Anker/p/6056540.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Anker/p/6056540.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>正向代理（forward proxy）代理客户端，隐藏真实客户端，<br>反向代理（reverse proxy）代理服务器，隐藏真实服务端。</p>","more":"<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>举例:用户想访问：”<a href=\"http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me\" target=\"_blank\" rel=\"noopener\">http://ooxx.me/readme&quot;，但ooxx.me上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户，但用户并不知情，这很正常,用户一般都很笨。这里所提到的ooxx.me</a> 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>结论：对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p>\n<p>在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。</p>\n<h3 id=\"反向代理用途\"><a href=\"#反向代理用途\" class=\"headerlink\" title=\"反向代理用途\"></a>反向代理用途</h3><ol>\n<li>保证内网的安全，隐藏和保护原始服务器。可以使用反向代理提供WAF功能，阻止web攻击。大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</li>\n<li>负载均衡，通过反向代理服务器来优化网站的负载</li>\n</ol>\n<h3 id=\"反向代理的实现\"><a href=\"#反向代理的实现\" class=\"headerlink\" title=\"反向代理的实现\"></a>反向代理的实现</h3><ol>\n<li>需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上</li>\n<li>服务器返回自己的服务到负载均衡设备</li>\n<li>负载均衡将服务器的服务返回用户</li>\n</ol>\n<p>以上的潜台词是：用户和负载均衡设备直接通信，也意味着<code>用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP</code>，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。</p>\n<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>正向代理,也就是传说中的代理,他的工作原理就像一个跳板,简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器，这个代理服务器呢,他能访问那个我不能访问的网站，于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容，代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。</p>\n<p>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>\n<h3 id=\"正向代理的用途\"><a href=\"#正向代理的用途\" class=\"headerlink\" title=\"正向代理的用途\"></a>正向代理的用途</h3><ol>\n<li>访问原来无法访问的资源，如google</li>\n<li>可以做缓存，加速访问资源</li>\n<li>对客户端访问授权，上网进行认证</li>\n<li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li>\n</ol>\n<p>为了便于理解，摘自<a href=\"https://www.zhihu.com/question/24723688/answer/48369770\" target=\"_blank\" rel=\"noopener\">阿笠博士的回答</a>,<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-a57a95d1c15ae0de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"代理.jpg\"><br>正向代理中，proxy和client同属一个LAN，对server透明；反向代理中，proxy和server同属一个LAN，对client透明。实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p>\n<h2 id=\"正向代理和反向代理的区别\"><a href=\"#正向代理和反向代理的区别\" class=\"headerlink\" title=\"正向代理和反向代理的区别\"></a>正向代理和反向代理的区别</h2><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p>\n<p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p>\n<p>打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.zhihu.com/question/24723688/answer/160252724\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24723688/answer/160252724</a></li>\n<li><a href=\"https://blog.csdn.net/andyzhaojianhui/article/details/48247969\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/andyzhaojianhui/article/details/48247969</a></li>\n<li><a href=\"https://www.cnblogs.com/Anker/p/6056540.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Anker/p/6056540.html</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 26 2018 16:26:56 GMT+0800 (China Standard Time)","title":"正向代理和反向代理","path":"2018/03/26/正向代理和反向代理/","eyeCatchImage":null,"excerpt":"<p>正向代理（forward proxy）代理客户端，隐藏真实客户端，<br>反向代理（reverse proxy）代理服务器，隐藏真实服务端。</p>","date":"2018-03-26T07:11:57.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅析Python中列表操作之*和*=","date":"2019-10-06T16:42:03.000Z","_content":"\n初学Python时总是会将a\\*=n理解为a=a\\*n，稍微深入后就会知道在Python中的不同，其中*调用__mul__ ，而*=调用__imul__ 。\n\n对于list对象也支持乘法操作，截止到Python3.7版本，上述仍然是成立的。我们知道list是由C实现的，所以真正的底层调用肯定是C的实现。观察list对象的C实现的源码我们会知道乘法\\*操作调用list_repeat，\\*=会调用list_inplace_repeat，下面分别看一下两者的C实现方式。\n\n### ▍* --> list_repeat\n```c\nstatic PyObject *\nlist_repeat(PyListObject *a, Py_ssize_t n)\n{\n    ...\n    size = Py_SIZE(a) * n;\n    if (size == 0)\n        return PyList_New(0);\n    np = (PyListObject *) list_new_prealloc(size);\n    ...\n    return (PyObject *) np;\n}\n从以上可以看出，list_repeat方法需要多少空间就申请多少空间，该操作返回的一个新的列表对象。\n```\n\n### ▍*= --> list_inplace_repeat\n```c\nstatic PyObject *\nlist_inplace_repeat(PyListObject *self, Py_ssize_t n)\n{\n    ...\n    size = PyList_GET_SIZE(self);\n    if (list_resize(self, size*n) < 0)\n        return NULL;\n    ...\n}\n\nstatic int\nlist_resize(PyListObject *self, Py_ssize_t newsize)\n{\n    if (allocated >= newsize && newsize >= (allocated >> 1)) {\n        assert(self->ob_item != NULL || newsize == 0);\n        Py_SIZE(self) = newsize;\n        return 0;\n    }\n    ...\n    new_allocated = (size_t)newsize + (newsize >> 3) + (newsize < 9 ? 3 : 6);\n    ...\n}\n```\nlist_inplace_repeat代码中通过调用list_resize来进行扩容，并告诉它这个列表需要容纳size\\*n个元素。从list_resize代码来看，当allocated空间足够时，不会进行扩容操作。但是新申请的空间总是比所需要的大的。如果进行pop等减小list元素数量的操作来看，实际上列表的大小也会按照相应策略进行缩减操作。\n\n>If the newsize falls lower than half the allocated size, then proceed with the realloc() to shrink the list. --- From cpython\n\n### ▍总结\n\n1. \\*=会调用list_resize，可能会引起list空间扩容的情况，而且此时list对象占用空间会比实际list对象中元素占用空间大。\n2. \\*会按需获取申请空间大小，不会调用list_resize方法。\n","source":"_posts/浅析Python中列表操作之-和.md","raw":"---\ntitle: 浅析Python中列表操作之*和*=\ndate: 2019-10-07 00:42:03\ntags:\n  - Python3\n  - Python源码\ncategories:\n  - Python3 进阶\n---\n\n初学Python时总是会将a\\*=n理解为a=a\\*n，稍微深入后就会知道在Python中的不同，其中*调用__mul__ ，而*=调用__imul__ 。\n\n对于list对象也支持乘法操作，截止到Python3.7版本，上述仍然是成立的。我们知道list是由C实现的，所以真正的底层调用肯定是C的实现。观察list对象的C实现的源码我们会知道乘法\\*操作调用list_repeat，\\*=会调用list_inplace_repeat，下面分别看一下两者的C实现方式。\n\n### ▍* --> list_repeat\n```c\nstatic PyObject *\nlist_repeat(PyListObject *a, Py_ssize_t n)\n{\n    ...\n    size = Py_SIZE(a) * n;\n    if (size == 0)\n        return PyList_New(0);\n    np = (PyListObject *) list_new_prealloc(size);\n    ...\n    return (PyObject *) np;\n}\n从以上可以看出，list_repeat方法需要多少空间就申请多少空间，该操作返回的一个新的列表对象。\n```\n\n### ▍*= --> list_inplace_repeat\n```c\nstatic PyObject *\nlist_inplace_repeat(PyListObject *self, Py_ssize_t n)\n{\n    ...\n    size = PyList_GET_SIZE(self);\n    if (list_resize(self, size*n) < 0)\n        return NULL;\n    ...\n}\n\nstatic int\nlist_resize(PyListObject *self, Py_ssize_t newsize)\n{\n    if (allocated >= newsize && newsize >= (allocated >> 1)) {\n        assert(self->ob_item != NULL || newsize == 0);\n        Py_SIZE(self) = newsize;\n        return 0;\n    }\n    ...\n    new_allocated = (size_t)newsize + (newsize >> 3) + (newsize < 9 ? 3 : 6);\n    ...\n}\n```\nlist_inplace_repeat代码中通过调用list_resize来进行扩容，并告诉它这个列表需要容纳size\\*n个元素。从list_resize代码来看，当allocated空间足够时，不会进行扩容操作。但是新申请的空间总是比所需要的大的。如果进行pop等减小list元素数量的操作来看，实际上列表的大小也会按照相应策略进行缩减操作。\n\n>If the newsize falls lower than half the allocated size, then proceed with the realloc() to shrink the list. --- From cpython\n\n### ▍总结\n\n1. \\*=会调用list_resize，可能会引起list空间扩容的情况，而且此时list对象占用空间会比实际list对象中元素占用空间大。\n2. \\*会按需获取申请空间大小，不会调用list_resize方法。\n","slug":"浅析Python中列表操作之-和","published":1,"updated":"2019-10-07T05:33:14.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xja00c3exotixg3yaom","content":"<p>初学Python时总是会将a*=n理解为a=a*n，稍微深入后就会知道在Python中的不同，其中<em>调用<strong>mul</strong> ，而</em>=调用<strong>imul</strong> 。</p>\n<p>对于list对象也支持乘法操作，截止到Python3.7版本，上述仍然是成立的。我们知道list是由C实现的，所以真正的底层调用肯定是C的实现。观察list对象的C实现的源码我们会知道乘法*操作调用list_repeat，*=会调用list_inplace_repeat，下面分别看一下两者的C实现方式。</p>\n<h3 id=\"▍-–-gt-list-repeat\"><a href=\"#▍-–-gt-list-repeat\" class=\"headerlink\" title=\"▍* –&gt; list_repeat\"></a>▍* –&gt; list_repeat</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">list_repeat(PyListObject *a, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) * n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PyList_New(<span class=\"number\">0</span>);</span><br><span class=\"line\">    np = (PyListObject *) list_new_prealloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *) np;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">从以上可以看出，list_repeat方法需要多少空间就申请多少空间，该操作返回的一个新的列表对象。</span><br></pre></td></tr></table></figure>\n<h3 id=\"▍-–-gt-list-inplace-repeat\"><a href=\"#▍-–-gt-list-inplace-repeat\" class=\"headerlink\" title=\"▍*= –&gt; list_inplace_repeat\"></a>▍*= –&gt; list_inplace_repeat</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">list_inplace_repeat(PyListObject *self, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = PyList_GET_SIZE(self);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list_resize(self, size*n) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">list_resize(PyListObject *self, Py_ssize_t newsize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        assert(self-&gt;ob_item != <span class=\"literal\">NULL</span> || newsize == <span class=\"number\">0</span>);</span><br><span class=\"line\">        Py_SIZE(self) = newsize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    new_allocated = (<span class=\"keyword\">size_t</span>)newsize + (newsize &gt;&gt; <span class=\"number\">3</span>) + (newsize &lt; <span class=\"number\">9</span> ? <span class=\"number\">3</span> : <span class=\"number\">6</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>list_inplace_repeat代码中通过调用list_resize来进行扩容，并告诉它这个列表需要容纳size*n个元素。从list_resize代码来看，当allocated空间足够时，不会进行扩容操作。但是新申请的空间总是比所需要的大的。如果进行pop等减小list元素数量的操作来看，实际上列表的大小也会按照相应策略进行缩减操作。</p>\n<blockquote>\n<p>If the newsize falls lower than half the allocated size, then proceed with the realloc() to shrink the list. — From cpython</p>\n</blockquote>\n<h3 id=\"▍总结\"><a href=\"#▍总结\" class=\"headerlink\" title=\"▍总结\"></a>▍总结</h3><ol>\n<li>*=会调用list_resize，可能会引起list空间扩容的情况，而且此时list对象占用空间会比实际list对象中元素占用空间大。</li>\n<li>*会按需获取申请空间大小，不会调用list_resize方法。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>初学Python时总是会将a*=n理解为a=a*n，稍微深入后就会知道在Python中的不同，其中<em>调用<strong>mul</strong> ，而</em>=调用<strong>imul</strong> 。</p>\n<p>对于list对象也支持乘法操作，截止到Python3.7版本，上述仍然是成立的。我们知道list是由C实现的，所以真正的底层调用肯定是C的实现。观察list对象的C实现的源码我们会知道乘法*操作调用list_repeat，*=会调用list_inplace_repeat，下面分别看一下两者的C实现方式。</p>\n<h3 id=\"▍-–-gt-list-repeat\"><a href=\"#▍-–-gt-list-repeat\" class=\"headerlink\" title=\"▍* –&gt; list_repeat\"></a>▍* –&gt; list_repeat</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">list_repeat(PyListObject *a, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) * n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PyList_New(<span class=\"number\">0</span>);</span><br><span class=\"line\">    np = (PyListObject *) list_new_prealloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *) np;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">从以上可以看出，list_repeat方法需要多少空间就申请多少空间，该操作返回的一个新的列表对象。</span><br></pre></td></tr></table></figure>\n<h3 id=\"▍-–-gt-list-inplace-repeat\"><a href=\"#▍-–-gt-list-inplace-repeat\" class=\"headerlink\" title=\"▍*= –&gt; list_inplace_repeat\"></a>▍*= –&gt; list_inplace_repeat</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">list_inplace_repeat(PyListObject *self, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = PyList_GET_SIZE(self);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list_resize(self, size*n) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">list_resize(PyListObject *self, Py_ssize_t newsize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        assert(self-&gt;ob_item != <span class=\"literal\">NULL</span> || newsize == <span class=\"number\">0</span>);</span><br><span class=\"line\">        Py_SIZE(self) = newsize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    new_allocated = (<span class=\"keyword\">size_t</span>)newsize + (newsize &gt;&gt; <span class=\"number\">3</span>) + (newsize &lt; <span class=\"number\">9</span> ? <span class=\"number\">3</span> : <span class=\"number\">6</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>list_inplace_repeat代码中通过调用list_resize来进行扩容，并告诉它这个列表需要容纳size*n个元素。从list_resize代码来看，当allocated空间足够时，不会进行扩容操作。但是新申请的空间总是比所需要的大的。如果进行pop等减小list元素数量的操作来看，实际上列表的大小也会按照相应策略进行缩减操作。</p>\n<blockquote>\n<p>If the newsize falls lower than half the allocated size, then proceed with the realloc() to shrink the list. — From cpython</p>\n</blockquote>\n<h3 id=\"▍总结\"><a href=\"#▍总结\" class=\"headerlink\" title=\"▍总结\"></a>▍总结</h3><ol>\n<li>*=会调用list_resize，可能会引起list空间扩容的情况，而且此时list对象占用空间会比实际list对象中元素占用空间大。</li>\n<li>*会按需获取申请空间大小，不会调用list_resize方法。</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Oct 07 2019 13:33:14 GMT+0800 (China Standard Time)","title":"浅析Python中列表操作之*和*=","path":"2019/10/07/浅析Python中列表操作之-和/","eyeCatchImage":null,"excerpt":null,"date":"2019-10-06T16:42:03.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3","Python源码"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅谈Session和Cookie的区别与联系","date":"2018-03-06T18:27:40.000Z","_content":"\n|      | Cookie                     | Session |\n| :--- | :------------------------- | :------ |\n| 储存位置 | 客户端                        | 服务器端    |\n| 目的   | 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 | 跟踪会话    |\n| 安全性  | 不安全                        | 安全      |\n\nsession技术是要使用到cookie的，之所以出现session技术，主要是为了安全。\n\n<!-- more -->\n\n## Session的概念\n\nSession 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。\n\n一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。\n\n## cookie的概念\nCookie意为“甜饼”，是由W3C组织提出，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。\n\n由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。\n\nCookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。\n\n## Session的客户端实现形式（即Session ID的保存方法）\n\n一般浏览器提供了两种方式来保存，还有一种是程序员使用html隐藏域的方式自定义实现：\n\n1. 使用Cookie来保存，这是最常见的方法，本文“记住我的登录状态”功能的实现正式基于这种方式的。服务器通过设置Cookie的方式将Session ID发送到浏览器。如果我们不设置这个过期时间，那么这个Cookie将不存放在硬盘上，当浏览器关闭的时候，Cookie就消失了，这个Session ID就丢失了。如果我们设置这个时间为若干天之后，那么这个Cookie会保存在客户端硬盘中，即使浏览器关闭，这个值仍然存在，下次访问相应网站时，同 样会发送到服务器上。\n\n2. 使用URL附加信息的方式，也就是像我们经常看到JSP网站会有`aaa.jsp?JSESSIONID=*`一样的。这种方式和第一种方式里面不设置Cookie过期时间是一样的。\n\n3. 第三种方式是在页面表单里面增加隐藏域，这种方式实际上和第二种方式一样，只不过前者通过GET方式发送数据，后者使用POST方式发送数据。但是明显后者比较麻烦。\n\n## cookie与session的区别\n\ncookie数据保存在客户端，session数据保存在服务器端。\n\n简 单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送 当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。由于数据是存储在服务器 上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务 器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性，我曾经就遇到过一次。登录某个网站，开始显示的 是自己的信息，等一段时间超时了，一刷新，居然显示了别人的信息。\n\n如果浏览器使用的是 cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了 cookie用户名(username),那么，当你再次请求服务器的时候，浏览器会将username一块发送给服务器，这些变量有一定的特殊标记。服 务器会解释为 cookie变量。所以只要不关闭浏览器，那么 cookie变量便一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器，曾经在学校的vbb论坛上面做过试验，copy别人的 cookie登录，冒用了别人的名义发帖子，完全没有问题。\n\nSession是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID,用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。\n\n服务器也可以通过URL重写的方式来传递SessionID的值，因此不是完全依赖Cookie。如果客户端Cookie禁用，则服务器可以自动通过重写URL的方式来保存Session的值，并且这个过程对程序员透明。\n\n可以试一下，即使不写Cookie，在使用request.getCookies();取出的Cookie数组的长度也是1，而这个Cookie的名字就是JSESSIONID，还有一个很长的二进制的字符串，是SessionID的值。\n\n## Session与Cookie的应用场景\nCookies是属于Session对象的一种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者一个cookie的文本文件中；而“Session”则会占用服务器资源。所以，尽量不要使用Session，而使用Cookies。但是我们一般认为cookie是不可靠的，session是可靠地，但是目前很多著名的站点也都以来cookie。有时候为了解决禁用cookie后的页面处理，通常采用url重写技术，调用session中大量有用的方法从session中获取数据后置入页面。\n\nCookies与Session的应用场景：\nCookies的安全性能一直是倍受争议的。虽然Cookies是保存在本机上的，但是其信息的完全可见性且易于本地编辑性，往往可以引起很多的安全问题。所以Cookies到底该不该用，到底该怎样用，就有了一个需要给定的底线。\n\n先来看看，网站的敏感数据有哪些。\n\n登陆验证信息。一般采用Session(“Logon”)＝true or false的形式。\n用户的各种私人信息，比如姓名等，某种情况下，需要保存在Session里\n需要在页面间传递的内容信息，比如调查工作需要分好几步。每一步的信息都保存在Session里，最后在统一更新到数据库。\n\n当然还会有很多，这里列举一些比较典型的\n假如，一个人孤僻到不想碰Session，因为他认为，如果用户万一不小心关闭了浏览器，那么之前保存的数据就全部丢失了。所以，他出于好意，决定把这些用Session的地方，都改成用Cookies来存储，这完全是可行的，且基本操作和用Session一模一样。那么，下面就针对以上的3个典型例子，做一个分析\n很显然，只要某个有意非法入侵者，知道该网站验证登陆信息的Session变量是什么，那么他就可以事先编辑好该Cookies，放入到Cookies目录中，这样就可以顺利通过验证了。这是不是很可怕？\nCookies完全是可见的，即使程序员设定了Cookies的生存周期（比如只在用户会话有效期内有效），它也是不安全的。假设，用户忘了关浏览器 或者一个恶意者硬性把用户给打晕，那用户的损失将是巨大的。\n这点如上点一样，很容易被它人窃取重要的私人信息。但，其还有一个问题所在是，可能这些数据信息量太大，而使得Cookies的文件大小剧增。这可不是用户希望所看到的。\n\n显然，Cookies并不是那么一块好啃的小甜饼。但，Cookies的存在，当然有其原因。它给予程序员更多发挥编程才能的空间。所以，使用Cookies该有个底线。这个底线一般来说，遵循以下原则。\n不要保存私人信息。\n任何重要数据，最好通过加密形式来保存数据（最简单的可以用URLEncode，当然也可以用完善的可逆加密方式，遗憾的是，最好不要用md5来加密）。\n是否保存登陆信息，需有用户自行选择。\n长于10K的数据，不要用到Cookies。\n也不要用Cookies来玩点让客户惊喜的小游戏。\n\n## cookie最典型的应用是：\n\n1. 判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。\n\n2. 另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。\n\n## 参考\n\n1. https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1\n2. http://blog.csdn.net/duan1078774504/article/details/51912868\n","source":"_posts/浅谈Session和Cookie的区别与联系.md","raw":"---\ntitle: 浅谈Session和Cookie的区别与联系\ndate: 2018-03-07 02:27:40\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\n|      | Cookie                     | Session |\n| :--- | :------------------------- | :------ |\n| 储存位置 | 客户端                        | 服务器端    |\n| 目的   | 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 | 跟踪会话    |\n| 安全性  | 不安全                        | 安全      |\n\nsession技术是要使用到cookie的，之所以出现session技术，主要是为了安全。\n\n<!-- more -->\n\n## Session的概念\n\nSession 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。\n\n一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。\n\n## cookie的概念\nCookie意为“甜饼”，是由W3C组织提出，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。\n\n由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。\n\nCookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。\n\n## Session的客户端实现形式（即Session ID的保存方法）\n\n一般浏览器提供了两种方式来保存，还有一种是程序员使用html隐藏域的方式自定义实现：\n\n1. 使用Cookie来保存，这是最常见的方法，本文“记住我的登录状态”功能的实现正式基于这种方式的。服务器通过设置Cookie的方式将Session ID发送到浏览器。如果我们不设置这个过期时间，那么这个Cookie将不存放在硬盘上，当浏览器关闭的时候，Cookie就消失了，这个Session ID就丢失了。如果我们设置这个时间为若干天之后，那么这个Cookie会保存在客户端硬盘中，即使浏览器关闭，这个值仍然存在，下次访问相应网站时，同 样会发送到服务器上。\n\n2. 使用URL附加信息的方式，也就是像我们经常看到JSP网站会有`aaa.jsp?JSESSIONID=*`一样的。这种方式和第一种方式里面不设置Cookie过期时间是一样的。\n\n3. 第三种方式是在页面表单里面增加隐藏域，这种方式实际上和第二种方式一样，只不过前者通过GET方式发送数据，后者使用POST方式发送数据。但是明显后者比较麻烦。\n\n## cookie与session的区别\n\ncookie数据保存在客户端，session数据保存在服务器端。\n\n简 单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送 当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。由于数据是存储在服务器 上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务 器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性，我曾经就遇到过一次。登录某个网站，开始显示的 是自己的信息，等一段时间超时了，一刷新，居然显示了别人的信息。\n\n如果浏览器使用的是 cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了 cookie用户名(username),那么，当你再次请求服务器的时候，浏览器会将username一块发送给服务器，这些变量有一定的特殊标记。服 务器会解释为 cookie变量。所以只要不关闭浏览器，那么 cookie变量便一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器，曾经在学校的vbb论坛上面做过试验，copy别人的 cookie登录，冒用了别人的名义发帖子，完全没有问题。\n\nSession是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID,用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。\n\n服务器也可以通过URL重写的方式来传递SessionID的值，因此不是完全依赖Cookie。如果客户端Cookie禁用，则服务器可以自动通过重写URL的方式来保存Session的值，并且这个过程对程序员透明。\n\n可以试一下，即使不写Cookie，在使用request.getCookies();取出的Cookie数组的长度也是1，而这个Cookie的名字就是JSESSIONID，还有一个很长的二进制的字符串，是SessionID的值。\n\n## Session与Cookie的应用场景\nCookies是属于Session对象的一种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者一个cookie的文本文件中；而“Session”则会占用服务器资源。所以，尽量不要使用Session，而使用Cookies。但是我们一般认为cookie是不可靠的，session是可靠地，但是目前很多著名的站点也都以来cookie。有时候为了解决禁用cookie后的页面处理，通常采用url重写技术，调用session中大量有用的方法从session中获取数据后置入页面。\n\nCookies与Session的应用场景：\nCookies的安全性能一直是倍受争议的。虽然Cookies是保存在本机上的，但是其信息的完全可见性且易于本地编辑性，往往可以引起很多的安全问题。所以Cookies到底该不该用，到底该怎样用，就有了一个需要给定的底线。\n\n先来看看，网站的敏感数据有哪些。\n\n登陆验证信息。一般采用Session(“Logon”)＝true or false的形式。\n用户的各种私人信息，比如姓名等，某种情况下，需要保存在Session里\n需要在页面间传递的内容信息，比如调查工作需要分好几步。每一步的信息都保存在Session里，最后在统一更新到数据库。\n\n当然还会有很多，这里列举一些比较典型的\n假如，一个人孤僻到不想碰Session，因为他认为，如果用户万一不小心关闭了浏览器，那么之前保存的数据就全部丢失了。所以，他出于好意，决定把这些用Session的地方，都改成用Cookies来存储，这完全是可行的，且基本操作和用Session一模一样。那么，下面就针对以上的3个典型例子，做一个分析\n很显然，只要某个有意非法入侵者，知道该网站验证登陆信息的Session变量是什么，那么他就可以事先编辑好该Cookies，放入到Cookies目录中，这样就可以顺利通过验证了。这是不是很可怕？\nCookies完全是可见的，即使程序员设定了Cookies的生存周期（比如只在用户会话有效期内有效），它也是不安全的。假设，用户忘了关浏览器 或者一个恶意者硬性把用户给打晕，那用户的损失将是巨大的。\n这点如上点一样，很容易被它人窃取重要的私人信息。但，其还有一个问题所在是，可能这些数据信息量太大，而使得Cookies的文件大小剧增。这可不是用户希望所看到的。\n\n显然，Cookies并不是那么一块好啃的小甜饼。但，Cookies的存在，当然有其原因。它给予程序员更多发挥编程才能的空间。所以，使用Cookies该有个底线。这个底线一般来说，遵循以下原则。\n不要保存私人信息。\n任何重要数据，最好通过加密形式来保存数据（最简单的可以用URLEncode，当然也可以用完善的可逆加密方式，遗憾的是，最好不要用md5来加密）。\n是否保存登陆信息，需有用户自行选择。\n长于10K的数据，不要用到Cookies。\n也不要用Cookies来玩点让客户惊喜的小游戏。\n\n## cookie最典型的应用是：\n\n1. 判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。\n\n2. 另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。\n\n## 参考\n\n1. https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1\n2. http://blog.csdn.net/duan1078774504/article/details/51912868\n","slug":"浅谈Session和Cookie的区别与联系","published":1,"updated":"2018-03-06T19:01:04.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjc00c6exot7hdu0mzx","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">Cookie</th>\n<th style=\"text-align:left\">Session</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">储存位置</td>\n<td style=\"text-align:left\">客户端</td>\n<td style=\"text-align:left\">服务器端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目的</td>\n<td style=\"text-align:left\">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td>\n<td style=\"text-align:left\">跟踪会话</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">安全性</td>\n<td style=\"text-align:left\">不安全</td>\n<td style=\"text-align:left\">安全</td>\n</tr>\n</tbody>\n</table>\n<p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p>\n<a id=\"more\"></a>\n<h2 id=\"Session的概念\"><a href=\"#Session的概念\" class=\"headerlink\" title=\"Session的概念\"></a>Session的概念</h2><p>Session 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。</p>\n<p>一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。</p>\n<h2 id=\"cookie的概念\"><a href=\"#cookie的概念\" class=\"headerlink\" title=\"cookie的概念\"></a>cookie的概念</h2><p>Cookie意为“甜饼”，是由W3C组织提出，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。</p>\n<p>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。</p>\n<p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>\n<h2 id=\"Session的客户端实现形式（即Session-ID的保存方法）\"><a href=\"#Session的客户端实现形式（即Session-ID的保存方法）\" class=\"headerlink\" title=\"Session的客户端实现形式（即Session ID的保存方法）\"></a>Session的客户端实现形式（即Session ID的保存方法）</h2><p>一般浏览器提供了两种方式来保存，还有一种是程序员使用html隐藏域的方式自定义实现：</p>\n<ol>\n<li><p>使用Cookie来保存，这是最常见的方法，本文“记住我的登录状态”功能的实现正式基于这种方式的。服务器通过设置Cookie的方式将Session ID发送到浏览器。如果我们不设置这个过期时间，那么这个Cookie将不存放在硬盘上，当浏览器关闭的时候，Cookie就消失了，这个Session ID就丢失了。如果我们设置这个时间为若干天之后，那么这个Cookie会保存在客户端硬盘中，即使浏览器关闭，这个值仍然存在，下次访问相应网站时，同 样会发送到服务器上。</p>\n</li>\n<li><p>使用URL附加信息的方式，也就是像我们经常看到JSP网站会有<code>aaa.jsp?JSESSIONID=*</code>一样的。这种方式和第一种方式里面不设置Cookie过期时间是一样的。</p>\n</li>\n<li><p>第三种方式是在页面表单里面增加隐藏域，这种方式实际上和第二种方式一样，只不过前者通过GET方式发送数据，后者使用POST方式发送数据。但是明显后者比较麻烦。</p>\n</li>\n</ol>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><p>cookie数据保存在客户端，session数据保存在服务器端。</p>\n<p>简 单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送 当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。由于数据是存储在服务器 上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务 器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性，我曾经就遇到过一次。登录某个网站，开始显示的 是自己的信息，等一段时间超时了，一刷新，居然显示了别人的信息。</p>\n<p>如果浏览器使用的是 cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了 cookie用户名(username),那么，当你再次请求服务器的时候，浏览器会将username一块发送给服务器，这些变量有一定的特殊标记。服 务器会解释为 cookie变量。所以只要不关闭浏览器，那么 cookie变量便一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器，曾经在学校的vbb论坛上面做过试验，copy别人的 cookie登录，冒用了别人的名义发帖子，完全没有问题。</p>\n<p>Session是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID,用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。</p>\n<p>服务器也可以通过URL重写的方式来传递SessionID的值，因此不是完全依赖Cookie。如果客户端Cookie禁用，则服务器可以自动通过重写URL的方式来保存Session的值，并且这个过程对程序员透明。</p>\n<p>可以试一下，即使不写Cookie，在使用request.getCookies();取出的Cookie数组的长度也是1，而这个Cookie的名字就是JSESSIONID，还有一个很长的二进制的字符串，是SessionID的值。</p>\n<h2 id=\"Session与Cookie的应用场景\"><a href=\"#Session与Cookie的应用场景\" class=\"headerlink\" title=\"Session与Cookie的应用场景\"></a>Session与Cookie的应用场景</h2><p>Cookies是属于Session对象的一种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者一个cookie的文本文件中；而“Session”则会占用服务器资源。所以，尽量不要使用Session，而使用Cookies。但是我们一般认为cookie是不可靠的，session是可靠地，但是目前很多著名的站点也都以来cookie。有时候为了解决禁用cookie后的页面处理，通常采用url重写技术，调用session中大量有用的方法从session中获取数据后置入页面。</p>\n<p>Cookies与Session的应用场景：<br>Cookies的安全性能一直是倍受争议的。虽然Cookies是保存在本机上的，但是其信息的完全可见性且易于本地编辑性，往往可以引起很多的安全问题。所以Cookies到底该不该用，到底该怎样用，就有了一个需要给定的底线。</p>\n<p>先来看看，网站的敏感数据有哪些。</p>\n<p>登陆验证信息。一般采用Session(“Logon”)＝true or false的形式。<br>用户的各种私人信息，比如姓名等，某种情况下，需要保存在Session里<br>需要在页面间传递的内容信息，比如调查工作需要分好几步。每一步的信息都保存在Session里，最后在统一更新到数据库。</p>\n<p>当然还会有很多，这里列举一些比较典型的<br>假如，一个人孤僻到不想碰Session，因为他认为，如果用户万一不小心关闭了浏览器，那么之前保存的数据就全部丢失了。所以，他出于好意，决定把这些用Session的地方，都改成用Cookies来存储，这完全是可行的，且基本操作和用Session一模一样。那么，下面就针对以上的3个典型例子，做一个分析<br>很显然，只要某个有意非法入侵者，知道该网站验证登陆信息的Session变量是什么，那么他就可以事先编辑好该Cookies，放入到Cookies目录中，这样就可以顺利通过验证了。这是不是很可怕？<br>Cookies完全是可见的，即使程序员设定了Cookies的生存周期（比如只在用户会话有效期内有效），它也是不安全的。假设，用户忘了关浏览器 或者一个恶意者硬性把用户给打晕，那用户的损失将是巨大的。<br>这点如上点一样，很容易被它人窃取重要的私人信息。但，其还有一个问题所在是，可能这些数据信息量太大，而使得Cookies的文件大小剧增。这可不是用户希望所看到的。</p>\n<p>显然，Cookies并不是那么一块好啃的小甜饼。但，Cookies的存在，当然有其原因。它给予程序员更多发挥编程才能的空间。所以，使用Cookies该有个底线。这个底线一般来说，遵循以下原则。<br>不要保存私人信息。<br>任何重要数据，最好通过加密形式来保存数据（最简单的可以用URLEncode，当然也可以用完善的可逆加密方式，遗憾的是，最好不要用md5来加密）。<br>是否保存登陆信息，需有用户自行选择。<br>长于10K的数据，不要用到Cookies。<br>也不要用Cookies来玩点让客户惊喜的小游戏。</p>\n<h2 id=\"cookie最典型的应用是：\"><a href=\"#cookie最典型的应用是：\" class=\"headerlink\" title=\"cookie最典型的应用是：\"></a>cookie最典型的应用是：</h2><ol>\n<li><p>判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</p>\n</li>\n<li><p>另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1</a></li>\n<li><a href=\"http://blog.csdn.net/duan1078774504/article/details/51912868\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/duan1078774504/article/details/51912868</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">Cookie</th>\n<th style=\"text-align:left\">Session</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">储存位置</td>\n<td style=\"text-align:left\">客户端</td>\n<td style=\"text-align:left\">服务器端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目的</td>\n<td style=\"text-align:left\">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td>\n<td style=\"text-align:left\">跟踪会话</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">安全性</td>\n<td style=\"text-align:left\">不安全</td>\n<td style=\"text-align:left\">安全</td>\n</tr>\n</tbody>\n</table>\n<p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p>","more":"<h2 id=\"Session的概念\"><a href=\"#Session的概念\" class=\"headerlink\" title=\"Session的概念\"></a>Session的概念</h2><p>Session 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。</p>\n<p>一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。</p>\n<h2 id=\"cookie的概念\"><a href=\"#cookie的概念\" class=\"headerlink\" title=\"cookie的概念\"></a>cookie的概念</h2><p>Cookie意为“甜饼”，是由W3C组织提出，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。</p>\n<p>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。</p>\n<p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>\n<h2 id=\"Session的客户端实现形式（即Session-ID的保存方法）\"><a href=\"#Session的客户端实现形式（即Session-ID的保存方法）\" class=\"headerlink\" title=\"Session的客户端实现形式（即Session ID的保存方法）\"></a>Session的客户端实现形式（即Session ID的保存方法）</h2><p>一般浏览器提供了两种方式来保存，还有一种是程序员使用html隐藏域的方式自定义实现：</p>\n<ol>\n<li><p>使用Cookie来保存，这是最常见的方法，本文“记住我的登录状态”功能的实现正式基于这种方式的。服务器通过设置Cookie的方式将Session ID发送到浏览器。如果我们不设置这个过期时间，那么这个Cookie将不存放在硬盘上，当浏览器关闭的时候，Cookie就消失了，这个Session ID就丢失了。如果我们设置这个时间为若干天之后，那么这个Cookie会保存在客户端硬盘中，即使浏览器关闭，这个值仍然存在，下次访问相应网站时，同 样会发送到服务器上。</p>\n</li>\n<li><p>使用URL附加信息的方式，也就是像我们经常看到JSP网站会有<code>aaa.jsp?JSESSIONID=*</code>一样的。这种方式和第一种方式里面不设置Cookie过期时间是一样的。</p>\n</li>\n<li><p>第三种方式是在页面表单里面增加隐藏域，这种方式实际上和第二种方式一样，只不过前者通过GET方式发送数据，后者使用POST方式发送数据。但是明显后者比较麻烦。</p>\n</li>\n</ol>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><p>cookie数据保存在客户端，session数据保存在服务器端。</p>\n<p>简 单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送 当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。由于数据是存储在服务器 上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务 器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性，我曾经就遇到过一次。登录某个网站，开始显示的 是自己的信息，等一段时间超时了，一刷新，居然显示了别人的信息。</p>\n<p>如果浏览器使用的是 cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了 cookie用户名(username),那么，当你再次请求服务器的时候，浏览器会将username一块发送给服务器，这些变量有一定的特殊标记。服 务器会解释为 cookie变量。所以只要不关闭浏览器，那么 cookie变量便一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器，曾经在学校的vbb论坛上面做过试验，copy别人的 cookie登录，冒用了别人的名义发帖子，完全没有问题。</p>\n<p>Session是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID,用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。</p>\n<p>服务器也可以通过URL重写的方式来传递SessionID的值，因此不是完全依赖Cookie。如果客户端Cookie禁用，则服务器可以自动通过重写URL的方式来保存Session的值，并且这个过程对程序员透明。</p>\n<p>可以试一下，即使不写Cookie，在使用request.getCookies();取出的Cookie数组的长度也是1，而这个Cookie的名字就是JSESSIONID，还有一个很长的二进制的字符串，是SessionID的值。</p>\n<h2 id=\"Session与Cookie的应用场景\"><a href=\"#Session与Cookie的应用场景\" class=\"headerlink\" title=\"Session与Cookie的应用场景\"></a>Session与Cookie的应用场景</h2><p>Cookies是属于Session对象的一种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者一个cookie的文本文件中；而“Session”则会占用服务器资源。所以，尽量不要使用Session，而使用Cookies。但是我们一般认为cookie是不可靠的，session是可靠地，但是目前很多著名的站点也都以来cookie。有时候为了解决禁用cookie后的页面处理，通常采用url重写技术，调用session中大量有用的方法从session中获取数据后置入页面。</p>\n<p>Cookies与Session的应用场景：<br>Cookies的安全性能一直是倍受争议的。虽然Cookies是保存在本机上的，但是其信息的完全可见性且易于本地编辑性，往往可以引起很多的安全问题。所以Cookies到底该不该用，到底该怎样用，就有了一个需要给定的底线。</p>\n<p>先来看看，网站的敏感数据有哪些。</p>\n<p>登陆验证信息。一般采用Session(“Logon”)＝true or false的形式。<br>用户的各种私人信息，比如姓名等，某种情况下，需要保存在Session里<br>需要在页面间传递的内容信息，比如调查工作需要分好几步。每一步的信息都保存在Session里，最后在统一更新到数据库。</p>\n<p>当然还会有很多，这里列举一些比较典型的<br>假如，一个人孤僻到不想碰Session，因为他认为，如果用户万一不小心关闭了浏览器，那么之前保存的数据就全部丢失了。所以，他出于好意，决定把这些用Session的地方，都改成用Cookies来存储，这完全是可行的，且基本操作和用Session一模一样。那么，下面就针对以上的3个典型例子，做一个分析<br>很显然，只要某个有意非法入侵者，知道该网站验证登陆信息的Session变量是什么，那么他就可以事先编辑好该Cookies，放入到Cookies目录中，这样就可以顺利通过验证了。这是不是很可怕？<br>Cookies完全是可见的，即使程序员设定了Cookies的生存周期（比如只在用户会话有效期内有效），它也是不安全的。假设，用户忘了关浏览器 或者一个恶意者硬性把用户给打晕，那用户的损失将是巨大的。<br>这点如上点一样，很容易被它人窃取重要的私人信息。但，其还有一个问题所在是，可能这些数据信息量太大，而使得Cookies的文件大小剧增。这可不是用户希望所看到的。</p>\n<p>显然，Cookies并不是那么一块好啃的小甜饼。但，Cookies的存在，当然有其原因。它给予程序员更多发挥编程才能的空间。所以，使用Cookies该有个底线。这个底线一般来说，遵循以下原则。<br>不要保存私人信息。<br>任何重要数据，最好通过加密形式来保存数据（最简单的可以用URLEncode，当然也可以用完善的可逆加密方式，遗憾的是，最好不要用md5来加密）。<br>是否保存登陆信息，需有用户自行选择。<br>长于10K的数据，不要用到Cookies。<br>也不要用Cookies来玩点让客户惊喜的小游戏。</p>\n<h2 id=\"cookie最典型的应用是：\"><a href=\"#cookie最典型的应用是：\" class=\"headerlink\" title=\"cookie最典型的应用是：\"></a>cookie最典型的应用是：</h2><ol>\n<li><p>判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</p>\n</li>\n<li><p>另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_1</a></li>\n<li><a href=\"http://blog.csdn.net/duan1078774504/article/details/51912868\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/duan1078774504/article/details/51912868</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 03:01:04 GMT+0800 (China Standard Time)","title":"浅谈Session和Cookie的区别与联系","path":"2018/03/07/浅谈Session和Cookie的区别与联系/","eyeCatchImage":null,"excerpt":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">Cookie</th>\n<th style=\"text-align:left\">Session</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">储存位置</td>\n<td style=\"text-align:left\">客户端</td>\n<td style=\"text-align:left\">服务器端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目的</td>\n<td style=\"text-align:left\">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td>\n<td style=\"text-align:left\">跟踪会话</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">安全性</td>\n<td style=\"text-align:left\">不安全</td>\n<td style=\"text-align:left\">安全</td>\n</tr>\n</tbody>\n</table>\n<p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p>","date":"2018-03-06T18:27:40.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"神经网络中为什么不能将权重初始值设置为一样的值","date":"2019-11-04T03:00:31.000Z","_content":"\n先说结论，如果权重初始值设为0的话，将无法正确进行学习。\n\n这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2层的神经元中全部输入相同的值，这意味着反向传播时第2层的权重全部都会进行相同的更新。因此，权重被更新为相同的值，并拥有了对称的值(重复的值)。这使得神经网络拥有许多不同的权重的意义丧失了。为了防止“权重均一化” (严格地讲，是为了瓦解权重的对称结构)，必须随机生成初始值。\n\n实际上，考虑一个全连接的神经网络，同一层中的任意神经元是同构的，对于相同的输入他们会有同样的输出，此时如果将参数全部初始化为相同的值，那么无论前向传播还是反向传播，参数的取值还是完全相同，学习将无法打破这种`对称性`，最终同一网络层中的各个参数仍然是相同的。\n\n综上，必须随机的初始化神经网络参数的值，以打破这种对称性。\n","source":"_posts/神经网络中为什么不能将权重初始值设置为一样的值.md","raw":"---\ntitle: 神经网络中为什么不能将权重初始值设置为一样的值\ndate: 2019-11-04 11:00:31\ntags:\n  - 机器学习\n  - 神经网络\ncategories:\n  - 机器学习\n---\n\n先说结论，如果权重初始值设为0的话，将无法正确进行学习。\n\n这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2层的神经元中全部输入相同的值，这意味着反向传播时第2层的权重全部都会进行相同的更新。因此，权重被更新为相同的值，并拥有了对称的值(重复的值)。这使得神经网络拥有许多不同的权重的意义丧失了。为了防止“权重均一化” (严格地讲，是为了瓦解权重的对称结构)，必须随机生成初始值。\n\n实际上，考虑一个全连接的神经网络，同一层中的任意神经元是同构的，对于相同的输入他们会有同样的输出，此时如果将参数全部初始化为相同的值，那么无论前向传播还是反向传播，参数的取值还是完全相同，学习将无法打破这种`对称性`，最终同一网络层中的各个参数仍然是相同的。\n\n综上，必须随机的初始化神经网络参数的值，以打破这种对称性。\n","slug":"神经网络中为什么不能将权重初始值设置为一样的值","published":1,"updated":"2019-11-11T05:28:04.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjf00cbexotv23l0wjl","content":"<p>先说结论，如果权重初始值设为0的话，将无法正确进行学习。</p>\n<p>这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2层的神经元中全部输入相同的值，这意味着反向传播时第2层的权重全部都会进行相同的更新。因此，权重被更新为相同的值，并拥有了对称的值(重复的值)。这使得神经网络拥有许多不同的权重的意义丧失了。为了防止“权重均一化” (严格地讲，是为了瓦解权重的对称结构)，必须随机生成初始值。</p>\n<p>实际上，考虑一个全连接的神经网络，同一层中的任意神经元是同构的，对于相同的输入他们会有同样的输出，此时如果将参数全部初始化为相同的值，那么无论前向传播还是反向传播，参数的取值还是完全相同，学习将无法打破这种<code>对称性</code>，最终同一网络层中的各个参数仍然是相同的。</p>\n<p>综上，必须随机的初始化神经网络参数的值，以打破这种对称性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先说结论，如果权重初始值设为0的话，将无法正确进行学习。</p>\n<p>这是因为在误差反向传播法中，所有的权重值都会进行相同的更新。比如，在2层神经网络中，假设第1层和第2层的权重为0。这样一来，正向传播时，因为输入层的权重为0，所以第2层的神经元全部会被传递相同的值。第2层的神经元中全部输入相同的值，这意味着反向传播时第2层的权重全部都会进行相同的更新。因此，权重被更新为相同的值，并拥有了对称的值(重复的值)。这使得神经网络拥有许多不同的权重的意义丧失了。为了防止“权重均一化” (严格地讲，是为了瓦解权重的对称结构)，必须随机生成初始值。</p>\n<p>实际上，考虑一个全连接的神经网络，同一层中的任意神经元是同构的，对于相同的输入他们会有同样的输出，此时如果将参数全部初始化为相同的值，那么无论前向传播还是反向传播，参数的取值还是完全相同，学习将无法打破这种<code>对称性</code>，最终同一网络层中的各个参数仍然是相同的。</p>\n<p>综上，必须随机的初始化神经网络参数的值，以打破这种对称性。</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Nov 11 2019 13:28:04 GMT+0800 (China Standard Time)","title":"神经网络中为什么不能将权重初始值设置为一样的值","path":"2019/11/04/神经网络中为什么不能将权重初始值设置为一样的值/","eyeCatchImage":null,"excerpt":null,"date":"2019-11-04T03:00:31.000Z","pv":0,"totalPV":0,"categories":"机器学习","tags":["机器学习","神经网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"服务器中的物理CPU、逻辑CPU和CPU核数","date":"2019-06-20T14:18:07.000Z","_content":"\n## 重要概念\n### 物理CPU               \n实际Server中插槽上的CPU个数\n物理cpu数量，可以数不重复的 physical id 有几个,查看方法\n\n```bash\ngrep \"physical id\" /proc/cpuinfo|sort|uniq|wc -l\n2\n```         \n\n### CPU核数           \n单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。\n比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    \n\n```bash\ncat /proc/cpuinfo |grep \"cpu cores\"|uniq\ngrep \"cpu cores\" /proc/cpuinfo|uniq|awk -F \":\" \"{print $2}\"\n8\n```\n\n### 逻辑CPU               \nLinux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的\n信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。\n\n一般情况，我们认为`一颗cpu可以有多核`，加上`intel的超线程技术(HT)`, 可以在逻辑上再分一倍数量的cpu core出来\n`逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)`。\n\n`如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术`\n\n备注一下：Linux下top查看的CPU也是逻辑CPU个数\n\n```bash\ncat /proc/cpuinfo| grep \"processor\" |wc -l\n32（支持超线程）\n```\n<!-- more -->\n\n## 查看方法\n通过cat /proc/cpuinfocpu来查看相关信息。\n> - vendor id     如果处理器为英特尔处理器，则字符串是 GenuineIntel。\n>- processor     包括这一逻辑处理器的唯一标识符。\n>- physical id   包括每个物理封装的唯一标识符。\n>- core id       保存每个内核的唯一标识符。\n>- siblings      列出了位于相同物理封装中的逻辑处理器的数量。\n>- cpu cores     包含位于相同物理封装中的内核数量。\n\n1. 拥有相同 physical id 的所有逻辑处理器共享同一个物理插座，每个 physical id 代表一个唯一的物理封装。\n2. Siblings 表示位于这一物理封装上的逻辑处理器的数量，它们可能支持也可能不支持超线程（HT）技术。\n3. 每个 core id 均代表一个唯一的处理器内核，所有带有相同 core id 的逻辑处理器均位于同一个处理器内核上。简单的说：“siblings”指的是一个物理CPU有几个逻辑CPU，”cpu cores“指的是一个物理CPU有几个核。\n4. 如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术。\n5. 如果有两个或两个以上的逻辑处理器拥有相同的 physical id，但是 core id不同，则说明这是一个多内核处理器。cpu cores条目也可以表示是否支持多内核。\n\n\n## top命令关于cpu使用率\n\n下面做一个简单的测试，终端中使用如下命令\n```bash\nmd5sum /dev/zero &\n```\n开启top，如下所示\n\n![Screen Shot 2019-06-20 at 22.53.34.png](https://upload-images.jianshu.io/upload_images/2952111-81c2a7654f73c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按数字键1后查看所有核的使用率。\n\n![Screen Shot 2019-06-20 at 22.56.42.png](https://upload-images.jianshu.io/upload_images/2952111-70b5f8c2b58f77cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n发现使用top命令，左上角显示的是整体负载，即单核的负载数除以核数。%CPU数值代表单个核的使用率，超过100%代表使用其他核的计算资源。\n\n\n第一行：\n- 10:01:23 — 当前系统时间\n- 126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）\n- 2 users — 当前有2个用户登录系统\n- load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数`除以逻辑CPU的数量`，`结果高于5的时候就表明系统在超负荷运转了。`\n\n第二行：\n- Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。\n\n第三行：cpu状态\n- 6.7% us — 用户空间占用CPU的百分比。\n- 0.4% sy — 内核空间占用CPU的百分比。\n- 0.0% ni — 改变过优先级的进程占用CPU的百分比\n- 92.9% id — 空闲CPU百分比\n- 0.0% wa — IO等待占用CPU的百分比\n- 0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比\n- 0.0% si — 软中断（Software Interrupts）占用CPU的百分比\n\n\n\n\n\n\n\n\n\n\n\n\n------------\n","source":"_posts/服务器中的物理CPU、逻辑CPU和CPU核数.md","raw":"---\ntitle: 服务器中的物理CPU、逻辑CPU和CPU核数\ndate: 2019-06-20 22:18:07\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n---\n\n## 重要概念\n### 物理CPU               \n实际Server中插槽上的CPU个数\n物理cpu数量，可以数不重复的 physical id 有几个,查看方法\n\n```bash\ngrep \"physical id\" /proc/cpuinfo|sort|uniq|wc -l\n2\n```         \n\n### CPU核数           \n单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。\n比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    \n\n```bash\ncat /proc/cpuinfo |grep \"cpu cores\"|uniq\ngrep \"cpu cores\" /proc/cpuinfo|uniq|awk -F \":\" \"{print $2}\"\n8\n```\n\n### 逻辑CPU               \nLinux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的\n信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。\n\n一般情况，我们认为`一颗cpu可以有多核`，加上`intel的超线程技术(HT)`, 可以在逻辑上再分一倍数量的cpu core出来\n`逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)`。\n\n`如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术`\n\n备注一下：Linux下top查看的CPU也是逻辑CPU个数\n\n```bash\ncat /proc/cpuinfo| grep \"processor\" |wc -l\n32（支持超线程）\n```\n<!-- more -->\n\n## 查看方法\n通过cat /proc/cpuinfocpu来查看相关信息。\n> - vendor id     如果处理器为英特尔处理器，则字符串是 GenuineIntel。\n>- processor     包括这一逻辑处理器的唯一标识符。\n>- physical id   包括每个物理封装的唯一标识符。\n>- core id       保存每个内核的唯一标识符。\n>- siblings      列出了位于相同物理封装中的逻辑处理器的数量。\n>- cpu cores     包含位于相同物理封装中的内核数量。\n\n1. 拥有相同 physical id 的所有逻辑处理器共享同一个物理插座，每个 physical id 代表一个唯一的物理封装。\n2. Siblings 表示位于这一物理封装上的逻辑处理器的数量，它们可能支持也可能不支持超线程（HT）技术。\n3. 每个 core id 均代表一个唯一的处理器内核，所有带有相同 core id 的逻辑处理器均位于同一个处理器内核上。简单的说：“siblings”指的是一个物理CPU有几个逻辑CPU，”cpu cores“指的是一个物理CPU有几个核。\n4. 如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术。\n5. 如果有两个或两个以上的逻辑处理器拥有相同的 physical id，但是 core id不同，则说明这是一个多内核处理器。cpu cores条目也可以表示是否支持多内核。\n\n\n## top命令关于cpu使用率\n\n下面做一个简单的测试，终端中使用如下命令\n```bash\nmd5sum /dev/zero &\n```\n开启top，如下所示\n\n![Screen Shot 2019-06-20 at 22.53.34.png](https://upload-images.jianshu.io/upload_images/2952111-81c2a7654f73c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按数字键1后查看所有核的使用率。\n\n![Screen Shot 2019-06-20 at 22.56.42.png](https://upload-images.jianshu.io/upload_images/2952111-70b5f8c2b58f77cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n发现使用top命令，左上角显示的是整体负载，即单核的负载数除以核数。%CPU数值代表单个核的使用率，超过100%代表使用其他核的计算资源。\n\n\n第一行：\n- 10:01:23 — 当前系统时间\n- 126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）\n- 2 users — 当前有2个用户登录系统\n- load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数`除以逻辑CPU的数量`，`结果高于5的时候就表明系统在超负荷运转了。`\n\n第二行：\n- Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。\n\n第三行：cpu状态\n- 6.7% us — 用户空间占用CPU的百分比。\n- 0.4% sy — 内核空间占用CPU的百分比。\n- 0.0% ni — 改变过优先级的进程占用CPU的百分比\n- 92.9% id — 空闲CPU百分比\n- 0.0% wa — IO等待占用CPU的百分比\n- 0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比\n- 0.0% si — 软中断（Software Interrupts）占用CPU的百分比\n\n\n\n\n\n\n\n\n\n\n\n\n------------\n","slug":"服务器中的物理CPU、逻辑CPU和CPU核数","published":1,"updated":"2019-06-23T14:23:08.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjk00ceexotlgbdoylq","content":"<h2 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h2><h3 id=\"物理CPU\"><a href=\"#物理CPU\" class=\"headerlink\" title=\"物理CPU\"></a>物理CPU</h3><p>实际Server中插槽上的CPU个数<br>物理cpu数量，可以数不重复的 physical id 有几个,查看方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">\"physical id\"</span> /proc/cpuinfo|sort|uniq|wc -l</span><br><span class=\"line\">2</span><br><span class=\"line\">```         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### CPU核数           </span></span><br><span class=\"line\">单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。</span><br><span class=\"line\">比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    </span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">cat /proc/cpuinfo |grep <span class=\"string\">\"cpu cores\"</span>|uniq</span><br><span class=\"line\">grep <span class=\"string\">\"cpu cores\"</span> /proc/cpuinfo|uniq|awk -F <span class=\"string\">\":\"</span> <span class=\"string\">\"&#123;print <span class=\"variable\">$2</span>&#125;\"</span></span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑CPU\"><a href=\"#逻辑CPU\" class=\"headerlink\" title=\"逻辑CPU\"></a>逻辑CPU</h3><p>Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的<br>信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。</p>\n<p>一般情况，我们认为<code>一颗cpu可以有多核</code>，加上<code>intel的超线程技术(HT)</code>, 可以在逻辑上再分一倍数量的cpu core出来<br><code>逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)</code>。</p>\n<p><code>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术</code></p>\n<p>备注一下：Linux下top查看的CPU也是逻辑CPU个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo| grep <span class=\"string\">\"processor\"</span> |wc -l</span><br><span class=\"line\">32（支持超线程）</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"查看方法\"><a href=\"#查看方法\" class=\"headerlink\" title=\"查看方法\"></a>查看方法</h2><p>通过cat /proc/cpuinfocpu来查看相关信息。</p>\n<blockquote>\n<ul>\n<li>vendor id     如果处理器为英特尔处理器，则字符串是 GenuineIntel。</li>\n<li>processor     包括这一逻辑处理器的唯一标识符。</li>\n<li>physical id   包括每个物理封装的唯一标识符。</li>\n<li>core id       保存每个内核的唯一标识符。</li>\n<li>siblings      列出了位于相同物理封装中的逻辑处理器的数量。</li>\n<li>cpu cores     包含位于相同物理封装中的内核数量。</li>\n</ul>\n</blockquote>\n<ol>\n<li>拥有相同 physical id 的所有逻辑处理器共享同一个物理插座，每个 physical id 代表一个唯一的物理封装。</li>\n<li>Siblings 表示位于这一物理封装上的逻辑处理器的数量，它们可能支持也可能不支持超线程（HT）技术。</li>\n<li>每个 core id 均代表一个唯一的处理器内核，所有带有相同 core id 的逻辑处理器均位于同一个处理器内核上。简单的说：“siblings”指的是一个物理CPU有几个逻辑CPU，”cpu cores“指的是一个物理CPU有几个核。</li>\n<li>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术。</li>\n<li>如果有两个或两个以上的逻辑处理器拥有相同的 physical id，但是 core id不同，则说明这是一个多内核处理器。cpu cores条目也可以表示是否支持多内核。</li>\n</ol>\n<h2 id=\"top命令关于cpu使用率\"><a href=\"#top命令关于cpu使用率\" class=\"headerlink\" title=\"top命令关于cpu使用率\"></a>top命令关于cpu使用率</h2><p>下面做一个简单的测试，终端中使用如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum /dev/zero &amp;</span><br></pre></td></tr></table></figure></p>\n<p>开启top，如下所示</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-81c2a7654f73c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-06-20 at 22.53.34.png\"></p>\n<p>按数字键1后查看所有核的使用率。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-70b5f8c2b58f77cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-06-20 at 22.56.42.png\"></p>\n<p>发现使用top命令，左上角显示的是整体负载，即单核的负载数除以核数。%CPU数值代表单个核的使用率，超过100%代表使用其他核的计算资源。</p>\n<p>第一行：</p>\n<ul>\n<li>10:01:23 — 当前系统时间</li>\n<li>126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）</li>\n<li>2 users — 当前有2个用户登录系统</li>\n<li>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数<code>除以逻辑CPU的数量</code>，<code>结果高于5的时候就表明系统在超负荷运转了。</code></li>\n</ul>\n<p>第二行：</p>\n<ul>\n<li>Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</li>\n</ul>\n<p>第三行：cpu状态</p>\n<ul>\n<li>6.7% us — 用户空间占用CPU的百分比。</li>\n<li>0.4% sy — 内核空间占用CPU的百分比。</li>\n<li>0.0% ni — 改变过优先级的进程占用CPU的百分比</li>\n<li>92.9% id — 空闲CPU百分比</li>\n<li>0.0% wa — IO等待占用CPU的百分比</li>\n<li>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</li>\n<li>0.0% si — 软中断（Software Interrupts）占用CPU的百分比</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h2><h3 id=\"物理CPU\"><a href=\"#物理CPU\" class=\"headerlink\" title=\"物理CPU\"></a>物理CPU</h3><p>实际Server中插槽上的CPU个数<br>物理cpu数量，可以数不重复的 physical id 有几个,查看方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">\"physical id\"</span> /proc/cpuinfo|sort|uniq|wc -l</span><br><span class=\"line\">2</span><br><span class=\"line\">```         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### CPU核数           </span></span><br><span class=\"line\">单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。</span><br><span class=\"line\">比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    </span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">cat /proc/cpuinfo |grep <span class=\"string\">\"cpu cores\"</span>|uniq</span><br><span class=\"line\">grep <span class=\"string\">\"cpu cores\"</span> /proc/cpuinfo|uniq|awk -F <span class=\"string\">\":\"</span> <span class=\"string\">\"&#123;print <span class=\"variable\">$2</span>&#125;\"</span></span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑CPU\"><a href=\"#逻辑CPU\" class=\"headerlink\" title=\"逻辑CPU\"></a>逻辑CPU</h3><p>Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的<br>信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。</p>\n<p>一般情况，我们认为<code>一颗cpu可以有多核</code>，加上<code>intel的超线程技术(HT)</code>, 可以在逻辑上再分一倍数量的cpu core出来<br><code>逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)</code>。</p>\n<p><code>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术</code></p>\n<p>备注一下：Linux下top查看的CPU也是逻辑CPU个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo| grep <span class=\"string\">\"processor\"</span> |wc -l</span><br><span class=\"line\">32（支持超线程）</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"查看方法\"><a href=\"#查看方法\" class=\"headerlink\" title=\"查看方法\"></a>查看方法</h2><p>通过cat /proc/cpuinfocpu来查看相关信息。</p>\n<blockquote>\n<ul>\n<li>vendor id     如果处理器为英特尔处理器，则字符串是 GenuineIntel。</li>\n<li>processor     包括这一逻辑处理器的唯一标识符。</li>\n<li>physical id   包括每个物理封装的唯一标识符。</li>\n<li>core id       保存每个内核的唯一标识符。</li>\n<li>siblings      列出了位于相同物理封装中的逻辑处理器的数量。</li>\n<li>cpu cores     包含位于相同物理封装中的内核数量。</li>\n</ul>\n</blockquote>\n<ol>\n<li>拥有相同 physical id 的所有逻辑处理器共享同一个物理插座，每个 physical id 代表一个唯一的物理封装。</li>\n<li>Siblings 表示位于这一物理封装上的逻辑处理器的数量，它们可能支持也可能不支持超线程（HT）技术。</li>\n<li>每个 core id 均代表一个唯一的处理器内核，所有带有相同 core id 的逻辑处理器均位于同一个处理器内核上。简单的说：“siblings”指的是一个物理CPU有几个逻辑CPU，”cpu cores“指的是一个物理CPU有几个核。</li>\n<li>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术。</li>\n<li>如果有两个或两个以上的逻辑处理器拥有相同的 physical id，但是 core id不同，则说明这是一个多内核处理器。cpu cores条目也可以表示是否支持多内核。</li>\n</ol>\n<h2 id=\"top命令关于cpu使用率\"><a href=\"#top命令关于cpu使用率\" class=\"headerlink\" title=\"top命令关于cpu使用率\"></a>top命令关于cpu使用率</h2><p>下面做一个简单的测试，终端中使用如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum /dev/zero &amp;</span><br></pre></td></tr></table></figure></p>\n<p>开启top，如下所示</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-81c2a7654f73c645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-06-20 at 22.53.34.png\"></p>\n<p>按数字键1后查看所有核的使用率。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-70b5f8c2b58f77cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screen Shot 2019-06-20 at 22.56.42.png\"></p>\n<p>发现使用top命令，左上角显示的是整体负载，即单核的负载数除以核数。%CPU数值代表单个核的使用率，超过100%代表使用其他核的计算资源。</p>\n<p>第一行：</p>\n<ul>\n<li>10:01:23 — 当前系统时间</li>\n<li>126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）</li>\n<li>2 users — 当前有2个用户登录系统</li>\n<li>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数<code>除以逻辑CPU的数量</code>，<code>结果高于5的时候就表明系统在超负荷运转了。</code></li>\n</ul>\n<p>第二行：</p>\n<ul>\n<li>Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</li>\n</ul>\n<p>第三行：cpu状态</p>\n<ul>\n<li>6.7% us — 用户空间占用CPU的百分比。</li>\n<li>0.4% sy — 内核空间占用CPU的百分比。</li>\n<li>0.0% ni — 改变过优先级的进程占用CPU的百分比</li>\n<li>92.9% id — 空闲CPU百分比</li>\n<li>0.0% wa — IO等待占用CPU的百分比</li>\n<li>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</li>\n<li>0.0% si — 软中断（Software Interrupts）占用CPU的百分比</li>\n</ul>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Jun 23 2019 22:23:08 GMT+0800 (China Standard Time)","title":"服务器中的物理CPU、逻辑CPU和CPU核数","path":"2019/06/20/服务器中的物理CPU、逻辑CPU和CPU核数/","eyeCatchImage":null,"excerpt":"<h2 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h2><h3 id=\"物理CPU\"><a href=\"#物理CPU\" class=\"headerlink\" title=\"物理CPU\"></a>物理CPU</h3><p>实际Server中插槽上的CPU个数<br>物理cpu数量，可以数不重复的 physical id 有几个,查看方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">\"physical id\"</span> /proc/cpuinfo|sort|uniq|wc -l</span><br><span class=\"line\">2</span><br><span class=\"line\">```         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### CPU核数           </span></span><br><span class=\"line\">单块CPU上面能处理数据的芯片组的数量，如双核、四核等 （cpu cores）。</span><br><span class=\"line\">比如现在的i5 760,是双核心四线程的CPU、而 i5 2250 是四核心四线程的CPU 。一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术    </span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">cat /proc/cpuinfo |grep <span class=\"string\">\"cpu cores\"</span>|uniq</span><br><span class=\"line\">grep <span class=\"string\">\"cpu cores\"</span> /proc/cpuinfo|uniq|awk -F <span class=\"string\">\":\"</span> <span class=\"string\">\"&#123;print <span class=\"variable\">$2</span>&#125;\"</span></span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑CPU\"><a href=\"#逻辑CPU\" class=\"headerlink\" title=\"逻辑CPU\"></a>逻辑CPU</h3><p>Linux用户对 /proc/cpuinfo 这个文件肯定不陌生. 它是用来存储cpu硬件信息的<br>信息内容分别列出了processor 0 – n 的规格。这里需要注意，如果你认为n就是真实的cpu数的话, 就大错特错了。</p>\n<p>一般情况，我们认为<code>一颗cpu可以有多核</code>，加上<code>intel的超线程技术(HT)</code>, 可以在逻辑上再分一倍数量的cpu core出来<br><code>逻辑CPU数量=物理cpu数量 x cpu cores 这个规格值 x 2(如果支持并开启ht)</code>。</p>\n<p><code>如果有一个以上逻辑处理器拥有相同的 core id 和 physical id，则说明系统支持超线程（HT）技术</code></p>\n<p>备注一下：Linux下top查看的CPU也是逻辑CPU个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo| grep <span class=\"string\">\"processor\"</span> |wc -l</span><br><span class=\"line\">32（支持超线程）</span><br></pre></td></tr></table></figure>","date":"2019-06-20T14:18:07.000Z","pv":0,"totalPV":0,"categories":"操作系统","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅析Python中的列表和元组","date":"2019-10-07T05:25:10.000Z","_content":"\n#### 区别\n1. 列表是`动态数组`，它们可变且可以重设长度(改变其内部元素的个数)。\n2. 元组是`静态数组`，它们不可变，且其内部数据一旦创建便无法改变。\n3. 元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。\n\n这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。\n\n<!-- more -->\n#### 动态数组--列表\n\n列表可以改变大小及内容不同，列表的可变性的代价在于存储它们需要额外的内存以及使用它们需要额外的计算。我们在[浅析Python中列表操作之\\*和\\*=](https://mp.weixin.qq.com/s?__biz=MzU5OTUwMTA4NA==&mid=2247483804&idx=1&sn=4cef9561e71e5c6a621529be757a5b2f&chksm=feb2b1efc9c538f9ddcb91175fedd6468cfbc5e2b613b3d8a48077a8ea0194b41a7ff8e20e9d&token=475883438&lang=zh_CN#rd)中一起研究了cpython的list对象的源码，看到了list对象的动态分配数组的大体过程(调用resize函数)，而且在动态调整数组大小时使用如下的分配公式:\n\n```c\nnew_allocated = (size_t)newsize + (newsize >> 3) + (newsize < 9 ? 3 : 6);\n```\n\n下图是一个列表多次添加元素时分配空间的变化示意图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007131224310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n#### 静态数组--元组\n元组的不可改变性使其成为了一个非常轻量级的数据结构。这意味着存储元组不需要很多的内存开销，而且对元组的操作也非常直观。一旦元组被创建，它的内容无法被修改或它的大小也无法被改变。虽然它们不支持改变大小，但是我们可以将两个元组合并成一个新元组。这一操作类似列表的resize操作，但我们不需要为新生成的元组分配任何`额外`的空间。任意两个元组相加或者元组乘以一个整数进行repeat始终返回一个新分配的元组。其中两个元组相加调用cpython中的tupleconcat方法，而乘法操作调用的是tuplerepeat方法。上述两个方法的实现如下：\n\n```c\nstatic PyObject *\ntupleconcat(PyTupleObject *a, PyObject *bb)\n{\n    ...\n    size = Py_SIZE(a) + Py_SIZE(b);\n    np = tuple_alloc(size);\n    ...\n    return (PyObject *)np;\n\n}\n```\n\n\n```c\nstatic PyObject *\ntuplerepeat(PyTupleObject *a, Py_ssize_t n)\n{\n    ...\n    size = Py_SIZE(a) * n;\n    np = tuple_alloc(size);\n    ...\n\n    return (PyObject *) np;\n}\n```\n\n元组的静态特性的另一个好处体现在一些会在Python后台发生的事:资源缓存。Python是一门垃圾收集语言，这意味着当一个变量不再被使用时，Python会将该变量使用的内存释放回操作系统，以供其他程序(或变量)使用。`然而，从源码中可以看到，对于长度为1~20的元组，即使它们不再被使用，它们的空间也不会立刻被还给系统，而是留待未来使用`。这意味着当未来需要一个同样大小的新元组时，我们不再需要向操作系统申请一块内存来存放数据，因为我们已经有了预留的内存。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007131407450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n我们可以验证资源缓存这一点，可以看到初始化一个列表消耗的时间是初始化一个元组消耗时间的6倍！可以想象一下，某些场景中在一个循环中频繁创建列表，耗时还是非常可观的，此时可以考虑使用元组来提高执行效率。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007132116239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n-----\n","source":"_posts/浅析Python中的列表和元组.md","raw":"---\ntitle: 浅析Python中的列表和元组\ndate: 2019-10-07 13:25:10\ntags:\n  - Python3\n  - Python源码\ncategories:\n  - Python3 进阶\n---\n\n#### 区别\n1. 列表是`动态数组`，它们可变且可以重设长度(改变其内部元素的个数)。\n2. 元组是`静态数组`，它们不可变，且其内部数据一旦创建便无法改变。\n3. 元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。\n\n这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。\n\n<!-- more -->\n#### 动态数组--列表\n\n列表可以改变大小及内容不同，列表的可变性的代价在于存储它们需要额外的内存以及使用它们需要额外的计算。我们在[浅析Python中列表操作之\\*和\\*=](https://mp.weixin.qq.com/s?__biz=MzU5OTUwMTA4NA==&mid=2247483804&idx=1&sn=4cef9561e71e5c6a621529be757a5b2f&chksm=feb2b1efc9c538f9ddcb91175fedd6468cfbc5e2b613b3d8a48077a8ea0194b41a7ff8e20e9d&token=475883438&lang=zh_CN#rd)中一起研究了cpython的list对象的源码，看到了list对象的动态分配数组的大体过程(调用resize函数)，而且在动态调整数组大小时使用如下的分配公式:\n\n```c\nnew_allocated = (size_t)newsize + (newsize >> 3) + (newsize < 9 ? 3 : 6);\n```\n\n下图是一个列表多次添加元素时分配空间的变化示意图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007131224310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n#### 静态数组--元组\n元组的不可改变性使其成为了一个非常轻量级的数据结构。这意味着存储元组不需要很多的内存开销，而且对元组的操作也非常直观。一旦元组被创建，它的内容无法被修改或它的大小也无法被改变。虽然它们不支持改变大小，但是我们可以将两个元组合并成一个新元组。这一操作类似列表的resize操作，但我们不需要为新生成的元组分配任何`额外`的空间。任意两个元组相加或者元组乘以一个整数进行repeat始终返回一个新分配的元组。其中两个元组相加调用cpython中的tupleconcat方法，而乘法操作调用的是tuplerepeat方法。上述两个方法的实现如下：\n\n```c\nstatic PyObject *\ntupleconcat(PyTupleObject *a, PyObject *bb)\n{\n    ...\n    size = Py_SIZE(a) + Py_SIZE(b);\n    np = tuple_alloc(size);\n    ...\n    return (PyObject *)np;\n\n}\n```\n\n\n```c\nstatic PyObject *\ntuplerepeat(PyTupleObject *a, Py_ssize_t n)\n{\n    ...\n    size = Py_SIZE(a) * n;\n    np = tuple_alloc(size);\n    ...\n\n    return (PyObject *) np;\n}\n```\n\n元组的静态特性的另一个好处体现在一些会在Python后台发生的事:资源缓存。Python是一门垃圾收集语言，这意味着当一个变量不再被使用时，Python会将该变量使用的内存释放回操作系统，以供其他程序(或变量)使用。`然而，从源码中可以看到，对于长度为1~20的元组，即使它们不再被使用，它们的空间也不会立刻被还给系统，而是留待未来使用`。这意味着当未来需要一个同样大小的新元组时，我们不再需要向操作系统申请一块内存来存放数据，因为我们已经有了预留的内存。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007131407450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n我们可以验证资源缓存这一点，可以看到初始化一个列表消耗的时间是初始化一个元组消耗时间的6倍！可以想象一下，某些场景中在一个循环中频繁创建列表，耗时还是非常可观的，此时可以考虑使用元组来提高执行效率。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191007132116239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n\n-----\n","slug":"浅析Python中的列表和元组","published":1,"updated":"2019-10-07T05:26:09.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjn00cjexotezvbhl94","content":"<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ol>\n<li>列表是<code>动态数组</code>，它们可变且可以重设长度(改变其内部元素的个数)。</li>\n<li>元组是<code>静态数组</code>，它们不可变，且其内部数据一旦创建便无法改变。</li>\n<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。</li>\n</ol>\n<p>这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。</p>\n<a id=\"more\"></a>\n<h4 id=\"动态数组–列表\"><a href=\"#动态数组–列表\" class=\"headerlink\" title=\"动态数组–列表\"></a>动态数组–列表</h4><p>列表可以改变大小及内容不同，列表的可变性的代价在于存储它们需要额外的内存以及使用它们需要额外的计算。我们在<a href=\"https://mp.weixin.qq.com/s?__biz=MzU5OTUwMTA4NA==&amp;mid=2247483804&amp;idx=1&amp;sn=4cef9561e71e5c6a621529be757a5b2f&amp;chksm=feb2b1efc9c538f9ddcb91175fedd6468cfbc5e2b613b3d8a48077a8ea0194b41a7ff8e20e9d&amp;token=475883438&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">浅析Python中列表操作之*和*=</a>中一起研究了cpython的list对象的源码，看到了list对象的动态分配数组的大体过程(调用resize函数)，而且在动态调整数组大小时使用如下的分配公式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_allocated = (<span class=\"keyword\">size_t</span>)newsize + (newsize &gt;&gt; <span class=\"number\">3</span>) + (newsize &lt; <span class=\"number\">9</span> ? <span class=\"number\">3</span> : <span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure>\n<p>下图是一个列表多次添加元素时分配空间的变化示意图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191007131224310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"静态数组–元组\"><a href=\"#静态数组–元组\" class=\"headerlink\" title=\"静态数组–元组\"></a>静态数组–元组</h4><p>元组的不可改变性使其成为了一个非常轻量级的数据结构。这意味着存储元组不需要很多的内存开销，而且对元组的操作也非常直观。一旦元组被创建，它的内容无法被修改或它的大小也无法被改变。虽然它们不支持改变大小，但是我们可以将两个元组合并成一个新元组。这一操作类似列表的resize操作，但我们不需要为新生成的元组分配任何<code>额外</code>的空间。任意两个元组相加或者元组乘以一个整数进行repeat始终返回一个新分配的元组。其中两个元组相加调用cpython中的tupleconcat方法，而乘法操作调用的是tuplerepeat方法。上述两个方法的实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">tupleconcat(PyTupleObject *a, PyObject *bb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) + Py_SIZE(b);</span><br><span class=\"line\">    np = tuple_alloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *)np;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">tuplerepeat(PyTupleObject *a, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) * n;</span><br><span class=\"line\">    np = tuple_alloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *) np;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>元组的静态特性的另一个好处体现在一些会在Python后台发生的事:资源缓存。Python是一门垃圾收集语言，这意味着当一个变量不再被使用时，Python会将该变量使用的内存释放回操作系统，以供其他程序(或变量)使用。<code>然而，从源码中可以看到，对于长度为1~20的元组，即使它们不再被使用，它们的空间也不会立刻被还给系统，而是留待未来使用</code>。这意味着当未来需要一个同样大小的新元组时，我们不再需要向操作系统申请一块内存来存放数据，因为我们已经有了预留的内存。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191007131407450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>我们可以验证资源缓存这一点，可以看到初始化一个列表消耗的时间是初始化一个元组消耗时间的6倍！可以想象一下，某些场景中在一个循环中频繁创建列表，耗时还是非常可观的，此时可以考虑使用元组来提高执行效率。<br><img src=\"https://img-blog.csdnimg.cn/20191007132116239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ol>\n<li>列表是<code>动态数组</code>，它们可变且可以重设长度(改变其内部元素的个数)。</li>\n<li>元组是<code>静态数组</code>，它们不可变，且其内部数据一旦创建便无法改变。</li>\n<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。</li>\n</ol>\n<p>这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。</p>","more":"<h4 id=\"动态数组–列表\"><a href=\"#动态数组–列表\" class=\"headerlink\" title=\"动态数组–列表\"></a>动态数组–列表</h4><p>列表可以改变大小及内容不同，列表的可变性的代价在于存储它们需要额外的内存以及使用它们需要额外的计算。我们在<a href=\"https://mp.weixin.qq.com/s?__biz=MzU5OTUwMTA4NA==&amp;mid=2247483804&amp;idx=1&amp;sn=4cef9561e71e5c6a621529be757a5b2f&amp;chksm=feb2b1efc9c538f9ddcb91175fedd6468cfbc5e2b613b3d8a48077a8ea0194b41a7ff8e20e9d&amp;token=475883438&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">浅析Python中列表操作之*和*=</a>中一起研究了cpython的list对象的源码，看到了list对象的动态分配数组的大体过程(调用resize函数)，而且在动态调整数组大小时使用如下的分配公式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_allocated = (<span class=\"keyword\">size_t</span>)newsize + (newsize &gt;&gt; <span class=\"number\">3</span>) + (newsize &lt; <span class=\"number\">9</span> ? <span class=\"number\">3</span> : <span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure>\n<p>下图是一个列表多次添加元素时分配空间的变化示意图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191007131224310.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"静态数组–元组\"><a href=\"#静态数组–元组\" class=\"headerlink\" title=\"静态数组–元组\"></a>静态数组–元组</h4><p>元组的不可改变性使其成为了一个非常轻量级的数据结构。这意味着存储元组不需要很多的内存开销，而且对元组的操作也非常直观。一旦元组被创建，它的内容无法被修改或它的大小也无法被改变。虽然它们不支持改变大小，但是我们可以将两个元组合并成一个新元组。这一操作类似列表的resize操作，但我们不需要为新生成的元组分配任何<code>额外</code>的空间。任意两个元组相加或者元组乘以一个整数进行repeat始终返回一个新分配的元组。其中两个元组相加调用cpython中的tupleconcat方法，而乘法操作调用的是tuplerepeat方法。上述两个方法的实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">tupleconcat(PyTupleObject *a, PyObject *bb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) + Py_SIZE(b);</span><br><span class=\"line\">    np = tuple_alloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *)np;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">tuplerepeat(PyTupleObject *a, Py_ssize_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    size = Py_SIZE(a) * n;</span><br><span class=\"line\">    np = tuple_alloc(size);</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PyObject *) np;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>元组的静态特性的另一个好处体现在一些会在Python后台发生的事:资源缓存。Python是一门垃圾收集语言，这意味着当一个变量不再被使用时，Python会将该变量使用的内存释放回操作系统，以供其他程序(或变量)使用。<code>然而，从源码中可以看到，对于长度为1~20的元组，即使它们不再被使用，它们的空间也不会立刻被还给系统，而是留待未来使用</code>。这意味着当未来需要一个同样大小的新元组时，我们不再需要向操作系统申请一块内存来存放数据，因为我们已经有了预留的内存。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191007131407450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>我们可以验证资源缓存这一点，可以看到初始化一个列表消耗的时间是初始化一个元组消耗时间的6倍！可以想象一下，某些场景中在一个循环中频繁创建列表，耗时还是非常可观的，此时可以考虑使用元组来提高执行效率。<br><img src=\"https://img-blog.csdnimg.cn/20191007132116239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Oct 07 2019 13:26:09 GMT+0800 (China Standard Time)","title":"浅析Python中的列表和元组","path":"2019/10/07/浅析Python中的列表和元组/","eyeCatchImage":null,"excerpt":"<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ol>\n<li>列表是<code>动态数组</code>，它们可变且可以重设长度(改变其内部元素的个数)。</li>\n<li>元组是<code>静态数组</code>，它们不可变，且其内部数据一旦创建便无法改变。</li>\n<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去 分配内存。</li>\n</ol>\n<p>这些区别揭示了两者在设计哲学上的不同:元组用于描述一个不会改变的事物的多个属性，而列表可被用于保存多个互相独立对象的数据集合。</p>","date":"2019-10-07T05:25:10.000Z","pv":0,"totalPV":0,"categories":"Python3 进阶","tags":["Python3","Python源码"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅谈TCP和UDP的区别以及应用","date":"2018-03-06T18:28:32.000Z","_content":"## TCP和UDP区别\n\nTCP(`Transmission Control Protocol`)---`传输控制协议`,`提供的是面向连接、可靠的字节流服务`。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。\nUDP(`User Data Protocol`)---`用户数据报协议`，`是一个简单的面向数据报的运输层协议`。在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。\n\n## 应用   \n1. HTTP协议在运输层采用的就是`TCP协议`，在浏览器中输入IP地址后，与服务器建立连接，采用的就是TCP协议，是一种面向连接、可靠的字节流服务。\n\n2. 当强调传输性能而不是传输的完整性时，如：音频、多媒体应用和视频会议时，`UDP`是最好的选择。另外，腾讯QQ采用也是UDP协议。\n","source":"_posts/浅谈TCP和UDP的区别以及应用.md","raw":"---\ntitle: 浅谈TCP和UDP的区别以及应用\ndate: 2018-03-07 02:28:32\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n## TCP和UDP区别\n\nTCP(`Transmission Control Protocol`)---`传输控制协议`,`提供的是面向连接、可靠的字节流服务`。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。\nUDP(`User Data Protocol`)---`用户数据报协议`，`是一个简单的面向数据报的运输层协议`。在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。\n\n## 应用   \n1. HTTP协议在运输层采用的就是`TCP协议`，在浏览器中输入IP地址后，与服务器建立连接，采用的就是TCP协议，是一种面向连接、可靠的字节流服务。\n\n2. 当强调传输性能而不是传输的完整性时，如：音频、多媒体应用和视频会议时，`UDP`是最好的选择。另外，腾讯QQ采用也是UDP协议。\n","slug":"浅谈TCP和UDP的区别以及应用","published":1,"updated":"2018-03-07T04:10:12.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjq00cmexot8jk4v57r","content":"<h2 id=\"TCP和UDP区别\"><a href=\"#TCP和UDP区别\" class=\"headerlink\" title=\"TCP和UDP区别\"></a>TCP和UDP区别</h2><p>TCP(<code>Transmission Control Protocol</code>)—<code>传输控制协议</code>,<code>提供的是面向连接、可靠的字节流服务</code>。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。<br>UDP(<code>User Data Protocol</code>)—<code>用户数据报协议</code>，<code>是一个简单的面向数据报的运输层协议</code>。在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li><p>HTTP协议在运输层采用的就是<code>TCP协议</code>，在浏览器中输入IP地址后，与服务器建立连接，采用的就是TCP协议，是一种面向连接、可靠的字节流服务。</p>\n</li>\n<li><p>当强调传输性能而不是传输的完整性时，如：音频、多媒体应用和视频会议时，<code>UDP</code>是最好的选择。另外，腾讯QQ采用也是UDP协议。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP和UDP区别\"><a href=\"#TCP和UDP区别\" class=\"headerlink\" title=\"TCP和UDP区别\"></a>TCP和UDP区别</h2><p>TCP(<code>Transmission Control Protocol</code>)—<code>传输控制协议</code>,<code>提供的是面向连接、可靠的字节流服务</code>。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。<br>UDP(<code>User Data Protocol</code>)—<code>用户数据报协议</code>，<code>是一个简单的面向数据报的运输层协议</code>。在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li><p>HTTP协议在运输层采用的就是<code>TCP协议</code>，在浏览器中输入IP地址后，与服务器建立连接，采用的就是TCP协议，是一种面向连接、可靠的字节流服务。</p>\n</li>\n<li><p>当强调传输性能而不是传输的完整性时，如：音频、多媒体应用和视频会议时，<code>UDP</code>是最好的选择。另外，腾讯QQ采用也是UDP协议。</p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 12:10:12 GMT+0800 (China Standard Time)","title":"浅谈TCP和UDP的区别以及应用","path":"2018/03/07/浅谈TCP和UDP的区别以及应用/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-06T18:28:32.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"用户密码保存的方式有哪些","date":"2018-03-07T18:03:43.000Z","_content":"1. 明文保存\n2. 明文hash后保存,如md5\n3. MD5+Salt方式,这个salt可以随机\n4. 知乎使用了Bcrypy(好像)加密\n","source":"_posts/用户密码保存的方式有哪些.md","raw":"---\ntitle: 用户密码保存的方式有哪些\ndate: 2018-03-08 02:03:43\ntags:\n  - 加密\n---\n1. 明文保存\n2. 明文hash后保存,如md5\n3. MD5+Salt方式,这个salt可以随机\n4. 知乎使用了Bcrypy(好像)加密\n","slug":"用户密码保存的方式有哪些","published":1,"updated":"2018-03-07T18:05:08.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjv00crexotyqh75rfd","content":"<ol>\n<li>明文保存</li>\n<li>明文hash后保存,如md5</li>\n<li>MD5+Salt方式,这个salt可以随机</li>\n<li>知乎使用了Bcrypy(好像)加密</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>明文保存</li>\n<li>明文hash后保存,如md5</li>\n<li>MD5+Salt方式,这个salt可以随机</li>\n<li>知乎使用了Bcrypy(好像)加密</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 08 2018 02:05:08 GMT+0800 (China Standard Time)","title":"用户密码保存的方式有哪些","path":"2018/03/08/用户密码保存的方式有哪些/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-07T18:03:43.000Z","pv":0,"totalPV":0,"categories":"","tags":["加密"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"神经网络的激活函数为什么要使用非线性函数","date":"2019-09-29T02:58:43.000Z","_content":"### ▍什么是激活函数\n在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 `Activation Function`。激活函数在神经网络中的位置如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n<!-- more -->\n###  ▍为什么要用非线性函数\n要解释这个问题，可以反过来思考一下，`为什么激活函数不能使用线性函数`。\n如果使用线性函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的`线性组合`。加深神经网络的层数就没有什么意义了。线性函数的问题在于不管加深层数到多少，总是存在与之等效的`「无隐藏层」`的神经网络。为了稍微直观的理解这一点，考虑下面一个简单的例子。\n\n存在一个线性函数`f(x)=kx(k≠0)`作为激活函数，将`y=f(f(f(x)))`对应三层的神经网络。很明显可以想到同样的处理可以由`y=ax(a=k^3)`，一个没有隐藏层的神经网络来表示。该例子仅仅是一个近似，实际中的神经网络的运算要比这个例子复杂很多，但不影响结论的成立。也就是说，使用线性激活函数时，无法发挥多层网络带来的优势。\n\n相反如果使用非线性函数，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。\n\n以上！\n","source":"_posts/神经网络的激活函数为什么要使用非线性函数.md","raw":"---\ntitle: 神经网络的激活函数为什么要使用非线性函数\ndate: 2019-09-29 10:58:43\ntags:\n  - 机器学习\n  - 神经网络\ncategories:\n  - 机器学习\n---\n### ▍什么是激活函数\n在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 `Activation Function`。激活函数在神经网络中的位置如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n<!-- more -->\n###  ▍为什么要用非线性函数\n要解释这个问题，可以反过来思考一下，`为什么激活函数不能使用线性函数`。\n如果使用线性函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的`线性组合`。加深神经网络的层数就没有什么意义了。线性函数的问题在于不管加深层数到多少，总是存在与之等效的`「无隐藏层」`的神经网络。为了稍微直观的理解这一点，考虑下面一个简单的例子。\n\n存在一个线性函数`f(x)=kx(k≠0)`作为激活函数，将`y=f(f(f(x)))`对应三层的神经网络。很明显可以想到同样的处理可以由`y=ax(a=k^3)`，一个没有隐藏层的神经网络来表示。该例子仅仅是一个近似，实际中的神经网络的运算要比这个例子复杂很多，但不影响结论的成立。也就是说，使用线性激活函数时，无法发挥多层网络带来的优势。\n\n相反如果使用非线性函数，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。\n\n以上！\n","slug":"神经网络的激活函数为什么要使用非线性函数","published":1,"updated":"2019-09-29T03:02:35.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xjy00cuexotebeqqnto","content":"<h3 id=\"▍什么是激活函数\"><a href=\"#▍什么是激活函数\" class=\"headerlink\" title=\"▍什么是激活函数\"></a>▍什么是激活函数</h3><p>在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 <code>Activation Function</code>。激活函数在神经网络中的位置如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<a id=\"more\"></a>\n<h3 id=\"▍为什么要用非线性函数\"><a href=\"#▍为什么要用非线性函数\" class=\"headerlink\" title=\"▍为什么要用非线性函数\"></a>▍为什么要用非线性函数</h3><p>要解释这个问题，可以反过来思考一下，<code>为什么激活函数不能使用线性函数</code>。<br>如果使用线性函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的<code>线性组合</code>。加深神经网络的层数就没有什么意义了。线性函数的问题在于不管加深层数到多少，总是存在与之等效的<code>「无隐藏层」</code>的神经网络。为了稍微直观的理解这一点，考虑下面一个简单的例子。</p>\n<p>存在一个线性函数<code>f(x)=kx(k≠0)</code>作为激活函数，将<code>y=f(f(f(x)))</code>对应三层的神经网络。很明显可以想到同样的处理可以由<code>y=ax(a=k^3)</code>，一个没有隐藏层的神经网络来表示。该例子仅仅是一个近似，实际中的神经网络的运算要比这个例子复杂很多，但不影响结论的成立。也就是说，使用线性激活函数时，无法发挥多层网络带来的优势。</p>\n<p>相反如果使用非线性函数，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p>\n<p>以上！</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"▍什么是激活函数\"><a href=\"#▍什么是激活函数\" class=\"headerlink\" title=\"▍什么是激活函数\"></a>▍什么是激活函数</h3><p>在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 <code>Activation Function</code>。激活函数在神经网络中的位置如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>","more":"<h3 id=\"▍为什么要用非线性函数\"><a href=\"#▍为什么要用非线性函数\" class=\"headerlink\" title=\"▍为什么要用非线性函数\"></a>▍为什么要用非线性函数</h3><p>要解释这个问题，可以反过来思考一下，<code>为什么激活函数不能使用线性函数</code>。<br>如果使用线性函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的<code>线性组合</code>。加深神经网络的层数就没有什么意义了。线性函数的问题在于不管加深层数到多少，总是存在与之等效的<code>「无隐藏层」</code>的神经网络。为了稍微直观的理解这一点，考虑下面一个简单的例子。</p>\n<p>存在一个线性函数<code>f(x)=kx(k≠0)</code>作为激活函数，将<code>y=f(f(f(x)))</code>对应三层的神经网络。很明显可以想到同样的处理可以由<code>y=ax(a=k^3)</code>，一个没有隐藏层的神经网络来表示。该例子仅仅是一个近似，实际中的神经网络的运算要比这个例子复杂很多，但不影响结论的成立。也就是说，使用线性激活函数时，无法发挥多层网络带来的优势。</p>\n<p>相反如果使用非线性函数，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p>\n<p>以上！</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Sep 29 2019 11:02:35 GMT+0800 (China Standard Time)","title":"神经网络的激活函数为什么要使用非线性函数","path":"2019/09/29/神经网络的激活函数为什么要使用非线性函数/","eyeCatchImage":null,"excerpt":"<h3 id=\"▍什么是激活函数\"><a href=\"#▍什么是激活函数\" class=\"headerlink\" title=\"▍什么是激活函数\"></a>▍什么是激活函数</h3><p>在神经元中，输入的inputs通过加权求和，然后被作用了一个函数，这个函数就是激活函数 <code>Activation Function</code>。激活函数在神经网络中的位置如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190908231352415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>","date":"2019-09-29T02:58:43.000Z","pv":0,"totalPV":0,"categories":"机器学习","tags":["机器学习","神经网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"神经网络的学习为何要设定损失函数？","date":"2019-09-30T16:17:38.000Z","_content":"这里所说的“学习”是指从训练数据中**自动**获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。\n\n可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?\n\n<!-- more -->\n\n听起来很有道理！\n\n对于这一疑问，我们可以根据**“导数“**在神经网络学习中的作用来回答。 在神经网络的学习中，寻找最优参数(权重和偏置)时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数(确切地讲是梯度)，然后以这个导数为指引， 逐步更新参数的值。\n\n假设有一个神经网络，现在我们来关注这个神经网络中的某一个权重参数。此时，对该权重参数的损失函数求导，此处导数的含义可以理解为“如果稍微改变这个权重参数的值，损失函数的值会如何变化”。**如果导数的值为负，通过使该权重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值**。不过，当导数为 0 时，无论权重参数向哪个方向变化，损失函数的值都不会改变，此时该权重参数的更新会停在此处。\n\n**在进行神经网络的学习时，不能将识别精度作为指标。因为如果以识别精度为指标，则参数的导数在绝大多数地方都会变为 0，导致参数无法更新。**那为什么用识别精度作为指标时，参数的导数在绝大多数地方都会变成0呢？\n\n为了回答这个问题，我们来思考另一个具体例子。假设某个神经网络正确识别出了 100个训练数据中的32笔，此时识别精度为 32 %。如果以识别精度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在 32 %，不会出现变化。也就是说，仅仅微调参数，是无法改善识别精度的。即便识别精度有所改善，它的值也不会像 32.0123 . . . % 这样连续变化，而是变为 33 %、 34 % 这样的**不连续的、离散的值**。而如果把损失函数作为指标，则当前损失函数的值可以表示为 0.92543 . . . 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像 0.93432 . . . 这样发生连续性的变化。\n\n作为激活函数的阶跃函数也有同样的情况。出于相同的原因，如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。原因是阶跃函数的导数在绝大多数地方(除了0以外的地方)均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数**抹杀**，导致损失函数的值不会产生任何变化。\n\n而 sigmoid 函数，不仅函数的输出(竖轴的值)是连续变化的，曲线的斜率(导数) 也是连续变化的。也就是说，sigmoid 函数的导数在任何地方都不为 0。这对神经网络的学习非常重要。得益于这个斜率不会为 0 的性质，神经网络的学习得以正确进行。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191001001019693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)----\n参考数据\n深度学习入门-Deep Learning from Scratch\n","source":"_posts/神经网络的学习为何要设定损失函数？.md","raw":"---\ntitle: 神经网络的学习为何要设定损失函数？\ndate: 2019-10-01 00:17:38\ntags:\n  - 机器学习\n  - 神经网络\ncategories:\n  - 机器学习\n---\n这里所说的“学习”是指从训练数据中**自动**获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。\n\n可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?\n\n<!-- more -->\n\n听起来很有道理！\n\n对于这一疑问，我们可以根据**“导数“**在神经网络学习中的作用来回答。 在神经网络的学习中，寻找最优参数(权重和偏置)时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数(确切地讲是梯度)，然后以这个导数为指引， 逐步更新参数的值。\n\n假设有一个神经网络，现在我们来关注这个神经网络中的某一个权重参数。此时，对该权重参数的损失函数求导，此处导数的含义可以理解为“如果稍微改变这个权重参数的值，损失函数的值会如何变化”。**如果导数的值为负，通过使该权重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值**。不过，当导数为 0 时，无论权重参数向哪个方向变化，损失函数的值都不会改变，此时该权重参数的更新会停在此处。\n\n**在进行神经网络的学习时，不能将识别精度作为指标。因为如果以识别精度为指标，则参数的导数在绝大多数地方都会变为 0，导致参数无法更新。**那为什么用识别精度作为指标时，参数的导数在绝大多数地方都会变成0呢？\n\n为了回答这个问题，我们来思考另一个具体例子。假设某个神经网络正确识别出了 100个训练数据中的32笔，此时识别精度为 32 %。如果以识别精度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在 32 %，不会出现变化。也就是说，仅仅微调参数，是无法改善识别精度的。即便识别精度有所改善，它的值也不会像 32.0123 . . . % 这样连续变化，而是变为 33 %、 34 % 这样的**不连续的、离散的值**。而如果把损失函数作为指标，则当前损失函数的值可以表示为 0.92543 . . . 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像 0.93432 . . . 这样发生连续性的变化。\n\n作为激活函数的阶跃函数也有同样的情况。出于相同的原因，如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。原因是阶跃函数的导数在绝大多数地方(除了0以外的地方)均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数**抹杀**，导致损失函数的值不会产生任何变化。\n\n而 sigmoid 函数，不仅函数的输出(竖轴的值)是连续变化的，曲线的斜率(导数) 也是连续变化的。也就是说，sigmoid 函数的导数在任何地方都不为 0。这对神经网络的学习非常重要。得益于这个斜率不会为 0 的性质，神经网络的学习得以正确进行。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191001001019693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)----\n参考数据\n深度学习入门-Deep Learning from Scratch\n","slug":"神经网络的学习为何要设定损失函数？","published":1,"updated":"2019-09-30T16:47:28.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xkv00cyexot1w2e7vre","content":"<p>这里所说的“学习”是指从训练数据中<strong>自动</strong>获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。</p>\n<p>可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?</p>\n<a id=\"more\"></a>\n<p>听起来很有道理！</p>\n<p>对于这一疑问，我们可以根据<strong>“导数“</strong>在神经网络学习中的作用来回答。 在神经网络的学习中，寻找最优参数(权重和偏置)时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数(确切地讲是梯度)，然后以这个导数为指引， 逐步更新参数的值。</p>\n<p>假设有一个神经网络，现在我们来关注这个神经网络中的某一个权重参数。此时，对该权重参数的损失函数求导，此处导数的含义可以理解为“如果稍微改变这个权重参数的值，损失函数的值会如何变化”。<strong>如果导数的值为负，通过使该权重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值</strong>。不过，当导数为 0 时，无论权重参数向哪个方向变化，损失函数的值都不会改变，此时该权重参数的更新会停在此处。</p>\n<p><strong>在进行神经网络的学习时，不能将识别精度作为指标。因为如果以识别精度为指标，则参数的导数在绝大多数地方都会变为 0，导致参数无法更新。</strong>那为什么用识别精度作为指标时，参数的导数在绝大多数地方都会变成0呢？</p>\n<p>为了回答这个问题，我们来思考另一个具体例子。假设某个神经网络正确识别出了 100个训练数据中的32笔，此时识别精度为 32 %。如果以识别精度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在 32 %，不会出现变化。也就是说，仅仅微调参数，是无法改善识别精度的。即便识别精度有所改善，它的值也不会像 32.0123 . . . % 这样连续变化，而是变为 33 %、 34 % 这样的<strong>不连续的、离散的值</strong>。而如果把损失函数作为指标，则当前损失函数的值可以表示为 0.92543 . . . 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像 0.93432 . . . 这样发生连续性的变化。</p>\n<p>作为激活函数的阶跃函数也有同样的情况。出于相同的原因，如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。原因是阶跃函数的导数在绝大多数地方(除了0以外的地方)均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数<strong>抹杀</strong>，导致损失函数的值不会产生任何变化。</p>\n<p>而 sigmoid 函数，不仅函数的输出(竖轴的值)是连续变化的，曲线的斜率(导数) 也是连续变化的。也就是说，sigmoid 函数的导数在任何地方都不为 0。这对神经网络的学习非常重要。得益于这个斜率不会为 0 的性质，神经网络的学习得以正确进行。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191001001019693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">—-<br>参考数据<br>深度学习入门-Deep Learning from Scratch</p>\n","site":{"data":{}},"excerpt":"<p>这里所说的“学习”是指从训练数据中<strong>自动</strong>获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。</p>\n<p>可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?</p>","more":"<p>听起来很有道理！</p>\n<p>对于这一疑问，我们可以根据<strong>“导数“</strong>在神经网络学习中的作用来回答。 在神经网络的学习中，寻找最优参数(权重和偏置)时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数(确切地讲是梯度)，然后以这个导数为指引， 逐步更新参数的值。</p>\n<p>假设有一个神经网络，现在我们来关注这个神经网络中的某一个权重参数。此时，对该权重参数的损失函数求导，此处导数的含义可以理解为“如果稍微改变这个权重参数的值，损失函数的值会如何变化”。<strong>如果导数的值为负，通过使该权重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值</strong>。不过，当导数为 0 时，无论权重参数向哪个方向变化，损失函数的值都不会改变，此时该权重参数的更新会停在此处。</p>\n<p><strong>在进行神经网络的学习时，不能将识别精度作为指标。因为如果以识别精度为指标，则参数的导数在绝大多数地方都会变为 0，导致参数无法更新。</strong>那为什么用识别精度作为指标时，参数的导数在绝大多数地方都会变成0呢？</p>\n<p>为了回答这个问题，我们来思考另一个具体例子。假设某个神经网络正确识别出了 100个训练数据中的32笔，此时识别精度为 32 %。如果以识别精度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在 32 %，不会出现变化。也就是说，仅仅微调参数，是无法改善识别精度的。即便识别精度有所改善，它的值也不会像 32.0123 . . . % 这样连续变化，而是变为 33 %、 34 % 这样的<strong>不连续的、离散的值</strong>。而如果把损失函数作为指标，则当前损失函数的值可以表示为 0.92543 . . . 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像 0.93432 . . . 这样发生连续性的变化。</p>\n<p>作为激活函数的阶跃函数也有同样的情况。出于相同的原因，如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。原因是阶跃函数的导数在绝大多数地方(除了0以外的地方)均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数<strong>抹杀</strong>，导致损失函数的值不会产生任何变化。</p>\n<p>而 sigmoid 函数，不仅函数的输出(竖轴的值)是连续变化的，曲线的斜率(导数) 也是连续变化的。也就是说，sigmoid 函数的导数在任何地方都不为 0。这对神经网络的学习非常重要。得益于这个斜率不会为 0 的性质，神经网络的学习得以正确进行。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191001001019693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">—-<br>参考数据<br>深度学习入门-Deep Learning from Scratch</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Oct 01 2019 00:47:28 GMT+0800 (China Standard Time)","title":"神经网络的学习为何要设定损失函数？","path":"2019/10/01/神经网络的学习为何要设定损失函数？/","eyeCatchImage":null,"excerpt":"<p>这里所说的“学习”是指从训练数据中<strong>自动</strong>获取最优权重参数的过程。学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。</p>\n<p>可能会有人问：我们想获得的是能提高识别精度的参数，特意再导入一个损失函数不是有些重复劳动吗?既然我们的目标是获得使识别精度尽可能高的神经网络，那不是应该把识别精度作为指标吗?</p>","date":"2019-09-30T16:17:38.000Z","pv":0,"totalPV":0,"categories":"机器学习","tags":["机器学习","神经网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"终端格式化打印json数据的方法","date":"2018-04-25T03:26:54.000Z","_content":"命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：\n```bash\necho '{\"status\":200,\"data\":[{\"id\":1000,\"name\":\"John\"},{\"id\":1004,\"name\":\"Tom\"}]}' | python -m json.tool\n```\n\n即终端打印的json数据通过管道符号经过python json工具格式化输出，搞定!\n","source":"_posts/终端格式化打印json数据的方法.md","raw":"---\ntitle: 终端格式化打印json数据的方法\ndate: 2018-04-25 11:26:54\ntags:\n  - Linux/Mac OS\ncategories:\n  - Linux/Mac OS\n---\n命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：\n```bash\necho '{\"status\":200,\"data\":[{\"id\":1000,\"name\":\"John\"},{\"id\":1004,\"name\":\"Tom\"}]}' | python -m json.tool\n```\n\n即终端打印的json数据通过管道符号经过python json工具格式化输出，搞定!\n","slug":"终端格式化打印json数据的方法","published":1,"updated":"2018-05-05T15:30:58.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xkx00d2exot6rdj9kta","content":"<p>命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"status\":200,\"data\":[&#123;\"id\":1000,\"name\":\"John\"&#125;,&#123;\"id\":1004,\"name\":\"Tom\"&#125;]&#125;'</span> | python -m json.tool</span><br></pre></td></tr></table></figure></p>\n<p>即终端打印的json数据通过管道符号经过python json工具格式化输出，搞定!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>命令行调试API很方便，对于返回数据是JSON格式的，打印出来的内容超级痛苦。有一种解决方法如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"status\":200,\"data\":[&#123;\"id\":1000,\"name\":\"John\"&#125;,&#123;\"id\":1004,\"name\":\"Tom\"&#125;]&#125;'</span> | python -m json.tool</span><br></pre></td></tr></table></figure></p>\n<p>即终端打印的json数据通过管道符号经过python json工具格式化输出，搞定!</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat May 05 2018 23:30:58 GMT+0800 (China Standard Time)","title":"终端格式化打印json数据的方法","path":"2018/04/25/终端格式化打印json数据的方法/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-25T03:26:54.000Z","pv":0,"totalPV":0,"categories":"Linux/Mac OS","tags":["Linux/Mac OS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"简谈爬虫攻与防","date":"2018-02-27T04:44:38.000Z","_content":"\n\n## 封锁间隔时间破解\n\nScrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。\n\n<!--more-->\n\n## 封锁Cookies\n众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置\n```python\n# Disable cookies (enabled by default)\nCOOKIES_ENABLED = False\n```\n\n## 封锁user-agent和proxy破解\nuser-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个**UA池**，每次请求时随机挑选一个进行请求。\n\n在middlewares.py同级目录下创建UAResource.py,文件内容如下：\n\n```python\n#-*- coding: utf-8 -*-\n\nUserAgents = [\n  \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\",\n  \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\",\n  \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\",\n  \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\",\n  \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n  \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n  \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\",\n  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n  \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\",\n]\n\nProxies = [\n'http://122.114.31.177:808',\n'http://1.2.3.4:80',\n]\n```\n\n修改middlewares.py，添加内容为\n```python\nfrom .UAResource import UserAgents\nfrom .UAResource import Proxies\nimport random\n\nclass RandomProxy(object):\n    def process_request(self, request, spider):\n        proxy = random.choice(Proxies)\n        request.meta['proxy'] = proxy\n\nclass RandomUserAgent(object):\n    \"\"\"docstring for RandomUerAgent.\"\"\"\n    def process_request(self, request, spider):\n        ua = random.choice(UserAgents)\n        request.headers.setdefault('User-Agent', ua)\n```\n\n最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小\n```python\nDOWNLOADER_MIDDLEWARES = {\n   # 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,\n   'meijutt.middlewares.RandomProxy': 10,\n   'meijutt.middlewares.RandomUserAgent': 30,\n\n   # 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件\n   'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None,\n}\n\n```\n\n免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用\n```python\n'meijutt.middlewares.RandomProxy': None,\n```\n## 补充\n### Referer\n当浏览器发送请求时，请求头header一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。对于scrapy爬虫\n```python\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n  # 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  # 'Accept-Language': 'en',\n  'Referer':'http://artso.artron.net/auction/search_auction.php?keyword=%E8%B1%A1%E7%89%99&page=' + str(randrange(100)),\n}\n\n```\n\n### authorization:\n有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。\n","source":"_posts/简谈爬虫攻与防.md","raw":"---\ntitle: 简谈爬虫攻与防\ndate: 2018-02-27 12:44:38\ntags:\n  - Scrapy\n  - Spider\ncategories:\n  - Spider\n  - Scrapy\n---\n\n\n## 封锁间隔时间破解\n\nScrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。\n\n<!--more-->\n\n## 封锁Cookies\n众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置\n```python\n# Disable cookies (enabled by default)\nCOOKIES_ENABLED = False\n```\n\n## 封锁user-agent和proxy破解\nuser-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个**UA池**，每次请求时随机挑选一个进行请求。\n\n在middlewares.py同级目录下创建UAResource.py,文件内容如下：\n\n```python\n#-*- coding: utf-8 -*-\n\nUserAgents = [\n  \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\",\n  \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\",\n  \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\",\n  \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\",\n  \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\",\n  \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\",\n  \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\",\n  \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\",\n  \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\",\n  \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\",\n  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n  \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\",\n]\n\nProxies = [\n'http://122.114.31.177:808',\n'http://1.2.3.4:80',\n]\n```\n\n修改middlewares.py，添加内容为\n```python\nfrom .UAResource import UserAgents\nfrom .UAResource import Proxies\nimport random\n\nclass RandomProxy(object):\n    def process_request(self, request, spider):\n        proxy = random.choice(Proxies)\n        request.meta['proxy'] = proxy\n\nclass RandomUserAgent(object):\n    \"\"\"docstring for RandomUerAgent.\"\"\"\n    def process_request(self, request, spider):\n        ua = random.choice(UserAgents)\n        request.headers.setdefault('User-Agent', ua)\n```\n\n最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小\n```python\nDOWNLOADER_MIDDLEWARES = {\n   # 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,\n   'meijutt.middlewares.RandomProxy': 10,\n   'meijutt.middlewares.RandomUserAgent': 30,\n\n   # 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件\n   'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None,\n}\n\n```\n\n免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用\n```python\n'meijutt.middlewares.RandomProxy': None,\n```\n## 补充\n### Referer\n当浏览器发送请求时，请求头header一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。对于scrapy爬虫\n```python\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n  # 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  # 'Accept-Language': 'en',\n  'Referer':'http://artso.artron.net/auction/search_auction.php?keyword=%E8%B1%A1%E7%89%99&page=' + str(randrange(100)),\n}\n\n```\n\n### authorization:\n有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。\n","slug":"简谈爬虫攻与防","published":1,"updated":"2018-04-11T12:58:39.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xkz00d6exotpxvzh0hd","content":"<h2 id=\"封锁间隔时间破解\"><a href=\"#封锁间隔时间破解\" class=\"headerlink\" title=\"封锁间隔时间破解\"></a>封锁间隔时间破解</h2><p>Scrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。</p>\n<a id=\"more\"></a>\n<h2 id=\"封锁Cookies\"><a href=\"#封锁Cookies\" class=\"headerlink\" title=\"封锁Cookies\"></a>封锁Cookies</h2><p>众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\">COOKIES_ENABLED = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封锁user-agent和proxy破解\"><a href=\"#封锁user-agent和proxy破解\" class=\"headerlink\" title=\"封锁user-agent和proxy破解\"></a>封锁user-agent和proxy破解</h2><p>user-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个<strong>UA池</strong>，每次请求时随机挑选一个进行请求。</p>\n<p>在middlewares.py同级目录下创建UAResource.py,文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">UserAgents = [</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">Proxies = [</span><br><span class=\"line\"><span class=\"string\">'http://122.114.31.177:808'</span>,</span><br><span class=\"line\"><span class=\"string\">'http://1.2.3.4:80'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改middlewares.py，添加内容为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> UserAgents</span><br><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> Proxies</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomProxy</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        proxy = random.choice(Proxies)</span><br><span class=\"line\">        request.meta[<span class=\"string\">'proxy'</span>] = proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomUserAgent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for RandomUerAgent.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        ua = random.choice(UserAgents)</span><br><span class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</span><br></pre></td></tr></table></figure></p>\n<p>最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">   <span class=\"comment\"># 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,</span></span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomUserAgent'</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件</span></span><br><span class=\"line\">   <span class=\"string\">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"keyword\">None</span>,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>当浏览器发送请求时，请求头header一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。对于scrapy爬虫<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span></span><br><span class=\"line\">  <span class=\"comment\"># 'Accept-Language': 'en',</span></span><br><span class=\"line\">  <span class=\"string\">'Referer'</span>:<span class=\"string\">'http://artso.artron.net/auction/search_auction.php?keyword=%E8%B1%A1%E7%89%99&amp;page='</span> + str(randrange(<span class=\"number\">100</span>)),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization:\"></a>authorization:</h3><p>有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"封锁间隔时间破解\"><a href=\"#封锁间隔时间破解\" class=\"headerlink\" title=\"封锁间隔时间破解\"></a>封锁间隔时间破解</h2><p>Scrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。</p>","more":"<h2 id=\"封锁Cookies\"><a href=\"#封锁Cookies\" class=\"headerlink\" title=\"封锁Cookies\"></a>封锁Cookies</h2><p>众所周知，网站是通过Cookie来确定用户身份的，Scrapy在爬取数据时使用同一个Cookies发起请求。该做法和把DOWNLOAD_DELAY设为0.001没有本质区别。在scrapy中，直接设禁用Cookies就可以了。在settings.py中设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\">COOKIES_ENABLED = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封锁user-agent和proxy破解\"><a href=\"#封锁user-agent和proxy破解\" class=\"headerlink\" title=\"封锁user-agent和proxy破解\"></a>封锁user-agent和proxy破解</h2><p>user-agent是浏览器的身份标识。网站通过UA来确定浏览器类型。很多浏览器拒绝不符合一定标准的UA请求网页。同一个UA高频率的访问网站会有被网站列入黑名单的危险。破解的方法很简单，可以准备一个<strong>UA池</strong>，每次请求时随机挑选一个进行请求。</p>\n<p>在middlewares.py同级目录下创建UAResource.py,文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">UserAgents = [</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">Proxies = [</span><br><span class=\"line\"><span class=\"string\">'http://122.114.31.177:808'</span>,</span><br><span class=\"line\"><span class=\"string\">'http://1.2.3.4:80'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改middlewares.py，添加内容为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> UserAgents</span><br><span class=\"line\"><span class=\"keyword\">from</span> .UAResource <span class=\"keyword\">import</span> Proxies</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomProxy</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        proxy = random.choice(Proxies)</span><br><span class=\"line\">        request.meta[<span class=\"string\">'proxy'</span>] = proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomUserAgent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for RandomUerAgent.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, spider)</span>:</span></span><br><span class=\"line\">        ua = random.choice(UserAgents)</span><br><span class=\"line\">        request.headers.setdefault(<span class=\"string\">'User-Agent'</span>, ua)</span><br></pre></td></tr></table></figure></p>\n<p>最后修改setting.py,将RandomUserAgent和RandomProxy添加到DOWNLOADER_MIDDLEWARES中，注意RandomProxy要放到RandomUserAgent之前，即将RandomProxy的值比RandomUserAgent后的值小<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">   <span class=\"comment\"># 'meijutt.middlewares.MeijuttDownloaderMiddleware': 543,</span></span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">   <span class=\"string\">'meijutt.middlewares.RandomUserAgent'</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 禁止内置的(在 DOWNLOADER_MIDDLEWARES_BASE 中设置并默认启用的)中间件</span></span><br><span class=\"line\">   <span class=\"string\">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>免费代理不够稳定，如果不想用proxy，设置RandomProxy为None,即禁止使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'meijutt.middlewares.RandomProxy'</span>: <span class=\"keyword\">None</span>,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>当浏览器发送请求时，请求头header一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。对于scrapy爬虫<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span></span><br><span class=\"line\">  <span class=\"comment\"># 'Accept-Language': 'en',</span></span><br><span class=\"line\">  <span class=\"string\">'Referer'</span>:<span class=\"string\">'http://artso.artron.net/auction/search_auction.php?keyword=%E8%B1%A1%E7%89%99&amp;page='</span> + str(randrange(<span class=\"number\">100</span>)),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization:\"></a>authorization:</h3><p>有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 11 2018 20:58:39 GMT+0800 (China Standard Time)","title":"简谈爬虫攻与防","path":"2018/02/27/简谈爬虫攻与防/","eyeCatchImage":null,"excerpt":"<h2 id=\"封锁间隔时间破解\"><a href=\"#封锁间隔时间破解\" class=\"headerlink\" title=\"封锁间隔时间破解\"></a>封锁间隔时间破解</h2><p>Scrapy在两次请求之间的时间设置是DOWNLOAD_DELAY。如果不考虑反爬虫的因素，该值当然越小越好。如果DOWNLOAD_DELAY设为0.001，也就是每1毫秒请求一次网页，这简直非人类干的事情。有些网站会检测一个ip的访问时间，异常情况下会封锁该ip。</p>","date":"2018-02-27T04:44:38.000Z","pv":0,"totalPV":0,"categories":"Spider > Scrapy","tags":["Spider","Scrapy"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"计算机网络之子网(掩码)","date":"2018-08-31T03:31:28.000Z","_content":"子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。\n\n最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。\n\n假设IP编址为某个子网分配一个地位：`223.1.1.0/24`,其中的`/24`计法，成为子网掩码（network mask），指示了`32位比特中的最左侧24比特定义了子网地址`。\n\n子网掩码通常有以下2种格式的表示方法：\n1. 通过与IP地址格式相同的点分十进制表示\n如：255.0.0.0 或255.255.255.128\n2. 在IP地址后加上\"/\"符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度\n如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0\n子网掩码一般为255.255.255.0\n\n子网掩码——屏蔽一个IP地址的网络部分的“全1”比特模式。对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。\n\n子网掩码的设定必须遵循一定的规则。与二进制IP地址相同，子网掩码由1和0组成，且1和0分别连续。子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。这样做的目的是为了让掩码与ip地址做按位与运算时用0遮住原主机数，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数（主机号全为1时表示该网络广播地址，全为0时表示该网络的网络号，这是两个特殊地址）。只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。\n","source":"_posts/计算机网络之子网-掩码.md","raw":"---\ntitle: 计算机网络之子网(掩码)\ndate: 2018-08-31 11:31:28\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。\n\n最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。\n\n假设IP编址为某个子网分配一个地位：`223.1.1.0/24`,其中的`/24`计法，成为子网掩码（network mask），指示了`32位比特中的最左侧24比特定义了子网地址`。\n\n子网掩码通常有以下2种格式的表示方法：\n1. 通过与IP地址格式相同的点分十进制表示\n如：255.0.0.0 或255.255.255.128\n2. 在IP地址后加上\"/\"符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度\n如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0\n子网掩码一般为255.255.255.0\n\n子网掩码——屏蔽一个IP地址的网络部分的“全1”比特模式。对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。\n\n子网掩码的设定必须遵循一定的规则。与二进制IP地址相同，子网掩码由1和0组成，且1和0分别连续。子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。这样做的目的是为了让掩码与ip地址做按位与运算时用0遮住原主机数，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数（主机号全为1时表示该网络广播地址，全为0时表示该网络的网络号，这是两个特殊地址）。只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。\n","slug":"计算机网络之子网-掩码","published":1,"updated":"2018-08-31T16:37:28.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xl500daexot13mfz3tv","content":"<p>子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。</p>\n<p>最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。</p>\n<p>假设IP编址为某个子网分配一个地位：<code>223.1.1.0/24</code>,其中的<code>/24</code>计法，成为子网掩码（network mask），指示了<code>32位比特中的最左侧24比特定义了子网地址</code>。</p>\n<p>子网掩码通常有以下2种格式的表示方法：</p>\n<ol>\n<li>通过与IP地址格式相同的点分十进制表示<br>如：255.0.0.0 或255.255.255.128</li>\n<li>在IP地址后加上”/“符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度<br>如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0<br>子网掩码一般为255.255.255.0</li>\n</ol>\n<p>子网掩码——屏蔽一个IP地址的网络部分的“全1”比特模式。对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。</p>\n<p>子网掩码的设定必须遵循一定的规则。与二进制IP地址相同，子网掩码由1和0组成，且1和0分别连续。子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。这样做的目的是为了让掩码与ip地址做按位与运算时用0遮住原主机数，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数（主机号全为1时表示该网络广播地址，全为0时表示该网络的网络号，这是两个特殊地址）。只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。</p>\n<p>最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。</p>\n<p>假设IP编址为某个子网分配一个地位：<code>223.1.1.0/24</code>,其中的<code>/24</code>计法，成为子网掩码（network mask），指示了<code>32位比特中的最左侧24比特定义了子网地址</code>。</p>\n<p>子网掩码通常有以下2种格式的表示方法：</p>\n<ol>\n<li>通过与IP地址格式相同的点分十进制表示<br>如：255.0.0.0 或255.255.255.128</li>\n<li>在IP地址后加上”/“符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度<br>如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0<br>子网掩码一般为255.255.255.0</li>\n</ol>\n<p>子网掩码——屏蔽一个IP地址的网络部分的“全1”比特模式。对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。</p>\n<p>子网掩码的设定必须遵循一定的规则。与二进制IP地址相同，子网掩码由1和0组成，且1和0分别连续。子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。这样做的目的是为了让掩码与ip地址做按位与运算时用0遮住原主机数，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数（主机号全为1时表示该网络广播地址，全为0时表示该网络的网络号，这是两个特殊地址）。只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Sep 01 2018 00:37:28 GMT+0800 (China Standard Time)","title":"计算机网络之子网(掩码)","path":"2018/08/31/计算机网络之子网-掩码/","eyeCatchImage":null,"excerpt":null,"date":"2018-08-31T03:31:28.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"计算机网络各层协议","date":"2018-09-19T15:54:15.000Z","_content":"### 应用层:\n典型设备:应用程序，如FTP，SMTP ，HTTP\n\n- DHCP (Dynamic Host Configuration Protocol)动态主机分配协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实 现即插即用连网。\n\n- BOOTP (BOOTstrapProtocol) 引导程序协议/ 自举协议，使用UDP 来使 一个无盘工作站自动获取配置信息。静态的配置协议  DNS    （Domain Name System ）域名解析<端口号53>\n\n- FTP   （File Transfer Protocol ）文件传输协议<端口号21>减少或消除不同操作系统下处理文件的不兼容性。\n<!-- more -->\n\n- Gopher   （The Internet Gopher Protocol ）网际Gopher 协议\n\n- HTTP    （Hypertext Transfer Protocol ）超文本传输协议 <端口号 80>， 面向事务的应用层协议。\n\n- IMAP4 (Internet Message Access Protocol 4) Internet 信息访问协议的第 4 版本\n\n- IRC   （Internet Relay Chat ）网络聊天协议\n\n- NNTP    （Network News Transport Protocol ）网络新闻传输协议\n\n- XMPP 可扩展消息处理现场协议\n\n- POP3 (Post Office Protocol 3) 即邮局协议的第3 个版本，用于接受邮件。\n- SIP()信令控制协议\n\n- SMTP （Simple Mail Transfer Protocol ）简单邮件传输协议 <端口号25> 用于发送邮件。\n\n- SNMP (Simple Network Management Protocol),简单网络管理协议\n\n- SSH   （Secure Shell ）安全外壳协议\n\n- TELNET     远程登录协议 <端口号23>\n\n- RPC   （Remote Procedure Call Protocol ）（RFC- 1831）远程过程调用协 议\n\n- RTCP    （RTP Control Protocol ）RTP   控制协议\n\n- RTSP   （Real Time Streaming Protocol ）实时流传输协议\n\n- TLS   （Transport Layer Security Protocol ）安全传输层协议\n\n- SDP( Session Description Protocol ）会话描述协议\n\n- SOAP   （Simple Object Access Protocol ）简单对象访问协议\n\n- GTP 通用数据传输平台\n\n- STUN   （Simple Traversal of UDP over NATs ，NAT的UDP 简单穿越） 是一种网络协议\n\n- NTP   （Network Time Protocol ）网络校时协议。\n\n\n### 传输层:  \n典型设备:  进程和端口       \n数据单元：数据段 （Segment）\n\n- TCP  （Transmission Control Protocol ）传输控制协议提供可靠的面向连接的服务，传输数据前须先建立连接，结束后释放。可靠的全双工信道。可靠、有序、无丢失、不重复。\n\n- UDP (User Datagram Protocol ）用户数据报协议发送数据前无需建立连接，不使用拥塞控制，不保证可靠交付，最大努力交付。\n\n- DCCP    （Datagram Congestion Control Protocol ）数据报拥塞控制协议\n\n- SCTP  （STREAM CONTROL TRANSMISSION PROTOCOL ）流控制传 输协议\n\n- RTP(Real-time Transport Protocol ）实时传送协议\n\n- RSVP   （Resource ReSer Vation Protocol ）资源预留协议\n\n- PPTP ( Point to Point Tunneling Protocol ）点对点隧道协议\n\n### 网络层\n典型设备:路由器，防火墙、多层交换机\n数据单元：数据包（Packet）\n\n- IP (IPv4 · IPv6) (Internet Protocol) 网络之间互连的协议\n\n- ARP (Address Resolution Protocol) 即地址解析协议，实现通过IP 地址得 知其物理地址。\n\n- RARP (Reverse Address Resolution Protocol)反向地址转换协议允许局域 网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP地址。\n\n- ICMP (Internet Control Message Protocol ）Internet 控制报文协议。它是TCP/IP 协议族的一个子协议，用于在IP 主机、路由器之间传递控制消息。`ping、trace、traceroute使用的就是ICMP.`\n\n- ICMPv6 : IGMP (Internet Group Management Protocol) Internet 组管理协议,是因特 网协议家族中的一个组播协议，用于 IP  主机向任一个直接相邻的路由器报 告他们的组成员情况。\n\n- RIP (Router information protocol) 路由信息协议是一种在网关与主机之间交换路由选择信息的标准。\n\n- OSPF (Open Shortest Path Firs)开放式最短路径优先,分布式链路状态协议。\n\n- BGP（Border Gateway Protocol ）边界网关协议，用来连接Internet 上独立系统的路由选择协议.采用路径向量路由选择协议。\n\n- IS-IS （Intermediate System to Intermediate System Routing Protocol ）中间系统到中间系统的路由选择协议.\n\n\n- IPsec (IP Secure) “Internet  协议安全性”是一种开放标准的框架结构，通过使用加密的安全服务以确保在 Internet  协议 (IP)  网络上进行保密而安全的通讯。\n\n\n### 数据链路层\n典型设备:  网卡，网桥，交换机\n数据单元：帧 （Frame）\n\n- ARQ（Automatic Repeat-reQuest ）自动重传请求协议，错误纠正协议之一，包括停止等待ARQ 协议和连续ARQ 协议，错误侦测、正面确认、逾时重传与负面确认继以重传等机制。\n\n- 停止等待协议：\nCSMA/CD(Carrrier Sense Multiple Access with Collision Detection)载波监听多点接入/碰撞检测协议。总线型网络，协议的实质是载波监听和碰撞检测。载波监听即发数据前先检测总线上是否有其他计算机在发送数据，如暂时不发数据，避免碰撞。碰撞检测为计算机边发送数据边检测信道上的信号电压大小。\n\n- PPP(Point-to-Ponit Protocol)点对点协议面向字节，由三部分组成：一个将IP 数据报封装到串行链路的方法；一个用于建立、配置和测试数据链路连接的链路控制协议\n\n- LCP(Link Control Protocol) ：一套网络控制协议NCP 。\n\n- HDLC  （High-Level Data Link Control ）高级数据链路控制同步网上传输数据、面向比特的数据链路层协议。\n\n- ATM  （Asynchronous Transfer Mode ）异步传递方式，建立在电路交换和分组交换的基础上的一种面向连接的快速分组交换技术。 “异步”是指将ATM 信元“异步插入”到同步的 SDH 比特流中。如同步插入则用户在每帧中所占的时隙相对位置固定不变。“同步”是指网络中各链路上的比特流都是受同一非常精确的主时钟的控制。Wi-Fi 、WiMAX 、DTM 、令牌环、以太网、FDDI 、帧中继、 GPRS 、 EVDO 、HSPA 、L2TP 、ISDN\n\n\n### 物理层\n典型设备：中继器，集线器、网线、HUB\n数据单元：比特 （Bit）\n\n以太网物理层、调制解调器、PLC 、SONET/SDH 、G.709 、光导纤维、 同轴电缆、双绞线\n\n最后附上一张各层协议图：\n![计算机网络协议拓扑.jpg](https://upload-images.jianshu.io/upload_images/2952111-99ac991e14642231.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：\nhttps://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html\n","source":"_posts/计算机网络各层协议.md","raw":"---\ntitle: 计算机网络各层协议\ndate: 2018-09-19 23:54:15\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n### 应用层:\n典型设备:应用程序，如FTP，SMTP ，HTTP\n\n- DHCP (Dynamic Host Configuration Protocol)动态主机分配协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实 现即插即用连网。\n\n- BOOTP (BOOTstrapProtocol) 引导程序协议/ 自举协议，使用UDP 来使 一个无盘工作站自动获取配置信息。静态的配置协议  DNS    （Domain Name System ）域名解析<端口号53>\n\n- FTP   （File Transfer Protocol ）文件传输协议<端口号21>减少或消除不同操作系统下处理文件的不兼容性。\n<!-- more -->\n\n- Gopher   （The Internet Gopher Protocol ）网际Gopher 协议\n\n- HTTP    （Hypertext Transfer Protocol ）超文本传输协议 <端口号 80>， 面向事务的应用层协议。\n\n- IMAP4 (Internet Message Access Protocol 4) Internet 信息访问协议的第 4 版本\n\n- IRC   （Internet Relay Chat ）网络聊天协议\n\n- NNTP    （Network News Transport Protocol ）网络新闻传输协议\n\n- XMPP 可扩展消息处理现场协议\n\n- POP3 (Post Office Protocol 3) 即邮局协议的第3 个版本，用于接受邮件。\n- SIP()信令控制协议\n\n- SMTP （Simple Mail Transfer Protocol ）简单邮件传输协议 <端口号25> 用于发送邮件。\n\n- SNMP (Simple Network Management Protocol),简单网络管理协议\n\n- SSH   （Secure Shell ）安全外壳协议\n\n- TELNET     远程登录协议 <端口号23>\n\n- RPC   （Remote Procedure Call Protocol ）（RFC- 1831）远程过程调用协 议\n\n- RTCP    （RTP Control Protocol ）RTP   控制协议\n\n- RTSP   （Real Time Streaming Protocol ）实时流传输协议\n\n- TLS   （Transport Layer Security Protocol ）安全传输层协议\n\n- SDP( Session Description Protocol ）会话描述协议\n\n- SOAP   （Simple Object Access Protocol ）简单对象访问协议\n\n- GTP 通用数据传输平台\n\n- STUN   （Simple Traversal of UDP over NATs ，NAT的UDP 简单穿越） 是一种网络协议\n\n- NTP   （Network Time Protocol ）网络校时协议。\n\n\n### 传输层:  \n典型设备:  进程和端口       \n数据单元：数据段 （Segment）\n\n- TCP  （Transmission Control Protocol ）传输控制协议提供可靠的面向连接的服务，传输数据前须先建立连接，结束后释放。可靠的全双工信道。可靠、有序、无丢失、不重复。\n\n- UDP (User Datagram Protocol ）用户数据报协议发送数据前无需建立连接，不使用拥塞控制，不保证可靠交付，最大努力交付。\n\n- DCCP    （Datagram Congestion Control Protocol ）数据报拥塞控制协议\n\n- SCTP  （STREAM CONTROL TRANSMISSION PROTOCOL ）流控制传 输协议\n\n- RTP(Real-time Transport Protocol ）实时传送协议\n\n- RSVP   （Resource ReSer Vation Protocol ）资源预留协议\n\n- PPTP ( Point to Point Tunneling Protocol ）点对点隧道协议\n\n### 网络层\n典型设备:路由器，防火墙、多层交换机\n数据单元：数据包（Packet）\n\n- IP (IPv4 · IPv6) (Internet Protocol) 网络之间互连的协议\n\n- ARP (Address Resolution Protocol) 即地址解析协议，实现通过IP 地址得 知其物理地址。\n\n- RARP (Reverse Address Resolution Protocol)反向地址转换协议允许局域 网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP地址。\n\n- ICMP (Internet Control Message Protocol ）Internet 控制报文协议。它是TCP/IP 协议族的一个子协议，用于在IP 主机、路由器之间传递控制消息。`ping、trace、traceroute使用的就是ICMP.`\n\n- ICMPv6 : IGMP (Internet Group Management Protocol) Internet 组管理协议,是因特 网协议家族中的一个组播协议，用于 IP  主机向任一个直接相邻的路由器报 告他们的组成员情况。\n\n- RIP (Router information protocol) 路由信息协议是一种在网关与主机之间交换路由选择信息的标准。\n\n- OSPF (Open Shortest Path Firs)开放式最短路径优先,分布式链路状态协议。\n\n- BGP（Border Gateway Protocol ）边界网关协议，用来连接Internet 上独立系统的路由选择协议.采用路径向量路由选择协议。\n\n- IS-IS （Intermediate System to Intermediate System Routing Protocol ）中间系统到中间系统的路由选择协议.\n\n\n- IPsec (IP Secure) “Internet  协议安全性”是一种开放标准的框架结构，通过使用加密的安全服务以确保在 Internet  协议 (IP)  网络上进行保密而安全的通讯。\n\n\n### 数据链路层\n典型设备:  网卡，网桥，交换机\n数据单元：帧 （Frame）\n\n- ARQ（Automatic Repeat-reQuest ）自动重传请求协议，错误纠正协议之一，包括停止等待ARQ 协议和连续ARQ 协议，错误侦测、正面确认、逾时重传与负面确认继以重传等机制。\n\n- 停止等待协议：\nCSMA/CD(Carrrier Sense Multiple Access with Collision Detection)载波监听多点接入/碰撞检测协议。总线型网络，协议的实质是载波监听和碰撞检测。载波监听即发数据前先检测总线上是否有其他计算机在发送数据，如暂时不发数据，避免碰撞。碰撞检测为计算机边发送数据边检测信道上的信号电压大小。\n\n- PPP(Point-to-Ponit Protocol)点对点协议面向字节，由三部分组成：一个将IP 数据报封装到串行链路的方法；一个用于建立、配置和测试数据链路连接的链路控制协议\n\n- LCP(Link Control Protocol) ：一套网络控制协议NCP 。\n\n- HDLC  （High-Level Data Link Control ）高级数据链路控制同步网上传输数据、面向比特的数据链路层协议。\n\n- ATM  （Asynchronous Transfer Mode ）异步传递方式，建立在电路交换和分组交换的基础上的一种面向连接的快速分组交换技术。 “异步”是指将ATM 信元“异步插入”到同步的 SDH 比特流中。如同步插入则用户在每帧中所占的时隙相对位置固定不变。“同步”是指网络中各链路上的比特流都是受同一非常精确的主时钟的控制。Wi-Fi 、WiMAX 、DTM 、令牌环、以太网、FDDI 、帧中继、 GPRS 、 EVDO 、HSPA 、L2TP 、ISDN\n\n\n### 物理层\n典型设备：中继器，集线器、网线、HUB\n数据单元：比特 （Bit）\n\n以太网物理层、调制解调器、PLC 、SONET/SDH 、G.709 、光导纤维、 同轴电缆、双绞线\n\n最后附上一张各层协议图：\n![计算机网络协议拓扑.jpg](https://upload-images.jianshu.io/upload_images/2952111-99ac991e14642231.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：\nhttps://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html\n","slug":"计算机网络各层协议","published":1,"updated":"2018-11-07T08:03:27.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xl700deexott7jfvlye","content":"<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层:\"></a>应用层:</h3><p>典型设备:应用程序，如FTP，SMTP ，HTTP</p>\n<ul>\n<li><p>DHCP (Dynamic Host Configuration Protocol)动态主机分配协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实 现即插即用连网。</p>\n</li>\n<li><p>BOOTP (BOOTstrapProtocol) 引导程序协议/ 自举协议，使用UDP 来使 一个无盘工作站自动获取配置信息。静态的配置协议  DNS    （Domain Name System ）域名解析&lt;端口号53&gt;</p>\n</li>\n<li><p>FTP   （File Transfer Protocol ）文件传输协议&lt;端口号21&gt;减少或消除不同操作系统下处理文件的不兼容性。</p>\n<a id=\"more\"></a>\n</li>\n<li><p>Gopher   （The Internet Gopher Protocol ）网际Gopher 协议</p>\n</li>\n<li><p>HTTP    （Hypertext Transfer Protocol ）超文本传输协议 &lt;端口号 80&gt;， 面向事务的应用层协议。</p>\n</li>\n<li><p>IMAP4 (Internet Message Access Protocol 4) Internet 信息访问协议的第 4 版本</p>\n</li>\n<li><p>IRC   （Internet Relay Chat ）网络聊天协议</p>\n</li>\n<li><p>NNTP    （Network News Transport Protocol ）网络新闻传输协议</p>\n</li>\n<li><p>XMPP 可扩展消息处理现场协议</p>\n</li>\n<li><p>POP3 (Post Office Protocol 3) 即邮局协议的第3 个版本，用于接受邮件。</p>\n</li>\n<li><p>SIP()信令控制协议</p>\n</li>\n<li><p>SMTP （Simple Mail Transfer Protocol ）简单邮件传输协议 &lt;端口号25&gt; 用于发送邮件。</p>\n</li>\n<li><p>SNMP (Simple Network Management Protocol),简单网络管理协议</p>\n</li>\n<li><p>SSH   （Secure Shell ）安全外壳协议</p>\n</li>\n<li><p>TELNET     远程登录协议 &lt;端口号23&gt;</p>\n</li>\n<li><p>RPC   （Remote Procedure Call Protocol ）（RFC- 1831）远程过程调用协 议</p>\n</li>\n<li><p>RTCP    （RTP Control Protocol ）RTP   控制协议</p>\n</li>\n<li><p>RTSP   （Real Time Streaming Protocol ）实时流传输协议</p>\n</li>\n<li><p>TLS   （Transport Layer Security Protocol ）安全传输层协议</p>\n</li>\n<li><p>SDP( Session Description Protocol ）会话描述协议</p>\n</li>\n<li><p>SOAP   （Simple Object Access Protocol ）简单对象访问协议</p>\n</li>\n<li><p>GTP 通用数据传输平台</p>\n</li>\n<li><p>STUN   （Simple Traversal of UDP over NATs ，NAT的UDP 简单穿越） 是一种网络协议</p>\n</li>\n<li><p>NTP   （Network Time Protocol ）网络校时协议。</p>\n</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层:\"></a>传输层:</h3><p>典型设备:  进程和端口<br>数据单元：数据段 （Segment）</p>\n<ul>\n<li><p>TCP  （Transmission Control Protocol ）传输控制协议提供可靠的面向连接的服务，传输数据前须先建立连接，结束后释放。可靠的全双工信道。可靠、有序、无丢失、不重复。</p>\n</li>\n<li><p>UDP (User Datagram Protocol ）用户数据报协议发送数据前无需建立连接，不使用拥塞控制，不保证可靠交付，最大努力交付。</p>\n</li>\n<li><p>DCCP    （Datagram Congestion Control Protocol ）数据报拥塞控制协议</p>\n</li>\n<li><p>SCTP  （STREAM CONTROL TRANSMISSION PROTOCOL ）流控制传 输协议</p>\n</li>\n<li><p>RTP(Real-time Transport Protocol ）实时传送协议</p>\n</li>\n<li><p>RSVP   （Resource ReSer Vation Protocol ）资源预留协议</p>\n</li>\n<li><p>PPTP ( Point to Point Tunneling Protocol ）点对点隧道协议</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>典型设备:路由器，防火墙、多层交换机<br>数据单元：数据包（Packet）</p>\n<ul>\n<li><p>IP (IPv4 · IPv6) (Internet Protocol) 网络之间互连的协议</p>\n</li>\n<li><p>ARP (Address Resolution Protocol) 即地址解析协议，实现通过IP 地址得 知其物理地址。</p>\n</li>\n<li><p>RARP (Reverse Address Resolution Protocol)反向地址转换协议允许局域 网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP地址。</p>\n</li>\n<li><p>ICMP (Internet Control Message Protocol ）Internet 控制报文协议。它是TCP/IP 协议族的一个子协议，用于在IP 主机、路由器之间传递控制消息。<code>ping、trace、traceroute使用的就是ICMP.</code></p>\n</li>\n<li><p>ICMPv6 : IGMP (Internet Group Management Protocol) Internet 组管理协议,是因特 网协议家族中的一个组播协议，用于 IP  主机向任一个直接相邻的路由器报 告他们的组成员情况。</p>\n</li>\n<li><p>RIP (Router information protocol) 路由信息协议是一种在网关与主机之间交换路由选择信息的标准。</p>\n</li>\n<li><p>OSPF (Open Shortest Path Firs)开放式最短路径优先,分布式链路状态协议。</p>\n</li>\n<li><p>BGP（Border Gateway Protocol ）边界网关协议，用来连接Internet 上独立系统的路由选择协议.采用路径向量路由选择协议。</p>\n</li>\n<li><p>IS-IS （Intermediate System to Intermediate System Routing Protocol ）中间系统到中间系统的路由选择协议.</p>\n</li>\n</ul>\n<ul>\n<li>IPsec (IP Secure) “Internet  协议安全性”是一种开放标准的框架结构，通过使用加密的安全服务以确保在 Internet  协议 (IP)  网络上进行保密而安全的通讯。</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>典型设备:  网卡，网桥，交换机<br>数据单元：帧 （Frame）</p>\n<ul>\n<li><p>ARQ（Automatic Repeat-reQuest ）自动重传请求协议，错误纠正协议之一，包括停止等待ARQ 协议和连续ARQ 协议，错误侦测、正面确认、逾时重传与负面确认继以重传等机制。</p>\n</li>\n<li><p>停止等待协议：<br>CSMA/CD(Carrrier Sense Multiple Access with Collision Detection)载波监听多点接入/碰撞检测协议。总线型网络，协议的实质是载波监听和碰撞检测。载波监听即发数据前先检测总线上是否有其他计算机在发送数据，如暂时不发数据，避免碰撞。碰撞检测为计算机边发送数据边检测信道上的信号电压大小。</p>\n</li>\n<li><p>PPP(Point-to-Ponit Protocol)点对点协议面向字节，由三部分组成：一个将IP 数据报封装到串行链路的方法；一个用于建立、配置和测试数据链路连接的链路控制协议</p>\n</li>\n<li><p>LCP(Link Control Protocol) ：一套网络控制协议NCP 。</p>\n</li>\n<li><p>HDLC  （High-Level Data Link Control ）高级数据链路控制同步网上传输数据、面向比特的数据链路层协议。</p>\n</li>\n<li><p>ATM  （Asynchronous Transfer Mode ）异步传递方式，建立在电路交换和分组交换的基础上的一种面向连接的快速分组交换技术。 “异步”是指将ATM 信元“异步插入”到同步的 SDH 比特流中。如同步插入则用户在每帧中所占的时隙相对位置固定不变。“同步”是指网络中各链路上的比特流都是受同一非常精确的主时钟的控制。Wi-Fi 、WiMAX 、DTM 、令牌环、以太网、FDDI 、帧中继、 GPRS 、 EVDO 、HSPA 、L2TP 、ISDN</p>\n</li>\n</ul>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p>典型设备：中继器，集线器、网线、HUB<br>数据单元：比特 （Bit）</p>\n<p>以太网物理层、调制解调器、PLC 、SONET/SDH 、G.709 、光导纤维、 同轴电缆、双绞线</p>\n<p>最后附上一张各层协议图：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-99ac991e14642231.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"计算机网络协议拓扑.jpg\"></p>\n<p>参考：<br><a href=\"https://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层:\"></a>应用层:</h3><p>典型设备:应用程序，如FTP，SMTP ，HTTP</p>\n<ul>\n<li><p>DHCP (Dynamic Host Configuration Protocol)动态主机分配协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实 现即插即用连网。</p>\n</li>\n<li><p>BOOTP (BOOTstrapProtocol) 引导程序协议/ 自举协议，使用UDP 来使 一个无盘工作站自动获取配置信息。静态的配置协议  DNS    （Domain Name System ）域名解析&lt;端口号53&gt;</p>\n</li>\n<li><p>FTP   （File Transfer Protocol ）文件传输协议&lt;端口号21&gt;减少或消除不同操作系统下处理文件的不兼容性。</p>","more":"</li>\n<li><p>Gopher   （The Internet Gopher Protocol ）网际Gopher 协议</p>\n</li>\n<li><p>HTTP    （Hypertext Transfer Protocol ）超文本传输协议 &lt;端口号 80&gt;， 面向事务的应用层协议。</p>\n</li>\n<li><p>IMAP4 (Internet Message Access Protocol 4) Internet 信息访问协议的第 4 版本</p>\n</li>\n<li><p>IRC   （Internet Relay Chat ）网络聊天协议</p>\n</li>\n<li><p>NNTP    （Network News Transport Protocol ）网络新闻传输协议</p>\n</li>\n<li><p>XMPP 可扩展消息处理现场协议</p>\n</li>\n<li><p>POP3 (Post Office Protocol 3) 即邮局协议的第3 个版本，用于接受邮件。</p>\n</li>\n<li><p>SIP()信令控制协议</p>\n</li>\n<li><p>SMTP （Simple Mail Transfer Protocol ）简单邮件传输协议 &lt;端口号25&gt; 用于发送邮件。</p>\n</li>\n<li><p>SNMP (Simple Network Management Protocol),简单网络管理协议</p>\n</li>\n<li><p>SSH   （Secure Shell ）安全外壳协议</p>\n</li>\n<li><p>TELNET     远程登录协议 &lt;端口号23&gt;</p>\n</li>\n<li><p>RPC   （Remote Procedure Call Protocol ）（RFC- 1831）远程过程调用协 议</p>\n</li>\n<li><p>RTCP    （RTP Control Protocol ）RTP   控制协议</p>\n</li>\n<li><p>RTSP   （Real Time Streaming Protocol ）实时流传输协议</p>\n</li>\n<li><p>TLS   （Transport Layer Security Protocol ）安全传输层协议</p>\n</li>\n<li><p>SDP( Session Description Protocol ）会话描述协议</p>\n</li>\n<li><p>SOAP   （Simple Object Access Protocol ）简单对象访问协议</p>\n</li>\n<li><p>GTP 通用数据传输平台</p>\n</li>\n<li><p>STUN   （Simple Traversal of UDP over NATs ，NAT的UDP 简单穿越） 是一种网络协议</p>\n</li>\n<li><p>NTP   （Network Time Protocol ）网络校时协议。</p>\n</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层:\"></a>传输层:</h3><p>典型设备:  进程和端口<br>数据单元：数据段 （Segment）</p>\n<ul>\n<li><p>TCP  （Transmission Control Protocol ）传输控制协议提供可靠的面向连接的服务，传输数据前须先建立连接，结束后释放。可靠的全双工信道。可靠、有序、无丢失、不重复。</p>\n</li>\n<li><p>UDP (User Datagram Protocol ）用户数据报协议发送数据前无需建立连接，不使用拥塞控制，不保证可靠交付，最大努力交付。</p>\n</li>\n<li><p>DCCP    （Datagram Congestion Control Protocol ）数据报拥塞控制协议</p>\n</li>\n<li><p>SCTP  （STREAM CONTROL TRANSMISSION PROTOCOL ）流控制传 输协议</p>\n</li>\n<li><p>RTP(Real-time Transport Protocol ）实时传送协议</p>\n</li>\n<li><p>RSVP   （Resource ReSer Vation Protocol ）资源预留协议</p>\n</li>\n<li><p>PPTP ( Point to Point Tunneling Protocol ）点对点隧道协议</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>典型设备:路由器，防火墙、多层交换机<br>数据单元：数据包（Packet）</p>\n<ul>\n<li><p>IP (IPv4 · IPv6) (Internet Protocol) 网络之间互连的协议</p>\n</li>\n<li><p>ARP (Address Resolution Protocol) 即地址解析协议，实现通过IP 地址得 知其物理地址。</p>\n</li>\n<li><p>RARP (Reverse Address Resolution Protocol)反向地址转换协议允许局域 网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP地址。</p>\n</li>\n<li><p>ICMP (Internet Control Message Protocol ）Internet 控制报文协议。它是TCP/IP 协议族的一个子协议，用于在IP 主机、路由器之间传递控制消息。<code>ping、trace、traceroute使用的就是ICMP.</code></p>\n</li>\n<li><p>ICMPv6 : IGMP (Internet Group Management Protocol) Internet 组管理协议,是因特 网协议家族中的一个组播协议，用于 IP  主机向任一个直接相邻的路由器报 告他们的组成员情况。</p>\n</li>\n<li><p>RIP (Router information protocol) 路由信息协议是一种在网关与主机之间交换路由选择信息的标准。</p>\n</li>\n<li><p>OSPF (Open Shortest Path Firs)开放式最短路径优先,分布式链路状态协议。</p>\n</li>\n<li><p>BGP（Border Gateway Protocol ）边界网关协议，用来连接Internet 上独立系统的路由选择协议.采用路径向量路由选择协议。</p>\n</li>\n<li><p>IS-IS （Intermediate System to Intermediate System Routing Protocol ）中间系统到中间系统的路由选择协议.</p>\n</li>\n</ul>\n<ul>\n<li>IPsec (IP Secure) “Internet  协议安全性”是一种开放标准的框架结构，通过使用加密的安全服务以确保在 Internet  协议 (IP)  网络上进行保密而安全的通讯。</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>典型设备:  网卡，网桥，交换机<br>数据单元：帧 （Frame）</p>\n<ul>\n<li><p>ARQ（Automatic Repeat-reQuest ）自动重传请求协议，错误纠正协议之一，包括停止等待ARQ 协议和连续ARQ 协议，错误侦测、正面确认、逾时重传与负面确认继以重传等机制。</p>\n</li>\n<li><p>停止等待协议：<br>CSMA/CD(Carrrier Sense Multiple Access with Collision Detection)载波监听多点接入/碰撞检测协议。总线型网络，协议的实质是载波监听和碰撞检测。载波监听即发数据前先检测总线上是否有其他计算机在发送数据，如暂时不发数据，避免碰撞。碰撞检测为计算机边发送数据边检测信道上的信号电压大小。</p>\n</li>\n<li><p>PPP(Point-to-Ponit Protocol)点对点协议面向字节，由三部分组成：一个将IP 数据报封装到串行链路的方法；一个用于建立、配置和测试数据链路连接的链路控制协议</p>\n</li>\n<li><p>LCP(Link Control Protocol) ：一套网络控制协议NCP 。</p>\n</li>\n<li><p>HDLC  （High-Level Data Link Control ）高级数据链路控制同步网上传输数据、面向比特的数据链路层协议。</p>\n</li>\n<li><p>ATM  （Asynchronous Transfer Mode ）异步传递方式，建立在电路交换和分组交换的基础上的一种面向连接的快速分组交换技术。 “异步”是指将ATM 信元“异步插入”到同步的 SDH 比特流中。如同步插入则用户在每帧中所占的时隙相对位置固定不变。“同步”是指网络中各链路上的比特流都是受同一非常精确的主时钟的控制。Wi-Fi 、WiMAX 、DTM 、令牌环、以太网、FDDI 、帧中继、 GPRS 、 EVDO 、HSPA 、L2TP 、ISDN</p>\n</li>\n</ul>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p>典型设备：中继器，集线器、网线、HUB<br>数据单元：比特 （Bit）</p>\n<p>以太网物理层、调制解调器、PLC 、SONET/SDH 、G.709 、光导纤维、 同轴电缆、双绞线</p>\n<p>最后附上一张各层协议图：<br><img src=\"https://upload-images.jianshu.io/upload_images/2952111-99ac991e14642231.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"计算机网络协议拓扑.jpg\"></p>\n<p>参考：<br><a href=\"https://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Nov 07 2018 16:03:27 GMT+0800 (China Standard Time)","title":"计算机网络各层协议","path":"2018/09/19/计算机网络各层协议/","eyeCatchImage":null,"excerpt":"<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层:\"></a>应用层:</h3><p>典型设备:应用程序，如FTP，SMTP ，HTTP</p>\n<ul>\n<li><p>DHCP (Dynamic Host Configuration Protocol)动态主机分配协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实 现即插即用连网。</p>\n</li>\n<li><p>BOOTP (BOOTstrapProtocol) 引导程序协议/ 自举协议，使用UDP 来使 一个无盘工作站自动获取配置信息。静态的配置协议  DNS    （Domain Name System ）域名解析&lt;端口号53&gt;</p>\n</li>\n<li><p>FTP   （File Transfer Protocol ）文件传输协议&lt;端口号21&gt;减少或消除不同操作系统下处理文件的不兼容性。</p>","date":"2018-09-19T15:54:15.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"计算机网络常用协议端口归纳","date":"2018-09-25T03:43:05.000Z","_content":"- HTTP协议代理服务器常用端口号：80/8080/3128/8081/9098\n\n- SOCKS代理协议服务器常用端口号：1080\n\n- FTP（文件传输）协议代理服务器常用端口号：20（控制端口）/tcp、21（数据传输端口）/tcp\n\n- Telnet（远程登录）协议代理服务器常用端口号：23/tcp\n\n- DNS（域名解析服务）默认端口号：53/udp\n\n- SSH（安全登录）、SCP（文件传输）、端口号重定向，默认的端口号：22/tcp\n\n- HTTP服务器，默认端口号：80/tcp\n\n- POP3 （邮局协议版本3）使用的端口号：110/tcp\n\n- HTTPS（securely transferring web pages）服务器，默认端口号：443/tcp\n\n- TFTP（Trivial File Transfer Protocol），默认端口号：69/udp\n\n- SMTP （Simple Mail Transfer Protocol），默认端口号：25/tcp\n\n- POP3 Post Office Protocol（E-mail），默认端口号：110/tcp\n<!-- more -->\n\n- Webshpere应用程序默认端口号：9080\n\n- webshpere管理工具，默认端口号：9090\n\n- JBOSS，默认端口号：8080\n\n- TOMCAT，默认端口号：8080\n\n- WIN2003远程登录，默认端口号：3389\n\n- Symantec AV/Filter for MSE,默认端口号：8081\n\n- Oracle 数据库默认的端口号：1521/tcp\n\n- Oracle XDB（XML 数据库），默认的端口号为8080\n\n- Oracle XDB FTP服务，默认的端口号为2100\n\n- MS SQL*SERVER数据库server，默认的端口号为1433/tcp\n\n- MS SQL*SERVER数据库monitor，默认的端口号为1434/tcp\n\n- Microsoft RDP 微软远程桌面使用的端口号：1863/tcp\n\n- Symantec pcAnywhere 远程控制数据传输时使用的端口号：5631/tcp\n\n- Symantec pcAnywhere 主控端扫描被控端时使用的端口号：5632/udp\n\n- MS SQL Server使用的端口号：5000/tcp\n\n- 腾讯QQ端口号：8000/udp\n\n---------------------\n","source":"_posts/计算机网络常用协议端口归纳.md","raw":"---\ntitle: 计算机网络常用协议端口归纳\ndate: 2018-09-25 11:43:05\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n- HTTP协议代理服务器常用端口号：80/8080/3128/8081/9098\n\n- SOCKS代理协议服务器常用端口号：1080\n\n- FTP（文件传输）协议代理服务器常用端口号：20（控制端口）/tcp、21（数据传输端口）/tcp\n\n- Telnet（远程登录）协议代理服务器常用端口号：23/tcp\n\n- DNS（域名解析服务）默认端口号：53/udp\n\n- SSH（安全登录）、SCP（文件传输）、端口号重定向，默认的端口号：22/tcp\n\n- HTTP服务器，默认端口号：80/tcp\n\n- POP3 （邮局协议版本3）使用的端口号：110/tcp\n\n- HTTPS（securely transferring web pages）服务器，默认端口号：443/tcp\n\n- TFTP（Trivial File Transfer Protocol），默认端口号：69/udp\n\n- SMTP （Simple Mail Transfer Protocol），默认端口号：25/tcp\n\n- POP3 Post Office Protocol（E-mail），默认端口号：110/tcp\n<!-- more -->\n\n- Webshpere应用程序默认端口号：9080\n\n- webshpere管理工具，默认端口号：9090\n\n- JBOSS，默认端口号：8080\n\n- TOMCAT，默认端口号：8080\n\n- WIN2003远程登录，默认端口号：3389\n\n- Symantec AV/Filter for MSE,默认端口号：8081\n\n- Oracle 数据库默认的端口号：1521/tcp\n\n- Oracle XDB（XML 数据库），默认的端口号为8080\n\n- Oracle XDB FTP服务，默认的端口号为2100\n\n- MS SQL*SERVER数据库server，默认的端口号为1433/tcp\n\n- MS SQL*SERVER数据库monitor，默认的端口号为1434/tcp\n\n- Microsoft RDP 微软远程桌面使用的端口号：1863/tcp\n\n- Symantec pcAnywhere 远程控制数据传输时使用的端口号：5631/tcp\n\n- Symantec pcAnywhere 主控端扫描被控端时使用的端口号：5632/udp\n\n- MS SQL Server使用的端口号：5000/tcp\n\n- 腾讯QQ端口号：8000/udp\n\n---------------------\n","slug":"计算机网络常用协议端口归纳","published":1,"updated":"2018-09-25T06:41:03.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xli00diexot8g0pbmpk","content":"<ul>\n<li><p>HTTP协议代理服务器常用端口号：80/8080/3128/8081/9098</p>\n</li>\n<li><p>SOCKS代理协议服务器常用端口号：1080</p>\n</li>\n<li><p>FTP（文件传输）协议代理服务器常用端口号：20（控制端口）/tcp、21（数据传输端口）/tcp</p>\n</li>\n<li><p>Telnet（远程登录）协议代理服务器常用端口号：23/tcp</p>\n</li>\n<li><p>DNS（域名解析服务）默认端口号：53/udp</p>\n</li>\n<li><p>SSH（安全登录）、SCP（文件传输）、端口号重定向，默认的端口号：22/tcp</p>\n</li>\n<li><p>HTTP服务器，默认端口号：80/tcp</p>\n</li>\n<li><p>POP3 （邮局协议版本3）使用的端口号：110/tcp</p>\n</li>\n<li><p>HTTPS（securely transferring web pages）服务器，默认端口号：443/tcp</p>\n</li>\n<li><p>TFTP（Trivial File Transfer Protocol），默认端口号：69/udp</p>\n</li>\n<li><p>SMTP （Simple Mail Transfer Protocol），默认端口号：25/tcp</p>\n</li>\n<li><p>POP3 Post Office Protocol（E-mail），默认端口号：110/tcp</p>\n<a id=\"more\"></a>\n</li>\n<li><p>Webshpere应用程序默认端口号：9080</p>\n</li>\n<li><p>webshpere管理工具，默认端口号：9090</p>\n</li>\n<li><p>JBOSS，默认端口号：8080</p>\n</li>\n<li><p>TOMCAT，默认端口号：8080</p>\n</li>\n<li><p>WIN2003远程登录，默认端口号：3389</p>\n</li>\n<li><p>Symantec AV/Filter for MSE,默认端口号：8081</p>\n</li>\n<li><p>Oracle 数据库默认的端口号：1521/tcp</p>\n</li>\n<li><p>Oracle XDB（XML 数据库），默认的端口号为8080</p>\n</li>\n<li><p>Oracle XDB FTP服务，默认的端口号为2100</p>\n</li>\n<li><p>MS SQL*SERVER数据库server，默认的端口号为1433/tcp</p>\n</li>\n<li><p>MS SQL*SERVER数据库monitor，默认的端口号为1434/tcp</p>\n</li>\n<li><p>Microsoft RDP 微软远程桌面使用的端口号：1863/tcp</p>\n</li>\n<li><p>Symantec pcAnywhere 远程控制数据传输时使用的端口号：5631/tcp</p>\n</li>\n<li><p>Symantec pcAnywhere 主控端扫描被控端时使用的端口号：5632/udp</p>\n</li>\n<li><p>MS SQL Server使用的端口号：5000/tcp</p>\n</li>\n<li><p>腾讯QQ端口号：8000/udp</p>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>HTTP协议代理服务器常用端口号：80/8080/3128/8081/9098</p>\n</li>\n<li><p>SOCKS代理协议服务器常用端口号：1080</p>\n</li>\n<li><p>FTP（文件传输）协议代理服务器常用端口号：20（控制端口）/tcp、21（数据传输端口）/tcp</p>\n</li>\n<li><p>Telnet（远程登录）协议代理服务器常用端口号：23/tcp</p>\n</li>\n<li><p>DNS（域名解析服务）默认端口号：53/udp</p>\n</li>\n<li><p>SSH（安全登录）、SCP（文件传输）、端口号重定向，默认的端口号：22/tcp</p>\n</li>\n<li><p>HTTP服务器，默认端口号：80/tcp</p>\n</li>\n<li><p>POP3 （邮局协议版本3）使用的端口号：110/tcp</p>\n</li>\n<li><p>HTTPS（securely transferring web pages）服务器，默认端口号：443/tcp</p>\n</li>\n<li><p>TFTP（Trivial File Transfer Protocol），默认端口号：69/udp</p>\n</li>\n<li><p>SMTP （Simple Mail Transfer Protocol），默认端口号：25/tcp</p>\n</li>\n<li><p>POP3 Post Office Protocol（E-mail），默认端口号：110/tcp</p>","more":"</li>\n<li><p>Webshpere应用程序默认端口号：9080</p>\n</li>\n<li><p>webshpere管理工具，默认端口号：9090</p>\n</li>\n<li><p>JBOSS，默认端口号：8080</p>\n</li>\n<li><p>TOMCAT，默认端口号：8080</p>\n</li>\n<li><p>WIN2003远程登录，默认端口号：3389</p>\n</li>\n<li><p>Symantec AV/Filter for MSE,默认端口号：8081</p>\n</li>\n<li><p>Oracle 数据库默认的端口号：1521/tcp</p>\n</li>\n<li><p>Oracle XDB（XML 数据库），默认的端口号为8080</p>\n</li>\n<li><p>Oracle XDB FTP服务，默认的端口号为2100</p>\n</li>\n<li><p>MS SQL*SERVER数据库server，默认的端口号为1433/tcp</p>\n</li>\n<li><p>MS SQL*SERVER数据库monitor，默认的端口号为1434/tcp</p>\n</li>\n<li><p>Microsoft RDP 微软远程桌面使用的端口号：1863/tcp</p>\n</li>\n<li><p>Symantec pcAnywhere 远程控制数据传输时使用的端口号：5631/tcp</p>\n</li>\n<li><p>Symantec pcAnywhere 主控端扫描被控端时使用的端口号：5632/udp</p>\n</li>\n<li><p>MS SQL Server使用的端口号：5000/tcp</p>\n</li>\n<li><p>腾讯QQ端口号：8000/udp</p>\n</li>\n</ul>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 25 2018 14:41:03 GMT+0800 (China Standard Time)","title":"计算机网络常用协议端口归纳","path":"2018/09/25/计算机网络常用协议端口归纳/","eyeCatchImage":null,"excerpt":"<ul>\n<li><p>HTTP协议代理服务器常用端口号：80/8080/3128/8081/9098</p>\n</li>\n<li><p>SOCKS代理协议服务器常用端口号：1080</p>\n</li>\n<li><p>FTP（文件传输）协议代理服务器常用端口号：20（控制端口）/tcp、21（数据传输端口）/tcp</p>\n</li>\n<li><p>Telnet（远程登录）协议代理服务器常用端口号：23/tcp</p>\n</li>\n<li><p>DNS（域名解析服务）默认端口号：53/udp</p>\n</li>\n<li><p>SSH（安全登录）、SCP（文件传输）、端口号重定向，默认的端口号：22/tcp</p>\n</li>\n<li><p>HTTP服务器，默认端口号：80/tcp</p>\n</li>\n<li><p>POP3 （邮局协议版本3）使用的端口号：110/tcp</p>\n</li>\n<li><p>HTTPS（securely transferring web pages）服务器，默认端口号：443/tcp</p>\n</li>\n<li><p>TFTP（Trivial File Transfer Protocol），默认端口号：69/udp</p>\n</li>\n<li><p>SMTP （Simple Mail Transfer Protocol），默认端口号：25/tcp</p>\n</li>\n<li><p>POP3 Post Office Protocol（E-mail），默认端口号：110/tcp</p>","date":"2018-09-25T03:43:05.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"进程间的通信方式(IPC)","date":"2018-03-07T15:47:10.000Z","_content":"\n1. `管道`（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。\n2. `命名管道`（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。\n3. `信号`（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。\n4. `消息（Message）队列`：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺\n5. `共享内存`：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。\n6. `内存映射`（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。\n7. `信号量`（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。\n8. `套接口`（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。\n","source":"_posts/进程间的通信方式-IPC.md","raw":"---\ntitle: 进程间的通信方式(IPC)\ndate: 2018-03-07 23:47:10\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n---\n\n1. `管道`（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。\n2. `命名管道`（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。\n3. `信号`（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。\n4. `消息（Message）队列`：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺\n5. `共享内存`：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。\n6. `内存映射`（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。\n7. `信号量`（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。\n8. `套接口`（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。\n","slug":"进程间的通信方式-IPC","published":1,"updated":"2018-03-07T15:49:17.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xll00dlexotgzwpix4l","content":"<ol>\n<li><code>管道</code>（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</li>\n<li><code>命名管道</code>（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</li>\n<li><code>信号</code>（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。</li>\n<li><code>消息（Message）队列</code>：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺</li>\n<li><code>共享内存</code>：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</li>\n<li><code>内存映射</code>（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。</li>\n<li><code>信号量</code>（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</li>\n<li><code>套接口</code>（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><code>管道</code>（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</li>\n<li><code>命名管道</code>（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</li>\n<li><code>信号</code>（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。</li>\n<li><code>消息（Message）队列</code>：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺</li>\n<li><code>共享内存</code>：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</li>\n<li><code>内存映射</code>（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。</li>\n<li><code>信号量</code>（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</li>\n<li><code>套接口</code>（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</li>\n</ol>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 23:49:17 GMT+0800 (China Standard Time)","title":"进程间的通信方式(IPC)","path":"2018/03/07/进程间的通信方式-IPC/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-07T15:47:10.000Z","pv":0,"totalPV":0,"categories":"操作系统","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"进程、线程、协程","date":"2018-03-03T17:20:18.000Z","_content":"\n## 进程\n\n电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。\n\n进程就是`一个程序在一个数据集上的一次动态执行过程`。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由`程序`，`数据集`，`进程控制块`三部分组成。`程序`用来描述进程哪些功能以及如何完成；`数据集`是程序执行过程中所使用的资源；`进程控制块`用来保存程序运行的状态.\n\n`进程是系统进行资源分配和调度的一个独立单位`。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n\n<!-- more -->\n## 线程\n\n在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中`线程`的概念便被引进了。线程，是进程的一部分，`一个没有线程的进程可以被看作是单线程的`。线程有时又被称为`轻权进程`或`轻量级进程`，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n\n**进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。**\n\n**进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态**\n\n线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的`独立线程运行的限制`,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。\n\n## 进程、线程的关系\n\n1. 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n2. 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n3. CPU分配给线程，即真正在CPU上运行的是线程\n4. 线程是最小的执行单元，进程是最小的资源管理单元\n\n## 协程Coroutine\n\n协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n\n`进程`拥有自己独立的堆和栈，既不共享堆，亦不共享栈，`进程由操作系统调度`。\n`线程`拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。\n协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。\n进程和其他两个的区别还是很明显的。\n`协程和线程的区别是`：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，`协程也失去了标准线程使用多CPU的能力。`\n\n举个例子：\n假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。\n\n人们通常将协程和子程序（函数）比较着理解。\n子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。\n协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：\n\n1. 第一步，协程A开始执行。\n2. 第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。\n3. 第三步，（一段时间后）协程B交还执行权。\n4. 第四步，协程A恢复执行。\n\n协程的特点在于是`一个线程执行`，与多线程相比，其优势体现在：\n\n协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，`没有线程切换的开销`，和多线程比，线程数量越多，协程的性能优势就越明显。\n协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。\nTips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n## 总结\n\n### 进程与线程比较\n\n线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:\n1. 地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间\n2. 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源\n3. 线程是处理器调度的基本单位,但进程不是\n4. 二者均可并发执行\n\n5. 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制\n\n### 协程与线程进行比较\n\n1. 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。\n2. 线程进程都是同步机制，而协程则是异步\n3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\n","source":"_posts/进程、线程、协程.md","raw":"---\ntitle: 进程、线程、协程\ndate: 2018-03-04 01:20:18\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n\n## 进程\n\n电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。\n\n进程就是`一个程序在一个数据集上的一次动态执行过程`。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由`程序`，`数据集`，`进程控制块`三部分组成。`程序`用来描述进程哪些功能以及如何完成；`数据集`是程序执行过程中所使用的资源；`进程控制块`用来保存程序运行的状态.\n\n`进程是系统进行资源分配和调度的一个独立单位`。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n\n<!-- more -->\n## 线程\n\n在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中`线程`的概念便被引进了。线程，是进程的一部分，`一个没有线程的进程可以被看作是单线程的`。线程有时又被称为`轻权进程`或`轻量级进程`，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n\n**进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。**\n\n**进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态**\n\n线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的`独立线程运行的限制`,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。\n\n## 进程、线程的关系\n\n1. 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n2. 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n3. CPU分配给线程，即真正在CPU上运行的是线程\n4. 线程是最小的执行单元，进程是最小的资源管理单元\n\n## 协程Coroutine\n\n协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n\n`进程`拥有自己独立的堆和栈，既不共享堆，亦不共享栈，`进程由操作系统调度`。\n`线程`拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。\n协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。\n进程和其他两个的区别还是很明显的。\n`协程和线程的区别是`：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，`协程也失去了标准线程使用多CPU的能力。`\n\n举个例子：\n假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。\n\n人们通常将协程和子程序（函数）比较着理解。\n子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。\n协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：\n\n1. 第一步，协程A开始执行。\n2. 第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。\n3. 第三步，（一段时间后）协程B交还执行权。\n4. 第四步，协程A恢复执行。\n\n协程的特点在于是`一个线程执行`，与多线程相比，其优势体现在：\n\n协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，`没有线程切换的开销`，和多线程比，线程数量越多，协程的性能优势就越明显。\n协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。\nTips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n## 总结\n\n### 进程与线程比较\n\n线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:\n1. 地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间\n2. 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源\n3. 线程是处理器调度的基本单位,但进程不是\n4. 二者均可并发执行\n\n5. 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制\n\n### 协程与线程进行比较\n\n1. 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。\n2. 线程进程都是同步机制，而协程则是异步\n3. 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\n","slug":"进程、线程、协程","published":1,"updated":"2018-03-07T06:32:41.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xlr00dqexotstxvbzbd","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。</p>\n<p>进程就是<code>一个程序在一个数据集上的一次动态执行过程</code>。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由<code>程序</code>，<code>数据集</code>，<code>进程控制块</code>三部分组成。<code>程序</code>用来描述进程哪些功能以及如何完成；<code>数据集</code>是程序执行过程中所使用的资源；<code>进程控制块</code>用来保存程序运行的状态.</p>\n<p><code>进程是系统进行资源分配和调度的一个独立单位</code>。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p>\n<a id=\"more\"></a>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中<code>线程</code>的概念便被引进了。线程，是进程的一部分，<code>一个没有线程的进程可以被看作是单线程的</code>。线程有时又被称为<code>轻权进程</code>或<code>轻量级进程</code>，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p>\n<p><strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</strong></p>\n<p><strong>进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态</strong></p>\n<p>线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的<code>独立线程运行的限制</code>,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</p>\n<h2 id=\"进程、线程的关系\"><a href=\"#进程、线程的关系\" class=\"headerlink\" title=\"进程、线程的关系\"></a>进程、线程的关系</h2><ol>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</li>\n<li>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</li>\n<li>CPU分配给线程，即真正在CPU上运行的是线程</li>\n<li>线程是最小的执行单元，进程是最小的资源管理单元</li>\n</ol>\n<h2 id=\"协程Coroutine\"><a href=\"#协程Coroutine\" class=\"headerlink\" title=\"协程Coroutine\"></a>协程Coroutine</h2><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>\n<p><code>进程</code>拥有自己独立的堆和栈，既不共享堆，亦不共享栈，<code>进程由操作系统调度</code>。<br><code>线程</code>拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。<br>协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。<br>进程和其他两个的区别还是很明显的。<br><code>协程和线程的区别是</code>：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，<code>协程也失去了标准线程使用多CPU的能力。</code></p>\n<p>举个例子：<br>假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 <em> 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 </em> 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。</p>\n<p>人们通常将协程和子程序（函数）比较着理解。<br>子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。<br>协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：</p>\n<ol>\n<li>第一步，协程A开始执行。</li>\n<li>第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。</li>\n<li>第三步，（一段时间后）协程B交还执行权。</li>\n<li>第四步，协程A恢复执行。</li>\n</ol>\n<p>协程的特点在于是<code>一个线程执行</code>，与多线程相比，其优势体现在：</p>\n<p>协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，<code>没有线程切换的开销</code>，和多线程比，线程数量越多，协程的性能优势就越明显。<br>协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。<br>Tips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"进程与线程比较\"><a href=\"#进程与线程比较\" class=\"headerlink\" title=\"进程与线程比较\"></a>进程与线程比较</h3><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:</p>\n<ol>\n<li>地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li>\n<li>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li>\n<li>线程是处理器调度的基本单位,但进程不是</li>\n<li><p>二者均可并发执行</p>\n</li>\n<li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</p>\n</li>\n</ol>\n<h3 id=\"协程与线程进行比较\"><a href=\"#协程与线程进行比较\" class=\"headerlink\" title=\"协程与线程进行比较\"></a>协程与线程进行比较</h3><ol>\n<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>\n<li>线程进程都是同步机制，而协程则是异步</li>\n<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。</p>\n<p>进程就是<code>一个程序在一个数据集上的一次动态执行过程</code>。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由<code>程序</code>，<code>数据集</code>，<code>进程控制块</code>三部分组成。<code>程序</code>用来描述进程哪些功能以及如何完成；<code>数据集</code>是程序执行过程中所使用的资源；<code>进程控制块</code>用来保存程序运行的状态.</p>\n<p><code>进程是系统进行资源分配和调度的一个独立单位</code>。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p>","more":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中<code>线程</code>的概念便被引进了。线程，是进程的一部分，<code>一个没有线程的进程可以被看作是单线程的</code>。线程有时又被称为<code>轻权进程</code>或<code>轻量级进程</code>，是一个基本的cpu执行单元，也是程序执行过程中的最小单元。一个进程最少也会有一个主线程，在主线程中通过threading模块，再开子线程。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p>\n<p><strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</strong></p>\n<p><strong>进程的状态有就绪，运行，等待三个状态；线程的状态有新建-就绪-（阻塞）-运行–死亡四个基本状态</strong></p>\n<p>线程全局锁GIL(Global Interpreter Lock),即Python为了保证线程安全而采取的<code>独立线程运行的限制</code>,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</p>\n<h2 id=\"进程、线程的关系\"><a href=\"#进程、线程的关系\" class=\"headerlink\" title=\"进程、线程的关系\"></a>进程、线程的关系</h2><ol>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</li>\n<li>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</li>\n<li>CPU分配给线程，即真正在CPU上运行的是线程</li>\n<li>线程是最小的执行单元，进程是最小的资源管理单元</li>\n</ol>\n<h2 id=\"协程Coroutine\"><a href=\"#协程Coroutine\" class=\"headerlink\" title=\"协程Coroutine\"></a>协程Coroutine</h2><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>\n<p><code>进程</code>拥有自己独立的堆和栈，既不共享堆，亦不共享栈，<code>进程由操作系统调度</code>。<br><code>线程</code>拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。<br>协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。<br>进程和其他两个的区别还是很明显的。<br><code>协程和线程的区别是</code>：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，<code>协程也失去了标准线程使用多CPU的能力。</code></p>\n<p>举个例子：<br>假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 <em> 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 </em> 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。</p>\n<p>人们通常将协程和子程序（函数）比较着理解。<br>子程序调用总是一个入口，一次返回，一旦退出即完成了子程序的执行。<br>协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。在python中，协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的，通过相互协作共同完成任务。其运行的大致流程如下：</p>\n<ol>\n<li>第一步，协程A开始执行。</li>\n<li>第二步，协程A执行到一半，进入暂停，通过yield命令将执行权转移到协程B。</li>\n<li>第三步，（一段时间后）协程B交还执行权。</li>\n<li>第四步，协程A恢复执行。</li>\n</ol>\n<p>协程的特点在于是<code>一个线程执行</code>，与多线程相比，其优势体现在：</p>\n<p>协程的执行效率非常高。因为子程序切换不是线程切换，而是由程序自身控制，因此，<code>没有线程切换的开销</code>，和多线程比，线程数量越多，协程的性能优势就越明显。<br>协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。<br>Tips:利用多核CPU最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"进程与线程比较\"><a href=\"#进程与线程比较\" class=\"headerlink\" title=\"进程与线程比较\"></a>进程与线程比较</h3><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:</p>\n<ol>\n<li>地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li>\n<li>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li>\n<li>线程是处理器调度的基本单位,但进程不是</li>\n<li><p>二者均可并发执行</p>\n</li>\n<li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</p>\n</li>\n</ol>\n<h3 id=\"协程与线程进行比较\"><a href=\"#协程与线程进行比较\" class=\"headerlink\" title=\"协程与线程进行比较\"></a>协程与线程进行比较</h3><ol>\n<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>\n<li>线程进程都是同步机制，而协程则是异步</li>\n<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 07 2018 14:32:41 GMT+0800 (China Standard Time)","title":"进程、线程、协程","path":"2018/03/04/进程、线程、协程/","eyeCatchImage":null,"excerpt":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>电脑里运行的应用程序，都是进程，假设我们用的电脑是单核的，CPU同时只能执行一个进程。当程序处于I/O阻塞的时候，CPU如果和程序一起等待，那就太浪费了，CPU会去执行其他的程序，此时就涉及到切换，切换前要保存上一个程序运行的状态，才能恢复，所以就需要有个东西来记录这个东西，就可以引出进程的概念了。</p>\n<p>进程就是<code>一个程序在一个数据集上的一次动态执行过程</code>。进程是一个动态概念，是竟争计算机系统资源的基本单位。进程由<code>程序</code>，<code>数据集</code>，<code>进程控制块</code>三部分组成。<code>程序</code>用来描述进程哪些功能以及如何完成；<code>数据集</code>是程序执行过程中所使用的资源；<code>进程控制块</code>用来保存程序运行的状态.</p>\n<p><code>进程是系统进行资源分配和调度的一个独立单位</code>。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p>","date":"2018-03-03T17:20:18.000Z","pv":0,"totalPV":0,"categories":"操作系统 > 多任务处理","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"面试总结之Java Web篇(持续更新)","date":"2018-09-27T13:16:53.000Z","_content":"","source":"_posts/面试总结之Java-Web篇-持续更新.md","raw":"---\ntitle: 面试总结之Java Web篇(持续更新)\ndate: 2018-09-27 21:16:53\ntags:\n  - 面试\n  - Java Web\ncategories:\n  - 面试\n  - Java Web\n---\n","slug":"面试总结之Java-Web篇-持续更新","published":1,"updated":"2018-09-28T02:51:37.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xlt00dtexota27l7gsh","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Sep 28 2018 10:51:37 GMT+0800 (China Standard Time)","title":"面试总结之Java Web篇(持续更新)","path":"2018/09/27/面试总结之Java-Web篇-持续更新/","eyeCatchImage":null,"excerpt":null,"date":"2018-09-27T13:16:53.000Z","pv":0,"totalPV":0,"categories":"面试 > Java Web","tags":["面试","Java Web"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"进程地址空间","date":"2019-02-21T13:32:36.000Z","_content":"\n\n![process address space.png](https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/进程地址空间.md","raw":"---\ntitle: 进程地址空间\ndate: 2019-02-21 21:32:36\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\n  - 多任务处理\n---\n\n\n![process address space.png](https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"进程地址空间","published":1,"updated":"2019-02-21T13:33:14.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xlw00dyexotya4j3ea8","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"process address space.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/2952111-0eb79a7aa48b7b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"process address space.png\"></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Feb 21 2019 21:33:14 GMT+0800 (China Standard Time)","title":"进程地址空间","path":"2019/02/21/进程地址空间/","eyeCatchImage":null,"excerpt":null,"date":"2019-02-21T13:32:36.000Z","pv":0,"totalPV":0,"categories":"操作系统 > 多任务处理","tags":["操作系统"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"面试总结之数据库篇(持续更新)","date":"2018-09-25T16:01:30.000Z","_content":"\n#### 1. SQL语言包含4个部分：\n\n   `DDL(Data Define Language)`:数据**定义**语言。其语句包括动词`CREATE`和`DROP`。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。`ALTER` TABLE 语句用于在已有的表中添加、修改或删除列。\n\n   `DML(Data Manipulation Language)`:数据**操作**语言。其语句包括动词`INSERT`，`UPDATE`和`DELETE`。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。\n\n   `DQL(Data Query Language)`:数据**查询**语言。也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字`SELECT`是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。\n\n   `DCL(Data Control Language)`:数据**控制**语言。它的语句通过`GRANT`或`REVOKE`获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问,`COMMIT`、`ROLLBACK`来提交和回滚。\n\n<!-- more -->\n#### 2. DROP、DELETE和TRUNCATE区别\n\n|  Diffs   | DELETE    |TRUNCATE   | Drop |\n| :-----: | :-----:  | :-----:   |  :-----:|\n| 执行速度      | 慢  | 较快  |       快       |\n| 可执行条件    | 可以  | 不可以  |   不可以       |\n| 语句分类    | DML  | DDL  |        DDL       |\n| 可以回滚事务    | 可以  | 不可以  |     不可以      |\n| 删除操作记录日志    | 记录  | 不记录  |     不记录     |\n\n参考另外一篇日志《DELETE和TRUNCATE区别》\n\n\n#### 3. 主键和外键的作用\n\n  主键约束作用：\n  - 唯一标识一条记录\n  - 提高数据的检索效率\n\n  外键约束作用：\n  - 保证数据的完整性\n  - 提高数据的检索效率\n\n#### 4. UNIQUE和PRIMARY区别\n\n#### 5. 索引分类以及使用索引的优缺点\n\n分类：\n\n|索引类型|使用场景|\n|:-------:|:-------:|\n| B-tree| 适合处理那些能够按顺序存储数据      |\n|Hash|只能处理简单的比较|\n|Gist|一种索引架构|\n|GIN|翻转索引，处理包含多个值的键|\n\n优点：\n - 提高数据的查询速度\n - 加速表与表之间的连接\n\n缺点：\n - 创建和维护索引需要耗费时间\n - 需要占用磁盘空间\n\n\n#### 6. 视图的作用\n  - 简单化\n  - 安全性\n  - 逻辑数据独立性\n\n#### 7. 事务四个特性及四个隔离级别\n\n\n#### 8. 数据库范式\n- 第一范式（1NF）\n`所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项`，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。`简而言之，第一范式就是无重复的域。`\n\n\n- 第二范式（2NF）\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。`第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分`。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。`第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性`，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。`简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。`\n\n- 第三范式（3NF）\n在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。`简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。`例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。\n\n\n\n\n\n\n---------------\n\n\n\n\n\n\n\n\n\n\n-------------------\n","source":"_posts/面试总结之数据库篇-持续更新.md","raw":"---\ntitle: 面试总结之数据库篇(持续更新)\ndate: 2018-09-26 00:01:30\ntags:\n  - 面试\n  - 数据库\ncategories:\n  - 面试\n  - 数据库\n---\n\n#### 1. SQL语言包含4个部分：\n\n   `DDL(Data Define Language)`:数据**定义**语言。其语句包括动词`CREATE`和`DROP`。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。`ALTER` TABLE 语句用于在已有的表中添加、修改或删除列。\n\n   `DML(Data Manipulation Language)`:数据**操作**语言。其语句包括动词`INSERT`，`UPDATE`和`DELETE`。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。\n\n   `DQL(Data Query Language)`:数据**查询**语言。也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字`SELECT`是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。\n\n   `DCL(Data Control Language)`:数据**控制**语言。它的语句通过`GRANT`或`REVOKE`获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问,`COMMIT`、`ROLLBACK`来提交和回滚。\n\n<!-- more -->\n#### 2. DROP、DELETE和TRUNCATE区别\n\n|  Diffs   | DELETE    |TRUNCATE   | Drop |\n| :-----: | :-----:  | :-----:   |  :-----:|\n| 执行速度      | 慢  | 较快  |       快       |\n| 可执行条件    | 可以  | 不可以  |   不可以       |\n| 语句分类    | DML  | DDL  |        DDL       |\n| 可以回滚事务    | 可以  | 不可以  |     不可以      |\n| 删除操作记录日志    | 记录  | 不记录  |     不记录     |\n\n参考另外一篇日志《DELETE和TRUNCATE区别》\n\n\n#### 3. 主键和外键的作用\n\n  主键约束作用：\n  - 唯一标识一条记录\n  - 提高数据的检索效率\n\n  外键约束作用：\n  - 保证数据的完整性\n  - 提高数据的检索效率\n\n#### 4. UNIQUE和PRIMARY区别\n\n#### 5. 索引分类以及使用索引的优缺点\n\n分类：\n\n|索引类型|使用场景|\n|:-------:|:-------:|\n| B-tree| 适合处理那些能够按顺序存储数据      |\n|Hash|只能处理简单的比较|\n|Gist|一种索引架构|\n|GIN|翻转索引，处理包含多个值的键|\n\n优点：\n - 提高数据的查询速度\n - 加速表与表之间的连接\n\n缺点：\n - 创建和维护索引需要耗费时间\n - 需要占用磁盘空间\n\n\n#### 6. 视图的作用\n  - 简单化\n  - 安全性\n  - 逻辑数据独立性\n\n#### 7. 事务四个特性及四个隔离级别\n\n\n#### 8. 数据库范式\n- 第一范式（1NF）\n`所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项`，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。`简而言之，第一范式就是无重复的域。`\n\n\n- 第二范式（2NF）\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。`第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分`。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。`第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性`，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。`简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。`\n\n- 第三范式（3NF）\n在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。`简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。`例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。\n\n\n\n\n\n\n---------------\n\n\n\n\n\n\n\n\n\n\n-------------------\n","slug":"面试总结之数据库篇-持续更新","published":1,"updated":"2018-09-26T14:50:59.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xly00e1exot4ahqeqau","content":"<h4 id=\"1-SQL语言包含4个部分：\"><a href=\"#1-SQL语言包含4个部分：\" class=\"headerlink\" title=\"1. SQL语言包含4个部分：\"></a>1. SQL语言包含4个部分：</h4><p>   <code>DDL(Data Define Language)</code>:数据<strong>定义</strong>语言。其语句包括动词<code>CREATE</code>和<code>DROP</code>。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。<code>ALTER</code> TABLE 语句用于在已有的表中添加、修改或删除列。</p>\n<p>   <code>DML(Data Manipulation Language)</code>:数据<strong>操作</strong>语言。其语句包括动词<code>INSERT</code>，<code>UPDATE</code>和<code>DELETE</code>。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p>\n<p>   <code>DQL(Data Query Language)</code>:数据<strong>查询</strong>语言。也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字<code>SELECT</code>是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p>\n<p>   <code>DCL(Data Control Language)</code>:数据<strong>控制</strong>语言。它的语句通过<code>GRANT</code>或<code>REVOKE</code>获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问,<code>COMMIT</code>、<code>ROLLBACK</code>来提交和回滚。</p>\n<a id=\"more\"></a>\n<h4 id=\"2-DROP、DELETE和TRUNCATE区别\"><a href=\"#2-DROP、DELETE和TRUNCATE区别\" class=\"headerlink\" title=\"2. DROP、DELETE和TRUNCATE区别\"></a>2. DROP、DELETE和TRUNCATE区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Diffs</th>\n<th style=\"text-align:center\">DELETE</th>\n<th style=\"text-align:center\">TRUNCATE</th>\n<th style=\"text-align:center\">Drop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">执行速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">较快</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可执行条件</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语句分类</td>\n<td style=\"text-align:center\">DML</td>\n<td style=\"text-align:center\">DDL</td>\n<td style=\"text-align:center\">DDL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以回滚事务</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除操作记录日志</td>\n<td style=\"text-align:center\">记录</td>\n<td style=\"text-align:center\">不记录</td>\n<td style=\"text-align:center\">不记录</td>\n</tr>\n</tbody>\n</table>\n<p>参考另外一篇日志《DELETE和TRUNCATE区别》</p>\n<h4 id=\"3-主键和外键的作用\"><a href=\"#3-主键和外键的作用\" class=\"headerlink\" title=\"3. 主键和外键的作用\"></a>3. 主键和外键的作用</h4><p>  主键约束作用：</p>\n<ul>\n<li>唯一标识一条记录</li>\n<li><p>提高数据的检索效率</p>\n<p>外键约束作用：</p>\n</li>\n<li>保证数据的完整性</li>\n<li>提高数据的检索效率</li>\n</ul>\n<h4 id=\"4-UNIQUE和PRIMARY区别\"><a href=\"#4-UNIQUE和PRIMARY区别\" class=\"headerlink\" title=\"4. UNIQUE和PRIMARY区别\"></a>4. UNIQUE和PRIMARY区别</h4><h4 id=\"5-索引分类以及使用索引的优缺点\"><a href=\"#5-索引分类以及使用索引的优缺点\" class=\"headerlink\" title=\"5. 索引分类以及使用索引的优缺点\"></a>5. 索引分类以及使用索引的优缺点</h4><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">索引类型</th>\n<th style=\"text-align:center\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">B-tree</td>\n<td style=\"text-align:center\">适合处理那些能够按顺序存储数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hash</td>\n<td style=\"text-align:center\">只能处理简单的比较</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Gist</td>\n<td style=\"text-align:center\">一种索引架构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GIN</td>\n<td style=\"text-align:center\">翻转索引，处理包含多个值的键</td>\n</tr>\n</tbody>\n</table>\n<p>优点：</p>\n<ul>\n<li>提高数据的查询速度</li>\n<li>加速表与表之间的连接</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>创建和维护索引需要耗费时间</li>\n<li>需要占用磁盘空间</li>\n</ul>\n<h4 id=\"6-视图的作用\"><a href=\"#6-视图的作用\" class=\"headerlink\" title=\"6. 视图的作用\"></a>6. 视图的作用</h4><ul>\n<li>简单化</li>\n<li>安全性</li>\n<li>逻辑数据独立性</li>\n</ul>\n<h4 id=\"7-事务四个特性及四个隔离级别\"><a href=\"#7-事务四个特性及四个隔离级别\" class=\"headerlink\" title=\"7. 事务四个特性及四个隔离级别\"></a>7. 事务四个特性及四个隔离级别</h4><h4 id=\"8-数据库范式\"><a href=\"#8-数据库范式\" class=\"headerlink\" title=\"8. 数据库范式\"></a>8. 数据库范式</h4><ul>\n<li>第一范式（1NF）<br><code>所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项</code>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。<code>简而言之，第一范式就是无重复的域。</code></li>\n</ul>\n<ul>\n<li><p>第二范式（2NF）<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<code>第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分</code>。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。<code>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</code>，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。<code>简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</code></p>\n</li>\n<li><p>第三范式（3NF）<br>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）<br>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。<code>简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。</code>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p>\n</li>\n</ul>\n<hr>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-SQL语言包含4个部分：\"><a href=\"#1-SQL语言包含4个部分：\" class=\"headerlink\" title=\"1. SQL语言包含4个部分：\"></a>1. SQL语言包含4个部分：</h4><p>   <code>DDL(Data Define Language)</code>:数据<strong>定义</strong>语言。其语句包括动词<code>CREATE</code>和<code>DROP</code>。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。<code>ALTER</code> TABLE 语句用于在已有的表中添加、修改或删除列。</p>\n<p>   <code>DML(Data Manipulation Language)</code>:数据<strong>操作</strong>语言。其语句包括动词<code>INSERT</code>，<code>UPDATE</code>和<code>DELETE</code>。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p>\n<p>   <code>DQL(Data Query Language)</code>:数据<strong>查询</strong>语言。也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字<code>SELECT</code>是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p>\n<p>   <code>DCL(Data Control Language)</code>:数据<strong>控制</strong>语言。它的语句通过<code>GRANT</code>或<code>REVOKE</code>获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问,<code>COMMIT</code>、<code>ROLLBACK</code>来提交和回滚。</p>","more":"<h4 id=\"2-DROP、DELETE和TRUNCATE区别\"><a href=\"#2-DROP、DELETE和TRUNCATE区别\" class=\"headerlink\" title=\"2. DROP、DELETE和TRUNCATE区别\"></a>2. DROP、DELETE和TRUNCATE区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Diffs</th>\n<th style=\"text-align:center\">DELETE</th>\n<th style=\"text-align:center\">TRUNCATE</th>\n<th style=\"text-align:center\">Drop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">执行速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">较快</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可执行条件</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语句分类</td>\n<td style=\"text-align:center\">DML</td>\n<td style=\"text-align:center\">DDL</td>\n<td style=\"text-align:center\">DDL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以回滚事务</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除操作记录日志</td>\n<td style=\"text-align:center\">记录</td>\n<td style=\"text-align:center\">不记录</td>\n<td style=\"text-align:center\">不记录</td>\n</tr>\n</tbody>\n</table>\n<p>参考另外一篇日志《DELETE和TRUNCATE区别》</p>\n<h4 id=\"3-主键和外键的作用\"><a href=\"#3-主键和外键的作用\" class=\"headerlink\" title=\"3. 主键和外键的作用\"></a>3. 主键和外键的作用</h4><p>  主键约束作用：</p>\n<ul>\n<li>唯一标识一条记录</li>\n<li><p>提高数据的检索效率</p>\n<p>外键约束作用：</p>\n</li>\n<li>保证数据的完整性</li>\n<li>提高数据的检索效率</li>\n</ul>\n<h4 id=\"4-UNIQUE和PRIMARY区别\"><a href=\"#4-UNIQUE和PRIMARY区别\" class=\"headerlink\" title=\"4. UNIQUE和PRIMARY区别\"></a>4. UNIQUE和PRIMARY区别</h4><h4 id=\"5-索引分类以及使用索引的优缺点\"><a href=\"#5-索引分类以及使用索引的优缺点\" class=\"headerlink\" title=\"5. 索引分类以及使用索引的优缺点\"></a>5. 索引分类以及使用索引的优缺点</h4><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">索引类型</th>\n<th style=\"text-align:center\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">B-tree</td>\n<td style=\"text-align:center\">适合处理那些能够按顺序存储数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hash</td>\n<td style=\"text-align:center\">只能处理简单的比较</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Gist</td>\n<td style=\"text-align:center\">一种索引架构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GIN</td>\n<td style=\"text-align:center\">翻转索引，处理包含多个值的键</td>\n</tr>\n</tbody>\n</table>\n<p>优点：</p>\n<ul>\n<li>提高数据的查询速度</li>\n<li>加速表与表之间的连接</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>创建和维护索引需要耗费时间</li>\n<li>需要占用磁盘空间</li>\n</ul>\n<h4 id=\"6-视图的作用\"><a href=\"#6-视图的作用\" class=\"headerlink\" title=\"6. 视图的作用\"></a>6. 视图的作用</h4><ul>\n<li>简单化</li>\n<li>安全性</li>\n<li>逻辑数据独立性</li>\n</ul>\n<h4 id=\"7-事务四个特性及四个隔离级别\"><a href=\"#7-事务四个特性及四个隔离级别\" class=\"headerlink\" title=\"7. 事务四个特性及四个隔离级别\"></a>7. 事务四个特性及四个隔离级别</h4><h4 id=\"8-数据库范式\"><a href=\"#8-数据库范式\" class=\"headerlink\" title=\"8. 数据库范式\"></a>8. 数据库范式</h4><ul>\n<li>第一范式（1NF）<br><code>所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项</code>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。<code>简而言之，第一范式就是无重复的域。</code></li>\n</ul>\n<ul>\n<li><p>第二范式（2NF）<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<code>第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分</code>。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。<code>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</code>，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。<code>简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</code></p>\n</li>\n<li><p>第三范式（3NF）<br>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）<br>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。<code>简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。可以理解为消除冗余。</code>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p>\n</li>\n</ul>\n<hr>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Sep 26 2018 22:50:59 GMT+0800 (China Standard Time)","title":"面试总结之数据库篇(持续更新)","path":"2018/09/26/面试总结之数据库篇-持续更新/","eyeCatchImage":null,"excerpt":"<h4 id=\"1-SQL语言包含4个部分：\"><a href=\"#1-SQL语言包含4个部分：\" class=\"headerlink\" title=\"1. SQL语言包含4个部分：\"></a>1. SQL语言包含4个部分：</h4><p>   <code>DDL(Data Define Language)</code>:数据<strong>定义</strong>语言。其语句包括动词<code>CREATE</code>和<code>DROP</code>。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。<code>ALTER</code> TABLE 语句用于在已有的表中添加、修改或删除列。</p>\n<p>   <code>DML(Data Manipulation Language)</code>:数据<strong>操作</strong>语言。其语句包括动词<code>INSERT</code>，<code>UPDATE</code>和<code>DELETE</code>。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p>\n<p>   <code>DQL(Data Query Language)</code>:数据<strong>查询</strong>语言。也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字<code>SELECT</code>是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p>\n<p>   <code>DCL(Data Control Language)</code>:数据<strong>控制</strong>语言。它的语句通过<code>GRANT</code>或<code>REVOKE</code>获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问,<code>COMMIT</code>、<code>ROLLBACK</code>来提交和回滚。</p>","date":"2018-09-25T16:01:30.000Z","pv":0,"totalPV":0,"categories":"面试 > 数据库","tags":["面试","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"如何理解http是无连接，无状态的？","mathjax":false,"date":"2018-09-28T08:46:24.000Z","_content":"\nHTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：\n1. 支持客户/服务器模式；\n2. 简单快速；\n3. 灵活；\n4. `无连接`；\n5. `无状态`。\n\n#### 无连接\n\n`无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。`\n\n>ps:早期这么做的原因是 HTTP 协议产生于互联网，因此服务器需要处理同时面向全世界数十万、上百万客户端的网页访问，但每个客户端（即浏览器）与服务器之间交换数据的间歇性较大（即传输具有突发性、瞬时性），并且网页浏览的联想性、发散性导致两次传送的数据关联性很低，大部分通道实际上会很空闲、无端占用资源。因此 `HTTP 的设计者有意利用这种特点将协议设计为请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端`\n\n随着时间的推移，网页变得越来越复杂，里面可能嵌入了很多图片，这时候每次访问图片都需要建立一次 TCP 连接就显得很低效。后来，`Keep-Alive` 被提出用来解决这效率低的问题。\n\nKeep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。市场上的大部分 Web 服务器，包括 iPlanet、IIS 和 Apache，都支持 HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，`因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep-Alive 功能对资源利用的影响尤其突出。`\n\n这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。\n\n<!-- more -->\n#### 无状态\n\n协议的状态是指`下一次传输`可以“记住”`这次传输`信息的能力，http是不会为了下一次连接而维护这次连接所传输的信息的.\nHTTP无状态是指，当浏览器发送请求给服务器的时候，服务器响应，但是同一个浏览器再发送请求给服务器的时候，它会响应，但是他不知道你就是刚才那个浏览器，简单地说，就是服务器不会去记得你，所以是无状态协议。\n\n无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。\n`HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。`\nHTTP 协议这种特性有优点也有缺点，优点在于解放了服务器，每一次请求“点到为止”不会造成不必要连接占用，缺点在于每次请求可能会传输大量重复的内容信息。\n\n\n\n>ps:客户端与服务器进行动态交互的 Web 应用程序出现之后，HTTP 无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持 HTTP 连接状态的技术就应运而生了，一个是 `Cookie`，而另一个则是 `Session`。\n\n\n\n---------------------\n\n本文来自 Mike__Jiang 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------\n","source":"_posts/如何理解http是无连接，无状态的？.md","raw":"---\ntitle: 如何理解http是无连接，无状态的？\nmathjax: false\ndate: 2018-09-28 16:46:24\ntags:\n  - 网络\ncategories:\n  - 网络\n---\n\nHTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：\n1. 支持客户/服务器模式；\n2. 简单快速；\n3. 灵活；\n4. `无连接`；\n5. `无状态`。\n\n#### 无连接\n\n`无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。`\n\n>ps:早期这么做的原因是 HTTP 协议产生于互联网，因此服务器需要处理同时面向全世界数十万、上百万客户端的网页访问，但每个客户端（即浏览器）与服务器之间交换数据的间歇性较大（即传输具有突发性、瞬时性），并且网页浏览的联想性、发散性导致两次传送的数据关联性很低，大部分通道实际上会很空闲、无端占用资源。因此 `HTTP 的设计者有意利用这种特点将协议设计为请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端`\n\n随着时间的推移，网页变得越来越复杂，里面可能嵌入了很多图片，这时候每次访问图片都需要建立一次 TCP 连接就显得很低效。后来，`Keep-Alive` 被提出用来解决这效率低的问题。\n\nKeep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。市场上的大部分 Web 服务器，包括 iPlanet、IIS 和 Apache，都支持 HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，`因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep-Alive 功能对资源利用的影响尤其突出。`\n\n这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。\n\n<!-- more -->\n#### 无状态\n\n协议的状态是指`下一次传输`可以“记住”`这次传输`信息的能力，http是不会为了下一次连接而维护这次连接所传输的信息的.\nHTTP无状态是指，当浏览器发送请求给服务器的时候，服务器响应，但是同一个浏览器再发送请求给服务器的时候，它会响应，但是他不知道你就是刚才那个浏览器，简单地说，就是服务器不会去记得你，所以是无状态协议。\n\n无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。\n`HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。`\nHTTP 协议这种特性有优点也有缺点，优点在于解放了服务器，每一次请求“点到为止”不会造成不必要连接占用，缺点在于每次请求可能会传输大量重复的内容信息。\n\n\n\n>ps:客户端与服务器进行动态交互的 Web 应用程序出现之后，HTTP 无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持 HTTP 连接状态的技术就应运而生了，一个是 `Cookie`，而另一个则是 `Session`。\n\n\n\n---------------------\n\n本文来自 Mike__Jiang 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------\n","slug":"如何理解http是无连接，无状态的？","published":1,"updated":"2018-09-28T13:45:26.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xm400e6exotnmf9efz6","content":"<p>HTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：</p>\n<ol>\n<li>支持客户/服务器模式；</li>\n<li>简单快速；</li>\n<li>灵活；</li>\n<li><code>无连接</code>；</li>\n<li><code>无状态</code>。</li>\n</ol>\n<h4 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h4><p><code>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</code></p>\n<blockquote>\n<p>ps:早期这么做的原因是 HTTP 协议产生于互联网，因此服务器需要处理同时面向全世界数十万、上百万客户端的网页访问，但每个客户端（即浏览器）与服务器之间交换数据的间歇性较大（即传输具有突发性、瞬时性），并且网页浏览的联想性、发散性导致两次传送的数据关联性很低，大部分通道实际上会很空闲、无端占用资源。因此 <code>HTTP 的设计者有意利用这种特点将协议设计为请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端</code></p>\n</blockquote>\n<p>随着时间的推移，网页变得越来越复杂，里面可能嵌入了很多图片，这时候每次访问图片都需要建立一次 TCP 连接就显得很低效。后来，<code>Keep-Alive</code> 被提出用来解决这效率低的问题。</p>\n<p>Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。市场上的大部分 Web 服务器，包括 iPlanet、IIS 和 Apache，都支持 HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，<code>因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep-Alive 功能对资源利用的影响尤其突出。</code></p>\n<p>这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>\n<a id=\"more\"></a>\n<h4 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h4><p>协议的状态是指<code>下一次传输</code>可以“记住”<code>这次传输</code>信息的能力，http是不会为了下一次连接而维护这次连接所传输的信息的.<br>HTTP无状态是指，当浏览器发送请求给服务器的时候，服务器响应，但是同一个浏览器再发送请求给服务器的时候，它会响应，但是他不知道你就是刚才那个浏览器，简单地说，就是服务器不会去记得你，所以是无状态协议。</p>\n<p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。<br><code>HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。</code><br>HTTP 协议这种特性有优点也有缺点，优点在于解放了服务器，每一次请求“点到为止”不会造成不必要连接占用，缺点在于每次请求可能会传输大量重复的内容信息。</p>\n<blockquote>\n<p>ps:客户端与服务器进行动态交互的 Web 应用程序出现之后，HTTP 无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持 HTTP 连接状态的技术就应运而生了，一个是 <code>Cookie</code>，而另一个则是 <code>Session</code>。</p>\n</blockquote>\n<hr>\n<p>本文来自 Mike__Jiang 的CSDN 博客 ，全文地址请点击：<a href=\"https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>HTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：</p>\n<ol>\n<li>支持客户/服务器模式；</li>\n<li>简单快速；</li>\n<li>灵活；</li>\n<li><code>无连接</code>；</li>\n<li><code>无状态</code>。</li>\n</ol>\n<h4 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h4><p><code>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</code></p>\n<blockquote>\n<p>ps:早期这么做的原因是 HTTP 协议产生于互联网，因此服务器需要处理同时面向全世界数十万、上百万客户端的网页访问，但每个客户端（即浏览器）与服务器之间交换数据的间歇性较大（即传输具有突发性、瞬时性），并且网页浏览的联想性、发散性导致两次传送的数据关联性很低，大部分通道实际上会很空闲、无端占用资源。因此 <code>HTTP 的设计者有意利用这种特点将协议设计为请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端</code></p>\n</blockquote>\n<p>随着时间的推移，网页变得越来越复杂，里面可能嵌入了很多图片，这时候每次访问图片都需要建立一次 TCP 连接就显得很低效。后来，<code>Keep-Alive</code> 被提出用来解决这效率低的问题。</p>\n<p>Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。市场上的大部分 Web 服务器，包括 iPlanet、IIS 和 Apache，都支持 HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，<code>因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep-Alive 功能对资源利用的影响尤其突出。</code></p>\n<p>这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>","more":"<h4 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h4><p>协议的状态是指<code>下一次传输</code>可以“记住”<code>这次传输</code>信息的能力，http是不会为了下一次连接而维护这次连接所传输的信息的.<br>HTTP无状态是指，当浏览器发送请求给服务器的时候，服务器响应，但是同一个浏览器再发送请求给服务器的时候，它会响应，但是他不知道你就是刚才那个浏览器，简单地说，就是服务器不会去记得你，所以是无状态协议。</p>\n<p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。<br><code>HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。</code><br>HTTP 协议这种特性有优点也有缺点，优点在于解放了服务器，每一次请求“点到为止”不会造成不必要连接占用，缺点在于每次请求可能会传输大量重复的内容信息。</p>\n<blockquote>\n<p>ps:客户端与服务器进行动态交互的 Web 应用程序出现之后，HTTP 无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持 HTTP 连接状态的技术就应运而生了，一个是 <code>Cookie</code>，而另一个则是 <code>Session</code>。</p>\n</blockquote>\n<hr>\n<p>本文来自 Mike__Jiang 的CSDN 博客 ，全文地址请点击：<a href=\"https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tennysonsky/article/details/44562435?utm_source=copy</a></p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Sep 28 2018 21:45:26 GMT+0800 (China Standard Time)","title":"如何理解http是无连接，无状态的？","path":"2018/09/28/如何理解http是无连接，无状态的？/","eyeCatchImage":null,"excerpt":"<p>HTTP 是一个属于应用层的面向对象的协议，HTTP 协议一共有五大特点：</p>\n<ol>\n<li>支持客户/服务器模式；</li>\n<li>简单快速；</li>\n<li>灵活；</li>\n<li><code>无连接</code>；</li>\n<li><code>无状态</code>。</li>\n</ol>\n<h4 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h4><p><code>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</code></p>\n<blockquote>\n<p>ps:早期这么做的原因是 HTTP 协议产生于互联网，因此服务器需要处理同时面向全世界数十万、上百万客户端的网页访问，但每个客户端（即浏览器）与服务器之间交换数据的间歇性较大（即传输具有突发性、瞬时性），并且网页浏览的联想性、发散性导致两次传送的数据关联性很低，大部分通道实际上会很空闲、无端占用资源。因此 <code>HTTP 的设计者有意利用这种特点将协议设计为请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端</code></p>\n</blockquote>\n<p>随着时间的推移，网页变得越来越复杂，里面可能嵌入了很多图片，这时候每次访问图片都需要建立一次 TCP 连接就显得很低效。后来，<code>Keep-Alive</code> 被提出用来解决这效率低的问题。</p>\n<p>Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。市场上的大部分 Web 服务器，包括 iPlanet、IIS 和 Apache，都支持 HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，<code>因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep-Alive 功能对资源利用的影响尤其突出。</code></p>\n<p>这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>","date":"2018-09-28T08:46:24.000Z","pv":0,"totalPV":0,"categories":"网络","tags":["网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"如何优雅滴在手机上跑Python代码","date":"2019-11-15T01:10:12.000Z","_content":"\n本文重点围绕苹果设备，给大家描述一下小编自己如何在苹果移动设备上玩转Python代码的。按照推荐指数由高到低给大家推荐相关工具。\n\n### Pythonista\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115100203362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n与一般的python移动端软件不同，它是一款安装在手机上的Python IDE软件，推荐指数4.5星。扣掉的0.5星是因为软件略贵（9.99刀）。\n\n该软件可以在苹果移动设备上提供几乎完整的Python开发环境，软件里有很多的demo程序，包括了游戏、数据处理、图片处理等。说实话，本人觉得光这些demo代码就值这个价格了。软件除了支持标准Python库以外，还支持很多常用的三方库，例如用于科学计算的Numpy和绘图包matplotlib、用于http请求的Requests等。另外，我们还可以在软件中写脚本调用手机接口，获得接切板、联系人、位置信息等，功能狠强大，等待盆友萌前去体验。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115114946949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n<!-- more -->\n###  Python ai\n这款软件可以给4.4颗星，也是一款非常优秀的软件。说其优秀，体现在这么几点。\n\n - 软件免费，没有广告，实在是情怀良心之作\n - 离线IDE环境\n - 支持很多科学计算的三方库\n - 支持pip安装三方库\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115115022887.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n###  Pydriod\n就Python IDE来说，安卓端的软件跟苹果端软件相比还是差的挺多的。此处推荐Pydriod，给4颗星吧。貌似很多应用商店找不到，如果可以顺利FQ，推荐去Google Play下载。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115115210695.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n再次强调一下，移动端Python IDE软件有很多，对于苹果端，小编大部分已经下载体验过，自认为还是很有发言权的，此处推荐的都是**本地IDE**的能如我法眼的Python软件。其实还有一些软件使用的是**远程IDE**，例如苹果和安卓端的PythonJam，体验还算OK，感兴趣大家可以下载尝试。\n","source":"_posts/如何优雅滴在手机上跑Python代码.md","raw":"---\ntitle: 如何优雅滴在手机上跑Python代码\ndate: 2019-11-15 09:10:12\ntags:\n  - Tools\ncategories:\n  - Tools\n---\n\n本文重点围绕苹果设备，给大家描述一下小编自己如何在苹果移动设备上玩转Python代码的。按照推荐指数由高到低给大家推荐相关工具。\n\n### Pythonista\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115100203362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n与一般的python移动端软件不同，它是一款安装在手机上的Python IDE软件，推荐指数4.5星。扣掉的0.5星是因为软件略贵（9.99刀）。\n\n该软件可以在苹果移动设备上提供几乎完整的Python开发环境，软件里有很多的demo程序，包括了游戏、数据处理、图片处理等。说实话，本人觉得光这些demo代码就值这个价格了。软件除了支持标准Python库以外，还支持很多常用的三方库，例如用于科学计算的Numpy和绘图包matplotlib、用于http请求的Requests等。另外，我们还可以在软件中写脚本调用手机接口，获得接切板、联系人、位置信息等，功能狠强大，等待盆友萌前去体验。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115114946949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n<!-- more -->\n###  Python ai\n这款软件可以给4.4颗星，也是一款非常优秀的软件。说其优秀，体现在这么几点。\n\n - 软件免费，没有广告，实在是情怀良心之作\n - 离线IDE环境\n - 支持很多科学计算的三方库\n - 支持pip安装三方库\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115115022887.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n\n###  Pydriod\n就Python IDE来说，安卓端的软件跟苹果端软件相比还是差的挺多的。此处推荐Pydriod，给4颗星吧。貌似很多应用商店找不到，如果可以顺利FQ，推荐去Google Play下载。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115115210695.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70)\n再次强调一下，移动端Python IDE软件有很多，对于苹果端，小编大部分已经下载体验过，自认为还是很有发言权的，此处推荐的都是**本地IDE**的能如我法眼的Python软件。其实还有一些软件使用的是**远程IDE**，例如苹果和安卓端的PythonJam，体验还算OK，感兴趣大家可以下载尝试。\n","slug":"如何优雅滴在手机上跑Python代码","published":1,"updated":"2019-11-15T03:55:44.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2zm0xma00e9exotbhz9rjxz","content":"<p>本文重点围绕苹果设备，给大家描述一下小编自己如何在苹果移动设备上玩转Python代码的。按照推荐指数由高到低给大家推荐相关工具。</p>\n<h3 id=\"Pythonista\"><a href=\"#Pythonista\" class=\"headerlink\" title=\"Pythonista\"></a>Pythonista</h3><p><img src=\"https://img-blog.csdnimg.cn/20191115100203362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>与一般的python移动端软件不同，它是一款安装在手机上的Python IDE软件，推荐指数4.5星。扣掉的0.5星是因为软件略贵（9.99刀）。</p>\n<p>该软件可以在苹果移动设备上提供几乎完整的Python开发环境，软件里有很多的demo程序，包括了游戏、数据处理、图片处理等。说实话，本人觉得光这些demo代码就值这个价格了。软件除了支持标准Python库以外，还支持很多常用的三方库，例如用于科学计算的Numpy和绘图包matplotlib、用于http请求的Requests等。另外，我们还可以在软件中写脚本调用手机接口，获得接切板、联系人、位置信息等，功能狠强大，等待盆友萌前去体验。<br><img src=\"https://img-blog.csdnimg.cn/20191115114946949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Python-ai\"><a href=\"#Python-ai\" class=\"headerlink\" title=\"Python ai\"></a>Python ai</h3><p>这款软件可以给4.4颗星，也是一款非常优秀的软件。说其优秀，体现在这么几点。</p>\n<ul>\n<li>软件免费，没有广告，实在是情怀良心之作</li>\n<li>离线IDE环境</li>\n<li>支持很多科学计算的三方库</li>\n<li>支持pip安装三方库<br><img src=\"https://img-blog.csdnimg.cn/20191115115022887.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h3 id=\"Pydriod\"><a href=\"#Pydriod\" class=\"headerlink\" title=\"Pydriod\"></a>Pydriod</h3><p>就Python IDE来说，安卓端的软件跟苹果端软件相比还是差的挺多的。此处推荐Pydriod，给4颗星吧。貌似很多应用商店找不到，如果可以顺利FQ，推荐去Google Play下载。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191115115210695.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>再次强调一下，移动端Python IDE软件有很多，对于苹果端，小编大部分已经下载体验过，自认为还是很有发言权的，此处推荐的都是<strong>本地IDE</strong>的能如我法眼的Python软件。其实还有一些软件使用的是<strong>远程IDE</strong>，例如苹果和安卓端的PythonJam，体验还算OK，感兴趣大家可以下载尝试。</p>\n","site":{"data":{}},"excerpt":"<p>本文重点围绕苹果设备，给大家描述一下小编自己如何在苹果移动设备上玩转Python代码的。按照推荐指数由高到低给大家推荐相关工具。</p>\n<h3 id=\"Pythonista\"><a href=\"#Pythonista\" class=\"headerlink\" title=\"Pythonista\"></a>Pythonista</h3><p><img src=\"https://img-blog.csdnimg.cn/20191115100203362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>与一般的python移动端软件不同，它是一款安装在手机上的Python IDE软件，推荐指数4.5星。扣掉的0.5星是因为软件略贵（9.99刀）。</p>\n<p>该软件可以在苹果移动设备上提供几乎完整的Python开发环境，软件里有很多的demo程序，包括了游戏、数据处理、图片处理等。说实话，本人觉得光这些demo代码就值这个价格了。软件除了支持标准Python库以外，还支持很多常用的三方库，例如用于科学计算的Numpy和绘图包matplotlib、用于http请求的Requests等。另外，我们还可以在软件中写脚本调用手机接口，获得接切板、联系人、位置信息等，功能狠强大，等待盆友萌前去体验。<br><img src=\"https://img-blog.csdnimg.cn/20191115114946949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>","more":"<h3 id=\"Python-ai\"><a href=\"#Python-ai\" class=\"headerlink\" title=\"Python ai\"></a>Python ai</h3><p>这款软件可以给4.4颗星，也是一款非常优秀的软件。说其优秀，体现在这么几点。</p>\n<ul>\n<li>软件免费，没有广告，实在是情怀良心之作</li>\n<li>离线IDE环境</li>\n<li>支持很多科学计算的三方库</li>\n<li>支持pip安装三方库<br><img src=\"https://img-blog.csdnimg.cn/20191115115022887.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h3 id=\"Pydriod\"><a href=\"#Pydriod\" class=\"headerlink\" title=\"Pydriod\"></a>Pydriod</h3><p>就Python IDE来说，安卓端的软件跟苹果端软件相比还是差的挺多的。此处推荐Pydriod，给4颗星吧。貌似很多应用商店找不到，如果可以顺利FQ，推荐去Google Play下载。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191115115210695.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>再次强调一下，移动端Python IDE软件有很多，对于苹果端，小编大部分已经下载体验过，自认为还是很有发言权的，此处推荐的都是<strong>本地IDE</strong>的能如我法眼的Python软件。其实还有一些软件使用的是<strong>远程IDE</strong>，例如苹果和安卓端的PythonJam，体验还算OK，感兴趣大家可以下载尝试。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Nov 15 2019 11:55:44 GMT+0800 (China Standard Time)","title":"如何优雅滴在手机上跑Python代码","path":"2019/11/15/如何优雅滴在手机上跑Python代码/","eyeCatchImage":null,"excerpt":"<p>本文重点围绕苹果设备，给大家描述一下小编自己如何在苹果移动设备上玩转Python代码的。按照推荐指数由高到低给大家推荐相关工具。</p>\n<h3 id=\"Pythonista\"><a href=\"#Pythonista\" class=\"headerlink\" title=\"Pythonista\"></a>Pythonista</h3><p><img src=\"https://img-blog.csdnimg.cn/20191115100203362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>与一般的python移动端软件不同，它是一款安装在手机上的Python IDE软件，推荐指数4.5星。扣掉的0.5星是因为软件略贵（9.99刀）。</p>\n<p>该软件可以在苹果移动设备上提供几乎完整的Python开发环境，软件里有很多的demo程序，包括了游戏、数据处理、图片处理等。说实话，本人觉得光这些demo代码就值这个价格了。软件除了支持标准Python库以外，还支持很多常用的三方库，例如用于科学计算的Numpy和绘图包matplotlib、用于http请求的Requests等。另外，我们还可以在软件中写脚本调用手机接口，获得接切板、联系人、位置信息等，功能狠强大，等待盆友萌前去体验。<br><img src=\"https://img-blog.csdnimg.cn/20191115114946949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTUyMjQ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>","date":"2019-11-15T01:10:12.000Z","pv":0,"totalPV":0,"categories":"Tools","tags":["Tools"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ck2zm0wzh0000exot5jlcftya","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x10000fexotjh2uw3o6"},{"post_id":"ck2zm0wzv0002exot5bi0uqtm","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0x1f000lexotp9rtof6g"},{"post_id":"ck2zm0x0d0008exot7c02oqt5","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x1j000rexotfd6o3b7a"},{"post_id":"ck2zm0x0h0009exot886x2nw7","category_id":"ck2zm0x1f000mexotokix7sv5","_id":"ck2zm0x1n000xexot89hl9ovp"},{"post_id":"ck2zm0x0n000dexot7ukvf8ln","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x230014exote9c58cpd"},{"post_id":"ck2zm0x0n000dexot7ukvf8ln","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0x260018exot9ybg87tg"},{"post_id":"ck2zm0x0y000eexottkxzi445","category_id":"ck2zm0x1f000mexotokix7sv5","_id":"ck2zm0x28001bexot7az7is1h"},{"post_id":"ck2zm0x11000iexotmpzbjc4f","category_id":"ck2zm0x220013exottaclnlr7","_id":"ck2zm0x2h001iexot9w6w1uuq"},{"post_id":"ck2zm0x14000kexot8r8hoeds","category_id":"ck2zm0x28001cexotnkvue9pz","_id":"ck2zm0x2t001pexoty34wdb5s"},{"post_id":"ck2zm0x1g000oexotwdcsq8jo","category_id":"ck2zm0x220013exottaclnlr7","_id":"ck2zm0x2z001vexot3c5tloep"},{"post_id":"ck2zm0x1i000qexot5hyzqzaj","category_id":"ck2zm0x220013exottaclnlr7","_id":"ck2zm0x35001zexotxigbgf70"},{"post_id":"ck2zm0x1m000wexotvcnblfyj","category_id":"ck2zm0x350020exotunzpusby","_id":"ck2zm0x46002dexotpdmjojrl"},{"post_id":"ck2zm0x1z0011exothf898hqy","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x4c002kexota4pp9pn9"},{"post_id":"ck2zm0x210012exotmh8ucoqp","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x4i002qexotjssyj2ap"},{"post_id":"ck2zm0x250017exot2metwbh6","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x4m002vexotc770jh7x"},{"post_id":"ck2zm0x27001aexotmbrsar5s","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x4r0031exot85w42db1"},{"post_id":"ck2zm0x2c001eexott388q0xy","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x4w0037exotns98ru1n"},{"post_id":"ck2zm0x2f001gexoto0x8s6tc","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x52003dexotcoo5e61o"},{"post_id":"ck2zm0x2o001lexotlejp6fzx","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x56003jexot739zrwsv"},{"post_id":"ck2zm0x2r001mexot3oqnw4q1","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x5f003pexot06cmiawp"},{"post_id":"ck2zm0x2u001qexotev9z3zd7","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x5u003vexot38n3uxp2"},{"post_id":"ck2zm0x5c003nexothqhqx954","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x5y003zexotzzh7yox0"},{"post_id":"ck2zm0x5c003nexothqhqx954","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0x600043exotyupzj554"},{"post_id":"ck2zm0x5l003rexotuyv08ydp","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x660047exotgodqjrek"},{"post_id":"ck2zm0x5l003rexotuyv08ydp","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0x68004bexotcdyskz66"},{"post_id":"ck2zm0x2w001sexotal1yp94x","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x6a004fexot2u8f5ria"},{"post_id":"ck2zm0x5s003texotrcwb94vj","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x6c004iexotk5tdjq70"},{"post_id":"ck2zm0x5s003texotrcwb94vj","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0x6l004nexotsfxrbqqf"},{"post_id":"ck2zm0x5w003yexot8x09bx3l","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0x6o004qexotdy8if5vn"},{"post_id":"ck2zm0x5w003yexot8x09bx3l","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0x6u004vexotsgmztr04"},{"post_id":"ck2zm0x31001xexotrvymsbaz","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x6y004yexotyjhv1c1e"},{"post_id":"ck2zm0x5z0041exot0yjw7o41","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x710053exotz2bn1pgm"},{"post_id":"ck2zm0x640046exotz3qh6t5n","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x750056exotjm45s75j"},{"post_id":"ck2zm0x33001yexoto95uwu0i","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x78005bexotbqxjske3"},{"post_id":"ck2zm0x69004eexothu6kbbo7","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x7a005eexot41acmxzt"},{"post_id":"ck2zm0x1k000uexotkwq8nh45","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0x7d005jexotdp2ec1rv"},{"post_id":"ck2zm0x1k000uexotkwq8nh45","category_id":"ck2zm0x68004aexot4od0nf0s","_id":"ck2zm0x7k005mexotgeh2qkgr"},{"post_id":"ck2zm0x6b004hexotjw0qlokp","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x7q005rexot0wj01vft"},{"post_id":"ck2zm0x370022exotmulvvwru","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x7u005uexotbl55o5s6"},{"post_id":"ck2zm0x3a0024exothapamcav","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0x7z005zexotef8ha5v4"},{"post_id":"ck2zm0x6v004xexotc93k01cu","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0x810062exota33kzf1a"},{"post_id":"ck2zm0x3n0027exothf5ne131","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0x8q0067exot6hpps03u"},{"post_id":"ck2zm0x78005dexotpkp0q794","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x8z006aexotdish95qw"},{"post_id":"ck2zm0x40002aexot2omfdmec","category_id":"ck2zm0x760059exotdwdvjcqt","_id":"ck2zm0x94006fexot4v8vi68n"},{"post_id":"ck2zm0x7e005lexotevfmmmh5","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x96006iexot4bqjscxe"},{"post_id":"ck2zm0x43002cexot6bx8wahu","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0x9i006nexot0dgfnf6d"},{"post_id":"ck2zm0x7m005pexotug3vhkj3","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x9n006qexotqsx464f2"},{"post_id":"ck2zm0x4a002iexotjyu7kr2o","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0x9s006vexot5pj2eiub"},{"post_id":"ck2zm0x7v005xexot2vu499or","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0x9u006yexotrlp6ia83"},{"post_id":"ck2zm0x4d002mexotgiall2b7","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xan0073exotvhsy3bk1"},{"post_id":"ck2zm0x4f002nexot8gdcv5vc","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xax0076exot804iuic7"},{"post_id":"ck2zm0x91006cexot8sb4orgd","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xb6007bexot57197bb2"},{"post_id":"ck2zm0x94006hexotlcbg3jvf","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xba007eexotg5tj9jnv"},{"post_id":"ck2zm0x4j002sexotxj0bctzu","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xbi007jexotptjsf6qf"},{"post_id":"ck2zm0x4l002texotrhngqrie","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xc0007mexotpvk5x8ff"},{"post_id":"ck2zm0x4o002xexotdspxc6eh","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xc4007rexotkvsk7slh"},{"post_id":"ck2zm0x4q002zexottb4m3geb","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xc6007uexotptj7f7x0"},{"post_id":"ck2zm0x4t0033exotjr5oc53v","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xce007zexoto5wca727"},{"post_id":"ck2zm0xbk007lexotbqwl886f","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xch0082exot5zqny4od"},{"post_id":"ck2zm0x4v0035exots1zpwwcf","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xcy0087exotubfbyjs4"},{"post_id":"ck2zm0xc4007texote6osveyl","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xd0008aexot40rldh79"},{"post_id":"ck2zm0x4x0039exotfu5p3z2q","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xd2008fexothbdg95vr"},{"post_id":"ck2zm0xc7007wexots5bslox1","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xd5008iexotbyd1oevl"},{"post_id":"ck2zm0xcf0081exotqgvanho5","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xdk008nexotw2iosj5r"},{"post_id":"ck2zm0x4z003bexot3hvv4xse","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xe1008qexotxes9mqvs"},{"post_id":"ck2zm0xcz0089exotlyf1wqby","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xec008vexot1jyrrv93"},{"post_id":"ck2zm0x53003fexot0ri7zl4k","category_id":"ck2zm0xcp0085exothjmfitjl","_id":"ck2zm0xep008yexotox0lujxh"},{"post_id":"ck2zm0xd3008hexotgk9pja79","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xev0091exotgj9yoevd"},{"post_id":"ck2zm0x55003hexotkchautmp","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xf00096exotg0rban36"},{"post_id":"ck2zm0xd5008kexoti4fqo79x","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xf80099exot208d3dm2"},{"post_id":"ck2zm0x59003lexotyvb7ccc7","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xfa009eexotewph6p2i"},{"post_id":"ck2zm0xea008sexot7ng7zoh0","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xff009hexotb53r3up9"},{"post_id":"ck2zm0xec008xexotujesg1iq","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xfr009mexottjhi8xn5"},{"post_id":"ck2zm0x660049exotncxqubyv","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xfy009pexotnf9wlr5u"},{"post_id":"ck2zm0x660049exotncxqubyv","category_id":"ck2zm0xeb008uexotkzmcklkh","_id":"ck2zm0xg8009uexot3qerc2gs"},{"post_id":"ck2zm0xey0095exotznd3hzfq","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xga009xexotoqipilb7"},{"post_id":"ck2zm0x6i004mexot6y866fur","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xge00a1exotwra3xqd1"},{"post_id":"ck2zm0x6i004mexot6y866fur","category_id":"ck2zm0xew0094exotpqjba5d1","_id":"ck2zm0xgi00a5exotnenh4qcx"},{"post_id":"ck2zm0xf60098exot3g8douyq","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0xgl00a9exotye3gmmvp"},{"post_id":"ck2zm0xf9009dexothynl24qg","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0xgr00adexotksmwzksv"},{"post_id":"ck2zm0xfb009gexotjhskd2f6","category_id":"ck2zm0x3p0028exot1r1xkj9v","_id":"ck2zm0xgu00agexot59ng8fkg"},{"post_id":"ck2zm0x6m004pexota5p3ge4i","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xh200alexottn78emda"},{"post_id":"ck2zm0x6m004pexota5p3ge4i","category_id":"ck2zm0xf9009cexotirt0ru1z","_id":"ck2zm0xh400aoexotqtmytk1x"},{"post_id":"ck2zm0xfk009kexotcn53pbzq","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xh600atexotpkihf4mt"},{"post_id":"ck2zm0x6s004uexotwg1nlqfr","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xhg00awexoto793ygh2"},{"post_id":"ck2zm0x6s004uexotwg1nlqfr","category_id":"ck2zm0xfo009lexot3r9a16o6","_id":"ck2zm0xhj00b1exotkdnv3gfn"},{"post_id":"ck2zm0xg5009sexotx84ep9h4","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xho00b4exotlfp5wmgc"},{"post_id":"ck2zm0xgb00a0exotkobzaa83","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xhq00b8exotnel2tmme"},{"post_id":"ck2zm0xgh00a4exott92awrus","category_id":"ck2zm0x28001cexotnkvue9pz","_id":"ck2zm0xi100bcexot1b6id5gj"},{"post_id":"ck2zm0x710055exot4wyba43g","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xic00bgexot5v746uv8"},{"post_id":"ck2zm0x710055exot4wyba43g","category_id":"ck2zm0xgf00a3exotvmotb4gy","_id":"ck2zm0xig00bkexotydtpbntu"},{"post_id":"ck2zm0xgj00a7exotly9p4nbh","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xio00boexotfm60gv53"},{"post_id":"ck2zm0xgj00a7exotly9p4nbh","category_id":"ck2zm0x68004aexot4od0nf0s","_id":"ck2zm0xiy00bsexot7jz6l8o6"},{"post_id":"ck2zm0x76005aexotmclsmwtz","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xj200bwexotyqve9t6z"},{"post_id":"ck2zm0x76005aexotmclsmwtz","category_id":"ck2zm0xgp00abexotp1gw4krf","_id":"ck2zm0xj900c0exotivw7695v"},{"post_id":"ck2zm0xgz00ajexot1shupstq","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xjc00c4exot3hyxy6ed"},{"post_id":"ck2zm0x7b005hexotynjtdln3","category_id":"ck2zm0xh100akexot7vo9x58w","_id":"ck2zm0xje00c8exotjd0uix9z"},{"post_id":"ck2zm0x7s005texot6khr4ypb","category_id":"ck2zm0xh100akexot7vo9x58w","_id":"ck2zm0xjj00ccexotyxus83hy"},{"post_id":"ck2zm0xhm00b3exot5s7ov62d","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xjm00cgexotcnqk53rw"},{"post_id":"ck2zm0xhm00b3exot5s7ov62d","category_id":"ck2zm0x68004aexot4od0nf0s","_id":"ck2zm0xjp00ckexot5csw6jmz"},{"post_id":"ck2zm0x800061exotgvhjzfog","category_id":"ck2zm0xhj00b0exot1nfuquzr","_id":"ck2zm0xju00coexotol6ugufx"},{"post_id":"ck2zm0xho00b7exotql2bb9ck","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xjy00csexotl7vt8wbn"},{"post_id":"ck2zm0x8g0064exotvuqpvf7s","category_id":"ck2zm0xhj00b0exot1nfuquzr","_id":"ck2zm0xku00cvexotnnspaz34"},{"post_id":"ck2zm0xi200bfexotoitw2o9f","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0xkw00d0exotyhcnll4h"},{"post_id":"ck2zm0xi200bfexotoitw2o9f","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0xky00d3exotptq0hxro"},{"post_id":"ck2zm0xie00bjexotcs8w9o3m","category_id":"ck2zm0x28001cexotnkvue9pz","_id":"ck2zm0xl400d8exota48dgkws"},{"post_id":"ck2zm0x8r0069exotx6ckqev0","category_id":"ck2zm0xhj00b0exot1nfuquzr","_id":"ck2zm0xl600dbexotkdtt2xdj"},{"post_id":"ck2zm0xik00bnexothrij8u3f","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xlg00dgexot3yxm6sh9"},{"post_id":"ck2zm0x97006kexotizkv17s6","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xlj00djexothh885mbd"},{"post_id":"ck2zm0x97006kexotizkv17s6","category_id":"ck2zm0xio00bqexot5cm4whvj","_id":"ck2zm0xlq00dnexot3xtsai65"},{"post_id":"ck2zm0xiz00bvexot3dky1uvt","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0xls00drexotiranw38a"},{"post_id":"ck2zm0xiz00bvexot3dky1uvt","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0xlv00dvexotsdb3jh19"},{"post_id":"ck2zm0xj700bzexotoxjpjiet","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xlx00dzexotg4i1aqwz"},{"post_id":"ck2zm0xja00c3exotixg3yaom","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xm300e3exotutem8sta"},{"post_id":"ck2zm0x9k006pexotfery2j4w","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xm700e7exotu43k8cps"},{"post_id":"ck2zm0x9k006pexotfery2j4w","category_id":"ck2zm0xj300byexotck3ute0m","_id":"ck2zm0xme00eaexoto7w79a7k"},{"post_id":"ck2zm0xjc00c6exot7hdu0mzx","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xmg00eeexotxjz3yyct"},{"post_id":"ck2zm0x9p006sexotvcqun83r","category_id":"ck2zm0xh100akexot7vo9x58w","_id":"ck2zm0xms00egexotj5i81a5y"},{"post_id":"ck2zm0xjk00ceexotlgbdoylq","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xmt00ekexotukoyuw9z"},{"post_id":"ck2zm0xjn00cjexotezvbhl94","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xmx00emexotw9ctucgs"},{"post_id":"ck2zm0x9t006xexot0p0118h9","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xmz00epexothoh791r2"},{"post_id":"ck2zm0x9t006xexot0p0118h9","category_id":"ck2zm0xjl00cfexotp9tf0xyw","_id":"ck2zm0xn000esexotdkv7e2xd"},{"post_id":"ck2zm0xjq00cmexot8jk4v57r","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xn100evexotf3nddhyn"},{"post_id":"ck2zm0xab0070exotep4ibdqw","category_id":"ck2zm0xju00cnexotpcy7d3bp","_id":"ck2zm0xn200eyexott6wghy06"},{"post_id":"ck2zm0xat0075exotb1bpp2ib","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xn200f0exoteo0eht07"},{"post_id":"ck2zm0xat0075exotb1bpp2ib","category_id":"ck2zm0xku00cxexotdpq6qn2b","_id":"ck2zm0xn300f4exotufmw9y29"},{"post_id":"ck2zm0xkx00d2exot6rdj9kta","category_id":"ck2zm0x6y0050exotw1ldnjpc","_id":"ck2zm0xn400f6exot9oppv4gu"},{"post_id":"ck2zm0xaz0078exotb2ccznx8","category_id":"ck2zm0xh100akexot7vo9x58w","_id":"ck2zm0xn500faexot2anxazt2"},{"post_id":"ck2zm0xl500daexot13mfz3tv","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xn600fcexotmglvwkw7"},{"post_id":"ck2zm0xl700deexott7jfvlye","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xn700fgexotfhst7ktg"},{"post_id":"ck2zm0xli00diexot8g0pbmpk","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xn800fiexotz6bpao5l"},{"post_id":"ck2zm0xb7007dexottmkxmubm","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xn900fmexot65ysbpwb"},{"post_id":"ck2zm0xb7007dexottmkxmubm","category_id":"ck2zm0xl600ddexot35yp3s6m","_id":"ck2zm0xne00foexotz75i6vuf"},{"post_id":"ck2zm0xll00dlexotgzwpix4l","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xnh00fsexotm6mua5ur"},{"post_id":"ck2zm0xbg007gexotd0evuepq","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xni00fuexot9z84vi25"},{"post_id":"ck2zm0xbg007gexotd0evuepq","category_id":"ck2zm0xeb008uexotkzmcklkh","_id":"ck2zm0xnk00fyexot1ld09th8"},{"post_id":"ck2zm0xlr00dqexotstxvbzbd","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xnl00g0exotphzil3u6"},{"post_id":"ck2zm0xlr00dqexotstxvbzbd","category_id":"ck2zm0x68004aexot4od0nf0s","_id":"ck2zm0xnm00g3exot3zrgs3t0"},{"post_id":"ck2zm0xlw00dyexotya4j3ea8","category_id":"ck2zm0x2y001uexotvb1pfs7y","_id":"ck2zm0xnn00g6exotzql5x4mc"},{"post_id":"ck2zm0xlw00dyexotya4j3ea8","category_id":"ck2zm0x68004aexot4od0nf0s","_id":"ck2zm0xno00g9exot7a3v4noo"},{"post_id":"ck2zm0xc1007oexotcv11rjcu","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xnq00gcexotqxtj7uw9"},{"post_id":"ck2zm0xc1007oexotcv11rjcu","category_id":"ck2zm0xlv00duexotqrtrjj52","_id":"ck2zm0xnt00gfexotwe2lz9yj"},{"post_id":"ck2zm0xly00e1exot4ahqeqau","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0xnv00giexotm76xxwz4"},{"post_id":"ck2zm0xly00e1exot4ahqeqau","category_id":"ck2zm0x1k000sexotnv7fh3p7","_id":"ck2zm0xnv00glexot0z8chi3d"},{"post_id":"ck2zm0xm400e6exotnmf9efz6","category_id":"ck2zm0x0j000aexotz1y1cmjw","_id":"ck2zm0xny00goexotywq2k76l"},{"post_id":"ck2zm0xd0008cexot4ga0u4zf","category_id":"ck2zm0xme00ecexotj5puum14","_id":"ck2zm0xny00gqexot2hmjta8d"},{"post_id":"ck2zm0xdo008pexoto7x5u9u5","category_id":"ck2zm0xms00eiexotcp11iik4","_id":"ck2zm0xo000guexotlj5pmg8p"},{"post_id":"ck2zm0xfs009oexothfzsty6q","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xo000gwexoto0w7an89"},{"post_id":"ck2zm0xfs009oexothfzsty6q","category_id":"ck2zm0xmx00eoexotff26ept2","_id":"ck2zm0xo800h0exot5dlhsktn"},{"post_id":"ck2zm0xg8009wexotdgal8c7o","category_id":"ck2zm0x10000gexotvowpttgg","_id":"ck2zm0xo900h2exotma9kzj06"},{"post_id":"ck2zm0xg8009wexotdgal8c7o","category_id":"ck2zm0xn100euexoth3zu4pkb","_id":"ck2zm0xob00h6exot67l9ov52"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xob00h8exot6qmauwev"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","category_id":"ck2zm0xn200f2exotk5d3od2a","_id":"ck2zm0xoj00hbexotskf262gi"},{"post_id":"ck2zm0xgp00acexot3s9rge8l","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xoj00hdexot6qifeq5c"},{"post_id":"ck2zm0xgp00acexot3s9rge8l","category_id":"ck2zm0xn400f9exotj5d85wu8","_id":"ck2zm0xop00hgexot97m56e9e"},{"post_id":"ck2zm0xgt00afexotcahrdj5x","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xoq00hiexot7q6as51h"},{"post_id":"ck2zm0xgt00afexotcahrdj5x","category_id":"ck2zm0xn400f9exotj5d85wu8","_id":"ck2zm0xor00hkexot8t0h7ixt"},{"post_id":"ck2zm0xh500arexot4lz9tq0i","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xos00hnexotn9ch16uq"},{"post_id":"ck2zm0xh500arexot4lz9tq0i","category_id":"ck2zm0xn400f9exotj5d85wu8","_id":"ck2zm0xou00hpexottvh4l3k3"},{"post_id":"ck2zm0xhi00azexot4vqhsfyw","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xou00hrexotwu0l1xi0"},{"post_id":"ck2zm0xhi00azexot4vqhsfyw","category_id":"ck2zm0xn400f9exotj5d85wu8","_id":"ck2zm0xox00htexotzgwrc4ga"},{"post_id":"ck2zm0xhr00bbexotuog72ion","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xoy00hvexot444kdmf1"},{"post_id":"ck2zm0xhr00bbexotuog72ion","category_id":"ck2zm0xn400f9exotj5d85wu8","_id":"ck2zm0xoy00hxexotllkp4xt8"},{"post_id":"ck2zm0xjf00cbexotv23l0wjl","category_id":"ck2zm0xnm00g2exotjzzl5ytr","_id":"ck2zm0xoz00hzexotez8ubkvt"},{"post_id":"ck2zm0xjy00cuexotebeqqnto","category_id":"ck2zm0xnm00g2exotjzzl5ytr","_id":"ck2zm0xoz00i1exotp0h1yaq4"},{"post_id":"ck2zm0xkv00cyexot1w2e7vre","category_id":"ck2zm0xnm00g2exotjzzl5ytr","_id":"ck2zm0xoz00i3exot1muriuva"},{"post_id":"ck2zm0xkz00d6exotpxvzh0hd","category_id":"ck2zm0xg8009texotd4yzcdkb","_id":"ck2zm0xp000i5exot4obf6jmo"},{"post_id":"ck2zm0xkz00d6exotpxvzh0hd","category_id":"ck2zm0xnv00gkexotjrvfzozk","_id":"ck2zm0xp100i7exotone47pf8"},{"post_id":"ck2zm0xlt00dtexota27l7gsh","category_id":"ck2zm0wzz0004exotwooayj25","_id":"ck2zm0xp100i9exot40mb2470"},{"post_id":"ck2zm0xlt00dtexota27l7gsh","category_id":"ck2zm0xny00gsexoty5gczuz4","_id":"ck2zm0xp100ibexotj59jknm4"},{"post_id":"ck2zm0xci0084exotvlzwg717","category_id":"ck2zm0xm200e2exotdhlwk9ge","_id":"ck2zm0xp100idexotgrmem0q9"},{"post_id":"ck2zm0xci0084exotvlzwg717","category_id":"ck2zm0xo000gyexotbsc4a0ed","_id":"ck2zm0xp100ifexots38j0tnl"},{"post_id":"ck2zm0xma00e9exotbhz9rjxz","category_id":"ck2zm0xoa00h5exotxlhi7smn","_id":"ck2zm0xp200ihexotzpr7tmbv"}],"PostTag":[{"post_id":"ck2zm0wzh0000exot5jlcftya","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x0n000cexot0k9kchu4"},{"post_id":"ck2zm0wzv0002exot5bi0uqtm","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0x12000jexotzz1psqwu"},{"post_id":"ck2zm0x050006exot0b4sn3tc","tag_id":"ck2zm0x11000hexot2f18mlam","_id":"ck2zm0x1h000pexotqss4x3iu"},{"post_id":"ck2zm0x0d0008exot7c02oqt5","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x1m000vexot58h7id2w"},{"post_id":"ck2zm0x0h0009exot886x2nw7","tag_id":"ck2zm0x1k000texottkdpvmvf","_id":"ck2zm0x250016exotds4r5d7d"},{"post_id":"ck2zm0x0h0009exot886x2nw7","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x270019exotkqcrs8s2"},{"post_id":"ck2zm0x0n000dexot7ukvf8ln","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x2f001fexotjlj84dv2"},{"post_id":"ck2zm0x0n000dexot7ukvf8ln","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0x2h001hexot0oyf1qh5"},{"post_id":"ck2zm0x0y000eexottkxzi445","tag_id":"ck2zm0x1k000texottkdpvmvf","_id":"ck2zm0x2v001rexotwtyvmcvf"},{"post_id":"ck2zm0x0y000eexottkxzi445","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x2x001texotdlor5ioj"},{"post_id":"ck2zm0x11000iexotmpzbjc4f","tag_id":"ck2zm0x2s001nexoti68fq3n3","_id":"ck2zm0x3a0023exotj5fwo7wt"},{"post_id":"ck2zm0x11000iexotmpzbjc4f","tag_id":"ck2zm0x2z001wexots4a4vjay","_id":"ck2zm0x3l0025exotc5v8xcm7"},{"post_id":"ck2zm0x14000kexot8r8hoeds","tag_id":"ck2zm0x2z001wexots4a4vjay","_id":"ck2zm0x400029exot00yk0wcw"},{"post_id":"ck2zm0x1g000oexotwdcsq8jo","tag_id":"ck2zm0x2s001nexoti68fq3n3","_id":"ck2zm0x48002fexotn0r96m1b"},{"post_id":"ck2zm0x1i000qexot5hyzqzaj","tag_id":"ck2zm0x2s001nexoti68fq3n3","_id":"ck2zm0x4c002lexot96mpsy87"},{"post_id":"ck2zm0x1k000uexotkwq8nh45","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0x4j002rexotdityk98d"},{"post_id":"ck2zm0x1m000wexotvcnblfyj","tag_id":"ck2zm0x4g002oexotboks3r87","_id":"ck2zm0x4p002yexotx9pwh3fv"},{"post_id":"ck2zm0x1z0011exothf898hqy","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x4u0034exotcubpgzgk"},{"post_id":"ck2zm0x210012exotmh8ucoqp","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x4z003aexotgqg7n7ue"},{"post_id":"ck2zm0x250017exot2metwbh6","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x54003gexot04jo2rj8"},{"post_id":"ck2zm0x27001aexotmbrsar5s","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x5b003mexotb72xvcr0"},{"post_id":"ck2zm0x2c001eexott388q0xy","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x5q003sexotbp5ehtud"},{"post_id":"ck2zm0x5c003nexothqhqx954","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x5u003wexotegckff0s"},{"post_id":"ck2zm0x5c003nexothqhqx954","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0x5y0040exotwq6121qs"},{"post_id":"ck2zm0x5l003rexotuyv08ydp","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x600044exotz7ymyxck"},{"post_id":"ck2zm0x5l003rexotuyv08ydp","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0x660048exotyuyqscup"},{"post_id":"ck2zm0x2f001gexoto0x8s6tc","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x68004cexotrdwxcbln"},{"post_id":"ck2zm0x5s003texotrcwb94vj","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x6a004gexotyb0zvsjk"},{"post_id":"ck2zm0x5s003texotrcwb94vj","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0x6d004jexot8bj83x58"},{"post_id":"ck2zm0x5w003yexot8x09bx3l","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x6l004oexotjtjml1tm"},{"post_id":"ck2zm0x5w003yexot8x09bx3l","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0x6o004rexotgsa2vci6"},{"post_id":"ck2zm0x2o001lexotlejp6fzx","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x6u004wexotslgog163"},{"post_id":"ck2zm0x5z0041exot0yjw7o41","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x6y004zexothxc3t919"},{"post_id":"ck2zm0x640046exotz3qh6t5n","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x710054exoteos8n8yh"},{"post_id":"ck2zm0x2r001mexot3oqnw4q1","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x750057exotjq4k86a8"},{"post_id":"ck2zm0x660049exotncxqubyv","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x78005cexot5znmba2n"},{"post_id":"ck2zm0x69004eexothu6kbbo7","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x7a005fexotzhhq1eio"},{"post_id":"ck2zm0x2u001qexotev9z3zd7","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x7d005kexotvurbcfgh"},{"post_id":"ck2zm0x6b004hexotjw0qlokp","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x7l005nexotxrj24132"},{"post_id":"ck2zm0x6i004mexot6y866fur","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x7r005sexot01ajiuai"},{"post_id":"ck2zm0x2w001sexotal1yp94x","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x7u005vexotn7cl3vuq"},{"post_id":"ck2zm0x2w001sexotal1yp94x","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0x7z0060exotgmq2u6m9"},{"post_id":"ck2zm0x6m004pexota5p3ge4i","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x810063exottrfwzhoy"},{"post_id":"ck2zm0x6s004uexotwg1nlqfr","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x8q0068exotuuul53ru"},{"post_id":"ck2zm0x31001xexotrvymsbaz","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x8z006bexotnl5ybbil"},{"post_id":"ck2zm0x6v004xexotc93k01cu","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0x94006gexotwldao1d0"},{"post_id":"ck2zm0x33001yexoto95uwu0i","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x96006jexoti1583xyd"},{"post_id":"ck2zm0x710055exot4wyba43g","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x9j006oexotz2ezx933"},{"post_id":"ck2zm0x76005aexotmclsmwtz","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x9n006rexot614m7vo4"},{"post_id":"ck2zm0x370022exotmulvvwru","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0x9s006wexotfmmuks5u"},{"post_id":"ck2zm0x78005dexotpkp0q794","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0x9u006zexot5472wiry"},{"post_id":"ck2zm0x3a0024exothapamcav","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0xas0074exotuuunu6f2"},{"post_id":"ck2zm0x7m005pexotug3vhkj3","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xay0077exotbmjqh1iv"},{"post_id":"ck2zm0x3n0027exothf5ne131","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xb7007cexot0gp8oj7w"},{"post_id":"ck2zm0x7v005xexot2vu499or","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xba007fexoti2e050jh"},{"post_id":"ck2zm0x40002aexot2omfdmec","tag_id":"ck2zm0x7v005wexotq6urcep7","_id":"ck2zm0xbi007kexot1hfe69hm"},{"post_id":"ck2zm0x43002cexot6bx8wahu","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xc0007nexot1x541m6u"},{"post_id":"ck2zm0x91006cexot8sb4orgd","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xc4007sexot2gkz74v3"},{"post_id":"ck2zm0x4a002iexotjyu7kr2o","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xc6007vexotnkgsv8zf"},{"post_id":"ck2zm0x97006kexotizkv17s6","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xce0080exoth2rndtcu"},{"post_id":"ck2zm0x9k006pexotfery2j4w","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xci0083exotuyhm5k4q"},{"post_id":"ck2zm0x4d002mexotgiall2b7","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xcy0088exot8l4rboth"},{"post_id":"ck2zm0x9t006xexot0p0118h9","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xd0008bexotlb9zm61w"},{"post_id":"ck2zm0x4f002nexot8gdcv5vc","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xd3008gexotmj3bf75n"},{"post_id":"ck2zm0xat0075exotb1bpp2ib","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xd5008jexot7cklmzq7"},{"post_id":"ck2zm0x4j002sexotxj0bctzu","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xdl008oexotakgnx3b8"},{"post_id":"ck2zm0xb7007dexottmkxmubm","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xe1008rexotmz4q574s"},{"post_id":"ck2zm0x4l002texotrhngqrie","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xec008wexotm1rdgi10"},{"post_id":"ck2zm0xbg007gexotd0evuepq","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xep008zexotqpfpdtvu"},{"post_id":"ck2zm0xbk007lexotbqwl886f","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xew0093exotirs3kde9"},{"post_id":"ck2zm0x4o002xexotdspxc6eh","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xf10097exothzwtvwnx"},{"post_id":"ck2zm0xc1007oexotcv11rjcu","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xf8009bexotx1gxeyu0"},{"post_id":"ck2zm0xc4007texote6osveyl","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xfa009fexotlvqjpvgk"},{"post_id":"ck2zm0x4q002zexottb4m3geb","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xfg009jexot71h32yvj"},{"post_id":"ck2zm0xc7007wexots5bslox1","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xfs009nexotue6srcwm"},{"post_id":"ck2zm0xcf0081exotqgvanho5","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xfy009qexoteixltydp"},{"post_id":"ck2zm0x4t0033exotjr5oc53v","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xg8009vexottqfe6ben"},{"post_id":"ck2zm0xcz0089exotlyf1wqby","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xga009yexot90wpdfta"},{"post_id":"ck2zm0x4v0035exots1zpwwcf","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xgf00a2exotfhwh7xp7"},{"post_id":"ck2zm0xd3008hexotgk9pja79","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xgi00a6exotca8itss3"},{"post_id":"ck2zm0x4x0039exotfu5p3z2q","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xgp00aaexotqxu89evz"},{"post_id":"ck2zm0xd5008kexoti4fqo79x","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xgr00aeexot9vpdct9i"},{"post_id":"ck2zm0x4z003bexot3hvv4xse","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xgu00aiexotb0d4guku"},{"post_id":"ck2zm0xea008sexot7ng7zoh0","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xh200amexot87z3sv56"},{"post_id":"ck2zm0xec008xexotujesg1iq","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xh400apexotqz7c24ib"},{"post_id":"ck2zm0x53003fexot0ri7zl4k","tag_id":"ck2zm0xeb008texot93snh6rj","_id":"ck2zm0xh600auexot51gnvvlt"},{"post_id":"ck2zm0xey0095exotznd3hzfq","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xhg00axexotrqhlfswh"},{"post_id":"ck2zm0x55003hexotkchautmp","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xhj00b2exot2y03r5eb"},{"post_id":"ck2zm0xf60098exot3g8douyq","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0xho00b5exoth67qz53w"},{"post_id":"ck2zm0xf9009dexothynl24qg","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0xhq00b9exotrlchnhpe"},{"post_id":"ck2zm0x59003lexotyvb7ccc7","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xi100bdexotf8uc3g4s"},{"post_id":"ck2zm0xfb009gexotjhskd2f6","tag_id":"ck2zm0x4m002wexotb8qe0fah","_id":"ck2zm0xic00bhexotms9e4i7x"},{"post_id":"ck2zm0xfk009kexotcn53pbzq","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xig00blexotsnuf57eu"},{"post_id":"ck2zm0xfs009oexothfzsty6q","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xio00bpexotyg79ausf"},{"post_id":"ck2zm0xg5009sexotx84ep9h4","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xiy00btexots42gcghr"},{"post_id":"ck2zm0xg8009wexotdgal8c7o","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xj200bxexotn6c1wx65"},{"post_id":"ck2zm0xgb00a0exotkobzaa83","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xj900c1exotw54f332v"},{"post_id":"ck2zm0xgh00a4exott92awrus","tag_id":"ck2zm0x2z001wexots4a4vjay","_id":"ck2zm0xjc00c5exotvfmwtzjs"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xje00c9exotiw2lt855"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","tag_id":"ck2zm0xg4009rexota15goxts","_id":"ck2zm0xjj00cdexot81rwvmq4"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","tag_id":"ck2zm0xga009zexotezctv0lb","_id":"ck2zm0xjm00chexotig5cd235"},{"post_id":"ck2zm0x6z0052exotmz6n0qc2","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xjp00clexothn69hjeg"},{"post_id":"ck2zm0xgj00a7exotly9p4nbh","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xjv00cpexotch2bftgd"},{"post_id":"ck2zm0x7b005hexotynjtdln3","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xjy00ctexotre9m4r4n"},{"post_id":"ck2zm0x7b005hexotynjtdln3","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xku00cwexotkyngt3xo"},{"post_id":"ck2zm0xgz00ajexot1shupstq","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xkw00d1exotdbu0o64j"},{"post_id":"ck2zm0x7e005lexotevfmmmh5","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xky00d4exotnaui2vfi"},{"post_id":"ck2zm0x7e005lexotevfmmmh5","tag_id":"ck2zm0xgu00ahexotnunnu15q","_id":"ck2zm0xl500d9exot0fv8cf4w"},{"post_id":"ck2zm0x7s005texot6khr4ypb","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xl600dcexot8jb04k0q"},{"post_id":"ck2zm0x7s005texot6khr4ypb","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xlh00dhexot1piaq986"},{"post_id":"ck2zm0xhm00b3exot5s7ov62d","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xlj00dkexotudw2p8dd"},{"post_id":"ck2zm0xho00b7exotql2bb9ck","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xlq00dpexotr30bixl3"},{"post_id":"ck2zm0x800061exotgvhjzfog","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xls00dsexotwotq5co8"},{"post_id":"ck2zm0x800061exotgvhjzfog","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xlw00dwexotf4m61vnz"},{"post_id":"ck2zm0x800061exotgvhjzfog","tag_id":"ck2zm0xho00b6exotido80j36","_id":"ck2zm0xlx00e0exot035pwz5i"},{"post_id":"ck2zm0xi200bfexotoitw2o9f","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0xm300e4exots01okdyo"},{"post_id":"ck2zm0xi200bfexotoitw2o9f","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0xm700e8exot6sirtfoa"},{"post_id":"ck2zm0xik00bnexothrij8u3f","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xme00ebexotatwq0fa9"},{"post_id":"ck2zm0x8g0064exotvuqpvf7s","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xmm00efexot98tqewil"},{"post_id":"ck2zm0x8g0064exotvuqpvf7s","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xms00ehexotg71ft15h"},{"post_id":"ck2zm0x8g0064exotvuqpvf7s","tag_id":"ck2zm0xho00b6exotido80j36","_id":"ck2zm0xmt00elexotu03knnwc"},{"post_id":"ck2zm0xiz00bvexot3dky1uvt","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0xmx00enexotx7zsy4nv"},{"post_id":"ck2zm0xiz00bvexot3dky1uvt","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0xmz00erexotyu9jp845"},{"post_id":"ck2zm0xj700bzexotoxjpjiet","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xn000etexotsliv33lo"},{"post_id":"ck2zm0x8r0069exotx6ckqev0","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xn100exexotepvcx2q3"},{"post_id":"ck2zm0x8r0069exotx6ckqev0","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xn200ezexotoaa1a9h6"},{"post_id":"ck2zm0x8r0069exotx6ckqev0","tag_id":"ck2zm0xho00b6exotido80j36","_id":"ck2zm0xn200f1exototcemv2d"},{"post_id":"ck2zm0xjc00c6exot7hdu0mzx","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xn300f5exot1ejjf85h"},{"post_id":"ck2zm0x94006hexotlcbg3jvf","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xn400f7exotdqqevzsu"},{"post_id":"ck2zm0x94006hexotlcbg3jvf","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xn500fbexotdkodn2t9"},{"post_id":"ck2zm0xjk00ceexotlgbdoylq","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xn600fdexotccxuamxl"},{"post_id":"ck2zm0x9p006sexotvcqun83r","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xn700fhexotq1b7v4ts"},{"post_id":"ck2zm0x9p006sexotvcqun83r","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xn800fjexotm9t13izt"},{"post_id":"ck2zm0xjq00cmexot8jk4v57r","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xnd00fnexotdbclk31x"},{"post_id":"ck2zm0xab0070exotep4ibdqw","tag_id":"ck2zm0xjv00cqexot20u19rrp","_id":"ck2zm0xne00fpexotighka131"},{"post_id":"ck2zm0xkx00d2exot6rdj9kta","tag_id":"ck2zm0x7l005oexotxe66qe5w","_id":"ck2zm0xnh00ftexot3nld074e"},{"post_id":"ck2zm0xl500daexot13mfz3tv","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xni00fvexotgplwia6m"},{"post_id":"ck2zm0xaz0078exotb2ccznx8","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xnl00fzexotak7id4g2"},{"post_id":"ck2zm0xaz0078exotb2ccznx8","tag_id":"ck2zm0xgl00a8exotg9i6ykiz","_id":"ck2zm0xnl00g1exotnpnckt17"},{"post_id":"ck2zm0xaz0078exotb2ccznx8","tag_id":"ck2zm0xho00b6exotido80j36","_id":"ck2zm0xnm00g5exotmb0id2p5"},{"post_id":"ck2zm0xl700deexott7jfvlye","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xnn00g7exotnc7m0ysd"},{"post_id":"ck2zm0xli00diexot8g0pbmpk","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xno00gaexotegfn7n3b"},{"post_id":"ck2zm0xci0084exotvlzwg717","tag_id":"ck2zm0xlf00dfexot9k3fdwst","_id":"ck2zm0xnt00gdexotvrcmb3hl"},{"post_id":"ck2zm0xll00dlexotgzwpix4l","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xnu00ggexotsgh1ite8"},{"post_id":"ck2zm0xlr00dqexotstxvbzbd","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xnv00gjexot8jec386o"},{"post_id":"ck2zm0xd0008cexot4ga0u4zf","tag_id":"ck2zm0xlq00doexotz43rjz9b","_id":"ck2zm0xnw00gmexotcs0v8q8z"},{"post_id":"ck2zm0xlw00dyexotya4j3ea8","tag_id":"ck2zm0x4a002hexotmu1v8lcg","_id":"ck2zm0xny00gpexotlsimdj8p"},{"post_id":"ck2zm0xdo008pexoto7x5u9u5","tag_id":"ck2zm0xlw00dxexota3j0ie8p","_id":"ck2zm0xny00grexotms3j5epn"},{"post_id":"ck2zm0xly00e1exot4ahqeqau","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0xo000gvexotfbo59xfn"},{"post_id":"ck2zm0xly00e1exot4ahqeqau","tag_id":"ck2zm0x230015exotrulz92bm","_id":"ck2zm0xo000gxexotzro8xixk"},{"post_id":"ck2zm0xm400e6exotnmf9efz6","tag_id":"ck2zm0x0k000bexotcfxy7axp","_id":"ck2zm0xo800h1exotveb501vx"},{"post_id":"ck2zm0xgp00acexot3s9rge8l","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xo900h3exotbcxhhkdk"},{"post_id":"ck2zm0xgp00acexot3s9rge8l","tag_id":"ck2zm0xm300e5exot9vkhpe3n","_id":"ck2zm0xob00h7exotit51bjpl"},{"post_id":"ck2zm0xgp00acexot3s9rge8l","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xob00h9exot9s3zeu0v"},{"post_id":"ck2zm0xgt00afexotcahrdj5x","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xoj00hcexot3k7avku6"},{"post_id":"ck2zm0xgt00afexotcahrdj5x","tag_id":"ck2zm0xm300e5exot9vkhpe3n","_id":"ck2zm0xoj00heexot8jry8dnk"},{"post_id":"ck2zm0xgt00afexotcahrdj5x","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xoq00hhexotyw80zyv8"},{"post_id":"ck2zm0xh300anexotog5c50bn","tag_id":"ck2zm0xms00ejexot2cccadf6","_id":"ck2zm0xoq00hjexot9bphmtk2"},{"post_id":"ck2zm0xh500arexot4lz9tq0i","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xor00hmexot1a8rdw99"},{"post_id":"ck2zm0xh500arexot4lz9tq0i","tag_id":"ck2zm0xm300e5exot9vkhpe3n","_id":"ck2zm0xot00hoexot0r3jm094"},{"post_id":"ck2zm0xh500arexot4lz9tq0i","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xou00hqexotscvmote0"},{"post_id":"ck2zm0xhe00avexot5gc7xp3t","tag_id":"ck2zm0xn100ewexotb4kvygka","_id":"ck2zm0xou00hsexotbqxng7mo"},{"post_id":"ck2zm0xhi00azexot4vqhsfyw","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xoy00huexot3gcf5h0d"},{"post_id":"ck2zm0xhi00azexot4vqhsfyw","tag_id":"ck2zm0xm300e5exot9vkhpe3n","_id":"ck2zm0xoy00hwexot3gc5aujv"},{"post_id":"ck2zm0xhi00azexot4vqhsfyw","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xoy00hyexotbkdqdmpj"},{"post_id":"ck2zm0xhr00bbexotuog72ion","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xoz00i0exot8nse256i"},{"post_id":"ck2zm0xhr00bbexotuog72ion","tag_id":"ck2zm0xm300e5exot9vkhpe3n","_id":"ck2zm0xoz00i2exotda2zhcx9"},{"post_id":"ck2zm0xhr00bbexotuog72ion","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xoz00i4exotrupwaocy"},{"post_id":"ck2zm0xie00bjexotcs8w9o3m","tag_id":"ck2zm0x2z001wexots4a4vjay","_id":"ck2zm0xp000i6exot8xjxkk65"},{"post_id":"ck2zm0xie00bjexotcs8w9o3m","tag_id":"ck2zm0xn600feexotk0d8r0a1","_id":"ck2zm0xp100i8exotsk5hgnnd"},{"post_id":"ck2zm0xix00brexotk589n2zt","tag_id":"ck2zm0xn100ewexotb4kvygka","_id":"ck2zm0xp100iaexotcoo917cp"},{"post_id":"ck2zm0xja00c3exotixg3yaom","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xp100icexotwac7cbov"},{"post_id":"ck2zm0xja00c3exotixg3yaom","tag_id":"ck2zm0xne00fqexot78zyaxro","_id":"ck2zm0xp100ieexot9wkw986k"},{"post_id":"ck2zm0xjf00cbexotv23l0wjl","tag_id":"ck2zm0xnk00fxexotwf9yxdwm","_id":"ck2zm0xp100igexot8xadktya"},{"post_id":"ck2zm0xjf00cbexotv23l0wjl","tag_id":"ck2zm0xnm00g4exotzhdoyraj","_id":"ck2zm0xp200iiexotu77o38k2"},{"post_id":"ck2zm0xjn00cjexotezvbhl94","tag_id":"ck2zm0x1f000nexotyawuq2hb","_id":"ck2zm0xp200ijexotqtc509z8"},{"post_id":"ck2zm0xjn00cjexotezvbhl94","tag_id":"ck2zm0xne00fqexot78zyaxro","_id":"ck2zm0xp200ikexotjkrcrxi2"},{"post_id":"ck2zm0xjv00crexotyqh75rfd","tag_id":"ck2zm0xnu00ghexotbxhkzmw4","_id":"ck2zm0xp200ilexot2ng4emq9"},{"post_id":"ck2zm0xjy00cuexotebeqqnto","tag_id":"ck2zm0xnk00fxexotwf9yxdwm","_id":"ck2zm0xp200imexotiand8i8f"},{"post_id":"ck2zm0xjy00cuexotebeqqnto","tag_id":"ck2zm0xnm00g4exotzhdoyraj","_id":"ck2zm0xp300inexotazw3wbf2"},{"post_id":"ck2zm0xkv00cyexot1w2e7vre","tag_id":"ck2zm0xnk00fxexotwf9yxdwm","_id":"ck2zm0xp300ioexot9lfmi46d"},{"post_id":"ck2zm0xkv00cyexot1w2e7vre","tag_id":"ck2zm0xnm00g4exotzhdoyraj","_id":"ck2zm0xp300ipexotyne9dkdf"},{"post_id":"ck2zm0xkz00d6exotpxvzh0hd","tag_id":"ck2zm0xog00haexottbb0i4s1","_id":"ck2zm0xp300iqexotxmwbaoti"},{"post_id":"ck2zm0xkz00d6exotpxvzh0hd","tag_id":"ck2zm0xfg009iexotvfzrdth0","_id":"ck2zm0xp300irexot3yspfxp8"},{"post_id":"ck2zm0xlt00dtexota27l7gsh","tag_id":"ck2zm0x030005exotvzjgfvwr","_id":"ck2zm0xp300isexot4lfe67rc"},{"post_id":"ck2zm0xlt00dtexota27l7gsh","tag_id":"ck2zm0xok00hfexott89t7pdq","_id":"ck2zm0xp400itexotuppavg52"},{"post_id":"ck2zm0xma00e9exotbhz9rjxz","tag_id":"ck2zm0xor00hlexotv6w2x1i8","_id":"ck2zm0xp400iuexotfd9frbyp"}],"Tag":[{"name":"面试","_id":"ck2zm0x030005exotvzjgfvwr"},{"name":"网络","_id":"ck2zm0x0k000bexotcfxy7axp"},{"name":"Web服务器","_id":"ck2zm0x11000hexot2f18mlam"},{"name":"Python3","_id":"ck2zm0x1f000nexotyawuq2hb"},{"name":"Django","_id":"ck2zm0x1k000texottkdpvmvf"},{"name":"数据库","_id":"ck2zm0x230015exotrulz92bm"},{"name":"Hexo","_id":"ck2zm0x2s001nexoti68fq3n3"},{"name":"Git","_id":"ck2zm0x2z001wexots4a4vjay"},{"name":"操作系统","_id":"ck2zm0x4a002hexotmu1v8lcg"},{"name":"Frontend","_id":"ck2zm0x4g002oexotboks3r87"},{"name":"Java","_id":"ck2zm0x4m002wexotb8qe0fah"},{"name":"Linux/Mac OS","_id":"ck2zm0x7l005oexotxe66qe5w"},{"name":"IDE","_id":"ck2zm0x7v005wexotq6urcep7"},{"name":"Markdown","_id":"ck2zm0xeb008texot93snh6rj"},{"name":"Spider","_id":"ck2zm0xfg009iexotvfzrdth0"},{"name":"Selenium","_id":"ck2zm0xg4009rexota15goxts"},{"name":"PhantomJS","_id":"ck2zm0xga009zexotezctv0lb"},{"name":"Algorithm","_id":"ck2zm0xgl00a8exotg9i6ykiz"},{"name":"设计模式","_id":"ck2zm0xgu00ahexotnunnu15q"},{"name":"Data Structures","_id":"ck2zm0xho00b6exotido80j36"},{"name":"玩转苹果","_id":"ck2zm0xjv00cqexot20u19rrp"},{"name":"Redis","_id":"ck2zm0xlf00dfexot9k3fdwst"},{"name":"SQL","_id":"ck2zm0xlq00doexotz43rjz9b"},{"name":"Tesseract","_id":"ck2zm0xlw00dxexota3j0ie8p"},{"name":"Urllib","_id":"ck2zm0xm300e5exot9vkhpe3n"},{"name":"Funny","_id":"ck2zm0xms00ejexot2cccadf6"},{"name":"计算机基础","_id":"ck2zm0xn100ewexotb4kvygka"},{"name":"Github","_id":"ck2zm0xn600feexotk0d8r0a1"},{"name":"Python源码","_id":"ck2zm0xne00fqexot78zyaxro"},{"name":"机器学习","_id":"ck2zm0xnk00fxexotwf9yxdwm"},{"name":"神经网络","_id":"ck2zm0xnm00g4exotzhdoyraj"},{"name":"加密","_id":"ck2zm0xnu00ghexotbxhkzmw4"},{"name":"Scrapy","_id":"ck2zm0xog00haexottbb0i4s1"},{"name":"Java Web","_id":"ck2zm0xok00hfexott89t7pdq"},{"name":"Tools","_id":"ck2zm0xor00hlexotv6w2x1i8"}]}}